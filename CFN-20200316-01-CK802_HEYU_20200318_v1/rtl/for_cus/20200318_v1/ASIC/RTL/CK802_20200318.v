























`define PRODUCT_ID 28'hF820CC8




`define RESET_VAL 16'hABCD










`define GATED_CELL







`define SMIC













`define PROCESS55LL






























`define GPR_16




`define SEPARATE_STACK_POINTER




`define VEC_BASE





`define LOAD_FAST_RETIRE




`define EX_CBIT_FWD_TO_IF
`define WB_LOAD_FWD_TO_EX






`define MAD_FAST











`define UNALIGN_LOAD_STORE






`define IAHB_LITE


`ifdef IAHB_LITE
  //`define FLOP_OUT_IBUS
  //`define IBUS_16
  `define IBUS_32
`endif

`ifdef DAHB_LITE
  //`define FLOP_OUT_DBUS
  //`define DBUS_16
  `define DBUS_32
`endif





`define SYS_AHB_LITE






`define BIU_32




`ifdef FLOP_OUT_BIU
`define FLOP_OUT_BUS
`else
  `ifdef FLOP_OUT_IBUS
  `define FLOP_OUT_BUS
  `else
    `ifdef FLOP_OUT_DBUS
    `define FLOP_OUT_BUS
    `else
    `endif
  `endif
`endif





`define DFS //AHB_LITE  NON-FLOPOUT  



`ifdef IAHB_LITE
  //`define EXTERNAL_BMU
`endif




`define MGU

`ifdef MGU
  //`define MGU_REGION_2
  `define MGU_REGION_4
  //`define MGU_REGION_8
`endif

`ifdef MGU_REGION_2
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define RID_BIT_1
`endif

`ifdef MGU_REGION_4
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define REGION_ENTRY2
  `define REGION_ENTRY3
  `define RID_BIT_2
`endif

`ifdef MGU_REGION_8
  `define REGION_ENTRY0
  `define REGION_ENTRY1
  `define REGION_ENTRY2
  `define REGION_ENTRY3
  `define REGION_ENTRY4
  `define REGION_ENTRY5
  `define REGION_ENTRY6
  `define REGION_ENTRY7
  `define RID_BIT_3
`endif











`ifdef GCR
  //`define GCR8
  //`define GCR16
  `define GCR32
`endif

`ifdef GCR8
  `define GCR_BITS 8
`endif

`ifdef GCR16
  `define GCR_BITS 16
`endif

`ifdef GCR32
  `define GCR_BITS 32
`endif






`ifdef GSR
  //`define GSR8
  //`define GSR16
  `define GSR32
`endif

`ifdef GSR8
  `define GSR_BITS 8
`endif

`ifdef GSR16
  `define GSR_BITS 16
`endif

`ifdef GSR32
  `define GSR_BITS 32
`endif











`define TCIPIF

`ifdef TCIPIF


  `define CTIM     // Core Timer Hareware Implementation
  `define VIC      // Interrupt controller Configuration
  //`define CACHE
`endif

`ifdef VIC
  //`define INT_NUM_1
  //`define INT_NUM_2
  //`define INT_NUM_4
  //`define INT_NUM_8
  //`define INT_NUM_16
  //`define INT_NUM_24
  `define INT_NUM_32
  //`define INT_NUM_64
  //`define INT_NUM_96
  //`define INT_NUM_128
`endif





`ifdef SEU



  `define SEU_VERIFY_PARITY
  //`define SEU_VERIFY_HAMMING




  `define SEU_FIX_BRANCH
  //`define SEU_FIX_MULT
  //`define SEU_RANDOM_BLANK_INTERVALS
  //`define SEU_RANDOM_GATED_CLOCK_NOISE
  `define SEU_HARDWARE_RANDOM_INSTRUCTION_INSERTION
  `define SEU_GPR_CHECK
  `define SEU_PC_CHECK
  //`define SEU_PIPELINE_CHECK
  //`define SEU_CR_CHECK
  //`define SEU_CR_INDEPENDENT_COMPLEMENTARY_BACKUP
  //`define SEU_DATA_PATH_POLARITY
  //`define SEU_GPR_EXTERNAL_RESET
  `define SEU_BUS_PARITY
  //`define SEU_BUS_ENCRYPTION
  //`define SEU_BUS_SCRAMBLE




  //`define SECURITY_BIST
`endif




`ifdef SEU_VERIFY_PARITY



  //define the verify bits width
  `define SEU_VB_WIDTH 1
  //define the reset value
  `define SEU_VB_RESET_00000000 1'b0
  `define SEU_VB_RESET_80000000 1'b1

`endif

`ifdef SEU_VERIFY_HAMMING



  //define the verify bits width
  `define SEU_VB_WIDTH 6
  //define the reset value
  `define SEU_VB_RESET_00000000 6'b0
  `define SEU_VB_RESET_80000000 6'b100110

`endif




`define PRGSIGN_UNLOCK_VAL 32'hA29CD735





`ifdef INT_NUM_8
  `define VIC_IPR1
`endif
`ifdef INT_NUM_16
  `define VIC_IPR1
  `define VIC_IPR3
`endif
`ifdef INT_NUM_24
  `define VIC_IPR1
  `define VIC_IPR3
  `define VIC_IPR5
`endif
`ifdef INT_NUM_32
  `define VIC_IPR1
  `define VIC_IPR3
  `define VIC_IPR5
  `define VIC_IPR7
`endif
`ifdef INT_NUM_64
  `define VIC_IPR64
`endif
`ifdef INT_NUM_96
  `define VIC_IPR64
  `define VIC_IPR96
`endif
`ifdef INT_NUM_128
  `define VIC_IPR64
  `define VIC_IPR96
  `define VIC_IPR128
`endif




`define NEST_INT_ACCLRT




`ifdef CACHE
  //`define CACHE_2K
  //`define CACHE_4K
  `define CACHE_8K
`endif

`ifdef CACHE
  `define CACHE_2WAY
  //`define CACHE_4WAY
`endif

`ifdef CACHE
  `define CACHE_LINE_16B
  //`define CACHE_LINE_32B
`endif

`ifdef CACHE
  //`define CACHE_REGION_1
  `define CACHE_REGION_2
  //`define CACHE_REGION_3
  //`define CACHE_REGION_4
`endif

`ifdef CACHE_REGION_4
  `define REGION_REG3
  `define REGION_REG2
  `define REGION_REG1
  `define REGION_REG0
`endif

`ifdef CACHE_REGION_3
  `define REGION_REG2
  `define REGION_REG1
  `define REGION_REG0
`endif

`ifdef CACHE_REGION_2
  `define REGION_REG1
  `define REGION_REG0
`endif

`ifdef CACHE_REGION_1
  `define REGION_REG0
`endif

`ifdef CACHE
  //`define CACHE_USER_DEFINED
`endif

`ifdef CACHE
  //`define CACHE_MBIST
`endif

`ifdef CACHE
  //`define CACHE_LFIDLE_REQ
`endif




`define STACK_GUARD





`define INT_SP




`define HAD_IM

`ifdef HAD_IM
  `define HAD_JTAG_2
  `define HAD_MBKPTB //now, MBKPTB indicates five breakpoints: A, B, C, D, E
  `ifdef HAD_MBKPTB

  `endif
 // `define HAD_INST_DEBUG_DISABLE
 // `define HAD_PROF_CNT
 // `define DDMA //debug direct memory access
  `ifdef TCIPIF
 //   `define DBG_EXP // debug exception

  `endif
`endif













































module nm_ahbl_if(
  ahbLif_ahbl_haddr,
  ahbLif_ahbl_hburst,
  ahbLif_ahbl_hprot,
  ahbLif_ahbl_hsize,
  ahbLif_ahbl_htrans,
  ahbLif_ahbl_hwdata,
  ahbLif_ahbl_hwrite,
  ahbl_ahbLif_hrdata,
  ahbl_ahbLif_hready,
  ahbl_ahbLif_hresp,
  ahbl_clk_en,
  ahbl_gated_clk,
  ahblif_busy,
  ahblif_idle,
  ahblif_power_mask,
  cpu_acc_err,
  cpu_addr,
  cpu_data_vld,
  cpu_prot,
  cpu_rdata,
  cpu_req,
  cpu_req_grnt,
  cpu_req_power_masked,
  cpu_sec,
  cpu_size,
  cpu_trans_cmplt,
  cpu_vec_redirect,
  cpu_wdata_sel,
  cpu_wr_data,
  cpu_write,
  cpurst_b,
  pad_cpu_halt_ff2
);


input   [31:0]  ahbl_ahbLif_hrdata;    
input           ahbl_ahbLif_hready;    
input           ahbl_ahbLif_hresp;     
input           ahbl_gated_clk;        
input           ahblif_power_mask;     
input   [31:0]  cpu_addr;              
input   [3 :0]  cpu_prot;              
input           cpu_req;               
input           cpu_req_power_masked;  
input   [1 :0]  cpu_size;              
input           cpu_vec_redirect;      
input   [31:0]  cpu_wr_data;           
input           cpu_write;             
input           cpurst_b;              
input           pad_cpu_halt_ff2;      
output  [31:0]  ahbLif_ahbl_haddr;     
output  [2 :0]  ahbLif_ahbl_hburst;    
output  [3 :0]  ahbLif_ahbl_hprot;     
output  [2 :0]  ahbLif_ahbl_hsize;     
output  [1 :0]  ahbLif_ahbl_htrans;    
output  [31:0]  ahbLif_ahbl_hwdata;    
output          ahbLif_ahbl_hwrite;    
output          ahbl_clk_en;           
output          ahblif_busy;           
output          ahblif_idle;           
output          cpu_acc_err;           
output          cpu_data_vld;          
output  [31:0]  cpu_rdata;             
output          cpu_req_grnt;          
output          cpu_sec;               
output          cpu_trans_cmplt;       
output          cpu_wdata_sel;         


reg     [2 :0]  ahbLif_cur_state;      
reg     [2 :0]  ahbLif_nxt_state;      
reg             buf_write;             


wire            acc_err;               
wire    [31:0]  ahbLif_ahbl_haddr;     
wire    [2 :0]  ahbLif_ahbl_hburst;    
wire    [3 :0]  ahbLif_ahbl_hprot;     
wire    [2 :0]  ahbLif_ahbl_hsize;     
wire    [1 :0]  ahbLif_ahbl_htrans;    
wire    [31:0]  ahbLif_ahbl_hwdata;    
wire            ahbLif_ahbl_hwrite;    
wire            ahbLif_ahbl_vec_redrct; 
wire    [31:0]  ahbl_ahbLif_hrdata;    
wire            ahbl_ahbLif_hready;    
wire            ahbl_ahbLif_hresp;     
wire            ahbl_ahbLif_hsec;      
wire            ahbl_clk_en;           
wire            ahbl_gated_clk;        
wire            ahblif_busy;           
wire            ahblif_idle;           
wire            ahblif_power_mask;     
wire    [31:0]  bus_rdata;             
wire            bus_ready;             
wire            bus_resp;              
wire            bus_sec;               
wire            cpu_acc_err;           
wire    [31:0]  cpu_addr;              
wire            cpu_data_vld;          
wire    [3 :0]  cpu_prot;              
wire    [31:0]  cpu_rdata;             
wire            cpu_req;               
wire            cpu_req_grnt;          
wire            cpu_req_power_masked;  
wire            cpu_sec;               
wire    [1 :0]  cpu_size;              
wire            cpu_trans_cmplt;       
wire            cpu_vec_redirect;      
wire            cpu_wdata_sel;         
wire    [31:0]  cpu_wr_data;           
wire            cpu_write;             
wire            cpurst_b;              
wire            data_vld;              
wire    [31:0]  hwdata;                
wire            pad_cpu_halt_ff2;      
wire            req_grnt;              
wire            trans_cmplt;           


parameter DATA_WIDTH = 32;

















parameter IDLE   = 3'b000,
          WFD    = 3'b001,
          WFG    = 3'b010,
          ERROR1 = 3'b110,
          ERROR2 = 3'b111;




always@(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ahbLif_cur_state[2:0] <= IDLE;
  else
  begin
      ahbLif_cur_state[2:0] <= ahbLif_nxt_state[2:0];
  end
end 


always @( cpu_req_power_masked
       or bus_ready
       or ahbLif_cur_state
       or cpu_req
       or bus_resp
       or pad_cpu_halt_ff2)
begin
case(ahbLif_cur_state)
  IDLE: 
  begin
    if(cpu_req_power_masked && !pad_cpu_halt_ff2) 
      if(bus_ready)
        ahbLif_nxt_state = WFD;
      else //no ready
        ahbLif_nxt_state = WFG;
    else //no request
      ahbLif_nxt_state = IDLE;
  end
  WFG: 
  begin
    if(cpu_req)
      if(bus_ready)
        ahbLif_nxt_state = WFD;
      else //no ready
        ahbLif_nxt_state = WFG;
    else //no request
      ahbLif_nxt_state = IDLE;
  end
  WFD:   // in this state AHBL wait for the data.
  begin
    if(bus_resp) //resp is ERROR
      ahbLif_nxt_state = ERROR1;
    else if(!bus_ready) //resp == OK, hready == 0
      ahbLif_nxt_state = WFD;
    else //resp == OK, hready == 1
    begin
      if(cpu_req)
        ahbLif_nxt_state = WFD;
      else
        ahbLif_nxt_state = IDLE;
    end
  end
  ERROR1: // error occurs
  begin
    if(bus_resp)               // resp is ERROR
      if(!bus_ready)           // ready == 0
        ahbLif_nxt_state = ERROR1;
      else
        ahbLif_nxt_state = ERROR2; // bus resp is ERROR, hready == 1
    else
      ahbLif_nxt_state = ERROR2; // bus resp is ERROR, hready == 1
  end
  ERROR2: // error occurs
  begin
    ahbLif_nxt_state = IDLE; 
  end
  default:
    ahbLif_nxt_state = IDLE;
endcase

end





always @( posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    buf_write <= 1'b0;
  else if(cpu_req && req_grnt)
    buf_write <= cpu_write;
end
assign cpu_wdata_sel = buf_write;




assign req_grnt = ((ahbLif_cur_state[2:0]==IDLE && !ahblif_power_mask && !pad_cpu_halt_ff2)
                 || ahbLif_cur_state[2:0]==WFG
                 || ahbLif_cur_state[2:0]==WFD)
                 && bus_ready && !bus_resp;




assign trans_cmplt  = (ahbLif_cur_state[2:0]==WFD) &&  bus_ready && !bus_resp
                   || (ahbLif_cur_state[2:0]==ERROR2); //error vld
                    




assign data_vld = (ahbLif_cur_state[2:0]==WFD) && !buf_write
                && bus_ready && !bus_resp;




assign acc_err = (ahbLif_cur_state[2:0]==ERROR2);











assign bus_ready        = ahbl_ahbLif_hready;
assign bus_resp         = ahbl_ahbLif_hresp;

assign bus_rdata[DATA_WIDTH-1:0] = ahbl_ahbLif_hrdata[DATA_WIDTH-1:0];

assign ahbl_ahbLif_hsec = 1'b0;


assign bus_sec                   = ahbl_ahbLif_hsec;









assign ahbLif_ahbl_haddr[31:0] = cpu_addr[31:0];

















  assign hwdata[DATA_WIDTH-1:0] = cpu_wr_data[DATA_WIDTH-1:0];

assign ahbLif_ahbl_hwdata[DATA_WIDTH-1:0] = hwdata[DATA_WIDTH-1:0];










assign ahbLif_ahbl_htrans[1] = ahbLif_cur_state[2:0]==IDLE &&
                               !pad_cpu_halt_ff2 &&
                               cpu_req_power_masked || 
                              (ahbLif_cur_state[2:0]==WFG ||
                               ahbLif_cur_state[2:0]==WFD) &&
                               cpu_req; // && bus_ready;

assign ahbLif_ahbl_htrans[0] = 1'b0;




assign ahbLif_ahbl_hwrite = cpu_write;





assign ahbLif_ahbl_hsize[2:0] = { 1'b0, cpu_size[1:0]};





assign ahbLif_ahbl_hprot[3:0] = cpu_prot[3:0];





assign ahbLif_ahbl_hburst[2:0] = 3'b0;










assign ahbLif_ahbl_vec_redrct = cpu_vec_redirect;











assign cpu_req_grnt = req_grnt;





assign cpu_trans_cmplt = trans_cmplt;





assign cpu_data_vld = data_vld;



























  assign cpu_rdata[DATA_WIDTH-1:0] = bus_rdata[DATA_WIDTH-1:0];





assign cpu_acc_err = acc_err;

assign cpu_sec     = bus_sec; 




assign ahbl_clk_en = !(ahbLif_cur_state[2:0]==IDLE) || cpu_req;

assign ahblif_busy = !(ahbLif_cur_state[2:0]==IDLE);

assign ahblif_idle = ahbLif_cur_state[2:0]==IDLE;

endmodule
























module nm_ahbl_req_arb(
  ahbl_bmu_dbus_acc_err,
  ahbl_bmu_dbus_data,
  ahbl_bmu_dbus_data_vld,
  ahbl_bmu_dbus_grnt,
  ahbl_bmu_dbus_trans_cmplt,
  ahbl_bmu_ibus_acc_err,
  ahbl_bmu_ibus_data,
  ahbl_bmu_ibus_data_vld,
  ahbl_bmu_ibus_grnt,
  ahbl_bmu_ibus_trans_cmplt,
  ahbl_gated_clk,
  bmu_ahbl_dbus_acc_deny,
  bmu_ahbl_dbus_addr,
  bmu_ahbl_dbus_chk_fail,
  bmu_ahbl_dbus_prot,
  bmu_ahbl_dbus_req,
  bmu_ahbl_dbus_req_without_cmplt,
  bmu_ahbl_dbus_req_without_deny_chk_fail,
  bmu_ahbl_dbus_size,
  bmu_ahbl_dbus_write,
  bmu_ahbl_ibus_acc_deny,
  bmu_ahbl_ibus_addr,
  bmu_ahbl_ibus_hit,
  bmu_ahbl_ibus_prot,
  bmu_ahbl_ibus_req,
  bmu_ahbl_ibus_req_no_hit,
  bmu_ahbl_ibus_size,
  bmu_ahbl_ibus_vec_redirect,
  bmu_ahbl_ibus_write,
  bmu_ahbl_wdata,
  cpu_acc_err,
  cpu_addr,
  cpu_data_vld,
  cpu_prot,
  cpu_rdata,
  cpu_req,
  cpu_req_for_grnt,
  cpu_req_for_peak_power,
  cpu_req_grnt,
  cpu_sec,
  cpu_size,
  cpu_trans_cmplt,
  cpu_vec_redirect,
  cpu_wdata,
  cpu_write,
  cpurst_b,
  ibus_not_granted
);


input           ahbl_gated_clk;                         
input           bmu_ahbl_dbus_acc_deny;                 
input   [31:0]  bmu_ahbl_dbus_addr;                     
input           bmu_ahbl_dbus_chk_fail;                 
input   [3 :0]  bmu_ahbl_dbus_prot;                     
input           bmu_ahbl_dbus_req;                      
input           bmu_ahbl_dbus_req_without_cmplt;        
input           bmu_ahbl_dbus_req_without_deny_chk_fail; 
input   [1 :0]  bmu_ahbl_dbus_size;                     
input           bmu_ahbl_dbus_write;                    
input           bmu_ahbl_ibus_acc_deny;                 
input   [31:0]  bmu_ahbl_ibus_addr;                     
input           bmu_ahbl_ibus_hit;                      
input   [3 :0]  bmu_ahbl_ibus_prot;                     
input           bmu_ahbl_ibus_req;                      
input           bmu_ahbl_ibus_req_no_hit;               
input   [1 :0]  bmu_ahbl_ibus_size;                     
input           bmu_ahbl_ibus_vec_redirect;             
input           bmu_ahbl_ibus_write;                    
input   [31:0]  bmu_ahbl_wdata;                         
input           cpu_acc_err;                            
input           cpu_data_vld;                           
input   [31:0]  cpu_rdata;                              
input           cpu_req_grnt;                           
input           cpu_sec;                                
input           cpu_trans_cmplt;                        
input           cpurst_b;                               
output          ahbl_bmu_dbus_acc_err;                  
output  [31:0]  ahbl_bmu_dbus_data;                     
output          ahbl_bmu_dbus_data_vld;                 
output          ahbl_bmu_dbus_grnt;                     
output          ahbl_bmu_dbus_trans_cmplt;              
output          ahbl_bmu_ibus_acc_err;                  
output  [31:0]  ahbl_bmu_ibus_data;                     
output          ahbl_bmu_ibus_data_vld;                 
output          ahbl_bmu_ibus_grnt;                     
output          ahbl_bmu_ibus_trans_cmplt;              
output  [31:0]  cpu_addr;                               
output  [3 :0]  cpu_prot;                               
output          cpu_req;                                
output          cpu_req_for_grnt;                       
output          cpu_req_for_peak_power;                 
output  [1 :0]  cpu_size;                               
output          cpu_vec_redirect;                       
output  [31:0]  cpu_wdata;                              
output          cpu_write;                              
output          ibus_not_granted;                       


reg     [1 :0]  cpu_req_bus_grnt;                       
reg     [1 :0]  cpu_req_type;                           
reg             ibus_not_granted;                       


wire            ahbl_bmu_dbus_acc_err;                  
wire    [31:0]  ahbl_bmu_dbus_data;                     
wire            ahbl_bmu_dbus_data_vld;                 
wire            ahbl_bmu_dbus_grnt;                     
wire            ahbl_bmu_dbus_trans_cmplt;              
wire            ahbl_bmu_ibus_acc_err;                  
wire    [31:0]  ahbl_bmu_ibus_data;                     
wire            ahbl_bmu_ibus_data_vld;                 
wire            ahbl_bmu_ibus_grnt;                     
wire            ahbl_bmu_ibus_trans_cmplt;              
wire            ahbl_gated_clk;                         
wire            bmu_ahbl_dbus_acc_deny;                 
wire    [31:0]  bmu_ahbl_dbus_addr;                     
wire            bmu_ahbl_dbus_chk_fail;                 
wire    [3 :0]  bmu_ahbl_dbus_prot;                     
wire            bmu_ahbl_dbus_req;                      
wire            bmu_ahbl_dbus_req_without_cmplt;        
wire            bmu_ahbl_dbus_req_without_deny_chk_fail; 
wire    [1 :0]  bmu_ahbl_dbus_size;                     
wire            bmu_ahbl_dbus_write;                    
wire    [31:0]  bmu_ahbl_had_addr;                      
wire    [3 :0]  bmu_ahbl_had_prot;                      
wire    [1 :0]  bmu_ahbl_had_size;                      
wire    [31:0]  bmu_ahbl_had_wdata;                     
wire            bmu_ahbl_had_write;                     
wire            bmu_ahbl_ibus_acc_deny;                 
wire    [31:0]  bmu_ahbl_ibus_addr;                     
wire            bmu_ahbl_ibus_hit;                      
wire    [3 :0]  bmu_ahbl_ibus_prot;                     
wire            bmu_ahbl_ibus_req;                      
wire            bmu_ahbl_ibus_req_no_hit;               
wire    [1 :0]  bmu_ahbl_ibus_size;                     
wire            bmu_ahbl_ibus_vec_redirect;             
wire            bmu_ahbl_ibus_write;                    
wire    [31:0]  bmu_ahbl_wdata;                         
wire            cpu_acc_err;                            
wire    [31:0]  cpu_addr;                               
wire            cpu_data_vld;                           
wire    [3 :0]  cpu_prot;                               
wire    [31:0]  cpu_rdata;                              
wire            cpu_req;                                
wire            cpu_req_dbus_grnt;                      
wire            cpu_req_for_grnt;                       
wire            cpu_req_for_peak_power;                 
wire            cpu_req_grnt;                           
wire            cpu_req_ibus_grnt;                      
wire    [1 :0]  cpu_size;                               
wire            cpu_trans_cmplt;                        
wire            cpu_vec_redirect;                       
wire    [31:0]  cpu_wdata;                              
wire            cpu_write;                              
wire            cpurst_b;                               
wire            dbus_req;                               
wire            dbus_req_without_deny_chk_fail;         
wire            dbus_req_without_deny_chk_fail_cmplt;   
wire            dbus_sel;                               
wire            had_req;                                
wire            had_req_without_cmplt;                  
wire            had_sel;                                
wire            ibus_req;                               
wire            ibus_req_only;                          
wire            ibus_req_without_deny;                  
wire            ibus_sel;                               







assign had_req = 1'b0;
assign had_req_without_cmplt = 1'b0;
assign had_sel = 1'b0;
assign bmu_ahbl_had_addr[31:0] = 32'b0;
assign bmu_ahbl_had_prot[3:0]  = 4'b0;
assign bmu_ahbl_had_size[1:0]  = 2'b0;
assign bmu_ahbl_had_wdata[31:0] = 32'b0;
assign bmu_ahbl_had_write = 1'b0;
assign ibus_req = bmu_ahbl_ibus_req && !bmu_ahbl_ibus_acc_deny;
assign ibus_req_without_deny = bmu_ahbl_ibus_req;
assign dbus_req = bmu_ahbl_dbus_req && !bmu_ahbl_dbus_acc_deny 
              && !bmu_ahbl_dbus_chk_fail && !ibus_not_granted;
assign dbus_req_without_deny_chk_fail = bmu_ahbl_dbus_req_without_deny_chk_fail 
                                    && !ibus_not_granted;

assign dbus_req_without_deny_chk_fail_cmplt = bmu_ahbl_dbus_req_without_cmplt 
                                          && !ibus_not_granted;

assign ibus_sel = bmu_ahbl_ibus_hit && !dbus_req_without_deny_chk_fail_cmplt && !had_req_without_cmplt;

assign dbus_sel = dbus_req_without_deny_chk_fail_cmplt && !had_req_without_cmplt;

assign cpu_req = (ibus_req && !dbus_req_without_deny_chk_fail_cmplt && !had_req_without_cmplt) 
                 || dbus_req && !had_req_without_cmplt || had_req;
assign cpu_req_for_grnt = ibus_req_without_deny || dbus_req_without_deny_chk_fail_cmplt || had_req_without_cmplt;
assign cpu_req_for_peak_power = bmu_ahbl_ibus_req_no_hit && bmu_ahbl_ibus_hit
                             || dbus_req_without_deny_chk_fail_cmplt
                             || had_req_without_cmplt;

assign cpu_addr[31:0]   = {32{dbus_sel}} & bmu_ahbl_dbus_addr[31:0]
                        | {32{ibus_sel}} & bmu_ahbl_ibus_addr[31:0]
                        | {32{had_sel}}  & bmu_ahbl_had_addr[31:0];

assign cpu_prot[3:0]    = {4{dbus_sel}}  & bmu_ahbl_dbus_prot[3:0]
                        | {4{ibus_sel}}  & bmu_ahbl_ibus_prot[3:0]
                        | {4{had_sel}}   & bmu_ahbl_had_prot[3:0];

assign cpu_size[1:0]    = {2{dbus_sel}}  & bmu_ahbl_dbus_size[1:0]
                        | {2{ibus_sel}}  & bmu_ahbl_ibus_size[1:0]
                        | {2{had_sel}}   & bmu_ahbl_had_size[1:0];

assign cpu_write        = dbus_sel       & bmu_ahbl_dbus_write
                        | ibus_sel       & bmu_ahbl_ibus_write
                        | had_sel        & bmu_ahbl_had_write; 
assign cpu_vec_redirect = bmu_ahbl_ibus_vec_redirect;



assign cpu_wdata[31:0]  = (cpu_req_bus_grnt[1:0] == 2'b1) ?   bmu_ahbl_wdata[31:0] :
                                          bmu_ahbl_had_wdata[31:0];
















always @( had_req
       or dbus_req
       or ibus_req)
begin
casez({had_req, dbus_req, ibus_req})
  3'b1?? : cpu_req_type[1:0] = 2'b10;
  3'b01? : cpu_req_type[1:0] = 2'b01;
  default: cpu_req_type[1:0] = 2'b0;
endcase

end

always @(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cpu_req_bus_grnt[1:0] <= 2'b0;
  else if(cpu_req && cpu_req_grnt)
    cpu_req_bus_grnt[1:0] <= cpu_req_type[1:0];
  else
    cpu_req_bus_grnt[1:0] <= cpu_req_bus_grnt[1:0];
end 




assign ibus_req_only = ibus_req && !dbus_req_without_deny_chk_fail_cmplt && !had_req_without_cmplt;
always @(posedge ahbl_gated_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ibus_not_granted <= 1'b0;
  else if(ibus_req_only && !cpu_req_grnt)
    ibus_not_granted <= 1'b1;
  else if(cpu_req_grnt && ibus_not_granted)
    ibus_not_granted <= 1'b0;
end 











assign ahbl_bmu_ibus_grnt = !dbus_req_without_deny_chk_fail_cmplt
                          && ibus_req_without_deny && cpu_req_grnt && !had_req_without_cmplt;
assign ahbl_bmu_dbus_grnt = dbus_req_without_deny_chk_fail && cpu_req_grnt && !had_req_without_cmplt;




assign cpu_req_ibus_grnt = (cpu_req_bus_grnt[1:0] == 2'b00);
assign cpu_req_dbus_grnt = (cpu_req_bus_grnt[1:0] == 2'b01);
assign ahbl_bmu_ibus_trans_cmplt = cpu_req_ibus_grnt && cpu_trans_cmplt;
assign ahbl_bmu_dbus_trans_cmplt = cpu_req_dbus_grnt && cpu_trans_cmplt;





assign ahbl_bmu_ibus_data_vld = cpu_req_ibus_grnt && cpu_data_vld;
assign ahbl_bmu_dbus_data_vld = cpu_req_dbus_grnt && cpu_data_vld;





assign ahbl_bmu_ibus_acc_err = cpu_req_ibus_grnt && cpu_acc_err;
assign ahbl_bmu_dbus_acc_err = cpu_req_dbus_grnt && cpu_acc_err;






assign ahbl_bmu_ibus_data[31:0] = cpu_rdata[31:0];
assign ahbl_bmu_dbus_data[31:0] = cpu_rdata[31:0];




endmodule


























module nm_bmu_dbus_if(
  biu_bmu_dbus_acc_err,
  biu_bmu_dbus_data,
  biu_bmu_dbus_data_vld,
  biu_bmu_dbus_grnt,
  biu_bmu_dbus_trans_cmplt,
  bmu_biu_dbus_acc_deny,
  bmu_biu_dbus_addr,
  bmu_biu_dbus_chk_fail,
  bmu_biu_dbus_prot,
  bmu_biu_dbus_req,
  bmu_biu_dbus_req_without_cmplt,
  bmu_biu_dbus_size,
  bmu_biu_dbus_wdata,
  bmu_biu_dbus_write,
  bmu_iahbl_dbus_acc_deny,
  bmu_iahbl_dbus_addr,
  bmu_iahbl_dbus_chk_fail,
  bmu_iahbl_dbus_prot,
  bmu_iahbl_dbus_req,
  bmu_iahbl_dbus_req_without_cmplt,
  bmu_iahbl_dbus_size,
  bmu_iahbl_dbus_wdata,
  bmu_iahbl_dbus_write,
  bmu_lsu_acc_err,
  bmu_lsu_bstack_chk_fail,
  bmu_lsu_data,
  bmu_lsu_data_vld,
  bmu_lsu_grnt,
  bmu_lsu_trans_cmplt,
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_chk_fail,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  dbus_deny_clk_en,
  deny_clk,
  iahbl_bmu_dbus_acc_err,
  iahbl_bmu_dbus_data,
  iahbl_bmu_dbus_data_vld,
  iahbl_bmu_dbus_grnt,
  iahbl_bmu_dbus_trans_cmplt,
  lsu_bmu_addr,
  lsu_bmu_addr_check_fail,
  lsu_bmu_idle,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_without_cmplt,
  lsu_bmu_sg_chk_fail,
  lsu_bmu_size,
  lsu_bmu_store_error,
  lsu_bmu_wdata,
  lsu_bmu_wfd1,
  lsu_bmu_write,
  mpu_bmu_dbus_acc_deny,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_data_vld,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt
);


input           biu_bmu_dbus_acc_err;            
input   [31:0]  biu_bmu_dbus_data;               
input           biu_bmu_dbus_data_vld;           
input           biu_bmu_dbus_grnt;               
input           biu_bmu_dbus_trans_cmplt;        
input           cp0_yy_supv_mode_aft_dbg;        
input           cpurst_b;                        
input           deny_clk;                        
input           iahbl_bmu_dbus_acc_err;          
input   [31:0]  iahbl_bmu_dbus_data;             
input           iahbl_bmu_dbus_data_vld;         
input           iahbl_bmu_dbus_grnt;             
input           iahbl_bmu_dbus_trans_cmplt;      
input   [31:0]  lsu_bmu_addr;                    
input           lsu_bmu_addr_check_fail;         
input           lsu_bmu_idle;                    
input   [3 :0]  lsu_bmu_prot;                    
input           lsu_bmu_req;                     
input           lsu_bmu_req_without_cmplt;       
input           lsu_bmu_sg_chk_fail;             
input   [1 :0]  lsu_bmu_size;                    
input           lsu_bmu_store_error;             
input   [31:0]  lsu_bmu_wdata;                   
input           lsu_bmu_wfd1;                    
input           lsu_bmu_write;                   
input           mpu_bmu_dbus_acc_deny;           
input   [11:0]  pad_bmu_iahbl_base;              
input   [11:0]  pad_bmu_iahbl_mask;              
input           tcipif_bmu_dbus_acc_err;         
input   [31:0]  tcipif_bmu_dbus_data;            
input           tcipif_bmu_dbus_data_vld;        
input           tcipif_bmu_dbus_grnt;            
input           tcipif_bmu_dbus_trans_cmplt;     
output          bmu_biu_dbus_acc_deny;           
output  [31:0]  bmu_biu_dbus_addr;               
output          bmu_biu_dbus_chk_fail;           
output  [3 :0]  bmu_biu_dbus_prot;               
output          bmu_biu_dbus_req;                
output          bmu_biu_dbus_req_without_cmplt;  
output  [1 :0]  bmu_biu_dbus_size;               
output  [31:0]  bmu_biu_dbus_wdata;              
output          bmu_biu_dbus_write;              
output          bmu_iahbl_dbus_acc_deny;         
output  [31:0]  bmu_iahbl_dbus_addr;             
output          bmu_iahbl_dbus_chk_fail;         
output  [3 :0]  bmu_iahbl_dbus_prot;             
output          bmu_iahbl_dbus_req;              
output          bmu_iahbl_dbus_req_without_cmplt; 
output  [1 :0]  bmu_iahbl_dbus_size;             
output  [31:0]  bmu_iahbl_dbus_wdata;            
output          bmu_iahbl_dbus_write;            
output          bmu_lsu_acc_err;                 
output          bmu_lsu_bstack_chk_fail;         
output  [31:0]  bmu_lsu_data;                    
output          bmu_lsu_data_vld;                
output          bmu_lsu_grnt;                    
output          bmu_lsu_trans_cmplt;             
output          bmu_tcipif_dbus_acc_deny;        
output  [31:0]  bmu_tcipif_dbus_addr;            
output          bmu_tcipif_dbus_chk_fail;        
output          bmu_tcipif_dbus_req;             
output          bmu_tcipif_dbus_supv_mode;       
output  [31:0]  bmu_tcipif_dbus_wdata;           
output          bmu_tcipif_dbus_write;           
output          dbus_deny_clk_en;                


reg     [2 :0]  cross_cur_st;                    
reg     [2 :0]  cross_nxt_st;                    
reg     [1 :0]  cur_state;                       
reg             iahbl_lrw_hit_ff;                
reg             iahbl_norm_hit_ff;               
reg     [1 :0]  next_state;                      
reg     [2 :0]  req_bus;                         


wire            acc_deny;                        
wire            acc_err_for_deny;                
wire            biu_bmu_dbus_acc_err;            
wire    [31:0]  biu_bmu_dbus_data;               
wire            biu_bmu_dbus_data_vld;           
wire            biu_bmu_dbus_grnt;               
wire            biu_bmu_dbus_trans_cmplt;        
wire            biu_data_vld;                    
wire            bmu_biu_dbus_acc_deny;           
wire    [31:0]  bmu_biu_dbus_addr;               
wire            bmu_biu_dbus_chk_fail;           
wire    [3 :0]  bmu_biu_dbus_prot;               
wire            bmu_biu_dbus_req;                
wire            bmu_biu_dbus_req_without_cmplt;  
wire    [1 :0]  bmu_biu_dbus_size;               
wire    [31:0]  bmu_biu_dbus_wdata;              
wire            bmu_biu_dbus_write;              
wire            bmu_iahbl_dbus_acc_deny;         
wire    [31:0]  bmu_iahbl_dbus_addr;             
wire            bmu_iahbl_dbus_chk_fail;         
wire    [3 :0]  bmu_iahbl_dbus_prot;             
wire            bmu_iahbl_dbus_req;              
wire            bmu_iahbl_dbus_req_without_cmplt; 
wire    [1 :0]  bmu_iahbl_dbus_size;             
wire    [31:0]  bmu_iahbl_dbus_wdata;            
wire            bmu_iahbl_dbus_write;            
wire            bmu_lsu_acc_err;                 
wire            bmu_lsu_bstack_chk_fail;         
wire    [31:0]  bmu_lsu_data;                    
wire            bmu_lsu_data_vld;                
wire            bmu_lsu_grnt;                    
wire            bmu_lsu_trans_cmplt;             
wire            bmu_tcipif_dbus_acc_deny;        
wire    [31:0]  bmu_tcipif_dbus_addr;            
wire            bmu_tcipif_dbus_chk_fail;        
wire            bmu_tcipif_dbus_req;             
wire            bmu_tcipif_dbus_supv_mode;       
wire    [31:0]  bmu_tcipif_dbus_wdata;           
wire            bmu_tcipif_dbus_write;           
wire            bstck_chk_fail;                  
wire            cp0_yy_supv_mode_aft_dbg;        
wire            cpurst_b;                        
wire            cross_fsm_upd;                   
wire            cross_iahbl;                     
wire            cross_idle;                      
wire            cross_sahbl;                     
wire            cross_tcip;                      
wire            dahbl_bmu_dbus_acc_err;          
wire    [31:0]  dahbl_bmu_dbus_data;             
wire            dahbl_bmu_dbus_data_vld;         
wire            dahbl_bmu_dbus_grnt;             
wire            dahbl_bmu_dbus_trans_cmplt;      
wire            dahbl_data_vld;                  
wire            dahbl_hit;                       
wire            dahbl_hit_ff;                    
wire            dahbl_hit_upd;                   
wire            dahbl_req;                       
wire            dbus_deny_clk_en;                
wire            dbus_grnt;                       
wire            deny_clk;                        
wire            iahbl_bmu_dbus_acc_err;          
wire    [31:0]  iahbl_bmu_dbus_data;             
wire            iahbl_bmu_dbus_data_vld;         
wire            iahbl_bmu_dbus_grnt;             
wire            iahbl_bmu_dbus_trans_cmplt;      
wire            iahbl_data_vld;                  
wire            iahbl_hit;                       
wire            iahbl_hit_ff;                    
wire            iahbl_hit_upd;                   
wire            iahbl_lrw_hit;                   
wire            iahbl_lrw_hit_upd;               
wire            iahbl_norm_hit_upd;              
wire            iahbl_req;                       
wire            iahbl_vld;                       
wire    [31:0]  lsu_bmu_addr;                    
wire            lsu_bmu_addr_check_fail;         
wire            lsu_bmu_idle;                    
wire    [3 :0]  lsu_bmu_prot;                    
wire            lsu_bmu_req;                     
wire            lsu_bmu_req_without_cmplt;       
wire            lsu_bmu_sg_chk_fail;             
wire    [1 :0]  lsu_bmu_size;                    
wire            lsu_bmu_store_error;             
wire    [31:0]  lsu_bmu_wdata;                   
wire            lsu_bmu_wfd1;                    
wire            lsu_bmu_write;                   
wire            lsu_inst_lrw;                    
wire            lsu_inst_norm;                   
wire            mpu_bmu_dbus_acc_deny;           
wire    [11:0]  pad_bmu_iahbl_base;              
wire    [11:0]  pad_bmu_iahbl_mask;              
wire            sahbl_req;                       
wire            sahbl_vld;                       
wire            tcip_req;                        
wire            tcip_vld;                        
wire    [15:0]  tcipif_addr_low;                 
wire            tcipif_bmu_dbus_acc_err;         
wire    [31:0]  tcipif_bmu_dbus_data;            
wire            tcipif_bmu_dbus_data_vld;        
wire            tcipif_bmu_dbus_grnt;            
wire            tcipif_bmu_dbus_trans_cmplt;     
wire            tcipif_data_vld;                 
wire            tcipif_hit;                      



parameter TCIPIF_BASE = 4'b1110;

assign acc_deny =  mpu_bmu_dbus_acc_deny 
                || lsu_bmu_sg_chk_fail
                || lsu_bmu_store_error;



assign lsu_inst_norm = lsu_bmu_req & lsu_bmu_prot[0] & !tcipif_hit;
assign lsu_inst_lrw  = lsu_bmu_req & !lsu_bmu_prot[0];

assign dahbl_hit     = 1'b0;
assign dahbl_hit_ff  = 1'b0;
assign dahbl_hit_upd = 1'b0;

assign iahbl_hit = ((lsu_bmu_addr[31:20] & pad_bmu_iahbl_mask[11:0]) == pad_bmu_iahbl_base[11:0]);
assign iahbl_lrw_hit = iahbl_hit;

assign iahbl_norm_hit_upd = (iahbl_norm_hit_ff ^ iahbl_hit) & lsu_inst_norm;
always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    iahbl_norm_hit_ff <= 1'b0;
  else if(iahbl_norm_hit_upd)
    iahbl_norm_hit_ff <= iahbl_hit;
  else
    iahbl_norm_hit_ff <= iahbl_norm_hit_ff;
end

assign iahbl_lrw_hit_upd = (iahbl_lrw_hit_ff ^ iahbl_lrw_hit) & lsu_inst_lrw;
always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    iahbl_lrw_hit_ff <= 1'b1;
  else if(iahbl_lrw_hit_upd)
    iahbl_lrw_hit_ff <= iahbl_lrw_hit;
  else
    iahbl_lrw_hit_ff <= iahbl_lrw_hit_ff;
end
assign iahbl_hit_ff  = !lsu_bmu_prot[0] ? iahbl_lrw_hit_ff : iahbl_norm_hit_ff;
assign iahbl_hit_upd = iahbl_norm_hit_upd || iahbl_lrw_hit_upd;





parameter CIDLE = 3'b000;
parameter SAHBL = 3'b001;
parameter CTCIP = 3'b010;
parameter IAHBL = 3'b011;
parameter DAHBL = 3'b100;

always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cross_cur_st[2:0] <= CIDLE;
  else
    cross_cur_st[2:0] <= cross_nxt_st[2:0];
end

assign sahbl_req = lsu_bmu_req && !iahbl_hit && !dahbl_hit && !tcipif_hit;
assign iahbl_req = lsu_bmu_req &&  iahbl_hit;
assign dahbl_req = lsu_bmu_req &&  dahbl_hit;
assign tcip_req  = lsu_bmu_req && tcipif_hit;
assign cross_fsm_upd = cross_nxt_st[2:0] != cross_cur_st[2:0];


always @( sahbl_req
       or iahbl_req
       or dahbl_req
       or tcip_req)
begin
case({sahbl_req, tcip_req, iahbl_req, dahbl_req})
  4'b1000:
    req_bus[2:0] = SAHBL;
  4'b0100:
    req_bus[2:0] = CTCIP;
  4'b0010:
    req_bus[2:0] = IAHBL;
  4'b0001:
    req_bus[2:0] = DAHBL;
  default:
    req_bus[2:0] = CIDLE;
endcase

end


always @( sahbl_req
       or lsu_bmu_idle
       or req_bus
       or iahbl_req
       or dahbl_req
       or tcip_req
       or cross_cur_st)
begin
case(cross_cur_st)
  CIDLE:
  begin
    case({sahbl_req, tcip_req, iahbl_req, dahbl_req})
      4'b1000:
        cross_nxt_st = SAHBL;
      4'b0100:
        cross_nxt_st = CTCIP;
      4'b0010:
        cross_nxt_st = IAHBL;
      4'b0001:
        cross_nxt_st = DAHBL;
      default:
        cross_nxt_st = CIDLE;
    endcase
  end
  SAHBL:
  begin
    if(lsu_bmu_idle)
      cross_nxt_st = req_bus;
    else
      cross_nxt_st = SAHBL;
  end
  CTCIP:
  begin
    if(lsu_bmu_idle)
      cross_nxt_st = req_bus;
    else
      cross_nxt_st = CTCIP;
  end
  IAHBL:
  begin
    if(lsu_bmu_idle)
      cross_nxt_st = req_bus;
    else
      cross_nxt_st = IAHBL;
  end
  DAHBL:
  begin
    if(lsu_bmu_idle)
      cross_nxt_st = req_bus;
    else
      cross_nxt_st = DAHBL;
  end
  default:
  begin
    cross_nxt_st = CIDLE;
  end
endcase

end

assign cross_idle  = cross_cur_st == CIDLE;
assign cross_sahbl = cross_cur_st == SAHBL;

assign sahbl_vld = cross_idle || cross_sahbl;
assign cross_tcip  = cross_cur_st == CTCIP;
assign tcip_vld    = cross_idle || cross_tcip;
assign cross_iahbl = cross_cur_st == IAHBL;
assign iahbl_vld   = cross_idle || cross_iahbl;









assign dahbl_bmu_dbus_acc_err     = 1'b0;
assign dahbl_bmu_dbus_data[31:0]  = 32'b0;
assign dahbl_bmu_dbus_data_vld    = 1'b0;
assign dahbl_bmu_dbus_grnt        = 1'b0;
assign dahbl_bmu_dbus_trans_cmplt = 1'b0;


assign bmu_iahbl_dbus_req         = lsu_bmu_req & iahbl_hit & iahbl_hit_ff
                                  & iahbl_vld;
assign bmu_iahbl_dbus_req_without_cmplt = lsu_bmu_req_without_cmplt
                                          & iahbl_hit_ff & iahbl_vld;
assign bmu_iahbl_dbus_acc_deny    = acc_deny;
assign bmu_iahbl_dbus_chk_fail    = lsu_bmu_addr_check_fail;
assign bmu_iahbl_dbus_write       = lsu_bmu_write;
assign bmu_iahbl_dbus_size[1:0]   = lsu_bmu_size[1:0];

assign bmu_iahbl_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];
assign bmu_iahbl_dbus_addr[31:0]  = lsu_bmu_addr[31:0];
assign bmu_iahbl_dbus_prot[3:0]   = lsu_bmu_prot[3:0]; 




assign tcipif_hit = (lsu_bmu_addr[31:28] == TCIPIF_BASE);
assign bmu_tcipif_dbus_req         = lsu_bmu_req & tcipif_hit & tcip_vld;
assign bmu_tcipif_dbus_acc_deny    = acc_deny;
assign bmu_tcipif_dbus_chk_fail    = lsu_bmu_addr_check_fail;
assign bmu_tcipif_dbus_write       = lsu_bmu_write;
assign bmu_tcipif_dbus_supv_mode   = cp0_yy_supv_mode_aft_dbg;
assign bmu_tcipif_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];
assign tcipif_addr_low[15:0]       = {16{tcipif_hit}}
                                     & lsu_bmu_addr[15:0];
assign bmu_tcipif_dbus_addr[31:0]  = {lsu_bmu_addr[31:16],
                                      tcipif_addr_low[15:0]};




assign bmu_biu_dbus_req         = lsu_bmu_req & ~iahbl_hit & ~dahbl_hit
                               & ~iahbl_hit_ff & ~dahbl_hit_ff
                               & ~tcipif_hit & sahbl_vld;
assign bmu_biu_dbus_req_without_cmplt = lsu_bmu_req_without_cmplt 
                                     & ~iahbl_hit_ff & ~dahbl_hit_ff 
                                     & sahbl_vld;
assign bmu_biu_dbus_acc_deny    = acc_deny;
assign bmu_biu_dbus_chk_fail    = lsu_bmu_addr_check_fail;
assign bmu_biu_dbus_write       = lsu_bmu_write;
assign bmu_biu_dbus_size[1:0]   = lsu_bmu_size[1:0];

assign bmu_biu_dbus_wdata[31:0] = lsu_bmu_wdata[31:0];

assign bmu_biu_dbus_addr[31:0]  = lsu_bmu_addr[31:0];
assign bmu_biu_dbus_prot[3:0]   = lsu_bmu_prot[3:0]; 





assign dbus_grnt        = dahbl_bmu_dbus_grnt  |
                          iahbl_bmu_dbus_grnt  |
                          tcipif_bmu_dbus_grnt |
                          biu_bmu_dbus_grnt;
assign bmu_lsu_grnt = dbus_grnt;



parameter IDLE        = 2'b00;
parameter BSTACK_FAIL = 2'b01;
parameter DENY        = 2'b10;
assign dbus_deny_clk_en = (cur_state != IDLE)
                       || lsu_bmu_addr_check_fail
                       || acc_deny 
                       || iahbl_hit_upd
                       || dahbl_hit_upd
                       || cross_fsm_upd;



always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[1:0] <= IDLE;
  else
    cur_state[1:0] <= next_state[1:0];
end


always @( cur_state
       or dbus_grnt
       or acc_deny
       or lsu_bmu_wfd1
       or lsu_bmu_addr_check_fail)
begin
  case(cur_state)
  IDLE        : if(dbus_grnt && lsu_bmu_addr_check_fail)
                  next_state = BSTACK_FAIL;
                else if(dbus_grnt && acc_deny)
                  next_state = DENY;
                else
                  next_state = IDLE;
  BSTACK_FAIL : if(lsu_bmu_wfd1)  
                  next_state = IDLE;
                else
                  next_state = BSTACK_FAIL;
  DENY        : if(lsu_bmu_wfd1)  
                  next_state = IDLE;
                else
                  next_state = DENY;
  default     :   next_state = IDLE;
  endcase

end

assign bstck_chk_fail   = (cur_state == BSTACK_FAIL) && lsu_bmu_wfd1;
assign acc_err_for_deny = (cur_state == DENY) && lsu_bmu_wfd1;



assign bmu_lsu_trans_cmplt = dahbl_bmu_dbus_trans_cmplt  |
                             iahbl_bmu_dbus_trans_cmplt  |
                             tcipif_bmu_dbus_trans_cmplt |
                             biu_bmu_dbus_trans_cmplt    |
                             acc_err_for_deny |
                             bstck_chk_fail;

assign bmu_lsu_data_vld    = dahbl_bmu_dbus_data_vld  |
                             iahbl_bmu_dbus_data_vld  |
                             tcipif_bmu_dbus_data_vld |
                             biu_bmu_dbus_data_vld;

assign dahbl_data_vld = dahbl_bmu_dbus_data_vld;
assign iahbl_data_vld = iahbl_bmu_dbus_data_vld;
assign biu_data_vld   = biu_bmu_dbus_data_vld;
assign tcipif_data_vld = tcipif_bmu_dbus_data_vld;

assign bmu_lsu_data[31:0]  = ({32{dahbl_data_vld}}  & dahbl_bmu_dbus_data[31:0])  |
                             ({32{iahbl_data_vld}}  & iahbl_bmu_dbus_data[31:0])  |
                             ({32{tcipif_data_vld}} & tcipif_bmu_dbus_data[31:0]) |
                             ({32{biu_data_vld}}    & biu_bmu_dbus_data[31:0]);


assign bmu_lsu_acc_err     = dahbl_bmu_dbus_acc_err  |
                             iahbl_bmu_dbus_acc_err  |
                             tcipif_bmu_dbus_acc_err |
                             biu_bmu_dbus_acc_err    |
                             acc_err_for_deny;

assign bmu_lsu_bstack_chk_fail = bstck_chk_fail;



endmodule


























module nm_bmu_ibus_if(
  biu_bmu_ibus_acc_err,
  biu_bmu_ibus_data,
  biu_bmu_ibus_data_vld,
  biu_bmu_ibus_grnt,
  biu_bmu_ibus_trans_cmplt,
  bmu_biu_ibus_acc_deny,
  bmu_biu_ibus_addr,
  bmu_biu_ibus_hit,
  bmu_biu_ibus_prot,
  bmu_biu_ibus_req,
  bmu_biu_ibus_req_no_hit,
  bmu_biu_ibus_size,
  bmu_biu_ibus_vec_redirect,
  bmu_iahbl_ibus_acc_deny,
  bmu_iahbl_ibus_addr,
  bmu_iahbl_ibus_hit,
  bmu_iahbl_ibus_prot,
  bmu_iahbl_ibus_req,
  bmu_iahbl_ibus_req_no_hit,
  bmu_iahbl_ibus_size,
  bmu_iahbl_ibus_vec_redirect,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_write,
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data,
  bmu_xx_ibus_data_vld,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cpurst_b,
  deny_clk,
  iahbl_bmu_ibus_acc_err,
  iahbl_bmu_ibus_data,
  iahbl_bmu_ibus_data_vld,
  iahbl_bmu_ibus_grnt,
  iahbl_bmu_ibus_trans_cmplt,
  ibus_deny_clk_en,
  ifu_bmu_addr,
  ifu_bmu_idle,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_wfd1,
  iu_bmu_vec_redirect,
  mpu_bmu_ibus_acc_deny,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_data_vld,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);


input           biu_bmu_ibus_acc_err;       
input   [31:0]  biu_bmu_ibus_data;          
input           biu_bmu_ibus_data_vld;      
input           biu_bmu_ibus_grnt;          
input           biu_bmu_ibus_trans_cmplt;   
input           cpurst_b;                   
input           deny_clk;                   
input           iahbl_bmu_ibus_acc_err;     
input   [31:0]  iahbl_bmu_ibus_data;        
input           iahbl_bmu_ibus_data_vld;    
input           iahbl_bmu_ibus_grnt;        
input           iahbl_bmu_ibus_trans_cmplt; 
input   [31:0]  ifu_bmu_addr;               
input           ifu_bmu_idle;               
input   [3 :0]  ifu_bmu_prot;               
input           ifu_bmu_req;                
input           ifu_bmu_wfd1;               
input           iu_bmu_vec_redirect;        
input           mpu_bmu_ibus_acc_deny;      
input   [11:0]  pad_bmu_iahbl_base;         
input   [11:0]  pad_bmu_iahbl_mask;         
input           tcipif_bmu_ibus_acc_err;    
input   [31:0]  tcipif_bmu_ibus_data;       
input           tcipif_bmu_ibus_data_vld;   
input           tcipif_bmu_ibus_grnt;       
input           tcipif_bmu_ibus_trans_cmplt; 
output          bmu_biu_ibus_acc_deny;      
output  [31:0]  bmu_biu_ibus_addr;          
output          bmu_biu_ibus_hit;           
output  [3 :0]  bmu_biu_ibus_prot;          
output          bmu_biu_ibus_req;           
output          bmu_biu_ibus_req_no_hit;    
output  [1 :0]  bmu_biu_ibus_size;          
output          bmu_biu_ibus_vec_redirect;  
output          bmu_iahbl_ibus_acc_deny;    
output  [31:0]  bmu_iahbl_ibus_addr;        
output          bmu_iahbl_ibus_hit;         
output  [3 :0]  bmu_iahbl_ibus_prot;        
output          bmu_iahbl_ibus_req;         
output          bmu_iahbl_ibus_req_no_hit;  
output  [1 :0]  bmu_iahbl_ibus_size;        
output          bmu_iahbl_ibus_vec_redirect; 
output          bmu_tcipif_ibus_acc_deny;   
output  [31:0]  bmu_tcipif_ibus_addr;       
output          bmu_tcipif_ibus_req;        
output          bmu_tcipif_ibus_write;      
output          bmu_xx_ibus_acc_err;        
output  [31:0]  bmu_xx_ibus_data;           
output          bmu_xx_ibus_data_vld;       
output          bmu_xx_ibus_grnt;           
output          bmu_xx_ibus_trans_cmplt;    
output          ibus_deny_clk_en;           


reg             acc_err_for_deny;           
reg             iahbl_hit_ff;               
reg             tcipif_hit_ff;              


wire            biu_bmu_ibus_acc_err;       
wire    [31:0]  biu_bmu_ibus_data;          
wire            biu_bmu_ibus_data_vld;      
wire            biu_bmu_ibus_grnt;          
wire            biu_bmu_ibus_trans_cmplt;   
wire            biu_data_vld;               
wire            bmu_biu_ibus_acc_deny;      
wire    [31:0]  bmu_biu_ibus_addr;          
wire            bmu_biu_ibus_hit;           
wire    [3 :0]  bmu_biu_ibus_prot;          
wire            bmu_biu_ibus_req;           
wire            bmu_biu_ibus_req_no_hit;    
wire    [1 :0]  bmu_biu_ibus_size;          
wire            bmu_biu_ibus_vec_redirect;  
wire            bmu_iahbl_ibus_acc_deny;    
wire    [31:0]  bmu_iahbl_ibus_addr;        
wire            bmu_iahbl_ibus_hit;         
wire    [3 :0]  bmu_iahbl_ibus_prot;        
wire            bmu_iahbl_ibus_req;         
wire            bmu_iahbl_ibus_req_no_hit;  
wire    [1 :0]  bmu_iahbl_ibus_size;        
wire            bmu_iahbl_ibus_vec_redirect; 
wire            bmu_tcipif_ibus_acc_deny;   
wire    [31:0]  bmu_tcipif_ibus_addr;       
wire            bmu_tcipif_ibus_req;        
wire            bmu_tcipif_ibus_write;      
wire            bmu_xx_ibus_acc_err;        
wire    [31:0]  bmu_xx_ibus_data;           
wire            bmu_xx_ibus_data_vld;       
wire            bmu_xx_ibus_grnt;           
wire            bmu_xx_ibus_trans_cmplt;    
wire            cpurst_b;                   
wire            dahbl_bmu_ibus_acc_err;     
wire    [31:0]  dahbl_bmu_ibus_data;        
wire            dahbl_bmu_ibus_data_vld;    
wire            dahbl_bmu_ibus_grnt;        
wire            dahbl_bmu_ibus_trans_cmplt; 
wire            dahbl_data_vld;             
wire            dahbl_hit;                  
wire            dahbl_hit_ff;               
wire            dahbl_hit_upd;              
wire            deny_clk;                   
wire            iahbl_bmu_ibus_acc_err;     
wire    [31:0]  iahbl_bmu_ibus_data;        
wire            iahbl_bmu_ibus_data_vld;    
wire            iahbl_bmu_ibus_grnt;        
wire            iahbl_bmu_ibus_trans_cmplt; 
wire            iahbl_data_vld;             
wire            iahbl_hit;                  
wire            iahbl_hit_upd;              
wire            ibus_deny_clk_en;           
wire            ibus_grnt;                  
wire    [31:0]  ifu_bmu_addr;               
wire            ifu_bmu_idle;               
wire    [3 :0]  ifu_bmu_prot;               
wire            ifu_bmu_req;                
wire            ifu_bmu_wfd1;               
wire            iu_bmu_vec_redirect;        
wire            mpu_bmu_ibus_acc_deny;      
wire    [11:0]  pad_bmu_iahbl_base;         
wire    [11:0]  pad_bmu_iahbl_mask;         
wire            tcipif_bmu_ibus_acc_err;    
wire    [31:0]  tcipif_bmu_ibus_data;       
wire            tcipif_bmu_ibus_data_vld;   
wire            tcipif_bmu_ibus_grnt;       
wire            tcipif_bmu_ibus_trans_cmplt; 
wire            tcipif_data_vld;            
wire            tcipif_hit;                 
wire            tcipif_hit_upd;             



parameter TCIPIF_BASE = 4'b1110;




assign iahbl_hit = ((ifu_bmu_addr[31:20] & pad_bmu_iahbl_mask[11:0]) == pad_bmu_iahbl_base[11:0]);
assign iahbl_hit_upd = (iahbl_hit_ff ^ iahbl_hit) & ifu_bmu_req & ifu_bmu_idle;
always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    iahbl_hit_ff <= 1'b1;
  else if(iahbl_hit_upd)
    iahbl_hit_ff <= iahbl_hit;
  else
    iahbl_hit_ff <= iahbl_hit_ff;
end


assign dahbl_hit     = 1'b0;
assign dahbl_hit_ff  = 1'b0;
assign dahbl_hit_upd = 1'b0;






assign bmu_iahbl_ibus_req         = ifu_bmu_req & iahbl_hit & iahbl_hit_ff;
assign bmu_iahbl_ibus_req_no_hit  = ifu_bmu_req & iahbl_hit_ff;
assign bmu_iahbl_ibus_hit         = iahbl_hit_ff;
assign bmu_iahbl_ibus_acc_deny    = mpu_bmu_ibus_acc_deny;
assign bmu_iahbl_ibus_size[1:0]   = 2'b10;
assign bmu_iahbl_ibus_addr[31:0]  = ifu_bmu_addr[31:0];
assign bmu_iahbl_ibus_vec_redirect= iu_bmu_vec_redirect;
assign bmu_iahbl_ibus_prot[3:0]   = ifu_bmu_prot[3:0]; 


assign dahbl_bmu_ibus_acc_err     = 1'b0;
assign dahbl_bmu_ibus_data[31:0]  = 32'b0;
assign dahbl_bmu_ibus_data_vld    = 1'b0;
assign dahbl_bmu_ibus_grnt        = 1'b0;
assign dahbl_bmu_ibus_trans_cmplt = 1'b0;




assign tcipif_hit = (ifu_bmu_addr[31:28] == TCIPIF_BASE);
assign tcipif_hit_upd = (tcipif_hit_ff ^ tcipif_hit) & ifu_bmu_req & ifu_bmu_idle;
always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    tcipif_hit_ff <= 1'b0;
  else if(tcipif_hit_upd)
    tcipif_hit_ff <= tcipif_hit;
  else
    tcipif_hit_ff <= tcipif_hit_ff;
end
assign bmu_tcipif_ibus_req         = ifu_bmu_req & tcipif_hit & tcipif_hit_ff;
assign bmu_tcipif_ibus_acc_deny    = mpu_bmu_ibus_acc_deny;
assign bmu_tcipif_ibus_write       = 1'b0;
assign bmu_tcipif_ibus_addr[31:0]  = ifu_bmu_addr[31:0];




assign bmu_biu_ibus_req          = ifu_bmu_req & ~iahbl_hit & ~dahbl_hit 
                                                            & ~tcipif_hit
                                 & ~iahbl_hit_ff & ~dahbl_hit_ff 
                                                 & ~tcipif_hit_ff;
assign bmu_biu_ibus_req_no_hit   = ifu_bmu_req & ~iahbl_hit_ff 
                                               & ~dahbl_hit_ff 
                                               & ~tcipif_hit_ff;
assign bmu_biu_ibus_hit          = ~iahbl_hit_ff & ~dahbl_hit_ff
                                                 & ~tcipif_hit_ff;
assign bmu_biu_ibus_acc_deny     = mpu_bmu_ibus_acc_deny;
assign bmu_biu_ibus_size[1:0]    = 2'b10;
assign bmu_biu_ibus_addr[31:0]   = ifu_bmu_addr[31:0];
assign bmu_biu_ibus_vec_redirect = iu_bmu_vec_redirect;
assign bmu_biu_ibus_prot[3:0]    = ifu_bmu_prot[3:0]; 




assign ibus_grnt        = iahbl_bmu_ibus_grnt  |
                          dahbl_bmu_ibus_grnt  |
                          tcipif_bmu_ibus_grnt |
                          biu_bmu_ibus_grnt;
assign bmu_xx_ibus_grnt = ibus_grnt;

assign ibus_deny_clk_en = acc_err_for_deny || mpu_bmu_ibus_acc_deny 
                       || iahbl_hit_upd
                       || dahbl_hit_upd
                       || tcipif_hit_upd;




always @(posedge deny_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    acc_err_for_deny <= 1'b0;
  else if(ibus_grnt)
    acc_err_for_deny <= mpu_bmu_ibus_acc_deny;
  else if(acc_err_for_deny && ifu_bmu_wfd1)
    acc_err_for_deny <= 1'b0;
end


assign bmu_xx_ibus_trans_cmplt = iahbl_bmu_ibus_trans_cmplt  |
                                 dahbl_bmu_ibus_trans_cmplt  |
                                 tcipif_bmu_ibus_trans_cmplt |
                                 biu_bmu_ibus_trans_cmplt    |
                                 acc_err_for_deny & ifu_bmu_wfd1;

assign bmu_xx_ibus_data_vld    = iahbl_bmu_ibus_data_vld  |
                                 dahbl_bmu_ibus_data_vld  |
                                 tcipif_bmu_ibus_data_vld |
                                 biu_bmu_ibus_data_vld;

assign iahbl_data_vld = iahbl_bmu_ibus_data_vld;
assign dahbl_data_vld = dahbl_bmu_ibus_data_vld;
assign biu_data_vld   = biu_bmu_ibus_data_vld;
assign tcipif_data_vld = tcipif_bmu_ibus_data_vld;

assign bmu_xx_ibus_data[31:0]  = ({32{iahbl_data_vld}}  & iahbl_bmu_ibus_data[31:0])  |
                                 ({32{dahbl_data_vld}}  & dahbl_bmu_ibus_data[31:0])  |
                                 ({32{tcipif_data_vld}} & tcipif_bmu_ibus_data[31:0]) |
                                 ({32{biu_data_vld}}    & biu_bmu_ibus_data[31:0]);



assign bmu_xx_ibus_acc_err     = iahbl_bmu_ibus_acc_err |
                                 dahbl_bmu_ibus_acc_err |
                                 tcipif_bmu_ibus_acc_err |
                                 biu_bmu_ibus_acc_err   |
                                 acc_err_for_deny & ifu_bmu_wfd1;


endmodule

























module nm_bmu_top(
  biu_bmu_dbus_acc_err,
  biu_bmu_dbus_data,
  biu_bmu_dbus_data_vld,
  biu_bmu_dbus_grnt,
  biu_bmu_dbus_trans_cmplt,
  biu_bmu_ibus_acc_err,
  biu_bmu_ibus_data,
  biu_bmu_ibus_data_vld,
  biu_bmu_ibus_grnt,
  biu_bmu_ibus_trans_cmplt,
  bmu_biu_dbus_acc_deny,
  bmu_biu_dbus_addr,
  bmu_biu_dbus_chk_fail,
  bmu_biu_dbus_prot,
  bmu_biu_dbus_req,
  bmu_biu_dbus_req_without_cmplt,
  bmu_biu_dbus_size,
  bmu_biu_dbus_wdata,
  bmu_biu_dbus_write,
  bmu_biu_ibus_acc_deny,
  bmu_biu_ibus_addr,
  bmu_biu_ibus_hit,
  bmu_biu_ibus_prot,
  bmu_biu_ibus_req,
  bmu_biu_ibus_req_no_hit,
  bmu_biu_ibus_size,
  bmu_biu_ibus_vec_redirect,
  bmu_iahbl_dbus_acc_deny,
  bmu_iahbl_dbus_addr,
  bmu_iahbl_dbus_chk_fail,
  bmu_iahbl_dbus_prot,
  bmu_iahbl_dbus_req,
  bmu_iahbl_dbus_req_without_cmplt,
  bmu_iahbl_dbus_size,
  bmu_iahbl_dbus_wdata,
  bmu_iahbl_dbus_write,
  bmu_iahbl_ibus_acc_deny,
  bmu_iahbl_ibus_addr,
  bmu_iahbl_ibus_hit,
  bmu_iahbl_ibus_prot,
  bmu_iahbl_ibus_req,
  bmu_iahbl_ibus_req_no_hit,
  bmu_iahbl_ibus_size,
  bmu_iahbl_ibus_vec_redirect,
  bmu_lsu_acc_err,
  bmu_lsu_bstack_chk_fail,
  bmu_lsu_data,
  bmu_lsu_data_vld,
  bmu_lsu_grnt,
  bmu_lsu_trans_cmplt,
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_chk_fail,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_write,
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data,
  bmu_xx_ibus_data_vld,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  forever_cpuclk,
  iahbl_bmu_dbus_acc_err,
  iahbl_bmu_dbus_data,
  iahbl_bmu_dbus_data_vld,
  iahbl_bmu_dbus_grnt,
  iahbl_bmu_dbus_trans_cmplt,
  iahbl_bmu_ibus_acc_err,
  iahbl_bmu_ibus_data,
  iahbl_bmu_ibus_data_vld,
  iahbl_bmu_ibus_grnt,
  iahbl_bmu_ibus_trans_cmplt,
  ifu_bmu_addr,
  ifu_bmu_idle,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_wfd1,
  iu_bmu_vec_redirect,
  lsu_bmu_addr,
  lsu_bmu_addr_check_fail,
  lsu_bmu_idle,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_without_cmplt,
  lsu_bmu_sg_chk_fail,
  lsu_bmu_size,
  lsu_bmu_store_error,
  lsu_bmu_wdata,
  lsu_bmu_wfd1,
  lsu_bmu_write,
  mpu_bmu_dbus_acc_deny,
  mpu_bmu_ibus_acc_deny,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_yy_gate_clk_en_b,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_data_vld,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_data_vld,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);


input           biu_bmu_dbus_acc_err;            
input   [31:0]  biu_bmu_dbus_data;               
input           biu_bmu_dbus_data_vld;           
input           biu_bmu_dbus_grnt;               
input           biu_bmu_dbus_trans_cmplt;        
input           biu_bmu_ibus_acc_err;            
input   [31:0]  biu_bmu_ibus_data;               
input           biu_bmu_ibus_data_vld;           
input           biu_bmu_ibus_grnt;               
input           biu_bmu_ibus_trans_cmplt;        
input           cp0_yy_clk_en;                   
input           cp0_yy_supv_mode_aft_dbg;        
input           cpurst_b;                        
input           forever_cpuclk;                  
input           iahbl_bmu_dbus_acc_err;          
input   [31:0]  iahbl_bmu_dbus_data;             
input           iahbl_bmu_dbus_data_vld;         
input           iahbl_bmu_dbus_grnt;             
input           iahbl_bmu_dbus_trans_cmplt;      
input           iahbl_bmu_ibus_acc_err;          
input   [31:0]  iahbl_bmu_ibus_data;             
input           iahbl_bmu_ibus_data_vld;         
input           iahbl_bmu_ibus_grnt;             
input           iahbl_bmu_ibus_trans_cmplt;      
input   [31:0]  ifu_bmu_addr;                    
input           ifu_bmu_idle;                    
input   [3 :0]  ifu_bmu_prot;                    
input           ifu_bmu_req;                     
input           ifu_bmu_wfd1;                    
input           iu_bmu_vec_redirect;             
input   [31:0]  lsu_bmu_addr;                    
input           lsu_bmu_addr_check_fail;         
input           lsu_bmu_idle;                    
input   [3 :0]  lsu_bmu_prot;                    
input           lsu_bmu_req;                     
input           lsu_bmu_req_without_cmplt;       
input           lsu_bmu_sg_chk_fail;             
input   [1 :0]  lsu_bmu_size;                    
input           lsu_bmu_store_error;             
input   [31:0]  lsu_bmu_wdata;                   
input           lsu_bmu_wfd1;                    
input           lsu_bmu_write;                   
input           mpu_bmu_dbus_acc_deny;           
input           mpu_bmu_ibus_acc_deny;           
input   [11:0]  pad_bmu_iahbl_base;              
input   [11:0]  pad_bmu_iahbl_mask;              
input           pad_yy_gate_clk_en_b;            
input           tcipif_bmu_dbus_acc_err;         
input   [31:0]  tcipif_bmu_dbus_data;            
input           tcipif_bmu_dbus_data_vld;        
input           tcipif_bmu_dbus_grnt;            
input           tcipif_bmu_dbus_trans_cmplt;     
input           tcipif_bmu_ibus_acc_err;         
input   [31:0]  tcipif_bmu_ibus_data;            
input           tcipif_bmu_ibus_data_vld;        
input           tcipif_bmu_ibus_grnt;            
input           tcipif_bmu_ibus_trans_cmplt;     
output          bmu_biu_dbus_acc_deny;           
output  [31:0]  bmu_biu_dbus_addr;               
output          bmu_biu_dbus_chk_fail;           
output  [3 :0]  bmu_biu_dbus_prot;               
output          bmu_biu_dbus_req;                
output          bmu_biu_dbus_req_without_cmplt;  
output  [1 :0]  bmu_biu_dbus_size;               
output  [31:0]  bmu_biu_dbus_wdata;              
output          bmu_biu_dbus_write;              
output          bmu_biu_ibus_acc_deny;           
output  [31:0]  bmu_biu_ibus_addr;               
output          bmu_biu_ibus_hit;                
output  [3 :0]  bmu_biu_ibus_prot;               
output          bmu_biu_ibus_req;                
output          bmu_biu_ibus_req_no_hit;         
output  [1 :0]  bmu_biu_ibus_size;               
output          bmu_biu_ibus_vec_redirect;       
output          bmu_iahbl_dbus_acc_deny;         
output  [31:0]  bmu_iahbl_dbus_addr;             
output          bmu_iahbl_dbus_chk_fail;         
output  [3 :0]  bmu_iahbl_dbus_prot;             
output          bmu_iahbl_dbus_req;              
output          bmu_iahbl_dbus_req_without_cmplt; 
output  [1 :0]  bmu_iahbl_dbus_size;             
output  [31:0]  bmu_iahbl_dbus_wdata;            
output          bmu_iahbl_dbus_write;            
output          bmu_iahbl_ibus_acc_deny;         
output  [31:0]  bmu_iahbl_ibus_addr;             
output          bmu_iahbl_ibus_hit;              
output  [3 :0]  bmu_iahbl_ibus_prot;             
output          bmu_iahbl_ibus_req;              
output          bmu_iahbl_ibus_req_no_hit;       
output  [1 :0]  bmu_iahbl_ibus_size;             
output          bmu_iahbl_ibus_vec_redirect;     
output          bmu_lsu_acc_err;                 
output          bmu_lsu_bstack_chk_fail;         
output  [31:0]  bmu_lsu_data;                    
output          bmu_lsu_data_vld;                
output          bmu_lsu_grnt;                    
output          bmu_lsu_trans_cmplt;             
output          bmu_tcipif_dbus_acc_deny;        
output  [31:0]  bmu_tcipif_dbus_addr;            
output          bmu_tcipif_dbus_chk_fail;        
output          bmu_tcipif_dbus_req;             
output          bmu_tcipif_dbus_supv_mode;       
output  [31:0]  bmu_tcipif_dbus_wdata;           
output          bmu_tcipif_dbus_write;           
output          bmu_tcipif_ibus_acc_deny;        
output  [31:0]  bmu_tcipif_ibus_addr;            
output          bmu_tcipif_ibus_req;             
output          bmu_tcipif_ibus_write;           
output          bmu_xx_ibus_acc_err;             
output  [31:0]  bmu_xx_ibus_data;                
output          bmu_xx_ibus_data_vld;            
output          bmu_xx_ibus_grnt;                
output          bmu_xx_ibus_trans_cmplt;         




wire            biu_bmu_dbus_acc_err;            
wire    [31:0]  biu_bmu_dbus_data;               
wire            biu_bmu_dbus_data_vld;           
wire            biu_bmu_dbus_grnt;               
wire            biu_bmu_dbus_trans_cmplt;        
wire            biu_bmu_ibus_acc_err;            
wire    [31:0]  biu_bmu_ibus_data;               
wire            biu_bmu_ibus_data_vld;           
wire            biu_bmu_ibus_grnt;               
wire            biu_bmu_ibus_trans_cmplt;        
wire            bmu_biu_dbus_acc_deny;           
wire    [31:0]  bmu_biu_dbus_addr;               
wire            bmu_biu_dbus_chk_fail;           
wire    [3 :0]  bmu_biu_dbus_prot;               
wire            bmu_biu_dbus_req;                
wire            bmu_biu_dbus_req_without_cmplt;  
wire    [1 :0]  bmu_biu_dbus_size;               
wire    [31:0]  bmu_biu_dbus_wdata;              
wire            bmu_biu_dbus_write;              
wire            bmu_biu_ibus_acc_deny;           
wire    [31:0]  bmu_biu_ibus_addr;               
wire            bmu_biu_ibus_hit;                
wire    [3 :0]  bmu_biu_ibus_prot;               
wire            bmu_biu_ibus_req;                
wire            bmu_biu_ibus_req_no_hit;         
wire    [1 :0]  bmu_biu_ibus_size;               
wire            bmu_biu_ibus_vec_redirect;       
wire            bmu_iahbl_dbus_acc_deny;         
wire    [31:0]  bmu_iahbl_dbus_addr;             
wire            bmu_iahbl_dbus_chk_fail;         
wire    [3 :0]  bmu_iahbl_dbus_prot;             
wire            bmu_iahbl_dbus_req;              
wire            bmu_iahbl_dbus_req_without_cmplt; 
wire    [1 :0]  bmu_iahbl_dbus_size;             
wire    [31:0]  bmu_iahbl_dbus_wdata;            
wire            bmu_iahbl_dbus_write;            
wire            bmu_iahbl_ibus_acc_deny;         
wire    [31:0]  bmu_iahbl_ibus_addr;             
wire            bmu_iahbl_ibus_hit;              
wire    [3 :0]  bmu_iahbl_ibus_prot;             
wire            bmu_iahbl_ibus_req;              
wire            bmu_iahbl_ibus_req_no_hit;       
wire    [1 :0]  bmu_iahbl_ibus_size;             
wire            bmu_iahbl_ibus_vec_redirect;     
wire            bmu_lsu_acc_err;                 
wire            bmu_lsu_bstack_chk_fail;         
wire    [31:0]  bmu_lsu_data;                    
wire            bmu_lsu_data_vld;                
wire            bmu_lsu_grnt;                    
wire            bmu_lsu_trans_cmplt;             
wire            bmu_tcipif_dbus_acc_deny;        
wire    [31:0]  bmu_tcipif_dbus_addr;            
wire            bmu_tcipif_dbus_chk_fail;        
wire            bmu_tcipif_dbus_req;             
wire            bmu_tcipif_dbus_supv_mode;       
wire    [31:0]  bmu_tcipif_dbus_wdata;           
wire            bmu_tcipif_dbus_write;           
wire            bmu_tcipif_ibus_acc_deny;        
wire    [31:0]  bmu_tcipif_ibus_addr;            
wire            bmu_tcipif_ibus_req;             
wire            bmu_tcipif_ibus_write;           
wire            bmu_xx_ibus_acc_err;             
wire    [31:0]  bmu_xx_ibus_data;                
wire            bmu_xx_ibus_data_vld;            
wire            bmu_xx_ibus_grnt;                
wire            bmu_xx_ibus_trans_cmplt;         
wire            cp0_yy_clk_en;                   
wire            cp0_yy_supv_mode_aft_dbg;        
wire            cpurst_b;                        
wire            dbus_deny_clk_en;                
wire            deny_clk;                        
wire            deny_en;                         
wire            forever_cpuclk;                  
wire            iahbl_bmu_dbus_acc_err;          
wire    [31:0]  iahbl_bmu_dbus_data;             
wire            iahbl_bmu_dbus_data_vld;         
wire            iahbl_bmu_dbus_grnt;             
wire            iahbl_bmu_dbus_trans_cmplt;      
wire            iahbl_bmu_ibus_acc_err;          
wire    [31:0]  iahbl_bmu_ibus_data;             
wire            iahbl_bmu_ibus_data_vld;         
wire            iahbl_bmu_ibus_grnt;             
wire            iahbl_bmu_ibus_trans_cmplt;      
wire            ibus_deny_clk_en;                
wire    [31:0]  ifu_bmu_addr;                    
wire            ifu_bmu_idle;                    
wire    [3 :0]  ifu_bmu_prot;                    
wire            ifu_bmu_req;                     
wire            ifu_bmu_wfd1;                    
wire            iu_bmu_vec_redirect;             
wire    [31:0]  lsu_bmu_addr;                    
wire            lsu_bmu_addr_check_fail;         
wire            lsu_bmu_idle;                    
wire    [3 :0]  lsu_bmu_prot;                    
wire            lsu_bmu_req;                     
wire            lsu_bmu_req_without_cmplt;       
wire            lsu_bmu_sg_chk_fail;             
wire    [1 :0]  lsu_bmu_size;                    
wire            lsu_bmu_store_error;             
wire    [31:0]  lsu_bmu_wdata;                   
wire            lsu_bmu_wfd1;                    
wire            lsu_bmu_write;                   
wire            mpu_bmu_dbus_acc_deny;           
wire            mpu_bmu_ibus_acc_deny;           
wire    [11:0]  pad_bmu_iahbl_base;              
wire    [11:0]  pad_bmu_iahbl_mask;              
wire            pad_yy_gate_clk_en_b;            
wire            tcipif_bmu_dbus_acc_err;         
wire    [31:0]  tcipif_bmu_dbus_data;            
wire            tcipif_bmu_dbus_data_vld;        
wire            tcipif_bmu_dbus_grnt;            
wire            tcipif_bmu_dbus_trans_cmplt;     
wire            tcipif_bmu_ibus_acc_err;         
wire    [31:0]  tcipif_bmu_ibus_data;            
wire            tcipif_bmu_ibus_data_vld;        
wire            tcipif_bmu_ibus_grnt;            
wire            tcipif_bmu_ibus_trans_cmplt;     






assign deny_en = ibus_deny_clk_en || dbus_deny_clk_en;

gated_clk_cell  x_deny_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (deny_clk            ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (deny_en             ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);




































nm_bmu_dbus_if  x_nm_bmu_dbus_if (
  .biu_bmu_dbus_acc_err             (biu_bmu_dbus_acc_err            ),
  .biu_bmu_dbus_data                (biu_bmu_dbus_data               ),
  .biu_bmu_dbus_data_vld            (biu_bmu_dbus_data_vld           ),
  .biu_bmu_dbus_grnt                (biu_bmu_dbus_grnt               ),
  .biu_bmu_dbus_trans_cmplt         (biu_bmu_dbus_trans_cmplt        ),
  .bmu_biu_dbus_acc_deny            (bmu_biu_dbus_acc_deny           ),
  .bmu_biu_dbus_addr                (bmu_biu_dbus_addr               ),
  .bmu_biu_dbus_chk_fail            (bmu_biu_dbus_chk_fail           ),
  .bmu_biu_dbus_prot                (bmu_biu_dbus_prot               ),
  .bmu_biu_dbus_req                 (bmu_biu_dbus_req                ),
  .bmu_biu_dbus_req_without_cmplt   (bmu_biu_dbus_req_without_cmplt  ),
  .bmu_biu_dbus_size                (bmu_biu_dbus_size               ),
  .bmu_biu_dbus_wdata               (bmu_biu_dbus_wdata              ),
  .bmu_biu_dbus_write               (bmu_biu_dbus_write              ),
  .bmu_iahbl_dbus_acc_deny          (bmu_iahbl_dbus_acc_deny         ),
  .bmu_iahbl_dbus_addr              (bmu_iahbl_dbus_addr             ),
  .bmu_iahbl_dbus_chk_fail          (bmu_iahbl_dbus_chk_fail         ),
  .bmu_iahbl_dbus_prot              (bmu_iahbl_dbus_prot             ),
  .bmu_iahbl_dbus_req               (bmu_iahbl_dbus_req              ),
  .bmu_iahbl_dbus_req_without_cmplt (bmu_iahbl_dbus_req_without_cmplt),
  .bmu_iahbl_dbus_size              (bmu_iahbl_dbus_size             ),
  .bmu_iahbl_dbus_wdata             (bmu_iahbl_dbus_wdata            ),
  .bmu_iahbl_dbus_write             (bmu_iahbl_dbus_write            ),
  .bmu_lsu_acc_err                  (bmu_lsu_acc_err                 ),
  .bmu_lsu_bstack_chk_fail          (bmu_lsu_bstack_chk_fail         ),
  .bmu_lsu_data                     (bmu_lsu_data                    ),
  .bmu_lsu_data_vld                 (bmu_lsu_data_vld                ),
  .bmu_lsu_grnt                     (bmu_lsu_grnt                    ),
  .bmu_lsu_trans_cmplt              (bmu_lsu_trans_cmplt             ),
  .bmu_tcipif_dbus_acc_deny         (bmu_tcipif_dbus_acc_deny        ),
  .bmu_tcipif_dbus_addr             (bmu_tcipif_dbus_addr            ),
  .bmu_tcipif_dbus_chk_fail         (bmu_tcipif_dbus_chk_fail        ),
  .bmu_tcipif_dbus_req              (bmu_tcipif_dbus_req             ),
  .bmu_tcipif_dbus_supv_mode        (bmu_tcipif_dbus_supv_mode       ),
  .bmu_tcipif_dbus_wdata            (bmu_tcipif_dbus_wdata           ),
  .bmu_tcipif_dbus_write            (bmu_tcipif_dbus_write           ),
  .cp0_yy_supv_mode_aft_dbg         (cp0_yy_supv_mode_aft_dbg        ),
  .cpurst_b                         (cpurst_b                        ),
  .dbus_deny_clk_en                 (dbus_deny_clk_en                ),
  .deny_clk                         (deny_clk                        ),
  .iahbl_bmu_dbus_acc_err           (iahbl_bmu_dbus_acc_err          ),
  .iahbl_bmu_dbus_data              (iahbl_bmu_dbus_data             ),
  .iahbl_bmu_dbus_data_vld          (iahbl_bmu_dbus_data_vld         ),
  .iahbl_bmu_dbus_grnt              (iahbl_bmu_dbus_grnt             ),
  .iahbl_bmu_dbus_trans_cmplt       (iahbl_bmu_dbus_trans_cmplt      ),
  .lsu_bmu_addr                     (lsu_bmu_addr                    ),
  .lsu_bmu_addr_check_fail          (lsu_bmu_addr_check_fail         ),
  .lsu_bmu_idle                     (lsu_bmu_idle                    ),
  .lsu_bmu_prot                     (lsu_bmu_prot                    ),
  .lsu_bmu_req                      (lsu_bmu_req                     ),
  .lsu_bmu_req_without_cmplt        (lsu_bmu_req_without_cmplt       ),
  .lsu_bmu_sg_chk_fail              (lsu_bmu_sg_chk_fail             ),
  .lsu_bmu_size                     (lsu_bmu_size                    ),
  .lsu_bmu_store_error              (lsu_bmu_store_error             ),
  .lsu_bmu_wdata                    (lsu_bmu_wdata                   ),
  .lsu_bmu_wfd1                     (lsu_bmu_wfd1                    ),
  .lsu_bmu_write                    (lsu_bmu_write                   ),
  .mpu_bmu_dbus_acc_deny            (mpu_bmu_dbus_acc_deny           ),
  .pad_bmu_iahbl_base               (pad_bmu_iahbl_base              ),
  .pad_bmu_iahbl_mask               (pad_bmu_iahbl_mask              ),
  .tcipif_bmu_dbus_acc_err          (tcipif_bmu_dbus_acc_err         ),
  .tcipif_bmu_dbus_data             (tcipif_bmu_dbus_data            ),
  .tcipif_bmu_dbus_data_vld         (tcipif_bmu_dbus_data_vld        ),
  .tcipif_bmu_dbus_grnt             (tcipif_bmu_dbus_grnt            ),
  .tcipif_bmu_dbus_trans_cmplt      (tcipif_bmu_dbus_trans_cmplt     )
);







nm_bmu_ibus_if  x_nm_bmu_ibus_if (
  .biu_bmu_ibus_acc_err        (biu_bmu_ibus_acc_err       ),
  .biu_bmu_ibus_data           (biu_bmu_ibus_data          ),
  .biu_bmu_ibus_data_vld       (biu_bmu_ibus_data_vld      ),
  .biu_bmu_ibus_grnt           (biu_bmu_ibus_grnt          ),
  .biu_bmu_ibus_trans_cmplt    (biu_bmu_ibus_trans_cmplt   ),
  .bmu_biu_ibus_acc_deny       (bmu_biu_ibus_acc_deny      ),
  .bmu_biu_ibus_addr           (bmu_biu_ibus_addr          ),
  .bmu_biu_ibus_hit            (bmu_biu_ibus_hit           ),
  .bmu_biu_ibus_prot           (bmu_biu_ibus_prot          ),
  .bmu_biu_ibus_req            (bmu_biu_ibus_req           ),
  .bmu_biu_ibus_req_no_hit     (bmu_biu_ibus_req_no_hit    ),
  .bmu_biu_ibus_size           (bmu_biu_ibus_size          ),
  .bmu_biu_ibus_vec_redirect   (bmu_biu_ibus_vec_redirect  ),
  .bmu_iahbl_ibus_acc_deny     (bmu_iahbl_ibus_acc_deny    ),
  .bmu_iahbl_ibus_addr         (bmu_iahbl_ibus_addr        ),
  .bmu_iahbl_ibus_hit          (bmu_iahbl_ibus_hit         ),
  .bmu_iahbl_ibus_prot         (bmu_iahbl_ibus_prot        ),
  .bmu_iahbl_ibus_req          (bmu_iahbl_ibus_req         ),
  .bmu_iahbl_ibus_req_no_hit   (bmu_iahbl_ibus_req_no_hit  ),
  .bmu_iahbl_ibus_size         (bmu_iahbl_ibus_size        ),
  .bmu_iahbl_ibus_vec_redirect (bmu_iahbl_ibus_vec_redirect),
  .bmu_tcipif_ibus_acc_deny    (bmu_tcipif_ibus_acc_deny   ),
  .bmu_tcipif_ibus_addr        (bmu_tcipif_ibus_addr       ),
  .bmu_tcipif_ibus_req         (bmu_tcipif_ibus_req        ),
  .bmu_tcipif_ibus_write       (bmu_tcipif_ibus_write      ),
  .bmu_xx_ibus_acc_err         (bmu_xx_ibus_acc_err        ),
  .bmu_xx_ibus_data            (bmu_xx_ibus_data           ),
  .bmu_xx_ibus_data_vld        (bmu_xx_ibus_data_vld       ),
  .bmu_xx_ibus_grnt            (bmu_xx_ibus_grnt           ),
  .bmu_xx_ibus_trans_cmplt     (bmu_xx_ibus_trans_cmplt    ),
  .cpurst_b                    (cpurst_b                   ),
  .deny_clk                    (deny_clk                   ),
  .iahbl_bmu_ibus_acc_err      (iahbl_bmu_ibus_acc_err     ),
  .iahbl_bmu_ibus_data         (iahbl_bmu_ibus_data        ),
  .iahbl_bmu_ibus_data_vld     (iahbl_bmu_ibus_data_vld    ),
  .iahbl_bmu_ibus_grnt         (iahbl_bmu_ibus_grnt        ),
  .iahbl_bmu_ibus_trans_cmplt  (iahbl_bmu_ibus_trans_cmplt ),
  .ibus_deny_clk_en            (ibus_deny_clk_en           ),
  .ifu_bmu_addr                (ifu_bmu_addr               ),
  .ifu_bmu_idle                (ifu_bmu_idle               ),
  .ifu_bmu_prot                (ifu_bmu_prot               ),
  .ifu_bmu_req                 (ifu_bmu_req                ),
  .ifu_bmu_wfd1                (ifu_bmu_wfd1               ),
  .iu_bmu_vec_redirect         (iu_bmu_vec_redirect        ),
  .mpu_bmu_ibus_acc_deny       (mpu_bmu_ibus_acc_deny      ),
  .pad_bmu_iahbl_base          (pad_bmu_iahbl_base         ),
  .pad_bmu_iahbl_mask          (pad_bmu_iahbl_mask         ),
  .tcipif_bmu_ibus_acc_err     (tcipif_bmu_ibus_acc_err    ),
  .tcipif_bmu_ibus_data        (tcipif_bmu_ibus_data       ),
  .tcipif_bmu_ibus_data_vld    (tcipif_bmu_ibus_data_vld   ),
  .tcipif_bmu_ibus_grnt        (tcipif_bmu_ibus_grnt       ),
  .tcipif_bmu_ibus_trans_cmplt (tcipif_bmu_ibus_trans_cmplt)
);












endmodule


























module nm_clk_top(
  forever_cpuclk,
  forever_cpuclk_nogated,
  forever_jtgclk,
  pad_had_jtg_tclk,
  pad_yy_test_mode,
  pll_core_cpuclk
);


input        pad_had_jtg_tclk;      
input        pad_yy_test_mode;      
input        pll_core_cpuclk;       
output       forever_cpuclk;        
output       forever_cpuclk_nogated; 
output       forever_jtgclk;        




wire         forever_cpuclk;        
wire         forever_cpuclk_nogated; 
wire         forever_jtgclk;        
wire         pad_had_jtg_tclk;      
wire         pad_yy_test_mode;      
wire         pll_core_cpuclk;       


assign forever_jtgclk = pad_had_jtg_tclk;
assign forever_cpuclk = pad_yy_test_mode ? pad_had_jtg_tclk : pll_core_cpuclk;
assign forever_cpuclk_nogated = pad_yy_test_mode ? pad_had_jtg_tclk : pll_core_cpuclk;


endmodule
























module nm_clkrst_top(
  cpurst_b,
  forever_cpuclk,
  forever_cpuclk_nogated,
  forever_jtgclk,
  hadrst_b,
  pad_cpu_rst_b,
  pad_had_jtg_tclk,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_yy_test_mode,
  pll_core_cpuclk,
  trst_b
);


input        pad_cpu_rst_b;         
input        pad_had_jtg_tclk;      
input        pad_had_jtg_trst_b;    
input        pad_had_rst_b;         
input        pad_yy_test_mode;      
input        pll_core_cpuclk;       
output       cpurst_b;              
output       forever_cpuclk;        
output       forever_cpuclk_nogated; 
output       forever_jtgclk;        
output       hadrst_b;              
output       trst_b;                




wire         cpurst_b;              
wire         forever_cpuclk;        
wire         forever_cpuclk_nogated; 
wire         forever_jtgclk;        
wire         hadrst_b;              
wire         pad_cpu_rst_b;         
wire         pad_had_jtg_tclk;      
wire         pad_had_jtg_trst_b;    
wire         pad_had_rst_b;         
wire         pad_yy_test_mode;      
wire         pll_core_cpuclk;       
wire         trst_b;                









nm_clk_top  x_nm_clk_top (
  .forever_cpuclk         (forever_cpuclk        ),
  .forever_cpuclk_nogated (forever_cpuclk_nogated),
  .forever_jtgclk         (forever_jtgclk        ),
  .pad_had_jtg_tclk       (pad_had_jtg_tclk      ),
  .pad_yy_test_mode       (pad_yy_test_mode      ),
  .pll_core_cpuclk        (pll_core_cpuclk       )
);






nm_rst_top  x_nm_rst_top (
  .cpurst_b           (cpurst_b          ),
  .hadrst_b           (hadrst_b          ),
  .pad_cpu_rst_b      (pad_cpu_rst_b     ),
  .pad_had_jtg_trst_b (pad_had_jtg_trst_b),
  .pad_had_rst_b      (pad_had_rst_b     ),
  .pad_yy_test_mode   (pad_yy_test_mode  ),
  .trst_b             (trst_b            )
);


endmodule



























module nm_core(
  bmu_lsu_acc_err,
  bmu_lsu_bstack_chk_fail,
  bmu_lsu_data,
  bmu_lsu_data_vld,
  bmu_lsu_grnt,
  bmu_lsu_trans_cmplt,
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data,
  bmu_xx_ibus_data_vld,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cache_cp0_lpmd_ack,
  cp0_cache_lpmd_req,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_psr_data,
  cp0_had_spsr_data,
  cp0_mpu_capr_sel,
  cp0_mpu_en,
  cp0_mpu_pacr_sel,
  cp0_mpu_rid_sel,
  cp0_mpu_soft_reset,
  cp0_mpu_updt_capr,
  cp0_mpu_updt_data,
  cp0_mpu_updt_pacr,
  cp0_mpu_updt_rid,
  cp0_pad_psr,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_yy_be_v2,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpu_intc_ack_vec,
  cpu_intc_int_ack,
  cpu_intc_int_exit,
  cpu_intc_int_vec,
  cpurst_b,
  forever_cpuclk,
  had_core_dbg_mode_req,
  had_cp0_psr_data,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_inst_bkpt_dbq_req,
  had_ifu_inst_bkpt_dbqexp_req,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_iu_bkpt_trace_en,
  had_iu_dr_set_req,
  had_iu_flush_mbee,
  had_iu_force_dbg_en,
  had_iu_int_vld,
  had_iu_mbkpt_fsm_index_mbee,
  had_iu_mem_bkpt_exp_req,
  had_iu_mem_bkpt_mask,
  had_iu_mem_bkpt_req,
  had_iu_pc,
  had_iu_rte_pc_sel,
  had_iu_trace_req,
  had_iu_trace_req_for_dbg_disable,
  had_iu_xx_fdb,
  had_iu_xx_jdbreq,
  had_yy_xx_dbg,
  had_yy_xx_dp_index_mbee,
  had_yy_xx_exit_dbg,
  idly_counter_eq_zero,
  ifu_bmu_addr,
  ifu_bmu_idle,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_wfd1,
  ifu_had_chg_flw_inst,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  intc_cpu_int_b,
  intc_cpu_intraw_b,
  intc_cpu_vec_b,
  iu_bmu_vec_redirect,
  iu_had_adr_dbg_ack,
  iu_had_data_bkpt_occur_vld,
  iu_had_dbg_disable_for_tee,
  iu_had_dr_dbg_ack,
  iu_had_expt_vld,
  iu_had_fast_retire_acc_err_pc_update,
  iu_had_fast_retire_acc_err_pc_val,
  iu_had_flush,
  iu_had_inst_bkpt_occur_vld,
  iu_had_int_ack,
  iu_had_retire_with_had_int,
  iu_had_trace_occur_vld,
  iu_had_xx_bkpt_inst,
  iu_had_xx_data,
  iu_had_xx_data_vld,
  iu_had_xx_dbg_ack,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_had_xx_retire_pc,
  iu_pad_gpr_data,
  iu_pad_gpr_index,
  iu_pad_gpr_we,
  iu_pad_inst_retire,
  iu_pad_inst_split,
  iu_pad_retire_pc,
  iu_sysyio_soft_rst,
  iu_yy_xx_dbgon,
  lsu_bmu_addr,
  lsu_bmu_addr_check_fail,
  lsu_bmu_idle,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_without_cmplt,
  lsu_bmu_sg_chk_fail,
  lsu_bmu_size,
  lsu_bmu_store_error,
  lsu_bmu_wdata,
  lsu_bmu_wfd1,
  lsu_bmu_write,
  lsu_had_addr,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  lsu_had_st,
  mpu_cp0_data,
  mpu_ifu_acc_scu,
  mpu_lsu_acc_scu,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_avrg_power_inst_issue,
  pwrm_cpu_inst_peak_power_limit_en,
  pwrm_cpu_peak_power_limit_en,
  sysio_cp0_bigend,
  sysio_cp0_clkratio,
  sysio_cp0_endian_v2,
  sysio_cp0_sys_view_lpmd_b
);


input           bmu_lsu_acc_err;                      
input           bmu_lsu_bstack_chk_fail;              
input   [31:0]  bmu_lsu_data;                         
input           bmu_lsu_data_vld;                     
input           bmu_lsu_grnt;                         
input           bmu_lsu_trans_cmplt;                  
input           bmu_xx_ibus_acc_err;                  
input   [31:0]  bmu_xx_ibus_data;                     
input           bmu_xx_ibus_data_vld;                 
input           bmu_xx_ibus_grnt;                     
input           bmu_xx_ibus_trans_cmplt;              
input           cache_cp0_lpmd_ack;                   
input           cpurst_b;                             
input           forever_cpuclk;                       
input           had_core_dbg_mode_req;                
input   [31:0]  had_cp0_psr_data;                     
input   [31:0]  had_idu_wbbr_data;                    
input           had_idu_wbbr_vld;                     
input           had_ifu_inst_bkpt_dbq_req;            
input           had_ifu_inst_bkpt_dbqexp_req;         
input   [31:0]  had_ifu_ir;                           
input           had_ifu_ir_vld;                       
input           had_iu_bkpt_trace_en;                 
input           had_iu_dr_set_req;                    
input           had_iu_flush_mbee;                    
input           had_iu_force_dbg_en;                  
input           had_iu_int_vld;                       
input           had_iu_mbkpt_fsm_index_mbee;          
input           had_iu_mem_bkpt_exp_req;              
input           had_iu_mem_bkpt_mask;                 
input           had_iu_mem_bkpt_req;                  
input   [30:0]  had_iu_pc;                            
input           had_iu_rte_pc_sel;                    
input           had_iu_trace_req;                     
input           had_iu_trace_req_for_dbg_disable;     
input           had_iu_xx_fdb;                        
input           had_iu_xx_jdbreq;                     
input           had_yy_xx_dbg;                        
input           had_yy_xx_dp_index_mbee;              
input           had_yy_xx_exit_dbg;                   
input           intc_cpu_int_b;                       
input           intc_cpu_intraw_b;                    
input   [7 :0]  intc_cpu_vec_b;                       
input   [31:0]  mpu_cp0_data;                         
input           mpu_ifu_acc_scu;                      
input           mpu_lsu_acc_scu;                      
input           pad_yy_gate_clk_en_b;                 
input           pwrm_cpu_avrg_power_inst_issue;       
input           pwrm_cpu_inst_peak_power_limit_en;    
input           pwrm_cpu_peak_power_limit_en;         
input           sysio_cp0_bigend;                     
input   [2 :0]  sysio_cp0_clkratio;                   
input           sysio_cp0_endian_v2;                  
input   [1 :0]  sysio_cp0_sys_view_lpmd_b;            
output          cp0_cache_lpmd_req;                   
output  [31:0]  cp0_had_cpuid_idx0;                   
output  [1 :0]  cp0_had_lpmd_b;                       
output  [31:0]  cp0_had_psr_data;                     
output  [31:0]  cp0_had_spsr_data;                    
output          cp0_mpu_capr_sel;                     
output          cp0_mpu_en;                           
output          cp0_mpu_pacr_sel;                     
output          cp0_mpu_rid_sel;                      
output          cp0_mpu_soft_reset;                   
output          cp0_mpu_updt_capr;                    
output  [31:0]  cp0_mpu_updt_data;                    
output          cp0_mpu_updt_pacr;                    
output          cp0_mpu_updt_rid;                     
output  [31:0]  cp0_pad_psr;                          
output          cp0_sysio_ipend_b;                    
output  [1 :0]  cp0_sysio_lpmd_b;                     
output          cp0_yy_be_v2;                         
output          cp0_yy_clk_en;                        
output          cp0_yy_supv_mode_aft_dbg;             
output  [7 :0]  cpu_intc_ack_vec;                     
output          cpu_intc_int_ack;                     
output          cpu_intc_int_exit;                    
output  [7 :0]  cpu_intc_int_vec;                     
output          idly_counter_eq_zero;                 
output  [31:0]  ifu_bmu_addr;                         
output          ifu_bmu_idle;                         
output  [3 :0]  ifu_bmu_prot;                         
output          ifu_bmu_req;                          
output          ifu_bmu_wfd1;                         
output          ifu_had_chg_flw_inst;                 
output          ifu_had_fetch_expt_vld;               
output          ifu_had_inst_dbg_disable;             
output  [31:0]  ifu_had_match_pc;                     
output          ifu_had_split_first;                  
output          iu_bmu_vec_redirect;                  
output          iu_had_adr_dbg_ack;                   
output          iu_had_data_bkpt_occur_vld;           
output          iu_had_dbg_disable_for_tee;           
output          iu_had_dr_dbg_ack;                    
output          iu_had_expt_vld;                      
output          iu_had_fast_retire_acc_err_pc_update; 
output  [30:0]  iu_had_fast_retire_acc_err_pc_val;    
output          iu_had_flush;                         
output          iu_had_inst_bkpt_occur_vld;           
output          iu_had_int_ack;                       
output          iu_had_retire_with_had_int;           
output          iu_had_trace_occur_vld;               
output          iu_had_xx_bkpt_inst;                  
output  [31:0]  iu_had_xx_data;                       
output          iu_had_xx_data_vld;                   
output          iu_had_xx_dbg_ack;                    
output          iu_had_xx_mldst;                      
output          iu_had_xx_retire;                     
output          iu_had_xx_retire_normal;              
output  [31:0]  iu_had_xx_retire_pc;                  
output  [31:0]  iu_pad_gpr_data;                      
output  [4 :0]  iu_pad_gpr_index;                     
output          iu_pad_gpr_we;                        
output          iu_pad_inst_retire;                   
output          iu_pad_inst_split;                    
output  [31:0]  iu_pad_retire_pc;                     
output          iu_sysyio_soft_rst;                   
output          iu_yy_xx_dbgon;                       
output  [31:0]  lsu_bmu_addr;                         
output          lsu_bmu_addr_check_fail;              
output          lsu_bmu_idle;                         
output  [3 :0]  lsu_bmu_prot;                         
output          lsu_bmu_req;                          
output          lsu_bmu_req_without_cmplt;            
output          lsu_bmu_sg_chk_fail;                  
output  [1 :0]  lsu_bmu_size;                         
output          lsu_bmu_store_error;                  
output  [31:0]  lsu_bmu_wdata;                        
output          lsu_bmu_wfd1;                         
output          lsu_bmu_write;                        
output  [31:0]  lsu_had_addr;                         
output          lsu_had_addr_vld;                     
output          lsu_had_ex_cmplt;                     
output          lsu_had_st;                           




wire            bmu_lsu_acc_err;                      
wire            bmu_lsu_bstack_chk_fail;              
wire    [31:0]  bmu_lsu_data;                         
wire            bmu_lsu_data_vld;                     
wire            bmu_lsu_grnt;                         
wire            bmu_lsu_trans_cmplt;                  
wire            bmu_xx_ibus_acc_err;                  
wire    [31:0]  bmu_xx_ibus_data;                     
wire            bmu_xx_ibus_data_vld;                 
wire            bmu_xx_ibus_grnt;                     
wire            bmu_xx_ibus_trans_cmplt;              
wire            cache_cp0_lpmd_ack;                   
wire            cp0_cache_lpmd_req;                   
wire    [31:0]  cp0_had_cpuid_idx0;                   
wire    [1 :0]  cp0_had_lpmd_b;                       
wire    [31:0]  cp0_had_psr_data;                     
wire    [31:0]  cp0_had_spsr_data;                    
wire            cp0_ifu_c;                            
wire            cp0_ifu_ee;                           
wire            cp0_ifu_in_lpmd;                      
wire            cp0_ifu_lpmd_req;                     
wire    [31:0]  cp0_iu_data;                          
wire            cp0_iu_data_vld;                      
wire            cp0_iu_dbg_disable_for_tee;           
wire            cp0_iu_ee;                            
wire            cp0_iu_ee_for_int;                    
wire    [31:0]  cp0_iu_epc;                           
wire    [30:0]  cp0_iu_epc_for_chgflw;                
wire    [31:0]  cp0_iu_epsr;                          
wire    [4 :0]  cp0_iu_expt_vec;                      
wire            cp0_iu_expt_vld;                      
wire            cp0_iu_flush;                         
wire            cp0_iu_flush_chgflw_vld;              
wire            cp0_iu_ic;                            
wire            cp0_iu_idly_counter_clear;            
wire            cp0_iu_ie_for_int;                    
wire            cp0_iu_int_spcu_en;                   
wire            cp0_iu_intsp_we;                      
wire    [31:0]  cp0_iu_reg_write_data;                
wire            cp0_iu_req;                           
wire            cp0_iu_rte_chgflw_vld;                
wire            cp0_iu_rte_chgflw_vld_for_data;       
wire            cp0_iu_src_c;                         
wire            cp0_iu_stall;                         
wire            cp0_iu_user_reg14_we;                 
wire    [21:0]  cp0_iu_vbr;                           
wire    [7 :0]  cp0_iu_vec;                           
wire            cp0_lsu_mm;                           
wire    [31:0]  cp0_lsu_sgbr;                         
wire            cp0_lsu_sge;                          
wire            cp0_lsu_sgp;                          
wire    [31:0]  cp0_lsu_sgtr;                         
wire            cp0_mpu_capr_sel;                     
wire            cp0_mpu_en;                           
wire            cp0_mpu_pacr_sel;                     
wire            cp0_mpu_rid_sel;                      
wire            cp0_mpu_soft_reset;                   
wire            cp0_mpu_updt_capr;                    
wire    [31:0]  cp0_mpu_updt_data;                    
wire            cp0_mpu_updt_pacr;                    
wire            cp0_mpu_updt_rid;                     
wire    [31:0]  cp0_pad_psr;                          
wire            cp0_sysio_ipend_b;                    
wire    [1 :0]  cp0_sysio_lpmd_b;                     
wire            cp0_yy_be;                            
wire            cp0_yy_be_v1;                         
wire            cp0_yy_be_v2;                         
wire            cp0_yy_clk_en;                        
wire            cp0_yy_intsp_sel_post;                
wire            cp0_yy_supv_mode;                     
wire            cp0_yy_supv_mode_aft_dbg;             
wire    [7 :0]  cpu_intc_ack_vec;                     
wire            cpu_intc_int_ack;                     
wire            cpu_intc_int_exit;                    
wire    [7 :0]  cpu_intc_int_vec;                     
wire            cpurst_b;                             
wire            forever_cpuclk;                       
wire            had_core_dbg_mode_req;                
wire    [31:0]  had_cp0_psr_data;                     
wire    [31:0]  had_idu_wbbr_data;                    
wire            had_idu_wbbr_vld;                     
wire            had_ifu_inst_bkpt_dbq_req;            
wire            had_ifu_inst_bkpt_dbqexp_req;         
wire    [31:0]  had_ifu_ir;                           
wire            had_ifu_ir_vld;                       
wire            had_iu_bkpt_trace_en;                 
wire            had_iu_dr_set_req;                    
wire            had_iu_flush_mbee;                    
wire            had_iu_force_dbg_en;                  
wire            had_iu_int_vld;                       
wire            had_iu_mbkpt_fsm_index_mbee;          
wire            had_iu_mem_bkpt_exp_req;              
wire            had_iu_mem_bkpt_mask;                 
wire            had_iu_mem_bkpt_req;                  
wire    [30:0]  had_iu_pc;                            
wire            had_iu_rte_pc_sel;                    
wire            had_iu_trace_req;                     
wire            had_iu_trace_req_for_dbg_disable;     
wire            had_iu_xx_fdb;                        
wire            had_iu_xx_jdbreq;                     
wire            had_yy_xx_dbg;                        
wire            had_yy_xx_dp_index_mbee;              
wire            had_yy_xx_exit_dbg;                   
wire            idly_counter_eq_zero;                 
wire    [31:0]  ifu_bmu_addr;                         
wire            ifu_bmu_idle;                         
wire    [3 :0]  ifu_bmu_prot;                         
wire            ifu_bmu_req;                          
wire            ifu_bmu_wfd1;                         
wire            ifu_cp0_lpmd_ack;                     
wire            ifu_had_chg_flw_inst;                 
wire            ifu_had_fetch_expt_vld;               
wire            ifu_had_inst_dbg_disable;             
wire    [31:0]  ifu_had_match_pc;                     
wire            ifu_had_split_first;                  
wire            ifu_iu_ex_cr_oper;                    
wire    [4 :0]  ifu_iu_ex_dst_reg;                    
wire            ifu_iu_ex_expt_vld;                   
wire    [31:0]  ifu_iu_ex_imm;                        
wire            ifu_iu_ex_inst_bkpt;                  
wire            ifu_iu_ex_inst_dbg_disable;           
wire            ifu_iu_ex_inst_vld;                   
wire            ifu_iu_ex_int_spcu_mask;              
wire            ifu_iu_ex_int_spcu_vld;               
wire    [1 :0]  ifu_iu_ex_main_unit_sel;              
wire            ifu_iu_ex_ni;                         
wire    [5 :0]  ifu_iu_ex_op;                         
wire    [4 :0]  ifu_iu_ex_pcode;                      
wire            ifu_iu_ex_predec_imm_vld;             
wire            ifu_iu_ex_prvlg_expt_vld;             
wire            ifu_iu_ex_rand_vld;                   
wire    [5 :0]  ifu_iu_ex_sop;                        
wire            ifu_iu_ex_sp_oper;                    
wire            ifu_iu_ex_split_on;                   
wire    [4 :0]  ifu_iu_ex_src0_reg;                   
wire    [4 :0]  ifu_iu_ex_src1_reg;                   
wire            ifu_iu_hs_retire_mask;                
wire            ifu_iu_hs_stack_on;                   
wire            ifu_iu_hs_stall_vector;               
wire            ifu_iu_hs_switch_se;                  
wire            ifu_iu_ibus_idle;                     
wire            ifu_iu_inst_bkpt_dbg_occur_vld;       
wire            ifu_iu_inst_bkpt_dbgexp_occur_vld;    
wire            ifu_iu_inst_buf_inst_dbg_disable;     
wire            ifu_iu_inst_buf_inst_vld;             
wire            ifu_iu_nsinst_gpr_rst_b;              
wire            ifu_iu_spcu_retire_mask;              
wire            ifu_iu_unstack_chgflw;                
wire            ifu_iu_vector_ibus_in_idle;           
wire    [31:0]  ifu_iu_xx_ibus_data;                  
wire            intc_cpu_int_b;                       
wire            intc_cpu_intraw_b;                    
wire    [7 :0]  intc_cpu_vec_b;                       
wire            iu_bmu_vec_redirect;                  
wire            iu_cp0_af_updt_vld;                   
wire            iu_cp0_bm_vld;                        
wire            iu_cp0_c;                             
wire            iu_cp0_c_vld;                         
wire            iu_cp0_cur_epc_update;                
wire    [30:0]  iu_cp0_epc;                           
wire            iu_cp0_epc_update;                    
wire            iu_cp0_epc_wen_for_nir;               
wire            iu_cp0_epsr_wen_for_nir;              
wire            iu_cp0_ex_data_sel;                   
wire            iu_cp0_ex_doze;                       
wire            iu_cp0_ex_mfcr;                       
wire            iu_cp0_ex_mtcr;                       
wire            iu_cp0_ex_psrclr;                     
wire            iu_cp0_ex_psrset;                     
wire            iu_cp0_ex_rte;                        
wire            iu_cp0_ex_sel;                        
wire            iu_cp0_ex_stop;                       
wire            iu_cp0_ex_wait;                       
wire            iu_cp0_expt_vld;                      
wire            iu_cp0_had_int_vld;                   
wire            iu_cp0_int_vld;                       
wire    [31:0]  iu_cp0_intsp_reg14_dout;              
wire            iu_cp0_nest_int_en;                   
wire            iu_cp0_oper_mux_en;                   
wire            iu_cp0_prgsign_sign_vld;              
wire    [31:0]  iu_cp0_src0;                          
wire    [9 :0]  iu_cp0_src1;                          
wire            iu_cp0_syc_rst_b;                     
wire    [31:0]  iu_cp0_updt_val;                      
wire    [31:0]  iu_cp0_user_reg14_dout;               
wire            iu_had_adr_dbg_ack;                   
wire            iu_had_data_bkpt_occur_vld;           
wire            iu_had_dbg_disable_for_tee;           
wire            iu_had_dr_dbg_ack;                    
wire            iu_had_expt_vld;                      
wire            iu_had_fast_retire_acc_err_pc_update; 
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;    
wire            iu_had_flush;                         
wire            iu_had_inst_bkpt_occur_vld;           
wire            iu_had_int_ack;                       
wire            iu_had_retire_with_had_int;           
wire            iu_had_trace_occur_vld;               
wire            iu_had_xx_bkpt_inst;                  
wire    [31:0]  iu_had_xx_data;                       
wire            iu_had_xx_data_vld;                   
wire            iu_had_xx_dbg_ack;                    
wire            iu_had_xx_mldst;                      
wire            iu_had_xx_retire;                     
wire            iu_had_xx_retire_normal;              
wire    [31:0]  iu_had_xx_retire_pc;                  
wire    [30:0]  iu_ifu_addr;                          
wire            iu_ifu_c_write_back;                  
wire    [4 :0]  iu_ifu_cnt;                           
wire            iu_ifu_cnt_write_en;                  
wire            iu_ifu_data_fetch;                    
wire            iu_ifu_data_fetch_for_data;           
wire            iu_ifu_ex_stall;                      
wire    [31:0]  iu_ifu_imm_data;                      
wire            iu_ifu_imm_write_en;                  
wire            iu_ifu_inst_fetch;                    
wire            iu_ifu_inst_fetch_for_data;           
wire            iu_ifu_inst_fetch_mask;               
wire            iu_ifu_inst_fetch_without_dbg_disable; 
wire            iu_ifu_kill_inst;                     
wire            iu_ifu_not_wait_for_dbg_disable;      
wire    [30:0]  iu_ifu_r15;                           
wire            iu_ifu_r15_vld;                       
wire            iu_ifu_security_violation;            
wire            iu_ifu_spcu_error;                    
wire            iu_ifu_spcu_error_without_misalign;   
wire            iu_ifu_spcu_int_en;                   
wire    [31:0]  iu_lsu_base;                          
wire    [31:0]  iu_lsu_data;                          
wire            iu_lsu_ex_data_sel;                   
wire            iu_lsu_ex_sel;                        
wire            iu_lsu_inst_store;                    
wire            iu_lsu_lrw;                           
wire            iu_lsu_lrw_no_fast_retire;            
wire    [15:0]  iu_lsu_offset;                        
wire            iu_lsu_offset_sub;                    
wire            iu_lsu_oper_mux_en;                   
wire            iu_lsu_sign_exten;                    
wire    [1 :0]  iu_lsu_size;                          
wire    [31:0]  iu_lsu_sp_base;                       
wire            iu_lsu_split_on;                      
wire            iu_lsu_src0_sp;                       
wire            iu_lsu_stall_without_hready;          
wire            iu_lsu_wb_ldst;                       
wire    [31:0]  iu_pad_gpr_data;                      
wire    [4 :0]  iu_pad_gpr_index;                     
wire            iu_pad_gpr_we;                        
wire            iu_pad_inst_retire;                   
wire            iu_pad_inst_split;                    
wire    [31:0]  iu_pad_retire_pc;                     
wire            iu_sysyio_soft_rst;                   
wire            iu_yy_xx_dbgon;                       
wire    [7 :0]  iu_yy_xx_expt_vec;                    
wire            iu_yy_xx_flush;                       
wire    [31:0]  lsu_bmu_addr;                         
wire            lsu_bmu_addr_check_fail;              
wire            lsu_bmu_idle;                         
wire    [3 :0]  lsu_bmu_prot;                         
wire            lsu_bmu_req;                          
wire            lsu_bmu_req_without_cmplt;            
wire            lsu_bmu_sg_chk_fail;                  
wire    [1 :0]  lsu_bmu_size;                         
wire            lsu_bmu_store_error;                  
wire    [31:0]  lsu_bmu_wdata;                        
wire            lsu_bmu_wfd1;                         
wire            lsu_bmu_write;                        
wire    [31:0]  lsu_had_addr;                         
wire            lsu_had_addr_vld;                     
wire            lsu_had_ex_cmplt;                     
wire            lsu_had_st;                           
wire            lsu_iu_addr_check_fail;               
wire    [31:0]  lsu_iu_data;                          
wire            lsu_iu_data_vld;                      
wire    [4 :0]  lsu_iu_expt_vec;                      
wire            lsu_iu_expt_vld;                      
wire            lsu_iu_fast_retire;                   
wire            lsu_iu_req;                           
wire            lsu_iu_stall;                         
wire            lsu_iu_store;                         
wire            lsu_iu_trans_acc_err;                 
wire            lsu_iu_wb_acc_err;                    
wire            lsu_iu_wb_bstack_chk_fail;            
wire            lsu_iu_wb_cmplt;                      
wire            lsu_iu_wb_data_vld;                   
wire    [31:0]  lsu_iu_wb_load_data;                  
wire    [31:0]  mpu_cp0_data;                         
wire            mpu_ifu_acc_scu;                      
wire            mpu_lsu_acc_scu;                      
wire            pad_yy_gate_clk_en_b;                 
wire            pwrm_cpu_avrg_power_inst_issue;       
wire            pwrm_cpu_inst_peak_power_limit_en;    
wire            pwrm_cpu_peak_power_limit_en;         
wire            sysio_cp0_bigend;                     
wire    [2 :0]  sysio_cp0_clkratio;                   
wire            sysio_cp0_endian_v2;                  
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;            






nm_ifu_top  x_nm_ifu_top (
  .bmu_xx_ibus_acc_err                   (bmu_xx_ibus_acc_err                  ),
  .bmu_xx_ibus_data                      (bmu_xx_ibus_data                     ),
  .bmu_xx_ibus_grnt                      (bmu_xx_ibus_grnt                     ),
  .bmu_xx_ibus_trans_cmplt               (bmu_xx_ibus_trans_cmplt              ),
  .cp0_ifu_c                             (cp0_ifu_c                            ),
  .cp0_ifu_ee                            (cp0_ifu_ee                           ),
  .cp0_ifu_in_lpmd                       (cp0_ifu_in_lpmd                      ),
  .cp0_ifu_lpmd_req                      (cp0_ifu_lpmd_req                     ),
  .cp0_yy_be                             (cp0_yy_be                            ),
  .cp0_yy_be_v2                          (cp0_yy_be_v2                         ),
  .cp0_yy_clk_en                         (cp0_yy_clk_en                        ),
  .cp0_yy_supv_mode_aft_dbg              (cp0_yy_supv_mode_aft_dbg             ),
  .cpurst_b                              (cpurst_b                             ),
  .forever_cpuclk                        (forever_cpuclk                       ),
  .had_core_dbg_mode_req                 (had_core_dbg_mode_req                ),
  .had_ifu_inst_bkpt_dbq_req             (had_ifu_inst_bkpt_dbq_req            ),
  .had_ifu_inst_bkpt_dbqexp_req          (had_ifu_inst_bkpt_dbqexp_req         ),
  .had_ifu_ir                            (had_ifu_ir                           ),
  .had_ifu_ir_vld                        (had_ifu_ir_vld                       ),
  .had_yy_xx_dp_index_mbee               (had_yy_xx_dp_index_mbee              ),
  .ifu_bmu_addr                          (ifu_bmu_addr                         ),
  .ifu_bmu_idle                          (ifu_bmu_idle                         ),
  .ifu_bmu_prot                          (ifu_bmu_prot                         ),
  .ifu_bmu_req                           (ifu_bmu_req                          ),
  .ifu_bmu_wfd1                          (ifu_bmu_wfd1                         ),
  .ifu_cp0_lpmd_ack                      (ifu_cp0_lpmd_ack                     ),
  .ifu_had_chg_flw_inst                  (ifu_had_chg_flw_inst                 ),
  .ifu_had_fetch_expt_vld                (ifu_had_fetch_expt_vld               ),
  .ifu_had_inst_dbg_disable              (ifu_had_inst_dbg_disable             ),
  .ifu_had_match_pc                      (ifu_had_match_pc                     ),
  .ifu_had_split_first                   (ifu_had_split_first                  ),
  .ifu_iu_ex_cr_oper                     (ifu_iu_ex_cr_oper                    ),
  .ifu_iu_ex_dst_reg                     (ifu_iu_ex_dst_reg                    ),
  .ifu_iu_ex_expt_vld                    (ifu_iu_ex_expt_vld                   ),
  .ifu_iu_ex_imm                         (ifu_iu_ex_imm                        ),
  .ifu_iu_ex_inst_bkpt                   (ifu_iu_ex_inst_bkpt                  ),
  .ifu_iu_ex_inst_dbg_disable            (ifu_iu_ex_inst_dbg_disable           ),
  .ifu_iu_ex_inst_vld                    (ifu_iu_ex_inst_vld                   ),
  .ifu_iu_ex_int_spcu_mask               (ifu_iu_ex_int_spcu_mask              ),
  .ifu_iu_ex_int_spcu_vld                (ifu_iu_ex_int_spcu_vld               ),
  .ifu_iu_ex_main_unit_sel               (ifu_iu_ex_main_unit_sel              ),
  .ifu_iu_ex_ni                          (ifu_iu_ex_ni                         ),
  .ifu_iu_ex_op                          (ifu_iu_ex_op                         ),
  .ifu_iu_ex_pcode                       (ifu_iu_ex_pcode                      ),
  .ifu_iu_ex_predec_imm_vld              (ifu_iu_ex_predec_imm_vld             ),
  .ifu_iu_ex_prvlg_expt_vld              (ifu_iu_ex_prvlg_expt_vld             ),
  .ifu_iu_ex_rand_vld                    (ifu_iu_ex_rand_vld                   ),
  .ifu_iu_ex_sop                         (ifu_iu_ex_sop                        ),
  .ifu_iu_ex_sp_oper                     (ifu_iu_ex_sp_oper                    ),
  .ifu_iu_ex_split_on                    (ifu_iu_ex_split_on                   ),
  .ifu_iu_ex_src0_reg                    (ifu_iu_ex_src0_reg                   ),
  .ifu_iu_ex_src1_reg                    (ifu_iu_ex_src1_reg                   ),
  .ifu_iu_hs_retire_mask                 (ifu_iu_hs_retire_mask                ),
  .ifu_iu_hs_stack_on                    (ifu_iu_hs_stack_on                   ),
  .ifu_iu_hs_stall_vector                (ifu_iu_hs_stall_vector               ),
  .ifu_iu_hs_switch_se                   (ifu_iu_hs_switch_se                  ),
  .ifu_iu_ibus_idle                      (ifu_iu_ibus_idle                     ),
  .ifu_iu_inst_bkpt_dbg_occur_vld        (ifu_iu_inst_bkpt_dbg_occur_vld       ),
  .ifu_iu_inst_bkpt_dbgexp_occur_vld     (ifu_iu_inst_bkpt_dbgexp_occur_vld    ),
  .ifu_iu_inst_buf_inst_dbg_disable      (ifu_iu_inst_buf_inst_dbg_disable     ),
  .ifu_iu_inst_buf_inst_vld              (ifu_iu_inst_buf_inst_vld             ),
  .ifu_iu_nsinst_gpr_rst_b               (ifu_iu_nsinst_gpr_rst_b              ),
  .ifu_iu_spcu_retire_mask               (ifu_iu_spcu_retire_mask              ),
  .ifu_iu_unstack_chgflw                 (ifu_iu_unstack_chgflw                ),
  .ifu_iu_vector_ibus_in_idle            (ifu_iu_vector_ibus_in_idle           ),
  .ifu_iu_xx_ibus_data                   (ifu_iu_xx_ibus_data                  ),
  .iu_ifu_addr                           (iu_ifu_addr                          ),
  .iu_ifu_c_write_back                   (iu_ifu_c_write_back                  ),
  .iu_ifu_cnt                            (iu_ifu_cnt                           ),
  .iu_ifu_cnt_write_en                   (iu_ifu_cnt_write_en                  ),
  .iu_ifu_data_fetch                     (iu_ifu_data_fetch                    ),
  .iu_ifu_data_fetch_for_data            (iu_ifu_data_fetch_for_data           ),
  .iu_ifu_ex_stall                       (iu_ifu_ex_stall                      ),
  .iu_ifu_imm_data                       (iu_ifu_imm_data                      ),
  .iu_ifu_imm_write_en                   (iu_ifu_imm_write_en                  ),
  .iu_ifu_inst_fetch                     (iu_ifu_inst_fetch                    ),
  .iu_ifu_inst_fetch_for_data            (iu_ifu_inst_fetch_for_data           ),
  .iu_ifu_inst_fetch_mask                (iu_ifu_inst_fetch_mask               ),
  .iu_ifu_inst_fetch_without_dbg_disable (iu_ifu_inst_fetch_without_dbg_disable),
  .iu_ifu_kill_inst                      (iu_ifu_kill_inst                     ),
  .iu_ifu_not_wait_for_dbg_disable       (iu_ifu_not_wait_for_dbg_disable      ),
  .iu_ifu_r15                            (iu_ifu_r15                           ),
  .iu_ifu_r15_vld                        (iu_ifu_r15_vld                       ),
  .iu_ifu_security_violation             (iu_ifu_security_violation            ),
  .iu_ifu_spcu_error                     (iu_ifu_spcu_error                    ),
  .iu_ifu_spcu_error_without_misalign    (iu_ifu_spcu_error_without_misalign   ),
  .iu_ifu_spcu_int_en                    (iu_ifu_spcu_int_en                   ),
  .iu_yy_xx_dbgon                        (iu_yy_xx_dbgon                       ),
  .iu_yy_xx_flush                        (iu_yy_xx_flush                       ),
  .mpu_ifu_acc_scu                       (mpu_ifu_acc_scu                      ),
  .pad_yy_gate_clk_en_b                  (pad_yy_gate_clk_en_b                 ),
  .pwrm_cpu_avrg_power_inst_issue        (pwrm_cpu_avrg_power_inst_issue       ),
  .pwrm_cpu_inst_peak_power_limit_en     (pwrm_cpu_inst_peak_power_limit_en    ),
  .pwrm_cpu_peak_power_limit_en          (pwrm_cpu_peak_power_limit_en         )
);







nm_iu_top  x_nm_iu_top (
  .bmu_lsu_acc_err                       (bmu_lsu_acc_err                      ),
  .bmu_xx_ibus_acc_err                   (bmu_xx_ibus_acc_err                  ),
  .bmu_xx_ibus_data_vld                  (bmu_xx_ibus_data_vld                 ),
  .bmu_xx_ibus_grnt                      (bmu_xx_ibus_grnt                     ),
  .bmu_xx_ibus_trans_cmplt               (bmu_xx_ibus_trans_cmplt              ),
  .cp0_iu_data                           (cp0_iu_data                          ),
  .cp0_iu_data_vld                       (cp0_iu_data_vld                      ),
  .cp0_iu_dbg_disable_for_tee            (cp0_iu_dbg_disable_for_tee           ),
  .cp0_iu_ee                             (cp0_iu_ee                            ),
  .cp0_iu_ee_for_int                     (cp0_iu_ee_for_int                    ),
  .cp0_iu_epc                            (cp0_iu_epc                           ),
  .cp0_iu_epc_for_chgflw                 (cp0_iu_epc_for_chgflw                ),
  .cp0_iu_epsr                           (cp0_iu_epsr                          ),
  .cp0_iu_expt_vec                       (cp0_iu_expt_vec                      ),
  .cp0_iu_expt_vld                       (cp0_iu_expt_vld                      ),
  .cp0_iu_flush                          (cp0_iu_flush                         ),
  .cp0_iu_flush_chgflw_vld               (cp0_iu_flush_chgflw_vld              ),
  .cp0_iu_ic                             (cp0_iu_ic                            ),
  .cp0_iu_idly_counter_clear             (cp0_iu_idly_counter_clear            ),
  .cp0_iu_ie_for_int                     (cp0_iu_ie_for_int                    ),
  .cp0_iu_int_spcu_en                    (cp0_iu_int_spcu_en                   ),
  .cp0_iu_intsp_we                       (cp0_iu_intsp_we                      ),
  .cp0_iu_reg_write_data                 (cp0_iu_reg_write_data                ),
  .cp0_iu_req                            (cp0_iu_req                           ),
  .cp0_iu_rte_chgflw_vld                 (cp0_iu_rte_chgflw_vld                ),
  .cp0_iu_rte_chgflw_vld_for_data        (cp0_iu_rte_chgflw_vld_for_data       ),
  .cp0_iu_src_c                          (cp0_iu_src_c                         ),
  .cp0_iu_stall                          (cp0_iu_stall                         ),
  .cp0_iu_user_reg14_we                  (cp0_iu_user_reg14_we                 ),
  .cp0_iu_vbr                            (cp0_iu_vbr                           ),
  .cp0_iu_vec                            (cp0_iu_vec                           ),
  .cp0_yy_clk_en                         (cp0_yy_clk_en                        ),
  .cp0_yy_intsp_sel_post                 (cp0_yy_intsp_sel_post                ),
  .cp0_yy_supv_mode                      (cp0_yy_supv_mode                     ),
  .cpu_intc_ack_vec                      (cpu_intc_ack_vec                     ),
  .cpu_intc_int_ack                      (cpu_intc_int_ack                     ),
  .cpurst_b                              (cpurst_b                             ),
  .forever_cpuclk                        (forever_cpuclk                       ),
  .had_core_dbg_mode_req                 (had_core_dbg_mode_req                ),
  .had_idu_wbbr_data                     (had_idu_wbbr_data                    ),
  .had_idu_wbbr_vld                      (had_idu_wbbr_vld                     ),
  .had_iu_bkpt_trace_en                  (had_iu_bkpt_trace_en                 ),
  .had_iu_dr_set_req                     (had_iu_dr_set_req                    ),
  .had_iu_flush_mbee                     (had_iu_flush_mbee                    ),
  .had_iu_force_dbg_en                   (had_iu_force_dbg_en                  ),
  .had_iu_int_vld                        (had_iu_int_vld                       ),
  .had_iu_mbkpt_fsm_index_mbee           (had_iu_mbkpt_fsm_index_mbee          ),
  .had_iu_mem_bkpt_exp_req               (had_iu_mem_bkpt_exp_req              ),
  .had_iu_mem_bkpt_mask                  (had_iu_mem_bkpt_mask                 ),
  .had_iu_mem_bkpt_req                   (had_iu_mem_bkpt_req                  ),
  .had_iu_pc                             (had_iu_pc                            ),
  .had_iu_rte_pc_sel                     (had_iu_rte_pc_sel                    ),
  .had_iu_trace_req                      (had_iu_trace_req                     ),
  .had_iu_trace_req_for_dbg_disable      (had_iu_trace_req_for_dbg_disable     ),
  .had_iu_xx_fdb                         (had_iu_xx_fdb                        ),
  .had_iu_xx_jdbreq                      (had_iu_xx_jdbreq                     ),
  .had_yy_xx_exit_dbg                    (had_yy_xx_exit_dbg                   ),
  .idly_counter_eq_zero                  (idly_counter_eq_zero                 ),
  .ifu_iu_ex_cr_oper                     (ifu_iu_ex_cr_oper                    ),
  .ifu_iu_ex_dst_reg                     (ifu_iu_ex_dst_reg                    ),
  .ifu_iu_ex_expt_vld                    (ifu_iu_ex_expt_vld                   ),
  .ifu_iu_ex_imm                         (ifu_iu_ex_imm                        ),
  .ifu_iu_ex_inst_bkpt                   (ifu_iu_ex_inst_bkpt                  ),
  .ifu_iu_ex_inst_dbg_disable            (ifu_iu_ex_inst_dbg_disable           ),
  .ifu_iu_ex_inst_vld                    (ifu_iu_ex_inst_vld                   ),
  .ifu_iu_ex_int_spcu_mask               (ifu_iu_ex_int_spcu_mask              ),
  .ifu_iu_ex_int_spcu_vld                (ifu_iu_ex_int_spcu_vld               ),
  .ifu_iu_ex_main_unit_sel               (ifu_iu_ex_main_unit_sel              ),
  .ifu_iu_ex_ni                          (ifu_iu_ex_ni                         ),
  .ifu_iu_ex_op                          (ifu_iu_ex_op                         ),
  .ifu_iu_ex_pcode                       (ifu_iu_ex_pcode                      ),
  .ifu_iu_ex_predec_imm_vld              (ifu_iu_ex_predec_imm_vld             ),
  .ifu_iu_ex_prvlg_expt_vld              (ifu_iu_ex_prvlg_expt_vld             ),
  .ifu_iu_ex_rand_vld                    (ifu_iu_ex_rand_vld                   ),
  .ifu_iu_ex_sop                         (ifu_iu_ex_sop                        ),
  .ifu_iu_ex_sp_oper                     (ifu_iu_ex_sp_oper                    ),
  .ifu_iu_ex_split_on                    (ifu_iu_ex_split_on                   ),
  .ifu_iu_ex_src0_reg                    (ifu_iu_ex_src0_reg                   ),
  .ifu_iu_ex_src1_reg                    (ifu_iu_ex_src1_reg                   ),
  .ifu_iu_hs_retire_mask                 (ifu_iu_hs_retire_mask                ),
  .ifu_iu_hs_stack_on                    (ifu_iu_hs_stack_on                   ),
  .ifu_iu_hs_stall_vector                (ifu_iu_hs_stall_vector               ),
  .ifu_iu_hs_switch_se                   (ifu_iu_hs_switch_se                  ),
  .ifu_iu_ibus_idle                      (ifu_iu_ibus_idle                     ),
  .ifu_iu_inst_bkpt_dbg_occur_vld        (ifu_iu_inst_bkpt_dbg_occur_vld       ),
  .ifu_iu_inst_bkpt_dbgexp_occur_vld     (ifu_iu_inst_bkpt_dbgexp_occur_vld    ),
  .ifu_iu_inst_buf_inst_dbg_disable      (ifu_iu_inst_buf_inst_dbg_disable     ),
  .ifu_iu_inst_buf_inst_vld              (ifu_iu_inst_buf_inst_vld             ),
  .ifu_iu_nsinst_gpr_rst_b               (ifu_iu_nsinst_gpr_rst_b              ),
  .ifu_iu_spcu_retire_mask               (ifu_iu_spcu_retire_mask              ),
  .ifu_iu_unstack_chgflw                 (ifu_iu_unstack_chgflw                ),
  .ifu_iu_vector_ibus_in_idle            (ifu_iu_vector_ibus_in_idle           ),
  .ifu_iu_xx_ibus_data                   (ifu_iu_xx_ibus_data                  ),
  .intc_cpu_int_b                        (intc_cpu_int_b                       ),
  .intc_cpu_vec_b                        (intc_cpu_vec_b                       ),
  .iu_bmu_vec_redirect                   (iu_bmu_vec_redirect                  ),
  .iu_cp0_af_updt_vld                    (iu_cp0_af_updt_vld                   ),
  .iu_cp0_bm_vld                         (iu_cp0_bm_vld                        ),
  .iu_cp0_c                              (iu_cp0_c                             ),
  .iu_cp0_c_vld                          (iu_cp0_c_vld                         ),
  .iu_cp0_cur_epc_update                 (iu_cp0_cur_epc_update                ),
  .iu_cp0_epc                            (iu_cp0_epc                           ),
  .iu_cp0_epc_update                     (iu_cp0_epc_update                    ),
  .iu_cp0_epc_wen_for_nir                (iu_cp0_epc_wen_for_nir               ),
  .iu_cp0_epsr_wen_for_nir               (iu_cp0_epsr_wen_for_nir              ),
  .iu_cp0_ex_data_sel                    (iu_cp0_ex_data_sel                   ),
  .iu_cp0_ex_doze                        (iu_cp0_ex_doze                       ),
  .iu_cp0_ex_mfcr                        (iu_cp0_ex_mfcr                       ),
  .iu_cp0_ex_mtcr                        (iu_cp0_ex_mtcr                       ),
  .iu_cp0_ex_psrclr                      (iu_cp0_ex_psrclr                     ),
  .iu_cp0_ex_psrset                      (iu_cp0_ex_psrset                     ),
  .iu_cp0_ex_rte                         (iu_cp0_ex_rte                        ),
  .iu_cp0_ex_sel                         (iu_cp0_ex_sel                        ),
  .iu_cp0_ex_stop                        (iu_cp0_ex_stop                       ),
  .iu_cp0_ex_wait                        (iu_cp0_ex_wait                       ),
  .iu_cp0_expt_vld                       (iu_cp0_expt_vld                      ),
  .iu_cp0_had_int_vld                    (iu_cp0_had_int_vld                   ),
  .iu_cp0_int_vld                        (iu_cp0_int_vld                       ),
  .iu_cp0_intsp_reg14_dout               (iu_cp0_intsp_reg14_dout              ),
  .iu_cp0_nest_int_en                    (iu_cp0_nest_int_en                   ),
  .iu_cp0_oper_mux_en                    (iu_cp0_oper_mux_en                   ),
  .iu_cp0_prgsign_sign_vld               (iu_cp0_prgsign_sign_vld              ),
  .iu_cp0_src0                           (iu_cp0_src0                          ),
  .iu_cp0_src1                           (iu_cp0_src1                          ),
  .iu_cp0_syc_rst_b                      (iu_cp0_syc_rst_b                     ),
  .iu_cp0_updt_val                       (iu_cp0_updt_val                      ),
  .iu_cp0_user_reg14_dout                (iu_cp0_user_reg14_dout               ),
  .iu_had_adr_dbg_ack                    (iu_had_adr_dbg_ack                   ),
  .iu_had_data_bkpt_occur_vld            (iu_had_data_bkpt_occur_vld           ),
  .iu_had_dbg_disable_for_tee            (iu_had_dbg_disable_for_tee           ),
  .iu_had_dr_dbg_ack                     (iu_had_dr_dbg_ack                    ),
  .iu_had_expt_vld                       (iu_had_expt_vld                      ),
  .iu_had_fast_retire_acc_err_pc_update  (iu_had_fast_retire_acc_err_pc_update ),
  .iu_had_fast_retire_acc_err_pc_val     (iu_had_fast_retire_acc_err_pc_val    ),
  .iu_had_flush                          (iu_had_flush                         ),
  .iu_had_inst_bkpt_occur_vld            (iu_had_inst_bkpt_occur_vld           ),
  .iu_had_int_ack                        (iu_had_int_ack                       ),
  .iu_had_retire_with_had_int            (iu_had_retire_with_had_int           ),
  .iu_had_trace_occur_vld                (iu_had_trace_occur_vld               ),
  .iu_had_xx_bkpt_inst                   (iu_had_xx_bkpt_inst                  ),
  .iu_had_xx_data                        (iu_had_xx_data                       ),
  .iu_had_xx_data_vld                    (iu_had_xx_data_vld                   ),
  .iu_had_xx_dbg_ack                     (iu_had_xx_dbg_ack                    ),
  .iu_had_xx_mldst                       (iu_had_xx_mldst                      ),
  .iu_had_xx_retire                      (iu_had_xx_retire                     ),
  .iu_had_xx_retire_normal               (iu_had_xx_retire_normal              ),
  .iu_had_xx_retire_pc                   (iu_had_xx_retire_pc                  ),
  .iu_ifu_addr                           (iu_ifu_addr                          ),
  .iu_ifu_c_write_back                   (iu_ifu_c_write_back                  ),
  .iu_ifu_cnt                            (iu_ifu_cnt                           ),
  .iu_ifu_cnt_write_en                   (iu_ifu_cnt_write_en                  ),
  .iu_ifu_data_fetch                     (iu_ifu_data_fetch                    ),
  .iu_ifu_data_fetch_for_data            (iu_ifu_data_fetch_for_data           ),
  .iu_ifu_ex_stall                       (iu_ifu_ex_stall                      ),
  .iu_ifu_imm_data                       (iu_ifu_imm_data                      ),
  .iu_ifu_imm_write_en                   (iu_ifu_imm_write_en                  ),
  .iu_ifu_inst_fetch                     (iu_ifu_inst_fetch                    ),
  .iu_ifu_inst_fetch_for_data            (iu_ifu_inst_fetch_for_data           ),
  .iu_ifu_inst_fetch_mask                (iu_ifu_inst_fetch_mask               ),
  .iu_ifu_inst_fetch_without_dbg_disable (iu_ifu_inst_fetch_without_dbg_disable),
  .iu_ifu_kill_inst                      (iu_ifu_kill_inst                     ),
  .iu_ifu_not_wait_for_dbg_disable       (iu_ifu_not_wait_for_dbg_disable      ),
  .iu_ifu_r15                            (iu_ifu_r15                           ),
  .iu_ifu_r15_vld                        (iu_ifu_r15_vld                       ),
  .iu_ifu_security_violation             (iu_ifu_security_violation            ),
  .iu_ifu_spcu_error                     (iu_ifu_spcu_error                    ),
  .iu_ifu_spcu_error_without_misalign    (iu_ifu_spcu_error_without_misalign   ),
  .iu_ifu_spcu_int_en                    (iu_ifu_spcu_int_en                   ),
  .iu_lsu_base                           (iu_lsu_base                          ),
  .iu_lsu_data                           (iu_lsu_data                          ),
  .iu_lsu_ex_data_sel                    (iu_lsu_ex_data_sel                   ),
  .iu_lsu_ex_sel                         (iu_lsu_ex_sel                        ),
  .iu_lsu_inst_store                     (iu_lsu_inst_store                    ),
  .iu_lsu_lrw                            (iu_lsu_lrw                           ),
  .iu_lsu_lrw_no_fast_retire             (iu_lsu_lrw_no_fast_retire            ),
  .iu_lsu_offset                         (iu_lsu_offset                        ),
  .iu_lsu_offset_sub                     (iu_lsu_offset_sub                    ),
  .iu_lsu_oper_mux_en                    (iu_lsu_oper_mux_en                   ),
  .iu_lsu_sign_exten                     (iu_lsu_sign_exten                    ),
  .iu_lsu_size                           (iu_lsu_size                          ),
  .iu_lsu_sp_base                        (iu_lsu_sp_base                       ),
  .iu_lsu_split_on                       (iu_lsu_split_on                      ),
  .iu_lsu_src0_sp                        (iu_lsu_src0_sp                       ),
  .iu_lsu_stall_without_hready           (iu_lsu_stall_without_hready          ),
  .iu_lsu_wb_ldst                        (iu_lsu_wb_ldst                       ),
  .iu_pad_gpr_data                       (iu_pad_gpr_data                      ),
  .iu_pad_gpr_index                      (iu_pad_gpr_index                     ),
  .iu_pad_gpr_we                         (iu_pad_gpr_we                        ),
  .iu_pad_inst_retire                    (iu_pad_inst_retire                   ),
  .iu_pad_inst_split                     (iu_pad_inst_split                    ),
  .iu_pad_retire_pc                      (iu_pad_retire_pc                     ),
  .iu_sysyio_soft_rst                    (iu_sysyio_soft_rst                   ),
  .iu_yy_xx_dbgon                        (iu_yy_xx_dbgon                       ),
  .iu_yy_xx_expt_vec                     (iu_yy_xx_expt_vec                    ),
  .iu_yy_xx_flush                        (iu_yy_xx_flush                       ),
  .lsu_iu_addr_check_fail                (lsu_iu_addr_check_fail               ),
  .lsu_iu_data                           (lsu_iu_data                          ),
  .lsu_iu_data_vld                       (lsu_iu_data_vld                      ),
  .lsu_iu_expt_vec                       (lsu_iu_expt_vec                      ),
  .lsu_iu_expt_vld                       (lsu_iu_expt_vld                      ),
  .lsu_iu_fast_retire                    (lsu_iu_fast_retire                   ),
  .lsu_iu_req                            (lsu_iu_req                           ),
  .lsu_iu_stall                          (lsu_iu_stall                         ),
  .lsu_iu_store                          (lsu_iu_store                         ),
  .lsu_iu_trans_acc_err                  (lsu_iu_trans_acc_err                 ),
  .lsu_iu_wb_acc_err                     (lsu_iu_wb_acc_err                    ),
  .lsu_iu_wb_bstack_chk_fail             (lsu_iu_wb_bstack_chk_fail            ),
  .lsu_iu_wb_cmplt                       (lsu_iu_wb_cmplt                      ),
  .lsu_iu_wb_data_vld                    (lsu_iu_wb_data_vld                   ),
  .lsu_iu_wb_load_data                   (lsu_iu_wb_load_data                  ),
  .pad_yy_gate_clk_en_b                  (pad_yy_gate_clk_en_b                 )
);







nm_lsu_top  x_nm_lsu_top (
  .bmu_lsu_acc_err             (bmu_lsu_acc_err            ),
  .bmu_lsu_bstack_chk_fail     (bmu_lsu_bstack_chk_fail    ),
  .bmu_lsu_data                (bmu_lsu_data               ),
  .bmu_lsu_data_vld            (bmu_lsu_data_vld           ),
  .bmu_lsu_grnt                (bmu_lsu_grnt               ),
  .bmu_lsu_trans_cmplt         (bmu_lsu_trans_cmplt        ),
  .cp0_lsu_mm                  (cp0_lsu_mm                 ),
  .cp0_lsu_sgbr                (cp0_lsu_sgbr               ),
  .cp0_lsu_sge                 (cp0_lsu_sge                ),
  .cp0_lsu_sgp                 (cp0_lsu_sgp                ),
  .cp0_lsu_sgtr                (cp0_lsu_sgtr               ),
  .cp0_yy_be                   (cp0_yy_be                  ),
  .cp0_yy_be_v1                (cp0_yy_be_v1               ),
  .cp0_yy_be_v2                (cp0_yy_be_v2               ),
  .cp0_yy_clk_en               (cp0_yy_clk_en              ),
  .cp0_yy_supv_mode            (cp0_yy_supv_mode           ),
  .cp0_yy_supv_mode_aft_dbg    (cp0_yy_supv_mode_aft_dbg   ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .iu_lsu_base                 (iu_lsu_base                ),
  .iu_lsu_data                 (iu_lsu_data                ),
  .iu_lsu_ex_data_sel          (iu_lsu_ex_data_sel         ),
  .iu_lsu_ex_sel               (iu_lsu_ex_sel              ),
  .iu_lsu_inst_store           (iu_lsu_inst_store          ),
  .iu_lsu_lrw                  (iu_lsu_lrw                 ),
  .iu_lsu_lrw_no_fast_retire   (iu_lsu_lrw_no_fast_retire  ),
  .iu_lsu_offset               (iu_lsu_offset              ),
  .iu_lsu_offset_sub           (iu_lsu_offset_sub          ),
  .iu_lsu_oper_mux_en          (iu_lsu_oper_mux_en         ),
  .iu_lsu_sign_exten           (iu_lsu_sign_exten          ),
  .iu_lsu_size                 (iu_lsu_size                ),
  .iu_lsu_sp_base              (iu_lsu_sp_base             ),
  .iu_lsu_split_on             (iu_lsu_split_on            ),
  .iu_lsu_src0_sp              (iu_lsu_src0_sp             ),
  .iu_lsu_stall_without_hready (iu_lsu_stall_without_hready),
  .iu_lsu_wb_ldst              (iu_lsu_wb_ldst             ),
  .iu_yy_xx_flush              (iu_yy_xx_flush             ),
  .lsu_bmu_addr                (lsu_bmu_addr               ),
  .lsu_bmu_addr_check_fail     (lsu_bmu_addr_check_fail    ),
  .lsu_bmu_idle                (lsu_bmu_idle               ),
  .lsu_bmu_prot                (lsu_bmu_prot               ),
  .lsu_bmu_req                 (lsu_bmu_req                ),
  .lsu_bmu_req_without_cmplt   (lsu_bmu_req_without_cmplt  ),
  .lsu_bmu_sg_chk_fail         (lsu_bmu_sg_chk_fail        ),
  .lsu_bmu_size                (lsu_bmu_size               ),
  .lsu_bmu_store_error         (lsu_bmu_store_error        ),
  .lsu_bmu_wdata               (lsu_bmu_wdata              ),
  .lsu_bmu_wfd1                (lsu_bmu_wfd1               ),
  .lsu_bmu_write               (lsu_bmu_write              ),
  .lsu_had_addr                (lsu_had_addr               ),
  .lsu_had_addr_vld            (lsu_had_addr_vld           ),
  .lsu_had_ex_cmplt            (lsu_had_ex_cmplt           ),
  .lsu_had_st                  (lsu_had_st                 ),
  .lsu_iu_addr_check_fail      (lsu_iu_addr_check_fail     ),
  .lsu_iu_data                 (lsu_iu_data                ),
  .lsu_iu_data_vld             (lsu_iu_data_vld            ),
  .lsu_iu_expt_vec             (lsu_iu_expt_vec            ),
  .lsu_iu_expt_vld             (lsu_iu_expt_vld            ),
  .lsu_iu_fast_retire          (lsu_iu_fast_retire         ),
  .lsu_iu_req                  (lsu_iu_req                 ),
  .lsu_iu_stall                (lsu_iu_stall               ),
  .lsu_iu_store                (lsu_iu_store               ),
  .lsu_iu_trans_acc_err        (lsu_iu_trans_acc_err       ),
  .lsu_iu_wb_acc_err           (lsu_iu_wb_acc_err          ),
  .lsu_iu_wb_bstack_chk_fail   (lsu_iu_wb_bstack_chk_fail  ),
  .lsu_iu_wb_cmplt             (lsu_iu_wb_cmplt            ),
  .lsu_iu_wb_data_vld          (lsu_iu_wb_data_vld         ),
  .lsu_iu_wb_load_data         (lsu_iu_wb_load_data        ),
  .mpu_lsu_acc_scu             (mpu_lsu_acc_scu            ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);






nm_cp0_top  x_nm_cp0_top (
  .cache_cp0_lpmd_ack             (cache_cp0_lpmd_ack            ),
  .cp0_cache_lpmd_req             (cp0_cache_lpmd_req            ),
  .cp0_had_cpuid_idx0             (cp0_had_cpuid_idx0            ),
  .cp0_had_lpmd_b                 (cp0_had_lpmd_b                ),
  .cp0_had_psr_data               (cp0_had_psr_data              ),
  .cp0_had_spsr_data              (cp0_had_spsr_data             ),
  .cp0_ifu_c                      (cp0_ifu_c                     ),
  .cp0_ifu_ee                     (cp0_ifu_ee                    ),
  .cp0_ifu_in_lpmd                (cp0_ifu_in_lpmd               ),
  .cp0_ifu_lpmd_req               (cp0_ifu_lpmd_req              ),
  .cp0_iu_data                    (cp0_iu_data                   ),
  .cp0_iu_data_vld                (cp0_iu_data_vld               ),
  .cp0_iu_dbg_disable_for_tee     (cp0_iu_dbg_disable_for_tee    ),
  .cp0_iu_ee                      (cp0_iu_ee                     ),
  .cp0_iu_ee_for_int              (cp0_iu_ee_for_int             ),
  .cp0_iu_epc                     (cp0_iu_epc                    ),
  .cp0_iu_epc_for_chgflw          (cp0_iu_epc_for_chgflw         ),
  .cp0_iu_epsr                    (cp0_iu_epsr                   ),
  .cp0_iu_expt_vec                (cp0_iu_expt_vec               ),
  .cp0_iu_expt_vld                (cp0_iu_expt_vld               ),
  .cp0_iu_flush                   (cp0_iu_flush                  ),
  .cp0_iu_flush_chgflw_vld        (cp0_iu_flush_chgflw_vld       ),
  .cp0_iu_ic                      (cp0_iu_ic                     ),
  .cp0_iu_idly_counter_clear      (cp0_iu_idly_counter_clear     ),
  .cp0_iu_ie_for_int              (cp0_iu_ie_for_int             ),
  .cp0_iu_int_spcu_en             (cp0_iu_int_spcu_en            ),
  .cp0_iu_intsp_we                (cp0_iu_intsp_we               ),
  .cp0_iu_reg_write_data          (cp0_iu_reg_write_data         ),
  .cp0_iu_req                     (cp0_iu_req                    ),
  .cp0_iu_rte_chgflw_vld          (cp0_iu_rte_chgflw_vld         ),
  .cp0_iu_rte_chgflw_vld_for_data (cp0_iu_rte_chgflw_vld_for_data),
  .cp0_iu_src_c                   (cp0_iu_src_c                  ),
  .cp0_iu_stall                   (cp0_iu_stall                  ),
  .cp0_iu_user_reg14_we           (cp0_iu_user_reg14_we          ),
  .cp0_iu_vbr                     (cp0_iu_vbr                    ),
  .cp0_iu_vec                     (cp0_iu_vec                    ),
  .cp0_lsu_mm                     (cp0_lsu_mm                    ),
  .cp0_lsu_sgbr                   (cp0_lsu_sgbr                  ),
  .cp0_lsu_sge                    (cp0_lsu_sge                   ),
  .cp0_lsu_sgp                    (cp0_lsu_sgp                   ),
  .cp0_lsu_sgtr                   (cp0_lsu_sgtr                  ),
  .cp0_mpu_capr_sel               (cp0_mpu_capr_sel              ),
  .cp0_mpu_en                     (cp0_mpu_en                    ),
  .cp0_mpu_pacr_sel               (cp0_mpu_pacr_sel              ),
  .cp0_mpu_rid_sel                (cp0_mpu_rid_sel               ),
  .cp0_mpu_soft_reset             (cp0_mpu_soft_reset            ),
  .cp0_mpu_updt_capr              (cp0_mpu_updt_capr             ),
  .cp0_mpu_updt_data              (cp0_mpu_updt_data             ),
  .cp0_mpu_updt_pacr              (cp0_mpu_updt_pacr             ),
  .cp0_mpu_updt_rid               (cp0_mpu_updt_rid              ),
  .cp0_pad_psr                    (cp0_pad_psr                   ),
  .cp0_sysio_ipend_b              (cp0_sysio_ipend_b             ),
  .cp0_sysio_lpmd_b               (cp0_sysio_lpmd_b              ),
  .cp0_yy_be                      (cp0_yy_be                     ),
  .cp0_yy_be_v1                   (cp0_yy_be_v1                  ),
  .cp0_yy_be_v2                   (cp0_yy_be_v2                  ),
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .cp0_yy_intsp_sel_post          (cp0_yy_intsp_sel_post         ),
  .cp0_yy_supv_mode               (cp0_yy_supv_mode              ),
  .cp0_yy_supv_mode_aft_dbg       (cp0_yy_supv_mode_aft_dbg      ),
  .cpu_intc_int_exit              (cpu_intc_int_exit             ),
  .cpu_intc_int_vec               (cpu_intc_int_vec              ),
  .cpurst_b                       (cpurst_b                      ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .had_cp0_psr_data               (had_cp0_psr_data              ),
  .had_iu_force_dbg_en            (had_iu_force_dbg_en           ),
  .had_iu_rte_pc_sel              (had_iu_rte_pc_sel             ),
  .had_yy_xx_dbg                  (had_yy_xx_dbg                 ),
  .had_yy_xx_exit_dbg             (had_yy_xx_exit_dbg            ),
  .ifu_cp0_lpmd_ack               (ifu_cp0_lpmd_ack              ),
  .intc_cpu_intraw_b              (intc_cpu_intraw_b             ),
  .iu_cp0_af_updt_vld             (iu_cp0_af_updt_vld            ),
  .iu_cp0_bm_vld                  (iu_cp0_bm_vld                 ),
  .iu_cp0_c                       (iu_cp0_c                      ),
  .iu_cp0_c_vld                   (iu_cp0_c_vld                  ),
  .iu_cp0_cur_epc_update          (iu_cp0_cur_epc_update         ),
  .iu_cp0_epc                     (iu_cp0_epc                    ),
  .iu_cp0_epc_update              (iu_cp0_epc_update             ),
  .iu_cp0_epc_wen_for_nir         (iu_cp0_epc_wen_for_nir        ),
  .iu_cp0_epsr_wen_for_nir        (iu_cp0_epsr_wen_for_nir       ),
  .iu_cp0_ex_data_sel             (iu_cp0_ex_data_sel            ),
  .iu_cp0_ex_doze                 (iu_cp0_ex_doze                ),
  .iu_cp0_ex_mfcr                 (iu_cp0_ex_mfcr                ),
  .iu_cp0_ex_mtcr                 (iu_cp0_ex_mtcr                ),
  .iu_cp0_ex_psrclr               (iu_cp0_ex_psrclr              ),
  .iu_cp0_ex_psrset               (iu_cp0_ex_psrset              ),
  .iu_cp0_ex_rte                  (iu_cp0_ex_rte                 ),
  .iu_cp0_ex_sel                  (iu_cp0_ex_sel                 ),
  .iu_cp0_ex_stop                 (iu_cp0_ex_stop                ),
  .iu_cp0_ex_wait                 (iu_cp0_ex_wait                ),
  .iu_cp0_expt_vld                (iu_cp0_expt_vld               ),
  .iu_cp0_had_int_vld             (iu_cp0_had_int_vld            ),
  .iu_cp0_int_vld                 (iu_cp0_int_vld                ),
  .iu_cp0_intsp_reg14_dout        (iu_cp0_intsp_reg14_dout       ),
  .iu_cp0_nest_int_en             (iu_cp0_nest_int_en            ),
  .iu_cp0_oper_mux_en             (iu_cp0_oper_mux_en            ),
  .iu_cp0_prgsign_sign_vld        (iu_cp0_prgsign_sign_vld       ),
  .iu_cp0_src0                    (iu_cp0_src0                   ),
  .iu_cp0_src1                    (iu_cp0_src1                   ),
  .iu_cp0_syc_rst_b               (iu_cp0_syc_rst_b              ),
  .iu_cp0_updt_val                (iu_cp0_updt_val               ),
  .iu_cp0_user_reg14_dout         (iu_cp0_user_reg14_dout        ),
  .iu_yy_xx_dbgon                 (iu_yy_xx_dbgon                ),
  .iu_yy_xx_expt_vec              (iu_yy_xx_expt_vec             ),
  .iu_yy_xx_flush                 (iu_yy_xx_flush                ),
  .mpu_cp0_data                   (mpu_cp0_data                  ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .sysio_cp0_bigend               (sysio_cp0_bigend              ),
  .sysio_cp0_clkratio             (sysio_cp0_clkratio            ),
  .sysio_cp0_endian_v2            (sysio_cp0_endian_v2           ),
  .sysio_cp0_sys_view_lpmd_b      (sysio_cp0_sys_view_lpmd_b     )
);























endmodule



























module nm_core_top(
  biu_pad_haddr,
  biu_pad_hburst,
  biu_pad_hprot,
  biu_pad_hsize,
  biu_pad_htrans,
  biu_pad_hwdata,
  biu_pad_hwrite,
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_chk_fail,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_write,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_psr_data,
  cp0_had_spsr_data,
  cp0_pad_psr,
  cp0_yy_be_v2,
  cpu_intc_ack_vec,
  cpu_intc_int_ack,
  cpu_intc_int_exit,
  cpu_intc_int_vec,
  cpu_pad_dfs_ack,
  cpurst_b,
  forever_cpuclk,
  had_core_dbg_mode_req,
  had_core_exit_dbg,
  had_cp0_psr_data,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_inst_bkpt_dbq_req,
  had_ifu_inst_bkpt_dbqexp_req,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_iu_bkpt_trace_en,
  had_iu_dr_set_req,
  had_iu_flush_mbee,
  had_iu_force_dbg_en,
  had_iu_int_vld,
  had_iu_mbkpt_fsm_index_mbee,
  had_iu_mem_bkpt_exp_req,
  had_iu_mem_bkpt_mask,
  had_iu_mem_bkpt_req,
  had_iu_pc,
  had_iu_rte_pc_sel,
  had_iu_trace_req,
  had_iu_trace_req_for_dbg_disable,
  had_iu_xx_fdb,
  had_iu_xx_jdbreq,
  had_yy_xx_dbg,
  had_yy_xx_dp_index_mbee,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  ifu_had_chg_flw_inst,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  intc_cpu_int_b,
  intc_cpu_intraw_b,
  intc_cpu_vec_b,
  iu_had_adr_dbg_ack,
  iu_had_data_bkpt_occur_vld,
  iu_had_dbg_disable_for_tee,
  iu_had_dr_dbg_ack,
  iu_had_expt_vld,
  iu_had_fast_retire_acc_err_pc_update,
  iu_had_fast_retire_acc_err_pc_val,
  iu_had_flush,
  iu_had_inst_bkpt_occur_vld,
  iu_had_int_ack,
  iu_had_retire_with_had_int,
  iu_had_trace_occur_vld,
  iu_had_xx_bkpt_inst,
  iu_had_xx_data,
  iu_had_xx_data_vld,
  iu_had_xx_dbg_ack,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_had_xx_retire_pc,
  iu_pad_gpr_data,
  iu_pad_gpr_index,
  iu_pad_gpr_we,
  iu_pad_inst_retire,
  iu_pad_inst_split,
  iu_pad_retire_pc,
  iu_yy_xx_dbgon,
  lsu_had_addr,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  lsu_had_st,
  pad_biu_hrdata,
  pad_biu_hready,
  pad_biu_hresp,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_cpu_dfs_req,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_sysio_bigend_b,
  pad_sysio_dbgrq_b,
  pad_sysio_endian_v2,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_avrg_power_inst_issue,
  pwrm_cpu_bus_peak_power_limit_en,
  pwrm_cpu_inst_peak_power_limit_en,
  pwrm_cpu_peak_power_limit_en,
  sysio_had_sdb_req_b,
  sysio_pad_idlyn_b,
  sysio_pad_lpmd_b,
  sysio_pad_srst,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_data_vld,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_data_vld,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);


input           cpurst_b;                            
input           forever_cpuclk;                      
input           had_core_dbg_mode_req;               
input           had_core_exit_dbg;                   
input   [31:0]  had_cp0_psr_data;                    
input   [31:0]  had_idu_wbbr_data;                   
input           had_idu_wbbr_vld;                    
input           had_ifu_inst_bkpt_dbq_req;           
input           had_ifu_inst_bkpt_dbqexp_req;        
input   [31:0]  had_ifu_ir;                          
input           had_ifu_ir_vld;                      
input           had_iu_bkpt_trace_en;                
input           had_iu_dr_set_req;                   
input           had_iu_flush_mbee;                   
input           had_iu_force_dbg_en;                 
input           had_iu_int_vld;                      
input           had_iu_mbkpt_fsm_index_mbee;         
input           had_iu_mem_bkpt_exp_req;             
input           had_iu_mem_bkpt_mask;                
input           had_iu_mem_bkpt_req;                 
input   [30:0]  had_iu_pc;                           
input           had_iu_rte_pc_sel;                   
input           had_iu_trace_req;                    
input           had_iu_trace_req_for_dbg_disable;    
input           had_iu_xx_fdb;                       
input           had_iu_xx_jdbreq;                    
input           had_yy_xx_dbg;                       
input           had_yy_xx_dp_index_mbee;             
input           intc_cpu_int_b;                      
input           intc_cpu_intraw_b;                   
input   [7 :0]  intc_cpu_vec_b;                      
input   [31:0]  pad_biu_hrdata;                      
input           pad_biu_hready;                      
input           pad_biu_hresp;                       
input   [11:0]  pad_bmu_iahbl_base;                  
input   [11:0]  pad_bmu_iahbl_mask;                  
input           pad_cpu_dfs_req;                     
input   [31:0]  pad_iahbl_hrdata;                    
input           pad_iahbl_hready;                    
input           pad_iahbl_hresp;                     
input           pad_sysio_bigend_b;                  
input           pad_sysio_dbgrq_b;                   
input           pad_sysio_endian_v2;                 
input           pad_yy_gate_clk_en_b;                
input           pwrm_cpu_avrg_power_inst_issue;      
input           pwrm_cpu_bus_peak_power_limit_en;    
input           pwrm_cpu_inst_peak_power_limit_en;   
input           pwrm_cpu_peak_power_limit_en;        
input           tcipif_bmu_dbus_acc_err;             
input   [31:0]  tcipif_bmu_dbus_data;                
input           tcipif_bmu_dbus_data_vld;            
input           tcipif_bmu_dbus_grnt;                
input           tcipif_bmu_dbus_trans_cmplt;         
input           tcipif_bmu_ibus_acc_err;             
input   [31:0]  tcipif_bmu_ibus_data;                
input           tcipif_bmu_ibus_data_vld;            
input           tcipif_bmu_ibus_grnt;                
input           tcipif_bmu_ibus_trans_cmplt;         
output  [31:0]  biu_pad_haddr;                       
output  [2 :0]  biu_pad_hburst;                      
output  [3 :0]  biu_pad_hprot;                       
output  [2 :0]  biu_pad_hsize;                       
output  [1 :0]  biu_pad_htrans;                      
output  [31:0]  biu_pad_hwdata;                      
output          biu_pad_hwrite;                      
output          bmu_tcipif_dbus_acc_deny;            
output  [31:0]  bmu_tcipif_dbus_addr;                
output          bmu_tcipif_dbus_chk_fail;            
output          bmu_tcipif_dbus_req;                 
output          bmu_tcipif_dbus_supv_mode;           
output  [31:0]  bmu_tcipif_dbus_wdata;               
output          bmu_tcipif_dbus_write;               
output          bmu_tcipif_ibus_acc_deny;            
output  [31:0]  bmu_tcipif_ibus_addr;                
output          bmu_tcipif_ibus_req;                 
output          bmu_tcipif_ibus_write;               
output  [31:0]  cp0_had_cpuid_idx0;                  
output  [1 :0]  cp0_had_lpmd_b;                      
output  [31:0]  cp0_had_psr_data;                    
output  [31:0]  cp0_had_spsr_data;                   
output  [31:0]  cp0_pad_psr;                         
output          cp0_yy_be_v2;                        
output  [7 :0]  cpu_intc_ack_vec;                    
output          cpu_intc_int_ack;                    
output          cpu_intc_int_exit;                   
output  [7 :0]  cpu_intc_int_vec;                    
output          cpu_pad_dfs_ack;                     
output  [31:0]  iahbl_pad_haddr;                     
output  [2 :0]  iahbl_pad_hburst;                    
output  [3 :0]  iahbl_pad_hprot;                     
output  [2 :0]  iahbl_pad_hsize;                     
output  [1 :0]  iahbl_pad_htrans;                    
output  [31:0]  iahbl_pad_hwdata;                    
output          iahbl_pad_hwrite;                    
output          ifu_had_chg_flw_inst;                
output          ifu_had_fetch_expt_vld;              
output          ifu_had_inst_dbg_disable;            
output  [31:0]  ifu_had_match_pc;                    
output          ifu_had_split_first;                 
output          iu_had_adr_dbg_ack;                  
output          iu_had_data_bkpt_occur_vld;          
output          iu_had_dbg_disable_for_tee;          
output          iu_had_dr_dbg_ack;                   
output          iu_had_expt_vld;                     
output          iu_had_fast_retire_acc_err_pc_update; 
output  [30:0]  iu_had_fast_retire_acc_err_pc_val;   
output          iu_had_flush;                        
output          iu_had_inst_bkpt_occur_vld;          
output          iu_had_int_ack;                      
output          iu_had_retire_with_had_int;          
output          iu_had_trace_occur_vld;              
output          iu_had_xx_bkpt_inst;                 
output  [31:0]  iu_had_xx_data;                      
output          iu_had_xx_data_vld;                  
output          iu_had_xx_dbg_ack;                   
output          iu_had_xx_mldst;                     
output          iu_had_xx_retire;                    
output          iu_had_xx_retire_normal;             
output  [31:0]  iu_had_xx_retire_pc;                 
output  [31:0]  iu_pad_gpr_data;                     
output  [4 :0]  iu_pad_gpr_index;                    
output          iu_pad_gpr_we;                       
output          iu_pad_inst_retire;                  
output          iu_pad_inst_split;                   
output  [31:0]  iu_pad_retire_pc;                    
output          iu_yy_xx_dbgon;                      
output  [31:0]  lsu_had_addr;                        
output          lsu_had_addr_vld;                    
output          lsu_had_ex_cmplt;                    
output          lsu_had_st;                          
output          sysio_had_sdb_req_b;                 
output          sysio_pad_idlyn_b;                   
output  [1 :0]  sysio_pad_lpmd_b;                    
output          sysio_pad_srst;                      


reg             pad_cpu_halt_ff1;                    
reg             pad_cpu_halt_ff2;                    


wire            biu_bmu_dbus_acc_err;                
wire    [31:0]  biu_bmu_dbus_data;                   
wire            biu_bmu_dbus_data_vld;               
wire            biu_bmu_dbus_grnt;                   
wire            biu_bmu_dbus_trans_cmplt;            
wire            biu_bmu_ibus_acc_err;                
wire    [31:0]  biu_bmu_ibus_data;                   
wire            biu_bmu_ibus_data_vld;               
wire            biu_bmu_ibus_grnt;                   
wire            biu_bmu_ibus_trans_cmplt;            
wire    [31:0]  biu_pad_haddr;                       
wire    [2 :0]  biu_pad_hburst;                      
wire    [3 :0]  biu_pad_hprot;                       
wire    [2 :0]  biu_pad_hsize;                       
wire    [1 :0]  biu_pad_htrans;                      
wire    [31:0]  biu_pad_hwdata;                      
wire            biu_pad_hwrite;                      
wire            bmu_biu_dbus_acc_deny;               
wire    [31:0]  bmu_biu_dbus_addr;                   
wire            bmu_biu_dbus_chk_fail;               
wire    [3 :0]  bmu_biu_dbus_prot;                   
wire            bmu_biu_dbus_req;                    
wire            bmu_biu_dbus_req_without_cmplt;      
wire    [1 :0]  bmu_biu_dbus_size;                   
wire    [31:0]  bmu_biu_dbus_wdata;                  
wire            bmu_biu_dbus_write;                  
wire            bmu_biu_ibus_acc_deny;               
wire    [31:0]  bmu_biu_ibus_addr;                   
wire            bmu_biu_ibus_hit;                    
wire    [3 :0]  bmu_biu_ibus_prot;                   
wire            bmu_biu_ibus_req;                    
wire            bmu_biu_ibus_req_no_hit;             
wire    [1 :0]  bmu_biu_ibus_size;                   
wire            bmu_biu_ibus_vec_redirect;           
wire            bmu_iahbl_dbus_acc_deny;             
wire    [31:0]  bmu_iahbl_dbus_addr;                 
wire            bmu_iahbl_dbus_chk_fail;             
wire    [3 :0]  bmu_iahbl_dbus_prot;                 
wire            bmu_iahbl_dbus_req;                  
wire            bmu_iahbl_dbus_req_without_cmplt;    
wire    [1 :0]  bmu_iahbl_dbus_size;                 
wire    [31:0]  bmu_iahbl_dbus_wdata;                
wire            bmu_iahbl_dbus_write;                
wire            bmu_iahbl_ibus_acc_deny;             
wire    [31:0]  bmu_iahbl_ibus_addr;                 
wire            bmu_iahbl_ibus_hit;                  
wire    [3 :0]  bmu_iahbl_ibus_prot;                 
wire            bmu_iahbl_ibus_req;                  
wire            bmu_iahbl_ibus_req_no_hit;           
wire    [1 :0]  bmu_iahbl_ibus_size;                 
wire            bmu_iahbl_ibus_vec_redirect;         
wire            bmu_lsu_acc_err;                     
wire            bmu_lsu_bstack_chk_fail;             
wire    [31:0]  bmu_lsu_data;                        
wire            bmu_lsu_data_vld;                    
wire            bmu_lsu_grnt;                        
wire            bmu_lsu_trans_cmplt;                 
wire            bmu_tcipif_dbus_acc_deny;            
wire    [31:0]  bmu_tcipif_dbus_addr;                
wire            bmu_tcipif_dbus_chk_fail;            
wire            bmu_tcipif_dbus_req;                 
wire            bmu_tcipif_dbus_supv_mode;           
wire    [31:0]  bmu_tcipif_dbus_wdata;               
wire            bmu_tcipif_dbus_write;               
wire            bmu_tcipif_ibus_acc_deny;            
wire    [31:0]  bmu_tcipif_ibus_addr;                
wire            bmu_tcipif_ibus_req;                 
wire            bmu_tcipif_ibus_write;               
wire            bmu_xx_ibus_acc_err;                 
wire    [31:0]  bmu_xx_ibus_data;                    
wire            bmu_xx_ibus_data_vld;                
wire            bmu_xx_ibus_grnt;                    
wire            bmu_xx_ibus_trans_cmplt;             
wire            cache_cp0_lpmd_ack;                  
wire            cp0_cache_lpmd_req;                  
wire    [31:0]  cp0_had_cpuid_idx0;                  
wire    [1 :0]  cp0_had_lpmd_b;                      
wire    [31:0]  cp0_had_psr_data;                    
wire    [31:0]  cp0_had_spsr_data;                   
wire            cp0_mpu_capr_sel;                    
wire            cp0_mpu_en;                          
wire            cp0_mpu_pacr_sel;                    
wire            cp0_mpu_rid_sel;                     
wire            cp0_mpu_soft_reset;                  
wire            cp0_mpu_updt_capr;                   
wire    [31:0]  cp0_mpu_updt_data;                   
wire            cp0_mpu_updt_pacr;                   
wire            cp0_mpu_updt_rid;                    
wire    [31:0]  cp0_pad_psr;                         
wire            cp0_sysio_ipend_b;                   
wire    [1 :0]  cp0_sysio_lpmd_b;                    
wire            cp0_yy_be_v2;                        
wire            cp0_yy_clk_en;                       
wire            cp0_yy_supv_mode_aft_dbg;            
wire    [7 :0]  cpu_intc_ack_vec;                    
wire            cpu_intc_int_ack;                    
wire            cpu_intc_int_exit;                   
wire    [7 :0]  cpu_intc_int_vec;                    
wire            cpu_pad_dfs_ack;                     
wire            cpurst_b;                            
wire            dahblif_other_mask;                  
wire            dbus_idle;                           
wire            forever_cpuclk;                      
wire            had_core_dbg_mode_req;               
wire            had_core_exit_dbg;                   
wire    [31:0]  had_cp0_psr_data;                    
wire    [31:0]  had_idu_wbbr_data;                   
wire            had_idu_wbbr_vld;                    
wire            had_ifu_inst_bkpt_dbq_req;           
wire            had_ifu_inst_bkpt_dbqexp_req;        
wire    [31:0]  had_ifu_ir;                          
wire            had_ifu_ir_vld;                      
wire            had_iu_bkpt_trace_en;                
wire            had_iu_dr_set_req;                   
wire            had_iu_flush_mbee;                   
wire            had_iu_force_dbg_en;                 
wire            had_iu_int_vld;                      
wire            had_iu_mbkpt_fsm_index_mbee;         
wire            had_iu_mem_bkpt_exp_req;             
wire            had_iu_mem_bkpt_mask;                
wire            had_iu_mem_bkpt_req;                 
wire    [30:0]  had_iu_pc;                           
wire            had_iu_rte_pc_sel;                   
wire            had_iu_trace_req;                    
wire            had_iu_trace_req_for_dbg_disable;    
wire            had_iu_xx_fdb;                       
wire            had_iu_xx_jdbreq;                    
wire            had_yy_xx_dbg;                       
wire            had_yy_xx_dp_index_mbee;             
wire            iahbl_bmu_dbus_acc_err;              
wire    [31:0]  iahbl_bmu_dbus_data;                 
wire            iahbl_bmu_dbus_data_vld;             
wire            iahbl_bmu_dbus_grnt;                 
wire            iahbl_bmu_dbus_trans_cmplt;          
wire            iahbl_bmu_ibus_acc_err;              
wire    [31:0]  iahbl_bmu_ibus_data;                 
wire            iahbl_bmu_ibus_data_vld;             
wire            iahbl_bmu_ibus_grnt;                 
wire            iahbl_bmu_ibus_trans_cmplt;          
wire    [31:0]  iahbl_pad_haddr;                     
wire    [2 :0]  iahbl_pad_hburst;                    
wire    [3 :0]  iahbl_pad_hprot;                     
wire    [2 :0]  iahbl_pad_hsize;                     
wire    [1 :0]  iahbl_pad_htrans;                    
wire    [31:0]  iahbl_pad_hwdata;                    
wire            iahbl_pad_hwrite;                    
wire            iahblif_other_mask;                  
wire            ibus_idle;                           
wire            idly_counter_eq_zero;                
wire    [31:0]  ifu_bmu_addr;                        
wire            ifu_bmu_idle;                        
wire    [3 :0]  ifu_bmu_prot;                        
wire            ifu_bmu_req;                         
wire            ifu_bmu_wfd1;                        
wire            ifu_had_chg_flw_inst;                
wire            ifu_had_fetch_expt_vld;              
wire            ifu_had_inst_dbg_disable;            
wire    [31:0]  ifu_had_match_pc;                    
wire            ifu_had_split_first;                 
wire            intc_cpu_int_b;                      
wire            intc_cpu_intraw_b;                   
wire    [7 :0]  intc_cpu_vec_b;                      
wire            iu_bmu_vec_redirect;                 
wire            iu_had_adr_dbg_ack;                  
wire            iu_had_data_bkpt_occur_vld;          
wire            iu_had_dbg_disable_for_tee;          
wire            iu_had_dr_dbg_ack;                   
wire            iu_had_expt_vld;                     
wire            iu_had_fast_retire_acc_err_pc_update; 
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;   
wire            iu_had_flush;                        
wire            iu_had_inst_bkpt_occur_vld;          
wire            iu_had_int_ack;                      
wire            iu_had_retire_with_had_int;          
wire            iu_had_trace_occur_vld;              
wire            iu_had_xx_bkpt_inst;                 
wire    [31:0]  iu_had_xx_data;                      
wire            iu_had_xx_data_vld;                  
wire            iu_had_xx_dbg_ack;                   
wire            iu_had_xx_mldst;                     
wire            iu_had_xx_retire;                    
wire            iu_had_xx_retire_normal;             
wire    [31:0]  iu_had_xx_retire_pc;                 
wire    [31:0]  iu_pad_gpr_data;                     
wire    [4 :0]  iu_pad_gpr_index;                    
wire            iu_pad_gpr_we;                       
wire            iu_pad_inst_retire;                  
wire            iu_pad_inst_split;                   
wire    [31:0]  iu_pad_retire_pc;                    
wire            iu_sysyio_soft_rst;                  
wire            iu_yy_xx_dbgon;                      
wire    [31:0]  lsu_bmu_addr;                        
wire            lsu_bmu_addr_check_fail;             
wire            lsu_bmu_idle;                        
wire    [3 :0]  lsu_bmu_prot;                        
wire            lsu_bmu_req;                         
wire            lsu_bmu_req_without_cmplt;           
wire            lsu_bmu_sg_chk_fail;                 
wire    [1 :0]  lsu_bmu_size;                        
wire            lsu_bmu_store_error;                 
wire    [31:0]  lsu_bmu_wdata;                       
wire            lsu_bmu_wfd1;                        
wire            lsu_bmu_write;                       
wire    [31:0]  lsu_had_addr;                        
wire            lsu_had_addr_vld;                    
wire            lsu_had_ex_cmplt;                    
wire            lsu_had_st;                          
wire            mpu_bmu_dbus_acc_deny;               
wire            mpu_bmu_ibus_acc_deny;               
wire    [31:0]  mpu_cp0_data;                        
wire            mpu_ifu_acc_scu;                     
wire            mpu_lsu_acc_scu;                     
wire    [31:0]  pad_biu_hrdata;                      
wire            pad_biu_hready;                      
wire            pad_biu_hresp;                       
wire    [11:0]  pad_bmu_iahbl_base;                  
wire    [11:0]  pad_bmu_iahbl_mask;                  
wire            pad_cpu_dfs_req;                     
wire    [31:0]  pad_iahbl_hrdata;                    
wire            pad_iahbl_hready;                    
wire            pad_iahbl_hresp;                     
wire            pad_sysio_bigend_b;                  
wire            pad_sysio_dbgrq_b;                   
wire            pad_sysio_endian_v2;                 
wire            pad_yy_gate_clk_en_b;                
wire            pwrm_cpu_avrg_power_inst_issue;      
wire            pwrm_cpu_bus_peak_power_limit_en;    
wire            pwrm_cpu_inst_peak_power_limit_en;   
wire            pwrm_cpu_peak_power_limit_en;        
wire            sahblif_iahblif_mask;                
wire            sbus_idle;                           
wire            sysio_cp0_bigend;                    
wire    [2 :0]  sysio_cp0_clkratio;                  
wire            sysio_cp0_endian_v2;                 
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;           
wire            sysio_had_sdb_req_b;                 
wire            sysio_pad_idlyn_b;                   
wire    [1 :0]  sysio_pad_lpmd_b;                    
wire            sysio_pad_srst;                      
wire            tcipif_bmu_dbus_acc_err;             
wire    [31:0]  tcipif_bmu_dbus_data;                
wire            tcipif_bmu_dbus_data_vld;            
wire            tcipif_bmu_dbus_grnt;                
wire            tcipif_bmu_dbus_trans_cmplt;         
wire            tcipif_bmu_ibus_acc_err;             
wire    [31:0]  tcipif_bmu_ibus_data;                
wire            tcipif_bmu_ibus_data_vld;            
wire            tcipif_bmu_ibus_grnt;                
wire            tcipif_bmu_ibus_trans_cmplt;         




















nm_core  x_nm_core (
  .bmu_lsu_acc_err                      (bmu_lsu_acc_err                     ),
  .bmu_lsu_bstack_chk_fail              (bmu_lsu_bstack_chk_fail             ),
  .bmu_lsu_data                         (bmu_lsu_data                        ),
  .bmu_lsu_data_vld                     (bmu_lsu_data_vld                    ),
  .bmu_lsu_grnt                         (bmu_lsu_grnt                        ),
  .bmu_lsu_trans_cmplt                  (bmu_lsu_trans_cmplt                 ),
  .bmu_xx_ibus_acc_err                  (bmu_xx_ibus_acc_err                 ),
  .bmu_xx_ibus_data                     (bmu_xx_ibus_data                    ),
  .bmu_xx_ibus_data_vld                 (bmu_xx_ibus_data_vld                ),
  .bmu_xx_ibus_grnt                     (bmu_xx_ibus_grnt                    ),
  .bmu_xx_ibus_trans_cmplt              (bmu_xx_ibus_trans_cmplt             ),
  .cache_cp0_lpmd_ack                   (cache_cp0_lpmd_ack                  ),
  .cp0_cache_lpmd_req                   (cp0_cache_lpmd_req                  ),
  .cp0_had_cpuid_idx0                   (cp0_had_cpuid_idx0                  ),
  .cp0_had_lpmd_b                       (cp0_had_lpmd_b                      ),
  .cp0_had_psr_data                     (cp0_had_psr_data                    ),
  .cp0_had_spsr_data                    (cp0_had_spsr_data                   ),
  .cp0_mpu_capr_sel                     (cp0_mpu_capr_sel                    ),
  .cp0_mpu_en                           (cp0_mpu_en                          ),
  .cp0_mpu_pacr_sel                     (cp0_mpu_pacr_sel                    ),
  .cp0_mpu_rid_sel                      (cp0_mpu_rid_sel                     ),
  .cp0_mpu_soft_reset                   (cp0_mpu_soft_reset                  ),
  .cp0_mpu_updt_capr                    (cp0_mpu_updt_capr                   ),
  .cp0_mpu_updt_data                    (cp0_mpu_updt_data                   ),
  .cp0_mpu_updt_pacr                    (cp0_mpu_updt_pacr                   ),
  .cp0_mpu_updt_rid                     (cp0_mpu_updt_rid                    ),
  .cp0_pad_psr                          (cp0_pad_psr                         ),
  .cp0_sysio_ipend_b                    (cp0_sysio_ipend_b                   ),
  .cp0_sysio_lpmd_b                     (cp0_sysio_lpmd_b                    ),
  .cp0_yy_be_v2                         (cp0_yy_be_v2                        ),
  .cp0_yy_clk_en                        (cp0_yy_clk_en                       ),
  .cp0_yy_supv_mode_aft_dbg             (cp0_yy_supv_mode_aft_dbg            ),
  .cpu_intc_ack_vec                     (cpu_intc_ack_vec                    ),
  .cpu_intc_int_ack                     (cpu_intc_int_ack                    ),
  .cpu_intc_int_exit                    (cpu_intc_int_exit                   ),
  .cpu_intc_int_vec                     (cpu_intc_int_vec                    ),
  .cpurst_b                             (cpurst_b                            ),
  .forever_cpuclk                       (forever_cpuclk                      ),
  .had_core_dbg_mode_req                (had_core_dbg_mode_req               ),
  .had_cp0_psr_data                     (had_cp0_psr_data                    ),
  .had_idu_wbbr_data                    (had_idu_wbbr_data                   ),
  .had_idu_wbbr_vld                     (had_idu_wbbr_vld                    ),
  .had_ifu_inst_bkpt_dbq_req            (had_ifu_inst_bkpt_dbq_req           ),
  .had_ifu_inst_bkpt_dbqexp_req         (had_ifu_inst_bkpt_dbqexp_req        ),
  .had_ifu_ir                           (had_ifu_ir                          ),
  .had_ifu_ir_vld                       (had_ifu_ir_vld                      ),
  .had_iu_bkpt_trace_en                 (had_iu_bkpt_trace_en                ),
  .had_iu_dr_set_req                    (had_iu_dr_set_req                   ),
  .had_iu_flush_mbee                    (had_iu_flush_mbee                   ),
  .had_iu_force_dbg_en                  (had_iu_force_dbg_en                 ),
  .had_iu_int_vld                       (had_iu_int_vld                      ),
  .had_iu_mbkpt_fsm_index_mbee          (had_iu_mbkpt_fsm_index_mbee         ),
  .had_iu_mem_bkpt_exp_req              (had_iu_mem_bkpt_exp_req             ),
  .had_iu_mem_bkpt_mask                 (had_iu_mem_bkpt_mask                ),
  .had_iu_mem_bkpt_req                  (had_iu_mem_bkpt_req                 ),
  .had_iu_pc                            (had_iu_pc                           ),
  .had_iu_rte_pc_sel                    (had_iu_rte_pc_sel                   ),
  .had_iu_trace_req                     (had_iu_trace_req                    ),
  .had_iu_trace_req_for_dbg_disable     (had_iu_trace_req_for_dbg_disable    ),
  .had_iu_xx_fdb                        (had_iu_xx_fdb                       ),
  .had_iu_xx_jdbreq                     (had_iu_xx_jdbreq                    ),
  .had_yy_xx_dbg                        (had_yy_xx_dbg                       ),
  .had_yy_xx_dp_index_mbee              (had_yy_xx_dp_index_mbee             ),
  .had_yy_xx_exit_dbg                   (had_core_exit_dbg                   ),
  .idly_counter_eq_zero                 (idly_counter_eq_zero                ),
  .ifu_bmu_addr                         (ifu_bmu_addr                        ),
  .ifu_bmu_idle                         (ifu_bmu_idle                        ),
  .ifu_bmu_prot                         (ifu_bmu_prot                        ),
  .ifu_bmu_req                          (ifu_bmu_req                         ),
  .ifu_bmu_wfd1                         (ifu_bmu_wfd1                        ),
  .ifu_had_chg_flw_inst                 (ifu_had_chg_flw_inst                ),
  .ifu_had_fetch_expt_vld               (ifu_had_fetch_expt_vld              ),
  .ifu_had_inst_dbg_disable             (ifu_had_inst_dbg_disable            ),
  .ifu_had_match_pc                     (ifu_had_match_pc                    ),
  .ifu_had_split_first                  (ifu_had_split_first                 ),
  .intc_cpu_int_b                       (intc_cpu_int_b                      ),
  .intc_cpu_intraw_b                    (intc_cpu_intraw_b                   ),
  .intc_cpu_vec_b                       (intc_cpu_vec_b                      ),
  .iu_bmu_vec_redirect                  (iu_bmu_vec_redirect                 ),
  .iu_had_adr_dbg_ack                   (iu_had_adr_dbg_ack                  ),
  .iu_had_data_bkpt_occur_vld           (iu_had_data_bkpt_occur_vld          ),
  .iu_had_dbg_disable_for_tee           (iu_had_dbg_disable_for_tee          ),
  .iu_had_dr_dbg_ack                    (iu_had_dr_dbg_ack                   ),
  .iu_had_expt_vld                      (iu_had_expt_vld                     ),
  .iu_had_fast_retire_acc_err_pc_update (iu_had_fast_retire_acc_err_pc_update),
  .iu_had_fast_retire_acc_err_pc_val    (iu_had_fast_retire_acc_err_pc_val   ),
  .iu_had_flush                         (iu_had_flush                        ),
  .iu_had_inst_bkpt_occur_vld           (iu_had_inst_bkpt_occur_vld          ),
  .iu_had_int_ack                       (iu_had_int_ack                      ),
  .iu_had_retire_with_had_int           (iu_had_retire_with_had_int          ),
  .iu_had_trace_occur_vld               (iu_had_trace_occur_vld              ),
  .iu_had_xx_bkpt_inst                  (iu_had_xx_bkpt_inst                 ),
  .iu_had_xx_data                       (iu_had_xx_data                      ),
  .iu_had_xx_data_vld                   (iu_had_xx_data_vld                  ),
  .iu_had_xx_dbg_ack                    (iu_had_xx_dbg_ack                   ),
  .iu_had_xx_mldst                      (iu_had_xx_mldst                     ),
  .iu_had_xx_retire                     (iu_had_xx_retire                    ),
  .iu_had_xx_retire_normal              (iu_had_xx_retire_normal             ),
  .iu_had_xx_retire_pc                  (iu_had_xx_retire_pc                 ),
  .iu_pad_gpr_data                      (iu_pad_gpr_data                     ),
  .iu_pad_gpr_index                     (iu_pad_gpr_index                    ),
  .iu_pad_gpr_we                        (iu_pad_gpr_we                       ),
  .iu_pad_inst_retire                   (iu_pad_inst_retire                  ),
  .iu_pad_inst_split                    (iu_pad_inst_split                   ),
  .iu_pad_retire_pc                     (iu_pad_retire_pc                    ),
  .iu_sysyio_soft_rst                   (iu_sysyio_soft_rst                  ),
  .iu_yy_xx_dbgon                       (iu_yy_xx_dbgon                      ),
  .lsu_bmu_addr                         (lsu_bmu_addr                        ),
  .lsu_bmu_addr_check_fail              (lsu_bmu_addr_check_fail             ),
  .lsu_bmu_idle                         (lsu_bmu_idle                        ),
  .lsu_bmu_prot                         (lsu_bmu_prot                        ),
  .lsu_bmu_req                          (lsu_bmu_req                         ),
  .lsu_bmu_req_without_cmplt            (lsu_bmu_req_without_cmplt           ),
  .lsu_bmu_sg_chk_fail                  (lsu_bmu_sg_chk_fail                 ),
  .lsu_bmu_size                         (lsu_bmu_size                        ),
  .lsu_bmu_store_error                  (lsu_bmu_store_error                 ),
  .lsu_bmu_wdata                        (lsu_bmu_wdata                       ),
  .lsu_bmu_wfd1                         (lsu_bmu_wfd1                        ),
  .lsu_bmu_write                        (lsu_bmu_write                       ),
  .lsu_had_addr                         (lsu_had_addr                        ),
  .lsu_had_addr_vld                     (lsu_had_addr_vld                    ),
  .lsu_had_ex_cmplt                     (lsu_had_ex_cmplt                    ),
  .lsu_had_st                           (lsu_had_st                          ),
  .mpu_cp0_data                         (mpu_cp0_data                        ),
  .mpu_ifu_acc_scu                      (mpu_ifu_acc_scu                     ),
  .mpu_lsu_acc_scu                      (mpu_lsu_acc_scu                     ),
  .pad_yy_gate_clk_en_b                 (pad_yy_gate_clk_en_b                ),
  .pwrm_cpu_avrg_power_inst_issue       (pwrm_cpu_avrg_power_inst_issue      ),
  .pwrm_cpu_inst_peak_power_limit_en    (pwrm_cpu_inst_peak_power_limit_en   ),
  .pwrm_cpu_peak_power_limit_en         (pwrm_cpu_peak_power_limit_en        ),
  .sysio_cp0_bigend                     (sysio_cp0_bigend                    ),
  .sysio_cp0_clkratio                   (sysio_cp0_clkratio                  ),
  .sysio_cp0_endian_v2                  (sysio_cp0_endian_v2                 ),
  .sysio_cp0_sys_view_lpmd_b            (sysio_cp0_sys_view_lpmd_b           )
);












nm_mpu_top  x_nm_mpu_top (
  .cp0_mpu_capr_sel         (cp0_mpu_capr_sel        ),
  .cp0_mpu_en               (cp0_mpu_en              ),
  .cp0_mpu_pacr_sel         (cp0_mpu_pacr_sel        ),
  .cp0_mpu_rid_sel          (cp0_mpu_rid_sel         ),
  .cp0_mpu_soft_reset       (cp0_mpu_soft_reset      ),
  .cp0_mpu_updt_capr        (cp0_mpu_updt_capr       ),
  .cp0_mpu_updt_data        (cp0_mpu_updt_data       ),
  .cp0_mpu_updt_pacr        (cp0_mpu_updt_pacr       ),
  .cp0_mpu_updt_rid         (cp0_mpu_updt_rid        ),
  .cp0_yy_clk_en            (cp0_yy_clk_en           ),
  .cp0_yy_supv_mode_aft_dbg (cp0_yy_supv_mode_aft_dbg),
  .cpurst_b                 (cpurst_b                ),
  .forever_cpuclk           (forever_cpuclk          ),
  .ifu_bmu_addr             (ifu_bmu_addr            ),
  .lsu_bmu_addr             (lsu_bmu_addr            ),
  .lsu_bmu_write            (lsu_bmu_write           ),
  .mpu_bmu_dbus_acc_deny    (mpu_bmu_dbus_acc_deny   ),
  .mpu_bmu_ibus_acc_deny    (mpu_bmu_ibus_acc_deny   ),
  .mpu_cp0_data             (mpu_cp0_data            ),
  .mpu_ifu_acc_scu          (mpu_ifu_acc_scu         ),
  .mpu_lsu_acc_scu          (mpu_lsu_acc_scu         ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);






nm_bmu_top  x_nm_bmu_top (
  .biu_bmu_dbus_acc_err             (biu_bmu_dbus_acc_err            ),
  .biu_bmu_dbus_data                (biu_bmu_dbus_data               ),
  .biu_bmu_dbus_data_vld            (biu_bmu_dbus_data_vld           ),
  .biu_bmu_dbus_grnt                (biu_bmu_dbus_grnt               ),
  .biu_bmu_dbus_trans_cmplt         (biu_bmu_dbus_trans_cmplt        ),
  .biu_bmu_ibus_acc_err             (biu_bmu_ibus_acc_err            ),
  .biu_bmu_ibus_data                (biu_bmu_ibus_data               ),
  .biu_bmu_ibus_data_vld            (biu_bmu_ibus_data_vld           ),
  .biu_bmu_ibus_grnt                (biu_bmu_ibus_grnt               ),
  .biu_bmu_ibus_trans_cmplt         (biu_bmu_ibus_trans_cmplt        ),
  .bmu_biu_dbus_acc_deny            (bmu_biu_dbus_acc_deny           ),
  .bmu_biu_dbus_addr                (bmu_biu_dbus_addr               ),
  .bmu_biu_dbus_chk_fail            (bmu_biu_dbus_chk_fail           ),
  .bmu_biu_dbus_prot                (bmu_biu_dbus_prot               ),
  .bmu_biu_dbus_req                 (bmu_biu_dbus_req                ),
  .bmu_biu_dbus_req_without_cmplt   (bmu_biu_dbus_req_without_cmplt  ),
  .bmu_biu_dbus_size                (bmu_biu_dbus_size               ),
  .bmu_biu_dbus_wdata               (bmu_biu_dbus_wdata              ),
  .bmu_biu_dbus_write               (bmu_biu_dbus_write              ),
  .bmu_biu_ibus_acc_deny            (bmu_biu_ibus_acc_deny           ),
  .bmu_biu_ibus_addr                (bmu_biu_ibus_addr               ),
  .bmu_biu_ibus_hit                 (bmu_biu_ibus_hit                ),
  .bmu_biu_ibus_prot                (bmu_biu_ibus_prot               ),
  .bmu_biu_ibus_req                 (bmu_biu_ibus_req                ),
  .bmu_biu_ibus_req_no_hit          (bmu_biu_ibus_req_no_hit         ),
  .bmu_biu_ibus_size                (bmu_biu_ibus_size               ),
  .bmu_biu_ibus_vec_redirect        (bmu_biu_ibus_vec_redirect       ),
  .bmu_iahbl_dbus_acc_deny          (bmu_iahbl_dbus_acc_deny         ),
  .bmu_iahbl_dbus_addr              (bmu_iahbl_dbus_addr             ),
  .bmu_iahbl_dbus_chk_fail          (bmu_iahbl_dbus_chk_fail         ),
  .bmu_iahbl_dbus_prot              (bmu_iahbl_dbus_prot             ),
  .bmu_iahbl_dbus_req               (bmu_iahbl_dbus_req              ),
  .bmu_iahbl_dbus_req_without_cmplt (bmu_iahbl_dbus_req_without_cmplt),
  .bmu_iahbl_dbus_size              (bmu_iahbl_dbus_size             ),
  .bmu_iahbl_dbus_wdata             (bmu_iahbl_dbus_wdata            ),
  .bmu_iahbl_dbus_write             (bmu_iahbl_dbus_write            ),
  .bmu_iahbl_ibus_acc_deny          (bmu_iahbl_ibus_acc_deny         ),
  .bmu_iahbl_ibus_addr              (bmu_iahbl_ibus_addr             ),
  .bmu_iahbl_ibus_hit               (bmu_iahbl_ibus_hit              ),
  .bmu_iahbl_ibus_prot              (bmu_iahbl_ibus_prot             ),
  .bmu_iahbl_ibus_req               (bmu_iahbl_ibus_req              ),
  .bmu_iahbl_ibus_req_no_hit        (bmu_iahbl_ibus_req_no_hit       ),
  .bmu_iahbl_ibus_size              (bmu_iahbl_ibus_size             ),
  .bmu_iahbl_ibus_vec_redirect      (bmu_iahbl_ibus_vec_redirect     ),
  .bmu_lsu_acc_err                  (bmu_lsu_acc_err                 ),
  .bmu_lsu_bstack_chk_fail          (bmu_lsu_bstack_chk_fail         ),
  .bmu_lsu_data                     (bmu_lsu_data                    ),
  .bmu_lsu_data_vld                 (bmu_lsu_data_vld                ),
  .bmu_lsu_grnt                     (bmu_lsu_grnt                    ),
  .bmu_lsu_trans_cmplt              (bmu_lsu_trans_cmplt             ),
  .bmu_tcipif_dbus_acc_deny         (bmu_tcipif_dbus_acc_deny        ),
  .bmu_tcipif_dbus_addr             (bmu_tcipif_dbus_addr            ),
  .bmu_tcipif_dbus_chk_fail         (bmu_tcipif_dbus_chk_fail        ),
  .bmu_tcipif_dbus_req              (bmu_tcipif_dbus_req             ),
  .bmu_tcipif_dbus_supv_mode        (bmu_tcipif_dbus_supv_mode       ),
  .bmu_tcipif_dbus_wdata            (bmu_tcipif_dbus_wdata           ),
  .bmu_tcipif_dbus_write            (bmu_tcipif_dbus_write           ),
  .bmu_tcipif_ibus_acc_deny         (bmu_tcipif_ibus_acc_deny        ),
  .bmu_tcipif_ibus_addr             (bmu_tcipif_ibus_addr            ),
  .bmu_tcipif_ibus_req              (bmu_tcipif_ibus_req             ),
  .bmu_tcipif_ibus_write            (bmu_tcipif_ibus_write           ),
  .bmu_xx_ibus_acc_err              (bmu_xx_ibus_acc_err             ),
  .bmu_xx_ibus_data                 (bmu_xx_ibus_data                ),
  .bmu_xx_ibus_data_vld             (bmu_xx_ibus_data_vld            ),
  .bmu_xx_ibus_grnt                 (bmu_xx_ibus_grnt                ),
  .bmu_xx_ibus_trans_cmplt          (bmu_xx_ibus_trans_cmplt         ),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cp0_yy_supv_mode_aft_dbg         (cp0_yy_supv_mode_aft_dbg        ),
  .cpurst_b                         (cpurst_b                        ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .iahbl_bmu_dbus_acc_err           (iahbl_bmu_dbus_acc_err          ),
  .iahbl_bmu_dbus_data              (iahbl_bmu_dbus_data             ),
  .iahbl_bmu_dbus_data_vld          (iahbl_bmu_dbus_data_vld         ),
  .iahbl_bmu_dbus_grnt              (iahbl_bmu_dbus_grnt             ),
  .iahbl_bmu_dbus_trans_cmplt       (iahbl_bmu_dbus_trans_cmplt      ),
  .iahbl_bmu_ibus_acc_err           (iahbl_bmu_ibus_acc_err          ),
  .iahbl_bmu_ibus_data              (iahbl_bmu_ibus_data             ),
  .iahbl_bmu_ibus_data_vld          (iahbl_bmu_ibus_data_vld         ),
  .iahbl_bmu_ibus_grnt              (iahbl_bmu_ibus_grnt             ),
  .iahbl_bmu_ibus_trans_cmplt       (iahbl_bmu_ibus_trans_cmplt      ),
  .ifu_bmu_addr                     (ifu_bmu_addr                    ),
  .ifu_bmu_idle                     (ifu_bmu_idle                    ),
  .ifu_bmu_prot                     (ifu_bmu_prot                    ),
  .ifu_bmu_req                      (ifu_bmu_req                     ),
  .ifu_bmu_wfd1                     (ifu_bmu_wfd1                    ),
  .iu_bmu_vec_redirect              (iu_bmu_vec_redirect             ),
  .lsu_bmu_addr                     (lsu_bmu_addr                    ),
  .lsu_bmu_addr_check_fail          (lsu_bmu_addr_check_fail         ),
  .lsu_bmu_idle                     (lsu_bmu_idle                    ),
  .lsu_bmu_prot                     (lsu_bmu_prot                    ),
  .lsu_bmu_req                      (lsu_bmu_req                     ),
  .lsu_bmu_req_without_cmplt        (lsu_bmu_req_without_cmplt       ),
  .lsu_bmu_sg_chk_fail              (lsu_bmu_sg_chk_fail             ),
  .lsu_bmu_size                     (lsu_bmu_size                    ),
  .lsu_bmu_store_error              (lsu_bmu_store_error             ),
  .lsu_bmu_wdata                    (lsu_bmu_wdata                   ),
  .lsu_bmu_wfd1                     (lsu_bmu_wfd1                    ),
  .lsu_bmu_write                    (lsu_bmu_write                   ),
  .mpu_bmu_dbus_acc_deny            (mpu_bmu_dbus_acc_deny           ),
  .mpu_bmu_ibus_acc_deny            (mpu_bmu_ibus_acc_deny           ),
  .pad_bmu_iahbl_base               (pad_bmu_iahbl_base              ),
  .pad_bmu_iahbl_mask               (pad_bmu_iahbl_mask              ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .tcipif_bmu_dbus_acc_err          (tcipif_bmu_dbus_acc_err         ),
  .tcipif_bmu_dbus_data             (tcipif_bmu_dbus_data            ),
  .tcipif_bmu_dbus_data_vld         (tcipif_bmu_dbus_data_vld        ),
  .tcipif_bmu_dbus_grnt             (tcipif_bmu_dbus_grnt            ),
  .tcipif_bmu_dbus_trans_cmplt      (tcipif_bmu_dbus_trans_cmplt     ),
  .tcipif_bmu_ibus_acc_err          (tcipif_bmu_ibus_acc_err         ),
  .tcipif_bmu_ibus_data             (tcipif_bmu_ibus_data            ),
  .tcipif_bmu_ibus_data_vld         (tcipif_bmu_ibus_data_vld        ),
  .tcipif_bmu_ibus_grnt             (tcipif_bmu_ibus_grnt            ),
  .tcipif_bmu_ibus_trans_cmplt      (tcipif_bmu_ibus_trans_cmplt     )
);











assign cache_cp0_lpmd_ack =1'b1;

always @ (posedge forever_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    pad_cpu_halt_ff1 <= 1'b0;
    pad_cpu_halt_ff2 <= 1'b0;
  end
  else
  begin
    pad_cpu_halt_ff1 <= pad_cpu_dfs_req;
    pad_cpu_halt_ff2 <= pad_cpu_halt_ff1;
  end
end

assign cpu_pad_dfs_ack = ibus_idle && dbus_idle && sbus_idle
                       && pad_cpu_halt_ff2;







nm_sahbl_top  x_nm_sahbl_top (
  .ahblif_idle                      (sbus_idle                       ),
  .biu_bmu_dbus_acc_err             (biu_bmu_dbus_acc_err            ),
  .biu_bmu_dbus_data                (biu_bmu_dbus_data               ),
  .biu_bmu_dbus_data_vld            (biu_bmu_dbus_data_vld           ),
  .biu_bmu_dbus_grnt                (biu_bmu_dbus_grnt               ),
  .biu_bmu_dbus_trans_cmplt         (biu_bmu_dbus_trans_cmplt        ),
  .biu_bmu_ibus_acc_err             (biu_bmu_ibus_acc_err            ),
  .biu_bmu_ibus_data                (biu_bmu_ibus_data               ),
  .biu_bmu_ibus_data_vld            (biu_bmu_ibus_data_vld           ),
  .biu_bmu_ibus_grnt                (biu_bmu_ibus_grnt               ),
  .biu_bmu_ibus_trans_cmplt         (biu_bmu_ibus_trans_cmplt        ),
  .biu_pad_haddr                    (biu_pad_haddr                   ),
  .biu_pad_hburst                   (biu_pad_hburst                  ),
  .biu_pad_hprot                    (biu_pad_hprot                   ),
  .biu_pad_hsize                    (biu_pad_hsize                   ),
  .biu_pad_htrans                   (biu_pad_htrans                  ),
  .biu_pad_hwdata                   (biu_pad_hwdata                  ),
  .biu_pad_hwrite                   (biu_pad_hwrite                  ),
  .bmu_biu_dbus_acc_deny            (bmu_biu_dbus_acc_deny           ),
  .bmu_biu_dbus_addr                (bmu_biu_dbus_addr               ),
  .bmu_biu_dbus_chk_fail            (bmu_biu_dbus_chk_fail           ),
  .bmu_biu_dbus_prot                (bmu_biu_dbus_prot               ),
  .bmu_biu_dbus_req                 (bmu_biu_dbus_req                ),
  .bmu_biu_dbus_req_without_cmplt   (bmu_biu_dbus_req_without_cmplt  ),
  .bmu_biu_dbus_size                (bmu_biu_dbus_size               ),
  .bmu_biu_dbus_wdata               (bmu_biu_dbus_wdata              ),
  .bmu_biu_dbus_write               (bmu_biu_dbus_write              ),
  .bmu_biu_ibus_acc_deny            (bmu_biu_ibus_acc_deny           ),
  .bmu_biu_ibus_addr                (bmu_biu_ibus_addr               ),
  .bmu_biu_ibus_hit                 (bmu_biu_ibus_hit                ),
  .bmu_biu_ibus_prot                (bmu_biu_ibus_prot               ),
  .bmu_biu_ibus_req                 (bmu_biu_ibus_req                ),
  .bmu_biu_ibus_req_no_hit          (bmu_biu_ibus_req_no_hit         ),
  .bmu_biu_ibus_size                (bmu_biu_ibus_size               ),
  .bmu_biu_ibus_vec_redirect        (bmu_biu_ibus_vec_redirect       ),
  .cpurst_b                         (cpurst_b                        ),
  .dahblif_other_mask               (dahblif_other_mask              ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .iahblif_other_mask               (iahblif_other_mask              ),
  .pad_biu_hrdata                   (pad_biu_hrdata                  ),
  .pad_biu_hready                   (pad_biu_hready                  ),
  .pad_biu_hresp                    (pad_biu_hresp                   ),
  .pad_cpu_halt_ff2                 (pad_cpu_halt_ff2                ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .pwrm_cpu_bus_peak_power_limit_en (pwrm_cpu_bus_peak_power_limit_en),
  .sahblif_iahblif_mask             (sahblif_iahblif_mask            )
);







nm_iahbl_top  x_nm_iahbl_top (
  .ahblif_idle                      (ibus_idle                       ),
  .bmu_iahbl_dbus_acc_deny          (bmu_iahbl_dbus_acc_deny         ),
  .bmu_iahbl_dbus_addr              (bmu_iahbl_dbus_addr             ),
  .bmu_iahbl_dbus_chk_fail          (bmu_iahbl_dbus_chk_fail         ),
  .bmu_iahbl_dbus_prot              (bmu_iahbl_dbus_prot             ),
  .bmu_iahbl_dbus_req               (bmu_iahbl_dbus_req              ),
  .bmu_iahbl_dbus_req_without_cmplt (bmu_iahbl_dbus_req_without_cmplt),
  .bmu_iahbl_dbus_size              (bmu_iahbl_dbus_size             ),
  .bmu_iahbl_dbus_wdata             (bmu_iahbl_dbus_wdata            ),
  .bmu_iahbl_dbus_write             (bmu_iahbl_dbus_write            ),
  .bmu_iahbl_ibus_acc_deny          (bmu_iahbl_ibus_acc_deny         ),
  .bmu_iahbl_ibus_addr              (bmu_iahbl_ibus_addr             ),
  .bmu_iahbl_ibus_hit               (bmu_iahbl_ibus_hit              ),
  .bmu_iahbl_ibus_prot              (bmu_iahbl_ibus_prot             ),
  .bmu_iahbl_ibus_req               (bmu_iahbl_ibus_req              ),
  .bmu_iahbl_ibus_req_no_hit        (bmu_iahbl_ibus_req_no_hit       ),
  .bmu_iahbl_ibus_size              (bmu_iahbl_ibus_size             ),
  .bmu_iahbl_ibus_vec_redirect      (bmu_iahbl_ibus_vec_redirect     ),
  .cpurst_b                         (cpurst_b                        ),
  .dahblif_other_mask               (dahblif_other_mask              ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .iahbl_bmu_dbus_acc_err           (iahbl_bmu_dbus_acc_err          ),
  .iahbl_bmu_dbus_data              (iahbl_bmu_dbus_data             ),
  .iahbl_bmu_dbus_data_vld          (iahbl_bmu_dbus_data_vld         ),
  .iahbl_bmu_dbus_grnt              (iahbl_bmu_dbus_grnt             ),
  .iahbl_bmu_dbus_trans_cmplt       (iahbl_bmu_dbus_trans_cmplt      ),
  .iahbl_bmu_ibus_acc_err           (iahbl_bmu_ibus_acc_err          ),
  .iahbl_bmu_ibus_data              (iahbl_bmu_ibus_data             ),
  .iahbl_bmu_ibus_data_vld          (iahbl_bmu_ibus_data_vld         ),
  .iahbl_bmu_ibus_grnt              (iahbl_bmu_ibus_grnt             ),
  .iahbl_bmu_ibus_trans_cmplt       (iahbl_bmu_ibus_trans_cmplt      ),
  .iahbl_pad_haddr                  (iahbl_pad_haddr                 ),
  .iahbl_pad_hburst                 (iahbl_pad_hburst                ),
  .iahbl_pad_hprot                  (iahbl_pad_hprot                 ),
  .iahbl_pad_hsize                  (iahbl_pad_hsize                 ),
  .iahbl_pad_htrans                 (iahbl_pad_htrans                ),
  .iahbl_pad_hwdata                 (iahbl_pad_hwdata                ),
  .iahbl_pad_hwrite                 (iahbl_pad_hwrite                ),
  .iahblif_other_mask               (iahblif_other_mask              ),
  .pad_cpu_halt_ff2                 (pad_cpu_halt_ff2                ),
  .pad_iahbl_hrdata                 (pad_iahbl_hrdata                ),
  .pad_iahbl_hready                 (pad_iahbl_hready                ),
  .pad_iahbl_hresp                  (pad_iahbl_hresp                 ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            ),
  .pwrm_cpu_bus_peak_power_limit_en (pwrm_cpu_bus_peak_power_limit_en),
  .sahblif_iahblif_mask             (sahblif_iahblif_mask            )
);





assign dahblif_other_mask = 1'b0;  
assign dbus_idle = 1'b1;





nm_sys_io  x_nm_sys_io (
  .cp0_sysio_ipend_b         (cp0_sysio_ipend_b        ),
  .cp0_sysio_lpmd_b          (cp0_sysio_lpmd_b         ),
  .cpurst_b                  (cpurst_b                 ),
  .forever_cpuclk            (forever_cpuclk           ),
  .had_yy_xx_dbg             (had_yy_xx_dbg            ),
  .idly_counter_eq_zero      (idly_counter_eq_zero     ),
  .intc_cpu_intraw_b         (intc_cpu_intraw_b        ),
  .iu_sysyio_soft_rst        (iu_sysyio_soft_rst       ),
  .iu_yy_xx_dbgon            (iu_yy_xx_dbgon           ),
  .pad_sysio_bigend_b        (pad_sysio_bigend_b       ),
  .pad_sysio_dbgrq_b         (pad_sysio_dbgrq_b        ),
  .pad_sysio_endian_v2       (pad_sysio_endian_v2      ),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     ),
  .sysio_cp0_bigend          (sysio_cp0_bigend         ),
  .sysio_cp0_clkratio        (sysio_cp0_clkratio       ),
  .sysio_cp0_endian_v2       (sysio_cp0_endian_v2      ),
  .sysio_cp0_sys_view_lpmd_b (sysio_cp0_sys_view_lpmd_b),
  .sysio_had_sdb_req_b       (sysio_had_sdb_req_b      ),
  .sysio_pad_idlyn_b         (sysio_pad_idlyn_b        ),
  .sysio_pad_lpmd_b          (sysio_pad_lpmd_b         ),
  .sysio_pad_srst            (sysio_pad_srst           )
);



endmodule


























module nm_coretim_top(
  core_dbgon,
  coretim_tcipif_cmplt,
  coretim_tcipif_rdata,
  cpurst_b,
  ctim_pad_int_vld,
  forever_cpuclk,
  forever_cpuclk_nogated,
  pad_ctim_calib,
  pad_ctim_refclk,
  pad_yy_gate_clk_en_b,
  tcipif_coretim_addr,
  tcipif_coretim_sel,
  tcipif_coretim_wdata,
  tcipif_coretim_write
);


input           core_dbgon;            
input           cpurst_b;              
input           forever_cpuclk;        
input           forever_cpuclk_nogated; 
input   [25:0]  pad_ctim_calib;        
input           pad_ctim_refclk;       
input           pad_yy_gate_clk_en_b;  
input   [15:0]  tcipif_coretim_addr;   
input           tcipif_coretim_sel;    
input   [31:0]  tcipif_coretim_wdata;  
input           tcipif_coretim_write;  
output          coretim_tcipif_cmplt;  
output  [31:0]  coretim_tcipif_rdata;  
output          ctim_pad_int_vld;      


reg     [23:0]  cnt;                   
reg     [31:0]  coretim_tcipif_rdata;  
reg             csr_clksrc;            
reg             csr_cntflg;            
reg             csr_en;                
reg             csr_tickint;           
reg             is_counting;           
reg             refclk_ff1;            
reg             refclk_ff2;            
reg             refclk_ff3;            
reg     [23:0]  rvr;                   


wire            calib_noref;           
wire            calib_skew;            
wire    [23:0]  calib_tenms;           
wire            cnt_23_1_is_zero;      
wire            cnt_clk;               
wire            cnt_clk_en;            
wire            cnt_en;                
wire            cnt_en_cpuclk;         
wire            cnt_en_pre;            
wire            cnt_en_refclk;         
wire            cnt_is_one;            
wire            cnt_is_zero;           
wire    [23:0]  cnt_value;             
wire            core_dbgon;            
wire            coretim_reg_ren;       
wire            coretim_reg_sel;       
wire            coretim_reg_wen;       
wire            coretim_rst_b;         
wire            coretim_tcipif_cmplt;  
wire            cpuclk;                
wire            cpuclk_nogated;        
wire            cpurst_b;              
wire            csr_cntflg_clk_en;     
wire            csr_ren;               
wire            csr_wen;               
wire            ct_reg_cpuclk;         
wire            ct_reg_en;             
wire            ctim_pad_int_vld;      
wire    [23:0]  cvr;                   
wire            cvr_wen;               
wire            dbgon;                 
wire            forever_cpuclk;        
wire            forever_cpuclk_nogated; 
wire    [25:0]  pad_ctim_calib;        
wire            pad_ctim_refclk;       
wire            pad_yy_gate_clk_en_b;  
wire            reach_zero;            
wire            refclk;                
wire            refclk_ff2_ff3_pulse;  
wire            rvr_wen;               
wire            syn_clk;               
wire            syn_ff_clk_en;         
wire    [15:0]  tcipif_coretim_addr;   
wire            tcipif_coretim_sel;    
wire    [31:0]  tcipif_coretim_wdata;  
wire            tcipif_coretim_write;  









assign dbgon          = core_dbgon;
assign coretim_rst_b  = cpurst_b;
assign refclk         = pad_ctim_refclk;
assign cpuclk_nogated = forever_cpuclk_nogated;
assign cpuclk         = forever_cpuclk;




assign coretim_reg_sel = tcipif_coretim_sel && (tcipif_coretim_addr[7:4]==4'h1);
assign coretim_reg_wen = coretim_reg_sel && tcipif_coretim_write;
assign coretim_reg_ren = coretim_reg_sel && !tcipif_coretim_write;

assign csr_wen = coretim_reg_wen && (tcipif_coretim_addr[3:2]==2'b00);
assign rvr_wen = coretim_reg_wen && (tcipif_coretim_addr[3:2]==2'b01);
assign cvr_wen = coretim_reg_wen && (tcipif_coretim_addr[3:2]==2'b10);
assign csr_ren = coretim_reg_ren && (tcipif_coretim_addr[3:2]==2'b00);







always @( rvr[23:0]
       or calib_skew
       or cvr[23:0]
       or tcipif_coretim_addr[3:2]
       or csr_clksrc
       or coretim_reg_ren
       or csr_en
       or calib_noref
       or csr_cntflg
       or calib_tenms[23:0]
       or csr_tickint)
begin
  case({coretim_reg_ren, tcipif_coretim_addr[3:2]})
  3'b100:
    coretim_tcipif_rdata[31:0] = {15'b0, csr_cntflg, 13'b0, csr_clksrc,
                               csr_tickint, csr_en};
  3'b101:
    coretim_tcipif_rdata[31:0] = {8'b0, rvr[23:0]};
  3'b110:
    coretim_tcipif_rdata[31:0] = {8'b0, cvr[23:0]};
  3'b111:
    coretim_tcipif_rdata[31:0] = {calib_noref, calib_skew, 6'b0,
                                  calib_tenms[23:0]};
  default:
    coretim_tcipif_rdata[31:0] = 32'b0;
  endcase

end





assign coretim_tcipif_cmplt = tcipif_coretim_sel;





assign ct_reg_en = csr_wen|rvr_wen;


gated_clk_cell  x_ct_reg_gated (
  .clk_in               (cpuclk              ),
  .clk_out              (ct_reg_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ct_reg_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);











always @(posedge ct_reg_cpuclk or negedge coretim_rst_b)
begin
  if(!coretim_rst_b) begin
    csr_en <= 1'b0;
    csr_tickint <= 1'b0;
  end
  else if(csr_wen) begin
    csr_en <= tcipif_coretim_wdata[0];
    csr_tickint <= tcipif_coretim_wdata[1];
  end
  else begin
    csr_en <= csr_en;
    csr_tickint <= csr_tickint;
  end
end


always @(posedge ct_reg_cpuclk or negedge coretim_rst_b)
begin
  if(!coretim_rst_b)
    csr_clksrc <= 1'b1;
  else if(csr_wen && ~calib_noref)
    csr_clksrc <= tcipif_coretim_wdata[2];
  else
    csr_clksrc <= csr_clksrc;
end






assign csr_cntflg_clk_en = cvr_wen || reach_zero || csr_ren;
always @(posedge cnt_clk or negedge coretim_rst_b)
begin
  if(!coretim_rst_b)
    csr_cntflg <= 1'b0;
  else if(cvr_wen)
    csr_cntflg <= 1'b0;
  else if (reach_zero)
    csr_cntflg <= 1'b1;
  else if (csr_ren)
    csr_cntflg <= 1'b0;
  else
    csr_cntflg <= csr_cntflg;
end


always @(posedge ct_reg_cpuclk)
begin
  if(rvr_wen)
    rvr[23:0] <= tcipif_coretim_wdata[23:0];
  else
    rvr[23:0] <= rvr[23:0];
end


assign cvr[23:0] = cnt_value[23:0] ;


assign calib_noref       = pad_ctim_calib[25];
assign calib_skew        = pad_ctim_calib[24];
assign calib_tenms[23:0] = pad_ctim_calib[23:0];





assign ctim_pad_int_vld = csr_tickint ? csr_cntflg : 1'b0;








assign cnt_en_pre    = csr_en && !((rvr[23:0] == 24'b0) && cnt_is_zero);
assign cnt_en_cpuclk = cnt_en_pre;
assign cnt_en_refclk = cnt_en_pre && refclk_ff2_ff3_pulse;





assign cnt_en        = csr_clksrc ? cnt_en_cpuclk : cnt_en_refclk;


assign syn_ff_clk_en = csr_en && !csr_clksrc;

gated_clk_cell  x_syn_gated (
  .clk_in               (cpuclk_nogated      ),
  .clk_out              (syn_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (syn_ff_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);




















always @(posedge syn_clk or negedge coretim_rst_b)
begin
  if(!coretim_rst_b) begin
    refclk_ff1 <= 1'b0;
    refclk_ff2 <= 1'b0;
    refclk_ff3 <= 1'b0;
  end
  else begin
    refclk_ff1 <= refclk;
    refclk_ff2 <= refclk_ff1;
    refclk_ff3 <= refclk_ff2;
  end
end
assign refclk_ff2_ff3_pulse = refclk_ff2 && !refclk_ff3;












assign cnt_clk_en = cvr_wen || cnt_en || is_counting || csr_cntflg_clk_en;

gated_clk_cell  x_cnt_gated (
  .clk_in               (cpuclk_nogated      ),
  .clk_out              (cnt_clk             ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (cnt_clk_en          ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);










always @(posedge cnt_clk)
begin
  if(cvr_wen)
    cnt[23:0] <= 24'b0;
  else if(dbgon)
    cnt[23:0] <= cnt[23:0];
  else if(cnt_en)
  begin
    if(cnt_is_zero)
      cnt[23:0] <= rvr[23:0];
    else
      cnt[23:0] <= cnt[23:0] - 24'b1;
  end
  else
    cnt[23:0] <= cnt[23:0];
end

always @(posedge cnt_clk or negedge coretim_rst_b)
begin
  if(!coretim_rst_b)
    is_counting <= 1'b0;
  else if(cvr_wen)
    is_counting <= 1'b0;
  else if(dbgon)
    is_counting <= is_counting;
  else if(cnt_is_one && cnt_en)
    is_counting <= 1'b1;
  else if(is_counting)
    is_counting <= 1'b0;
  else
    is_counting <= is_counting;
end

assign cnt_23_1_is_zero = (cnt[23:1] == 23'b0);
assign cnt_is_zero = (cnt_23_1_is_zero && (cnt[0]==1'b0));
assign cnt_is_one  = (cnt_23_1_is_zero && (cnt[0]==1'b1));
assign reach_zero = cnt_is_zero && is_counting;

assign cnt_value[23:0] = cnt[23:0];


endmodule



























module nm_cp0_iui(
  ccr_value,
  chr_value,
  cp0_iu_data,
  cp0_iu_data_vld,
  cp0_iu_dbg_disable_for_tee,
  cp0_iu_expt_vec,
  cp0_iu_expt_vld,
  cp0_iu_flush,
  cp0_iu_flush_chgflw_vld,
  cp0_iu_idly_counter_clear,
  cp0_iu_req,
  cp0_iu_rte_chgflw_vld,
  cp0_iu_rte_chgflw_vld_for_data,
  cp0_iu_stall,
  cp0_mpu_capr_sel,
  cp0_mpu_pacr_sel,
  cp0_mpu_rid_sel,
  cpuid_value,
  epc_value,
  epsr_value,
  inst_doze,
  inst_lpmd,
  inst_mfcr,
  inst_mtcr,
  inst_psrclr,
  inst_psrset,
  inst_rte,
  inst_stop,
  inst_wait,
  iu_cp0_ex_data_sel,
  iu_cp0_ex_doze,
  iu_cp0_ex_mfcr,
  iu_cp0_ex_mtcr,
  iu_cp0_ex_psrclr,
  iu_cp0_ex_psrset,
  iu_cp0_ex_rte,
  iu_cp0_ex_sel,
  iu_cp0_ex_stop,
  iu_cp0_ex_wait,
  iu_cp0_intsp_reg14_dout,
  iu_cp0_oper_mux_en,
  iu_cp0_src0,
  iu_cp0_src1,
  iu_cp0_syc_rst_b,
  iu_cp0_user_reg14_dout,
  iu_yy_xx_dbgon,
  iui_lpmd_inst_lpmd_for_data,
  iui_oreg_capr_sel,
  iui_oreg_ccr_sel,
  iui_oreg_cpuid_sel,
  iui_oreg_epc_sel,
  iui_oreg_int_sp_sel,
  iui_oreg_nsvbr_sel,
  iui_oreg_pacr_sel,
  iui_oreg_rid_sel,
  iui_oreg_sgbr_sel,
  iui_oreg_sgcr_sel,
  iui_oreg_sgisbr_sel,
  iui_oreg_sgistr_sel,
  iui_oreg_sgtr_sel,
  iui_oreg_srst_sel,
  iui_oreg_user_reg14_sel,
  iui_psr_ee_sel,
  iui_psr_epsr_sel,
  iui_psr_ie_sel,
  iui_psr_psr_sel,
  iui_psr_rte_for_data,
  iui_src0,
  lpmd_iui_stall,
  mpu_cp0_data,
  oreg_iui_srst_vld,
  psr_s_aft_dbg,
  psr_value,
  sgbr_value,
  sgcr_value,
  sgisbr_value,
  sgistr_value,
  sgtr_value,
  vbr_value
);


input   [31:0]  ccr_value;                     
input   [31:0]  chr_value;                     
input   [31:0]  cpuid_value;                   
input   [31:0]  epc_value;                     
input   [31:0]  epsr_value;                    
input           iu_cp0_ex_data_sel;            
input           iu_cp0_ex_doze;                
input           iu_cp0_ex_mfcr;                
input           iu_cp0_ex_mtcr;                
input           iu_cp0_ex_psrclr;              
input           iu_cp0_ex_psrset;              
input           iu_cp0_ex_rte;                 
input           iu_cp0_ex_sel;                 
input           iu_cp0_ex_stop;                
input           iu_cp0_ex_wait;                
input   [31:0]  iu_cp0_intsp_reg14_dout;       
input           iu_cp0_oper_mux_en;            
input   [31:0]  iu_cp0_src0;                   
input   [9 :0]  iu_cp0_src1;                   
input           iu_cp0_syc_rst_b;              
input   [31:0]  iu_cp0_user_reg14_dout;        
input           iu_yy_xx_dbgon;                
input           lpmd_iui_stall;                
input   [31:0]  mpu_cp0_data;                  
input           oreg_iui_srst_vld;             
input           psr_s_aft_dbg;                 
input   [31:0]  psr_value;                     
input   [31:0]  sgbr_value;                    
input   [31:0]  sgcr_value;                    
input   [31:0]  sgisbr_value;                  
input   [31:0]  sgistr_value;                  
input   [31:0]  sgtr_value;                    
input   [31:0]  vbr_value;                     
output  [31:0]  cp0_iu_data;                   
output          cp0_iu_data_vld;               
output          cp0_iu_dbg_disable_for_tee;    
output  [4 :0]  cp0_iu_expt_vec;               
output          cp0_iu_expt_vld;               
output          cp0_iu_flush;                  
output          cp0_iu_flush_chgflw_vld;       
output          cp0_iu_idly_counter_clear;     
output          cp0_iu_req;                    
output          cp0_iu_rte_chgflw_vld;         
output          cp0_iu_rte_chgflw_vld_for_data; 
output          cp0_iu_stall;                  
output          cp0_mpu_capr_sel;              
output          cp0_mpu_pacr_sel;              
output          cp0_mpu_rid_sel;               
output          inst_doze;                     
output          inst_lpmd;                     
output          inst_mfcr;                     
output          inst_mtcr;                     
output          inst_psrclr;                   
output          inst_psrset;                   
output          inst_rte;                      
output          inst_stop;                     
output          inst_wait;                     
output          iui_lpmd_inst_lpmd_for_data;   
output          iui_oreg_capr_sel;             
output          iui_oreg_ccr_sel;              
output          iui_oreg_cpuid_sel;            
output          iui_oreg_epc_sel;              
output          iui_oreg_int_sp_sel;           
output          iui_oreg_nsvbr_sel;            
output          iui_oreg_pacr_sel;             
output          iui_oreg_rid_sel;              
output          iui_oreg_sgbr_sel;             
output          iui_oreg_sgcr_sel;             
output          iui_oreg_sgisbr_sel;           
output          iui_oreg_sgistr_sel;           
output          iui_oreg_sgtr_sel;             
output          iui_oreg_srst_sel;             
output          iui_oreg_user_reg14_sel;       
output          iui_psr_ee_sel;                
output          iui_psr_epsr_sel;              
output          iui_psr_ie_sel;                
output          iui_psr_psr_sel;               
output          iui_psr_rte_for_data;          
output  [31:0]  iui_src0;                      


reg     [31:0]  cp0_group0_reg_sel;            
reg     [31:0]  data_out;                      


wire    [31:0]  ccr_value;                     
wire    [31:0]  chr_value;                     
wire            cp0_inst_cmplt;                
wire    [31:0]  cp0_iu_data;                   
wire            cp0_iu_data_vld;               
wire            cp0_iu_dbg_disable_for_tee;    
wire    [4 :0]  cp0_iu_expt_vec;               
wire            cp0_iu_expt_vld;               
wire            cp0_iu_flush;                  
wire            cp0_iu_flush_chgflw_vld;       
wire            cp0_iu_idly_counter_clear;     
wire            cp0_iu_req;                    
wire            cp0_iu_rte_chgflw_vld;         
wire            cp0_iu_rte_chgflw_vld_for_data; 
wire            cp0_iu_stall;                  
wire            cp0_mpu_capr_sel;              
wire            cp0_mpu_pacr_sel;              
wire            cp0_mpu_rid_sel;               
wire            cp0_mtcr_flush;                
wire            cp0_rte_flush;                 
wire            cp0_select;                    
wire    [31:0]  cpuid_value;                   
wire    [31:0]  epc_value;                     
wire    [31:0]  epsr_value;                    
wire            inst_doze;                     
wire            inst_lpmd;                     
wire            inst_mfcr;                     
wire            inst_mtcr;                     
wire            inst_no_violation;             
wire            inst_psrclr;                   
wire            inst_psrset;                   
wire            inst_rte;                      
wire            inst_stop;                     
wire            inst_vld;                      
wire            inst_wait;                     
wire            iu_cp0_ex_data_sel;            
wire            iu_cp0_ex_doze;                
wire            iu_cp0_ex_mfcr;                
wire            iu_cp0_ex_mtcr;                
wire            iu_cp0_ex_psrclr;              
wire            iu_cp0_ex_psrset;              
wire            iu_cp0_ex_rte;                 
wire            iu_cp0_ex_sel;                 
wire            iu_cp0_ex_stop;                
wire            iu_cp0_ex_wait;                
wire    [31:0]  iu_cp0_intsp_reg14_dout;       
wire            iu_cp0_oper_mux_en;            
wire    [31:0]  iu_cp0_src0;                   
wire    [9 :0]  iu_cp0_src1;                   
wire            iu_cp0_syc_rst_b;              
wire    [31:0]  iu_cp0_user_reg14_dout;        
wire            iu_yy_xx_dbgon;                
wire            iui_group0_sel_vld;            
wire            iui_group1_sel_vld;            
wire            iui_group4_sel_vld;            
wire            iui_lpmd;                      
wire            iui_lpmd_inst_lpmd_for_data;   
wire            iui_mtcr_cmplt;                
wire            iui_mtcr_gcr_stall;            
wire            iui_oreg_capr_sel;             
wire            iui_oreg_ccr_sel;              
wire            iui_oreg_cpuid_sel;            
wire            iui_oreg_epc_sel;              
wire            iui_oreg_int_sp_sel;           
wire            iui_oreg_nsvbr_sel;            
wire            iui_oreg_pacr_sel;             
wire            iui_oreg_rid_sel;              
wire            iui_oreg_sgbr_sel;             
wire            iui_oreg_sgcr_sel;             
wire            iui_oreg_sgisbr_sel;           
wire            iui_oreg_sgistr_sel;           
wire            iui_oreg_sgtr_sel;             
wire            iui_oreg_srst_sel;             
wire            iui_oreg_user_reg14_sel;       
wire            iui_psr_ee_sel;                
wire            iui_psr_epsr_sel;              
wire            iui_psr_ie_sel;                
wire            iui_psr_psr_sel;               
wire            iui_psr_rte_for_data;          
wire    [31:0]  iui_src0;                      
wire    [4 :0]  iui_src1;                      
wire            lpmd_iui_stall;                
wire    [31:0]  mpu_cp0_data;                  
wire            oreg_iui_srst_vld;             
wire    [3 :0]  psr_bit_sel;                   
wire            psr_s_aft_dbg;                 
wire    [31:0]  psr_value;                     
wire    [31:0]  sgbr_value;                    
wire    [31:0]  sgcr_value;                    
wire    [31:0]  sgisbr_value;                  
wire    [31:0]  sgistr_value;                  
wire    [31:0]  sgtr_value;                    
wire            src0_vld;                      
wire            src1_vld;                      
wire    [31:0]  vbr_value;                     






parameter PSR_NUM   = 5'd0;
parameter VBR_NUM   = 5'd1;
parameter EPSR_NUM  = 5'd2;
parameter EPC_NUM   = 5'd4;
parameter GCR_NUM   = 5'd11;
parameter GSR_NUM   = 5'd12;
parameter CPUID_NUM = 5'd13;
parameter CCR_NUM   = 5'd18;
parameter CAPR_NUM  = 5'd19;
parameter PACR_NUM  = 5'd20;
parameter RID_NUM   = 5'd21;
parameter SRST_NUM  = 5'd31;


parameter EBR_NUM              = 5'd1;
parameter CUR_EPC              = 5'd4;
parameter USER_REG14_NUM       = 5'd14;
parameter INTSP                = 5'd15;
parameter PRGSIGN_CHK_REG      = 5'd16;
parameter PRGSIGN_INS_CNT      = 5'd17;
parameter PRGSIGN_INS_CNT_REF  = 5'd18;
parameter PRGSIGN_BKUP_CHK_REG = 5'd19;
parameter PRGSIGN_BKUP_INS_CNT = 5'd20;


parameter NSPSR  = 5'd0;
parameter NSVBR  = 5'd1;
parameter NSEPSR = 5'd2;
parameter NSEPC  = 5'd4;
parameter USSP  = 5'd6;
parameter SUSP  = 5'd7;
parameter SDCR  = 5'd8;
parameter SPCR  = 5'd9;
parameter NSEBR  = 5'd10;


parameter SGCR   = 5'd0;
parameter SGTR   = 5'd1;
parameter SGBR   = 5'd2;
parameter TSGCR  = 5'd3;
parameter TSGTR  = 5'd4;
parameter TSGBR  = 5'd5;
parameter SGISTR = 5'd6;
parameter SGISBR = 5'd7;




assign cp0_select   = iu_cp0_ex_sel;




assign src0_vld       = iu_cp0_oper_mux_en && iu_cp0_syc_rst_b;
assign src1_vld       = iu_cp0_oper_mux_en;
assign iui_src0[31:0] = {32{src0_vld}} & iu_cp0_src0[31:0];
assign iui_src1[4:0]  = {5{src1_vld}} & iu_cp0_src1[4:0];














assign inst_no_violation = psr_s_aft_dbg;
assign inst_vld    = cp0_select && inst_no_violation;

assign inst_mtcr   = inst_vld && iu_cp0_ex_mtcr;
assign inst_rte    = inst_vld && iu_cp0_ex_rte && !iu_yy_xx_dbgon;
assign inst_psrset = inst_vld && iu_cp0_ex_psrset;
assign inst_psrclr = inst_vld && iu_cp0_ex_psrclr;
assign inst_stop   = inst_vld && iu_cp0_ex_stop;
assign inst_doze   = inst_vld && iu_cp0_ex_doze;
assign inst_wait   = inst_vld && iu_cp0_ex_wait;
assign inst_mfcr   = inst_vld && iu_cp0_ex_mfcr;

assign iui_psr_rte_for_data = iu_cp0_ex_data_sel && psr_s_aft_dbg && iu_cp0_ex_rte;



assign iui_lpmd    = iu_cp0_ex_wait || iu_cp0_ex_stop || iu_cp0_ex_doze;
assign inst_lpmd   = inst_vld && iui_lpmd;
assign iui_lpmd_inst_lpmd_for_data = inst_no_violation && iui_lpmd;






assign iui_group0_sel_vld = (iu_cp0_src1[9:5] == 5'b0)  && iu_cp0_oper_mux_en;
assign iui_group1_sel_vld = (iu_cp0_src1[9:5] == 5'b1)  && iu_cp0_oper_mux_en;
assign iui_group4_sel_vld = (iu_cp0_src1[9:5] == 5'b100) && iu_cp0_oper_mux_en;







always @( iui_group0_sel_vld
       or iui_src1[4:0])
begin
  cp0_group0_reg_sel[31:0] = 32'b0;
if(iui_group0_sel_vld)
begin
  case(iui_src1[4:0])
    PSR_NUM  : cp0_group0_reg_sel[0] = 1'b1;
    VBR_NUM  : cp0_group0_reg_sel[1] = 1'b1;
    EPSR_NUM : cp0_group0_reg_sel[2] = 1'b1;
    EPC_NUM  : cp0_group0_reg_sel[4] = 1'b1;
    GCR_NUM  : cp0_group0_reg_sel[11] = 1'b1;

                                         //do not need select signal
    CPUID_NUM: cp0_group0_reg_sel[13] = 1'b1;
    CCR_NUM  : cp0_group0_reg_sel[18] = 1'b1;
    CAPR_NUM : cp0_group0_reg_sel[19] = 1'b1;
    PACR_NUM : cp0_group0_reg_sel[20] = 1'b1;
    RID_NUM  : cp0_group0_reg_sel[21] = 1'b1;
    SRST_NUM : cp0_group0_reg_sel[31] = 1'b1;
  endcase
end

end

assign psr_bit_sel[3:0] = iui_src1[3:0];



assign iui_oreg_srst_sel  = cp0_group0_reg_sel[31];

assign iui_oreg_rid_sel   = cp0_group0_reg_sel[21];
assign iui_oreg_pacr_sel  = cp0_group0_reg_sel[20];
assign iui_oreg_capr_sel  = cp0_group0_reg_sel[19];
assign cp0_mpu_rid_sel    = cp0_group0_reg_sel[21];
assign cp0_mpu_pacr_sel   = cp0_group0_reg_sel[20];
assign cp0_mpu_capr_sel   = cp0_group0_reg_sel[19];

assign iui_oreg_ccr_sel   = cp0_group0_reg_sel[18];

assign iui_oreg_cpuid_sel = cp0_group0_reg_sel[13];

assign iui_oreg_epc_sel   = cp0_group0_reg_sel[4];

assign iui_psr_epsr_sel   = cp0_group0_reg_sel[2];

assign iui_oreg_nsvbr_sel   = cp0_group0_reg_sel[1];

assign iui_psr_psr_sel    = cp0_group0_reg_sel[0];

assign {iui_psr_ee_sel, iui_psr_ie_sel}
                          = psr_bit_sel[3:2];






assign iui_oreg_user_reg14_sel = iui_group1_sel_vld
                              && (iui_src1[4:0]==USER_REG14_NUM);


assign iui_oreg_int_sp_sel     = iui_group1_sel_vld
                              && (iui_src1[4:0]==INTSP);






assign iui_oreg_sgcr_sel  = iui_group4_sel_vld && (iui_src1[4:0]==SGCR);
assign iui_oreg_sgtr_sel  = iui_group4_sel_vld && (iui_src1[4:0]==SGTR);
assign iui_oreg_sgbr_sel  = iui_group4_sel_vld && (iui_src1[4:0]==SGBR);
assign iui_oreg_sgistr_sel= iui_group4_sel_vld && (iui_src1[4:0]==SGISTR);
assign iui_oreg_sgisbr_sel= iui_group4_sel_vld && (iui_src1[4:0]==SGISBR);






assign iui_mtcr_gcr_stall = 1'b0;

assign cp0_iu_stall = (lpmd_iui_stall || iui_mtcr_gcr_stall)
                      && iu_cp0_ex_data_sel;






assign cp0_inst_cmplt = cp0_select
                        && !iui_mtcr_gcr_stall
                        && !lpmd_iui_stall;

assign cp0_iu_req   = cp0_inst_cmplt;






always @( iui_group4_sel_vld
       or mpu_cp0_data[31:0]
       or psr_value[31:0]
       or sgisbr_value[31:0]
       or iui_group1_sel_vld
       or iu_cp0_user_reg14_dout[31:0]
       or epc_value[31:0]
       or sgistr_value[31:0]
       or sgbr_value[31:0]
       or sgcr_value[31:0]
       or chr_value[31:0]
       or vbr_value[31:0]
       or iu_cp0_intsp_reg14_dout[31:0]
       or ccr_value[31:0]
       or sgtr_value[31:0]
       or cpuid_value[31:0]
       or iui_src1[4:0]
       or epsr_value[31:0]
       or iui_group0_sel_vld)
begin
  data_out[31:0] = 32'b0;
if(iui_group0_sel_vld) 
begin
  case(iui_src1[4:0])
  PSR_NUM  : data_out[31:0] = psr_value[31:0];   //PSR register
  VBR_NUM  : data_out[31:0] = vbr_value[31:0];   //VBR register
  EPSR_NUM : data_out[31:0] = epsr_value[31:0];  //EPSR register
  EPC_NUM  : data_out[31:0] = epc_value[31:0];   //EPC register
  CPUID_NUM: data_out[31:0] = cpuid_value[31:0]; //CPUID register
  CCR_NUM  : data_out[31:0] = ccr_value[31:0];   //CCR register
  CAPR_NUM : data_out[31:0] = mpu_cp0_data[31:0];//CAPR register
  PACR_NUM : data_out[31:0] = mpu_cp0_data[31:0];//PACR register
  RID_NUM  : data_out[31:0] = mpu_cp0_data[31:0];//RID regsiter
  SRST_NUM : data_out[31:0] = chr_value[31:0];
  default  : data_out[31:0] = 32'b0;  
             // change default data output value to support ISA model
  endcase
end
else if(iui_group1_sel_vld)
begin
  case(iui_src1[4:0])
  USER_REG14_NUM : data_out[31:0] = iu_cp0_user_reg14_dout[31:0];
 INTSP           :  data_out[31:0] = iu_cp0_intsp_reg14_dout[31:0];
  default        : data_out[31:0] = 32'b0;
  endcase
end
else if(iui_group4_sel_vld)
  case(iui_src1[4:0])
  SGCR    : data_out[31:0] = sgcr_value[31:0];
  SGTR    : data_out[31:0] = sgtr_value[31:0];
  SGBR    : data_out[31:0] = sgbr_value[31:0];
  SGISTR  : data_out[31:0] = sgistr_value[31:0];
  SGISBR  : data_out[31:0] = sgisbr_value[31:0];
  default : data_out[31:0] = 32'b0;
  endcase

end





assign cp0_iu_dbg_disable_for_tee = 1'b0;






assign cp0_iu_data_vld = iu_cp0_ex_mfcr && inst_no_violation;
assign cp0_iu_data[31:0] = data_out[31:0];





assign cp0_iu_idly_counter_clear = cp0_inst_cmplt
                                && (inst_rte  || inst_stop
                                 || inst_wait || inst_doze);










assign cp0_iu_expt_vld = !psr_s_aft_dbg
                      || oreg_iui_srst_vld;




assign cp0_iu_expt_vec[4:0] = inst_no_violation ? 5'h0
                                                : 5'h5;










assign cp0_rte_flush  = iu_cp0_ex_rte;







assign cp0_mtcr_flush = iu_cp0_ex_mtcr;// && mtcr_flush_reg; 

assign cp0_iu_flush = cp0_rte_flush || cp0_mtcr_flush;





assign cp0_iu_rte_chgflw_vld            = inst_rte;
assign cp0_iu_rte_chgflw_vld_for_data   = iu_cp0_ex_data_sel && iu_cp0_ex_rte;

assign iui_mtcr_cmplt          = inst_mtcr && !iui_mtcr_gcr_stall;
assign cp0_iu_flush_chgflw_vld = iui_mtcr_cmplt;






endmodule


























module nm_cp0_lpmd(
  cache_cp0_lpmd_ack,
  cp0_cache_lpmd_req,
  cp0_had_lpmd_b,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  had_yy_xx_dbg,
  ifu_cp0_lpmd_ack,
  inst_doze,
  inst_lpmd,
  inst_stop,
  inst_wait,
  intc_cpu_intraw_b,
  iu_cp0_ex_sel,
  iu_yy_xx_dbgon,
  iu_yy_xx_flush,
  iui_lpmd_inst_lpmd_for_data,
  lpmd_iui_stall,
  lpmd_sm_clk,
  lpmd_sm_clk_en,
  pad_yy_gate_clk_en_b,
  sysio_cp0_sys_view_lpmd_b
);


input          cache_cp0_lpmd_ack;         
input          cpurst_b;                   
input          forever_cpuclk;             
input          had_yy_xx_dbg;              
input          ifu_cp0_lpmd_ack;           
input          inst_doze;                  
input          inst_lpmd;                  
input          inst_stop;                  
input          inst_wait;                  
input          intc_cpu_intraw_b;          
input          iu_cp0_ex_sel;              
input          iu_yy_xx_dbgon;             
input          iu_yy_xx_flush;             
input          iui_lpmd_inst_lpmd_for_data; 
input          lpmd_sm_clk;                
input          pad_yy_gate_clk_en_b;       
input   [1:0]  sysio_cp0_sys_view_lpmd_b;  
output         cp0_cache_lpmd_req;         
output  [1:0]  cp0_had_lpmd_b;             
output         cp0_ifu_in_lpmd;            
output         cp0_ifu_lpmd_req;           
output         cp0_sysio_ipend_b;          
output  [1:0]  cp0_sysio_lpmd_b;           
output         cp0_yy_clk_en;              
output         lpmd_iui_stall;             
output         lpmd_sm_clk_en;             


reg     [1:0]  cur_state;                  
reg     [1:0]  lpmd_b;                     
reg     [1:0]  next_state;                 


wire           cache_cp0_lpmd_ack;         
wire           cp0_cache_lpmd_req;         
wire    [1:0]  cp0_had_lpmd_b;             
wire           cp0_ifu_in_lpmd;            
wire           cp0_ifu_lpmd_req;           
wire           cp0_sysio_ipend_b;          
wire    [1:0]  cp0_sysio_lpmd_b;           
wire           cp0_yy_clk_en;              
wire           cpu_in_lpmd;                
wire           cpu_in_lpmd_core_view;      
wire           cpu_in_lpmd_sys_view;       
wire           cpurst_b;                   
wire           forever_cpuclk;             
wire           had_yy_xx_dbg;              
wire           ifu_cp0_lpmd_ack;           
wire           inst_doze;                  
wire           inst_lpmd;                  
wire           inst_stop;                  
wire           inst_wait;                  
wire           intc_cpu_intraw_b;          
wire           iu_cp0_ex_sel;              
wire           iu_yy_xx_dbgon;             
wire           iu_yy_xx_flush;             
wire           iui_lpmd_inst_lpmd_for_data; 
wire           lpmd_ack;                   
wire           lpmd_clk;                   
wire           lpmd_clk_en;                
wire           lpmd_in_wait_state;         
wire           lpmd_iui_stall;             
wire           lpmd_sm_clk;                
wire           lpmd_sm_clk_en;             
wire           lpmd_start;                 
wire           pad_yy_gate_clk_en_b;       
wire    [1:0]  sys_lpmd_b;                 
wire    [1:0]  sysio_cp0_sys_view_lpmd_b;  


parameter IDLE   = 2'b00;
parameter WFACK  = 2'b01;
parameter WFCPLT = 2'b11;
parameter CPLT   = 2'b10;




assign lpmd_sm_clk_en = iu_cp0_ex_sel || (cur_state != IDLE); 

assign lpmd_clk_en = had_yy_xx_dbg || !intc_cpu_intraw_b || iu_yy_xx_dbgon
                     || lpmd_start;

gated_clk_cell  x_lpmd_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (lpmd_clk            ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (1'b0                ),
  .module_en            (lpmd_clk_en         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);
























always @(posedge lpmd_sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[1:0] <= IDLE;
  else if(iu_yy_xx_flush)
    cur_state[1:0] <= IDLE;
  else
    cur_state[1:0] <= next_state[1:0];
end


always @( cur_state
       or lpmd_start
       or inst_lpmd
       or cpu_in_lpmd)
begin
  case(cur_state)
  IDLE       : if(inst_lpmd)
                next_state = WFACK;
              else
                next_state = IDLE;
  WFACK      : if(lpmd_start)
                next_state = WFCPLT;
              else
                next_state = WFACK;
  WFCPLT    : if(!cpu_in_lpmd)
                next_state = CPLT;
              else
                next_state = WFCPLT;
  CPLT      :   next_state = IDLE;
  default   :   next_state = IDLE;
  endcase

end

assign lpmd_in_wait_state = (cur_state == WFACK);


assign lpmd_iui_stall = (cur_state == IDLE) && iui_lpmd_inst_lpmd_for_data 
                        || (cur_state == WFACK)
                        || (cur_state == WFCPLT);




assign cp0_ifu_lpmd_req = lpmd_in_wait_state;
assign cp0_cache_lpmd_req = lpmd_in_wait_state;




assign lpmd_ack = ifu_cp0_lpmd_ack && cache_cp0_lpmd_ack;
assign lpmd_start = lpmd_ack;







always @(posedge lpmd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    lpmd_b[1:0] <= 2'b11;
  else if(had_yy_xx_dbg | !intc_cpu_intraw_b | iu_yy_xx_dbgon)
    lpmd_b[1:0] <= 2'b11;
  else if(lpmd_start && !cpu_in_lpmd)
  begin
    if(inst_stop)
      lpmd_b[1:0] <= 2'b00;
    else if(inst_wait)
      lpmd_b[1:0] <= 2'b01;
    else if(inst_doze)
      lpmd_b[1:0] <= 2'b10;
    else
      lpmd_b[1:0] <= 2'b11;
  end
  else
    lpmd_b[1:0] <= lpmd_b[1:0];
end

assign cp0_had_lpmd_b[1:0] = lpmd_b[1:0];
assign cp0_sysio_lpmd_b[1:0] = lpmd_b[1:0];

assign sys_lpmd_b[1:0] = sysio_cp0_sys_view_lpmd_b[1:0];
assign cpu_in_lpmd_sys_view = !(sys_lpmd_b[1] & sys_lpmd_b[0]);

assign cpu_in_lpmd_core_view = !(lpmd_b[1] & lpmd_b[0]);

assign cpu_in_lpmd = cpu_in_lpmd_sys_view || cpu_in_lpmd_core_view;


assign cp0_ifu_in_lpmd  = cpu_in_lpmd;






assign cp0_yy_clk_en = !cpu_in_lpmd;





assign cp0_sysio_ipend_b = intc_cpu_intraw_b;


endmodule



























module nm_cp0_oreg(
  ccr_value,
  chr_value,
  cp0_had_cpuid_idx0,
  cp0_iu_int_spcu_en,
  cp0_iu_intsp_en,
  cp0_iu_intsp_we,
  cp0_iu_reg_write_data,
  cp0_iu_user_reg14_we,
  cp0_iu_vbr,
  cp0_lsu_sgbr,
  cp0_lsu_sge,
  cp0_lsu_sgp,
  cp0_lsu_sgtr,
  cp0_mpu_en,
  cp0_mpu_soft_reset,
  cp0_mpu_updt_capr,
  cp0_mpu_updt_data,
  cp0_mpu_updt_pacr,
  cp0_mpu_updt_rid,
  cp0_yy_be,
  cp0_yy_be_v1,
  cp0_yy_be_v2,
  cp0_yy_intsp_sel_post,
  cpuid_value,
  cpurst_b,
  had_iu_force_dbg_en,
  inst_mfcr,
  inst_mtcr,
  iu_cp0_syc_rst_b,
  iui_oreg_capr_sel,
  iui_oreg_ccr_sel,
  iui_oreg_cpuid_sel,
  iui_oreg_int_sp_sel,
  iui_oreg_nsvbr_sel,
  iui_oreg_pacr_sel,
  iui_oreg_rid_sel,
  iui_oreg_sgbr_sel,
  iui_oreg_sgcr_sel,
  iui_oreg_sgisbr_sel,
  iui_oreg_sgistr_sel,
  iui_oreg_sgtr_sel,
  iui_oreg_srst_sel,
  iui_oreg_user_reg14_sel,
  iui_src0,
  oreg_clk,
  oreg_clk_en,
  oreg_iui_srst_vld,
  sgbr_value,
  sgcr_value,
  sgisbr_value,
  sgistr_value,
  sgtr_value,
  sysio_cp0_bigend,
  sysio_cp0_clkratio,
  sysio_cp0_endian_v2,
  vbr_value
);


input           cp0_yy_intsp_sel_post;  
input           cpurst_b;               
input           had_iu_force_dbg_en;    
input           inst_mfcr;              
input           inst_mtcr;              
input           iu_cp0_syc_rst_b;       
input           iui_oreg_capr_sel;      
input           iui_oreg_ccr_sel;       
input           iui_oreg_cpuid_sel;     
input           iui_oreg_int_sp_sel;    
input           iui_oreg_nsvbr_sel;     
input           iui_oreg_pacr_sel;      
input           iui_oreg_rid_sel;       
input           iui_oreg_sgbr_sel;      
input           iui_oreg_sgcr_sel;      
input           iui_oreg_sgisbr_sel;    
input           iui_oreg_sgistr_sel;    
input           iui_oreg_sgtr_sel;      
input           iui_oreg_srst_sel;      
input           iui_oreg_user_reg14_sel; 
input   [31:0]  iui_src0;               
input           oreg_clk;               
input           sysio_cp0_bigend;       
input   [2 :0]  sysio_cp0_clkratio;     
input           sysio_cp0_endian_v2;    
output  [31:0]  ccr_value;              
output  [31:0]  chr_value;              
output  [31:0]  cp0_had_cpuid_idx0;     
output          cp0_iu_int_spcu_en;     
output          cp0_iu_intsp_en;        
output          cp0_iu_intsp_we;        
output  [31:0]  cp0_iu_reg_write_data;  
output          cp0_iu_user_reg14_we;   
output  [21:0]  cp0_iu_vbr;             
output  [31:0]  cp0_lsu_sgbr;           
output          cp0_lsu_sge;            
output          cp0_lsu_sgp;            
output  [31:0]  cp0_lsu_sgtr;           
output          cp0_mpu_en;             
output          cp0_mpu_soft_reset;     
output          cp0_mpu_updt_capr;      
output  [31:0]  cp0_mpu_updt_data;      
output          cp0_mpu_updt_pacr;      
output          cp0_mpu_updt_rid;       
output          cp0_yy_be;              
output          cp0_yy_be_v1;           
output          cp0_yy_be_v2;           
output  [31:0]  cpuid_value;            
output          oreg_clk_en;            
output          oreg_iui_srst_vld;      
output  [31:0]  sgbr_value;             
output  [31:0]  sgcr_value;             
output  [31:0]  sgisbr_value;           
output  [31:0]  sgistr_value;           
output  [31:0]  sgtr_value;             
output  [31:0]  vbr_value;              


reg             index;                  
reg             int_spcu_en;            
reg             intsp_en;               
reg     [1 :0]  mp;                     
reg     [21:0]  nsvec_base;             
reg     [29:0]  sgbr;                   
reg             sge;                    
reg     [29:0]  sgisbr;                 
reg     [29:0]  sgistr;                 
reg             sgp;                    
reg     [29:0]  sgtr;                   


wire    [31:0]  ccr_value;              
wire    [31:0]  chr_value;              
wire    [31:0]  cp0_had_cpuid_idx0;     
wire            cp0_iu_int_spcu_en;     
wire            cp0_iu_intsp_en;        
wire            cp0_iu_intsp_we;        
wire    [31:0]  cp0_iu_reg_write_data;  
wire            cp0_iu_user_reg14_we;   
wire    [21:0]  cp0_iu_vbr;             
wire    [31:0]  cp0_lsu_sgbr;           
wire            cp0_lsu_sge;            
wire            cp0_lsu_sgp;            
wire    [31:0]  cp0_lsu_sgtr;           
wire            cp0_mpu_en;             
wire            cp0_mpu_soft_reset;     
wire            cp0_mpu_updt_capr;      
wire    [31:0]  cp0_mpu_updt_data;      
wire            cp0_mpu_updt_pacr;      
wire            cp0_mpu_updt_rid;       
wire            cp0_yy_be;              
wire            cp0_yy_be_v1;           
wire            cp0_yy_be_v2;           
wire            cp0_yy_intsp_sel_post;  
wire    [31:0]  cpuid_index0_value;     
wire    [31:0]  cpuid_index1_value;     
wire    [31:0]  cpuid_value;            
wire            cpurst_b;               
wire            endian_mode;            
wire            endian_v2;              
wire            had_iu_force_dbg_en;    
wire            hs_expt;                
wire            index_sync_rst;         
wire            inst_mfcr;              
wire            inst_mtcr;              
wire            iu_cp0_syc_rst_b;       
wire            iui_oreg_capr_sel;      
wire            iui_oreg_ccr_sel;       
wire            iui_oreg_cpuid_sel;     
wire            iui_oreg_int_sp_sel;    
wire            iui_oreg_nsvbr_sel;     
wire            iui_oreg_pacr_sel;      
wire            iui_oreg_rid_sel;       
wire            iui_oreg_sgbr_sel;      
wire            iui_oreg_sgcr_sel;      
wire            iui_oreg_sgisbr_sel;    
wire            iui_oreg_sgistr_sel;    
wire            iui_oreg_sgtr_sel;      
wire            iui_oreg_srst_sel;      
wire            iui_oreg_user_reg14_sel; 
wire    [31:0]  iui_src0;               
wire            nsebr_local_en;         
wire            nsvec_local_en;         
wire            oreg_ccr_mtcr;          
wire            oreg_clk;               
wire            oreg_clk_en;            
wire            oreg_cpuid_mfcr;        
wire            oreg_iui_srst_vld;      
wire            oreg_sdcr_mtcr;         
wire            oreg_sgbr_mtcr;         
wire            oreg_sgcr_mtcr;         
wire            oreg_sgisbr_mtcr;       
wire            oreg_sgistr_mtcr;       
wire            oreg_sgtr_mtcr;         
wire            oreg_spcr_mtcr;         
wire            prgsign_reg_unlock;     
wire            reg_unlock_vld;         
wire    [2 :0]  sck;                    
wire            sebr_local_en;          
wire    [31:0]  sgbr_value;             
wire    [31:0]  sgbr_value_fin;         
wire    [31:0]  sgcr_value;             
wire    [31:0]  sgisbr_value;           
wire    [31:0]  sgistr_value;           
wire    [31:0]  sgtr_value;             
wire    [31:0]  sgtr_value_fin;         
wire            srst_val_vld;           
wire            srst_wr_en;             
wire            svec_local_en;          
wire            sysio_cp0_bigend;       
wire    [2 :0]  sysio_cp0_clkratio;     
wire            sysio_cp0_endian_v2;    
wire    [31:0]  vbr_value;              






assign oreg_clk_en = nsvec_local_en     || svec_local_en || oreg_ccr_mtcr
                  || oreg_sdcr_mtcr     || oreg_spcr_mtcr
                  || oreg_cpuid_mfcr    || index_sync_rst
                  || prgsign_reg_unlock || reg_unlock_vld
                  || nsebr_local_en     || sebr_local_en
                  || had_iu_force_dbg_en;







assign prgsign_reg_unlock = 1'b0;
assign reg_unlock_vld     = 1'b0;






assign cp0_yy_be    = endian_mode;
assign cp0_yy_be_v1 = endian_mode && !endian_v2;
assign cp0_yy_be_v2 = endian_mode && endian_v2;




assign cp0_mpu_en = mp[0];






assign nsvec_local_en = inst_mtcr && iui_oreg_nsvbr_sel
                     || !iu_cp0_syc_rst_b;

always @(posedge oreg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    nsvec_base[21:0] <= 22'b0;
  else if(nsvec_local_en)
    nsvec_base[21:0] <= iui_src0[31:10];
  else
    nsvec_base[21:0] <= nsvec_base[21:0];
end






















assign svec_local_en = 1'b0;




assign vbr_value[31:0]  = {nsvec_base[21:0], 10'b0};
assign cp0_iu_vbr[21:0] = vbr_value[31:10];



  







assign sck[2:0] = sysio_cp0_clkratio[2:0];
  



  
assign endian_mode = sysio_cp0_bigend;
assign endian_v2   = sysio_cp0_endian_v2;





assign oreg_ccr_mtcr = inst_mtcr && iui_oreg_ccr_sel || !iu_cp0_syc_rst_b;

always @(posedge oreg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    mp[1:0]   <= 2'b0;
  else if(oreg_ccr_mtcr)
    mp[1:0]   <= iui_src0[1:0];
  else
    mp[1:0]   <= mp[1:0];
end

assign ccr_value[31:0] = 
         {18'b0, endian_v2, 2'b0, sck[2:0], endian_mode, 5'b0, mp[1:0]};












































assign cp0_mpu_updt_capr = inst_mtcr && iui_oreg_capr_sel || !iu_cp0_syc_rst_b;
assign cp0_mpu_updt_pacr = inst_mtcr && iui_oreg_pacr_sel || !iu_cp0_syc_rst_b;
assign cp0_mpu_updt_rid  = inst_mtcr && iui_oreg_rid_sel || !iu_cp0_syc_rst_b;
assign cp0_mpu_soft_reset = iu_cp0_syc_rst_b;

assign cp0_mpu_updt_data[31:0] = iui_src0[31:0];





assign hs_expt           = 1'b0;
assign srst_wr_en        = inst_mtcr && iui_oreg_srst_sel || !iu_cp0_syc_rst_b;
assign srst_val_vld      = (iui_src0[31:16] == `RESET_VAL);
assign oreg_iui_srst_vld = srst_wr_en && srst_val_vld;

always @(posedge oreg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_spcu_en   <= 1'b0;
  else if(srst_wr_en)
    int_spcu_en   <= iui_src0[4];
  else
    int_spcu_en   <= int_spcu_en;
end 

always @(posedge oreg_clk or negedge cpurst_b)
begin
 if(!cpurst_b)
   intsp_en  <=1'b0;
 else if(srst_wr_en)
   intsp_en <=iui_src0[14];
 else 
   intsp_en <=intsp_en;
end
   

assign cp0_iu_intsp_en    = intsp_en   ;
assign cp0_iu_int_spcu_en = int_spcu_en;

assign chr_value[31:0] = {16'b0, hs_expt,intsp_en, 6'b0, 3'b0, int_spcu_en, 4'b0};









assign cp0_iu_user_reg14_we  = inst_mtcr && iui_oreg_user_reg14_sel;

assign cp0_iu_reg_write_data[31:0] = iui_src0[31:0];

assign cp0_iu_intsp_we       = inst_mtcr && iui_oreg_int_sp_sel;
 




















assign nsebr_local_en = 1'b0;
assign sebr_local_en = 1'b0;












assign oreg_sdcr_mtcr = 1'b0;




assign oreg_spcr_mtcr = 1'b0;





assign oreg_sgcr_mtcr = inst_mtcr && iui_oreg_sgcr_sel
                     || !iu_cp0_syc_rst_b;
assign oreg_sgtr_mtcr = inst_mtcr && iui_oreg_sgtr_sel
                     || !iu_cp0_syc_rst_b;
assign oreg_sgbr_mtcr = inst_mtcr && iui_oreg_sgbr_sel
                     || !iu_cp0_syc_rst_b;
assign oreg_sgistr_mtcr = inst_mtcr && iui_oreg_sgistr_sel
                     || !iu_cp0_syc_rst_b;
assign oreg_sgisbr_mtcr = inst_mtcr && iui_oreg_sgisbr_sel
                     || !iu_cp0_syc_rst_b;

always @(posedge oreg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    sge <= 1'b0;
    sgp <= 1'b0;
  end
  else if(oreg_sgcr_mtcr)
  begin
    sge <= iui_src0[0];
    sgp <= iui_src0[1];
  end
  else
  begin
    sge <= sge;
    sgp <= sgp;
  end
end

assign sgcr_value[31:0] = {30'b0, sgp, sge};


always @(posedge oreg_clk)
begin





  if(oreg_sgtr_mtcr)
  begin
    sgtr[29:0] <= iui_src0[31:2];
  end
  else
  begin
    sgtr[29:0] <= sgtr[29:0];
  end
end


assign sgtr_value[31:0] = {sgtr[29:0], 2'b0};


always @(posedge oreg_clk)
begin





  if(oreg_sgbr_mtcr)
  begin
    sgbr[29:0] <= iui_src0[31:2];
  end
  else
  begin
    sgbr[29:0] <= sgbr[29:0];
  end
end


assign sgbr_value[31:0] = {sgbr[29:0], 2'b0};

always @(posedge oreg_clk)
begin
  if(oreg_sgisbr_mtcr)
  begin
    sgisbr[29:0] <= iui_src0[31:2];
  end
  else
  begin
    sgisbr[29:0] <= sgisbr[29:0];
  end
end


assign sgisbr_value[31:0] = {sgisbr[29:0], 2'b0};

always @(posedge oreg_clk)
begin
  if(oreg_sgistr_mtcr)
  begin
    sgistr[29:0] <= iui_src0[31:2];
  end
  else
  begin
    sgistr[29:0] <= sgistr[29:0];
  end
end


assign sgistr_value[31:0] = {sgistr[29:0], 2'b0};

assign sgtr_value_fin[31:0] = cp0_yy_intsp_sel_post ? sgistr_value[31:0]:sgtr_value[31:0];
assign sgbr_value_fin[31:0] = cp0_yy_intsp_sel_post ? sgisbr_value[31:0]:sgbr_value[31:0];





assign cp0_lsu_sge        = sge;
assign cp0_lsu_sgp        = sgp;
assign cp0_lsu_sgtr[31:0] = sgtr_value_fin[31:0];
assign cp0_lsu_sgbr[31:0] = sgbr_value_fin[31:0];
















assign cpuid_value[31:0] = (index) ? cpuid_index1_value[31:0]
                                   : cpuid_index0_value[31:0];

assign cp0_had_cpuid_idx0[31:0] = cpuid_index0_value[31:0];

assign oreg_cpuid_mfcr = inst_mfcr && iui_oreg_cpuid_sel;
assign index_sync_rst = !iu_cp0_syc_rst_b;

always @(posedge oreg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    begin
      index <= 1'b0;
    end
  else if(index_sync_rst)
    begin
      index <= 1'b0;
    end
  else if (oreg_cpuid_mfcr)
    begin
      index <= index + 1'b1;
    end
  else
    begin
      index <= index;
    end
end



    assign cpuid_index0_value[31:28] = 4'b0000;




    assign cpuid_index0_value[27:26] = 2'b01; //CSKY V2 instruction set




    assign cpuid_index0_value[25:22] = 4'b0010; //CK800 Series




    assign cpuid_index0_value[21:18] = 4'b0010; //CK802 Series




    assign cpuid_index0_value[17] = 1'b0; 
  
    assign cpuid_index0_value[16] = 1'b0;

    assign cpuid_index0_value[15:14] = 2'b0;

    assign cpuid_index0_value[13] = 1'b0;

    assign cpuid_index0_value[12] = 1'b1;  //with MPU

    assign cpuid_index0_value[11:8] = 4'b0; 
































    assign cpuid_index0_value[7:4] = 4'b1000; 




    assign cpuid_index0_value[3:0] = 4'b0011; //CPID Rev.3.7





    assign cpuid_index1_value[31:0] = {4'b0001, `PRODUCT_ID};

endmodule

































module nm_cp0_psr(
  cp0_had_psr_data,
  cp0_had_spsr_data,
  cp0_ifu_c,
  cp0_ifu_ee,
  cp0_iu_ee,
  cp0_iu_ee_for_int,
  cp0_iu_epc,
  cp0_iu_epc_for_chgflw,
  cp0_iu_epsr,
  cp0_iu_ic,
  cp0_iu_ie_for_int,
  cp0_iu_intsp_en,
  cp0_iu_src_c,
  cp0_iu_vec,
  cp0_lsu_mm,
  cp0_pad_psr,
  cp0_yy_clk_en,
  cp0_yy_intsp_sel_post,
  cp0_yy_supv_mode,
  cp0_yy_supv_mode_aft_dbg,
  cpu_intc_int_exit,
  cpu_intc_int_vec,
  cpurst_b,
  epc_value,
  epsr_value,
  forever_cpuclk,
  had_cp0_psr_data,
  had_iu_rte_pc_sel,
  had_yy_xx_exit_dbg,
  inst_mtcr,
  inst_psrclr,
  inst_psrset,
  inst_rte,
  iu_cp0_af_updt_vld,
  iu_cp0_bm_vld,
  iu_cp0_c,
  iu_cp0_c_vld,
  iu_cp0_cur_epc_update,
  iu_cp0_epc,
  iu_cp0_epc_update,
  iu_cp0_epc_wen_for_nir,
  iu_cp0_epsr_wen_for_nir,
  iu_cp0_ex_sel,
  iu_cp0_expt_vld,
  iu_cp0_had_int_vld,
  iu_cp0_int_vld,
  iu_cp0_nest_int_en,
  iu_cp0_prgsign_sign_vld,
  iu_cp0_syc_rst_b,
  iu_cp0_updt_val,
  iu_yy_xx_dbgon,
  iu_yy_xx_expt_vec,
  iui_oreg_epc_sel,
  iui_psr_ee_sel,
  iui_psr_epsr_sel,
  iui_psr_ie_sel,
  iui_psr_psr_sel,
  iui_psr_rte_for_data,
  iui_src0,
  pad_yy_gate_clk_en_b,
  psr_clk,
  psr_clk_en,
  psr_s_aft_dbg,
  psr_value,
  randclk_psr_c_mod_en_w2,
  randclk_psr_epsr_mod_en_w46
);


input           cp0_iu_intsp_en;            
input           cp0_yy_clk_en;              
input           cpurst_b;                   
input           forever_cpuclk;             
input   [31:0]  had_cp0_psr_data;           
input           had_iu_rte_pc_sel;          
input           had_yy_xx_exit_dbg;         
input           inst_mtcr;                  
input           inst_psrclr;                
input           inst_psrset;                
input           inst_rte;                   
input           iu_cp0_af_updt_vld;         
input           iu_cp0_bm_vld;              
input           iu_cp0_c;                   
input           iu_cp0_c_vld;               
input           iu_cp0_cur_epc_update;      
input   [30:0]  iu_cp0_epc;                 
input           iu_cp0_epc_update;          
input           iu_cp0_epc_wen_for_nir;     
input           iu_cp0_epsr_wen_for_nir;    
input           iu_cp0_ex_sel;              
input           iu_cp0_expt_vld;            
input           iu_cp0_had_int_vld;         
input           iu_cp0_int_vld;             
input           iu_cp0_nest_int_en;         
input           iu_cp0_prgsign_sign_vld;    
input           iu_cp0_syc_rst_b;           
input   [31:0]  iu_cp0_updt_val;            
input           iu_yy_xx_dbgon;             
input   [7 :0]  iu_yy_xx_expt_vec;          
input           iui_oreg_epc_sel;           
input           iui_psr_ee_sel;             
input           iui_psr_epsr_sel;           
input           iui_psr_ie_sel;             
input           iui_psr_psr_sel;            
input           iui_psr_rte_for_data;       
input   [31:0]  iui_src0;                   
input           pad_yy_gate_clk_en_b;       
input           psr_clk;                    
input           randclk_psr_c_mod_en_w2;    
input           randclk_psr_epsr_mod_en_w46; 
output  [31:0]  cp0_had_psr_data;           
output  [31:0]  cp0_had_spsr_data;          
output          cp0_ifu_c;                  
output          cp0_ifu_ee;                 
output          cp0_iu_ee;                  
output          cp0_iu_ee_for_int;          
output  [31:0]  cp0_iu_epc;                 
output  [30:0]  cp0_iu_epc_for_chgflw;      
output  [31:0]  cp0_iu_epsr;                
output          cp0_iu_ic;                  
output          cp0_iu_ie_for_int;          
output          cp0_iu_src_c;               
output  [7 :0]  cp0_iu_vec;                 
output          cp0_lsu_mm;                 
output  [31:0]  cp0_pad_psr;                
output          cp0_yy_intsp_sel_post;      
output          cp0_yy_supv_mode;           
output          cp0_yy_supv_mode_aft_dbg;   
output          cpu_intc_int_exit;          
output  [7 :0]  cpu_intc_int_vec;           
output  [31:0]  epc_value;                  
output  [31:0]  epsr_value;                 
output          psr_clk_en;                 
output          psr_s_aft_dbg;              
output  [31:0]  psr_value;                  


reg     [30:0]  epc;                        
reg     [30:0]  epc_updt_val;               
reg             epsr_c;                     
reg             epsr_c_updt_val;            
reg             epsr_ee;                    
reg             epsr_ee_updt_val;           
reg             epsr_ic;                    
reg             epsr_ic_updt_val;           
reg             epsr_ie;                    
reg             epsr_ie_updt_val;           
reg             epsr_mm;                    
reg             epsr_mm_updt_val;           
reg             epsr_s;                     
reg             epsr_s_updt_val;            
reg     [7 :0]  epsr_vec;                   
reg     [7 :0]  epsr_vec_updt_val;          
reg             psr_c;                      
reg             psr_c_updt_val;             
reg             psr_ee;                     
reg             psr_ee_updt_val;            
reg             psr_ic;                     
reg             psr_ic_updt_val;            
reg             psr_ie;                     
reg             psr_ie_updt_val;            
reg             psr_mm;                     
reg             psr_mm_updt_val;            
reg             psr_s;                      
reg             psr_s_updt_val;             
reg     [7 :0]  psr_vec;                    
reg     [7 :0]  psr_vec_updt_val;           


wire    [31:0]  cp0_had_psr_data;           
wire    [31:0]  cp0_had_spsr_data;          
wire            cp0_ifu_c;                  
wire            cp0_ifu_ee;                 
wire            cp0_intsp_sel;              
wire            cp0_iu_ee;                  
wire            cp0_iu_ee_for_int;          
wire    [31:0]  cp0_iu_epc;                 
wire    [30:0]  cp0_iu_epc_for_chgflw;      
wire    [31:0]  cp0_iu_epsr;                
wire            cp0_iu_ic;                  
wire            cp0_iu_ie_for_int;          
wire            cp0_iu_intsp_en;            
wire            cp0_iu_src_c;               
wire    [7 :0]  cp0_iu_vec;                 
wire            cp0_lsu_mm;                 
wire    [31:0]  cp0_pad_psr;                
wire            cp0_yy_clk_en;              
wire            cp0_yy_intsp_sel_post;      
wire            cp0_yy_supv_mode;           
wire            cp0_yy_supv_mode_aft_dbg;   
wire            cpu_intc_int_exit;          
wire    [7 :0]  cpu_intc_int_vec;           
wire            cpurst_b;                   
wire    [30:0]  epc_for_chgflw;             
wire            epc_from_load;              
wire            epc_updt_vld;               
wire    [31:0]  epc_value;                  
wire            epsr_af;                    
wire            epsr_bm;                    
wire            epsr_clk;                   
wire            epsr_clk_en;                
wire            epsr_from_load;             
wire            epsr_from_psr;              
wire            epsr_from_psr_c;            
wire            epsr_from_psr_ee;           
wire            epsr_from_psr_ie;           
wire            epsr_from_write_port;       
wire            epsr_prgsign_en;            
wire            epsr_prgsign_ins_cnt_en;    
wire            epsr_prgsign_strong;        
wire            epsr_updt_vld;              
wire    [31:0]  epsr_value;                 
wire            epsr_with_rte_int;          
wire            forever_cpuclk;             
wire    [31:0]  had_cp0_psr_data;           
wire            had_iu_rte_pc_sel;          
wire            had_yy_xx_exit_dbg;         
wire            inst_mtcr;                  
wire            inst_psrclr;                
wire            inst_psrset;                
wire            inst_rte;                   
wire            iu_cp0_af_updt_vld;         
wire            iu_cp0_bm_vld;              
wire            iu_cp0_c;                   
wire            iu_cp0_c_vld;               
wire            iu_cp0_cur_epc_update;      
wire    [30:0]  iu_cp0_epc;                 
wire            iu_cp0_epc_update;          
wire            iu_cp0_epc_wen_for_nir;     
wire            iu_cp0_epsr_wen_for_nir;    
wire            iu_cp0_ex_sel;              
wire            iu_cp0_expt_vld;            
wire            iu_cp0_had_int_vld;         
wire            iu_cp0_int_vld;             
wire            iu_cp0_nest_int_en;         
wire            iu_cp0_prgsign_sign_vld;    
wire            iu_cp0_syc_rst_b;           
wire    [31:0]  iu_cp0_updt_val;            
wire            iu_yy_xx_dbgon;             
wire    [7 :0]  iu_yy_xx_expt_vec;          
wire            iui_oreg_epc_sel;           
wire            iui_psr_ee_sel;             
wire            iui_psr_epsr_sel;           
wire            iui_psr_ie_sel;             
wire            iui_psr_psr_sel;            
wire            iui_psr_rte_for_data;       
wire    [31:0]  iui_src0;                   
wire            mtcr_epc;                   
wire            mtcr_psr;                   
wire            nest_int_enable;            
wire            pad_yy_gate_clk_en_b;       
wire            psr_af;                     
wire            psr_bm;                     
wire            psr_c_clk;                  
wire            psr_c_updt_vld;             
wire            psr_clk;                    
wire            psr_clk_en;                 
wire            psr_ee_updt_vld;            
wire            psr_ic_updt_vld;            
wire            psr_ie_updt_vld;            
wire            psr_mm_updt_vld;            
wire            psr_prgsign_en;             
wire            psr_prgsign_ins_cnt_en;     
wire            psr_prgsign_strong;         
wire            psr_s_aft_dbg;              
wire            psr_s_updt_vld;             
wire            psr_val_updt_from_had;      
wire    [31:0]  psr_value;                  
wire            psr_vec_updt_vld;           
wire            randclk_psr_c_mod_en_w2;    
wire            randclk_psr_epsr_mod_en_w46; 
wire            rte_int;                    





assign psr_clk_en = !iu_cp0_syc_rst_b
                    || iu_cp0_ex_sel
                    || had_yy_xx_exit_dbg
                    || iu_cp0_expt_vld
                    || iu_cp0_af_updt_vld
                    || nest_int_enable
		    || iu_cp0_bm_vld
                    || iu_cp0_prgsign_sign_vld;


gated_clk_cell  x_psr_c_gated_clk (
  .clk_in                  (forever_cpuclk         ),
  .clk_out                 (psr_c_clk              ),
  .external_en             (1'b0                   ),
  .global_en               (cp0_yy_clk_en          ),
  .local_en                (psr_c_updt_vld         ),
  .module_en               (randclk_psr_c_mod_en_w2),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   )
);









gated_clk_cell  x_epsr_gated_clk (
  .clk_in                      (forever_cpuclk             ),
  .clk_out                     (epsr_clk                   ),
  .external_en                 (1'b0                       ),
  .global_en                   (cp0_yy_clk_en              ),
  .local_en                    (epsr_clk_en                ),
  .module_en                   (randclk_psr_epsr_mod_en_w46),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);








assign epsr_clk_en = !iu_cp0_syc_rst_b
                     || iu_cp0_ex_sel
                     || iu_cp0_expt_vld
                     || iu_cp0_epc_update
                     || iu_cp0_cur_epc_update
                     || epc_from_load
                     || epsr_from_load;





assign cp0_iu_ee_for_int = iui_psr_rte_for_data ? epsr_ee : psr_ee;
assign cp0_iu_ie_for_int = iui_psr_rte_for_data ? epsr_ie : psr_ie;
assign cp0_iu_ic         = psr_ic;


assign cp0_intsp_sel    =  (|psr_vec[7:5]) && cp0_iu_intsp_en && psr_s 
                        && !psr_af;



assign cp0_yy_intsp_sel_post =  cp0_intsp_sel;

assign cp0_iu_ee         = psr_ee;
assign cp0_ifu_ee        = psr_ee;




assign cp0_iu_src_c  = psr_c;


assign cp0_iu_vec[7:0] = psr_vec[7:0];


assign cp0_iu_epc_for_chgflw[30:0] = epc_for_chgflw[30:0];


assign cp0_iu_epsr[31:0] = epsr_value[31:0];
assign cp0_iu_epc[31:0]  = epc_value[31:0];






assign cp0_ifu_c         = psr_c;
assign cp0_lsu_mm = psr_mm;


assign cpu_intc_int_vec[7:0] = psr_vec[7:0];
assign cpu_intc_int_exit     = inst_rte;


assign cp0_pad_psr[31:0] = psr_value[31:0];






assign cp0_had_spsr_data[31:0] = 32'b0;
assign cp0_had_psr_data[31:0]  = psr_value[31:0];




assign cp0_yy_supv_mode         = psr_s;
assign cp0_yy_supv_mode_aft_dbg = psr_s_aft_dbg;





assign mtcr_psr  = inst_mtcr && iui_psr_psr_sel; //MTCR with dest. PSR 

assign psr_val_updt_from_had = had_yy_xx_exit_dbg
                            || inst_rte && had_iu_rte_pc_sel;







always @( iui_src0[31]
       or epsr_value[31]
       or psr_val_updt_from_had
       or had_cp0_psr_data[31]
       or inst_rte
       or iu_cp0_expt_vld
       or mtcr_psr
       or psr_s
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_s_updt_val = 1'b1;
else if(psr_val_updt_from_had)       //If exit debug mode, save the value in CPUSCR
                                  //to PSR register with its correspondance.
  psr_s_updt_val = had_cp0_psr_data[31];
else if(iu_cp0_expt_vld)          //If enter exception, force into supv mode
  psr_s_updt_val = 1'b1;
else if(mtcr_psr)                 //If MTCR inst, modify S bit 
  psr_s_updt_val = iui_src0[31];
else if(inst_rte)             //If RTE, copy from EPSR 
  psr_s_updt_val = epsr_value[31];
else                              //Else, hold it
  psr_s_updt_val = psr_s;

end

assign psr_s_updt_vld = !iu_cp0_syc_rst_b
                        || had_yy_xx_exit_dbg
                        || iu_cp0_expt_vld
                        || mtcr_psr
                        || inst_rte;

always @(posedge psr_clk or negedge cpurst_b)
begin
  if (!cpurst_b)
    psr_s <= 1'b1;
  else if(psr_s_updt_vld)
    psr_s <= psr_s_updt_val;
  else
    psr_s <= psr_s;
end


assign psr_s_aft_dbg = psr_s || iu_yy_xx_dbgon;






always @( epsr_value[23:16]
       or psr_val_updt_from_had
       or iu_yy_xx_expt_vec[7:0]
       or had_cp0_psr_data[23:16]
       or inst_rte
       or iu_cp0_expt_vld
       or psr_vec[7:0]
       or iui_src0[23:16]
       or mtcr_psr
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_vec_updt_val[7:0] = iui_src0[23:16];
else if(psr_val_updt_from_had)
  psr_vec_updt_val[7:0] = had_cp0_psr_data[23:16];
else if(iu_cp0_expt_vld)          //If exception, modify from IU
  psr_vec_updt_val[7:0] = iu_yy_xx_expt_vec[7:0];
else if(mtcr_psr)
  psr_vec_updt_val[7:0] = iui_src0[23:16];
else if(inst_rte)
  psr_vec_updt_val[7:0] = epsr_value[23:16];
else
  psr_vec_updt_val[7:0] = psr_vec[7:0];

end

assign psr_vec_updt_vld = !iu_cp0_syc_rst_b
                        || had_yy_xx_exit_dbg
                        || iu_cp0_expt_vld
                        || mtcr_psr
                        || inst_rte;

always @(posedge psr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    psr_vec[7:0] <= 8'b0;
  else if(psr_vec_updt_vld)
    psr_vec[7:0] <= psr_vec_updt_val[7:0];
  else
    psr_vec[7:0] <= psr_vec[7:0];
end





always @( epsr_value[9]
       or psr_mm
       or psr_val_updt_from_had
       or had_cp0_psr_data[9]
       or inst_rte
       or iui_src0[9]
       or mtcr_psr
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_mm_updt_val = iui_src0[9];
else if(psr_val_updt_from_had)
  psr_mm_updt_val = had_cp0_psr_data[9];
else if(mtcr_psr)
  psr_mm_updt_val = iui_src0[9];
else if(inst_rte)
  psr_mm_updt_val = epsr_value[9];
else
  psr_mm_updt_val = psr_mm;

end

assign psr_mm_updt_vld = !iu_cp0_syc_rst_b
                        || had_yy_xx_exit_dbg
                        || mtcr_psr
                        || inst_rte;

always @(posedge psr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    psr_mm <= 1'b0;
  else if(psr_mm_updt_vld)
    psr_mm <= psr_mm_updt_val;
  else
    psr_mm <= psr_mm;
end




assign nest_int_enable = iu_cp0_nest_int_en;


always @( nest_int_enable
       or inst_psrclr
       or psr_val_updt_from_had
       or epsr_value[8]
       or psr_ee
       or iui_src0[8]
       or iui_psr_ee_sel
       or inst_rte
       or iu_cp0_expt_vld
       or had_cp0_psr_data[8]
       or inst_psrset
       or mtcr_psr
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_ee_updt_val = iui_src0[8];
else if(psr_val_updt_from_had)
  psr_ee_updt_val = had_cp0_psr_data[8];
else if(iu_cp0_expt_vld)    //If exception, clear the field
  psr_ee_updt_val = 1'b0;
else if(mtcr_psr)
  psr_ee_updt_val = iui_src0[8];
else if((inst_psrset && iui_psr_ee_sel) || nest_int_enable)
  psr_ee_updt_val = 1'b1;
else if(inst_psrclr  && iui_psr_ee_sel)
  psr_ee_updt_val = 1'b0;
else if(inst_rte)
  psr_ee_updt_val = epsr_value[8];
else
  psr_ee_updt_val = psr_ee;

end

assign psr_ee_updt_vld = !iu_cp0_syc_rst_b
                       || had_yy_xx_exit_dbg
                       || iu_cp0_expt_vld
                       || mtcr_psr
                       || inst_psrset && iui_psr_ee_sel
                       || nest_int_enable
                       || inst_psrclr && iui_psr_ee_sel
                       || inst_rte;

always @(posedge psr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    psr_ee <= 1'b0;
  else if(psr_ee_updt_vld)
    psr_ee <= psr_ee_updt_val;
  else
    psr_ee <= psr_ee;
end





always @( had_cp0_psr_data[7]
       or psr_val_updt_from_had
       or psr_ic
       or inst_rte
       or epsr_value[7]
       or iui_src0[7]
       or mtcr_psr
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_ic_updt_val = iui_src0[7];
else if(psr_val_updt_from_had)
  psr_ic_updt_val = had_cp0_psr_data[7];
else if(mtcr_psr)
  psr_ic_updt_val = iui_src0[7];
else if(inst_rte)
  psr_ic_updt_val = epsr_value[7];
else
  psr_ic_updt_val = psr_ic;

end

assign psr_ic_updt_vld = !iu_cp0_syc_rst_b
                        || had_yy_xx_exit_dbg
                        || mtcr_psr
                        || inst_rte;

always @(posedge psr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    psr_ic <= 1'b0;
  else if(psr_ic_updt_vld)
    psr_ic <= psr_ic_updt_val;
  else
    psr_ic <= psr_ic;
end





always @( nest_int_enable
       or inst_psrclr
       or epsr_value[6]
       or psr_val_updt_from_had
       or iui_src0[6]
       or inst_rte
       or iu_cp0_expt_vld
       or iui_psr_ie_sel
       or inst_psrset
       or mtcr_psr
       or psr_ie
       or had_cp0_psr_data[6]
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_ie_updt_val = iui_src0[6];
else if(psr_val_updt_from_had)
  psr_ie_updt_val = had_cp0_psr_data[6];
else if(iu_cp0_expt_vld)   //If exception, force to 0
  psr_ie_updt_val = 1'b0;
else if(mtcr_psr)
  psr_ie_updt_val = iui_src0[6];
else if((inst_psrset && iui_psr_ie_sel) || nest_int_enable)
  psr_ie_updt_val = 1'b1;
else if(inst_psrclr  && iui_psr_ie_sel)
  psr_ie_updt_val = 1'b0;
else if(inst_rte)
  psr_ie_updt_val = epsr_value[6];
else
  psr_ie_updt_val = psr_ie;

end

assign psr_ie_updt_vld = !iu_cp0_syc_rst_b
                       || had_yy_xx_exit_dbg
                       || mtcr_psr
                       || iu_cp0_expt_vld
                       || inst_psrset && iui_psr_ie_sel
                       || nest_int_enable
                       || inst_psrclr && iui_psr_ie_sel
                       || inst_rte;

always @(posedge psr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    psr_ie <= 1'b0;
  else if(psr_ie_updt_vld)
    psr_ie <= psr_ie_updt_val;
  else
    psr_ie <= psr_ie;
end



assign  psr_bm          = 1'b0;







assign psr_prgsign_en = 1'b0;
assign psr_prgsign_strong = 1'b0;
assign psr_prgsign_ins_cnt_en = 1'b0;







assign psr_af = 1'b0;





always @( psr_c
       or psr_val_updt_from_had
       or inst_rte
       or had_cp0_psr_data[0]
       or iu_cp0_c_vld
       or iui_src0[0]
       or iu_cp0_c
       or epsr_value[0]
       or mtcr_psr
       or iu_cp0_syc_rst_b)
begin
if(!iu_cp0_syc_rst_b)
  psr_c_updt_val = iui_src0[0];
else if(psr_val_updt_from_had)
  psr_c_updt_val = had_cp0_psr_data[0];
else if(iu_cp0_c_vld)
  psr_c_updt_val = iu_cp0_c;
else if(mtcr_psr)
  psr_c_updt_val = iui_src0[0];
else if(inst_rte)
  psr_c_updt_val = epsr_value[0];
else
  psr_c_updt_val = psr_c;

end

assign psr_c_updt_vld = !iu_cp0_syc_rst_b
                        || had_yy_xx_exit_dbg
                        || iu_cp0_c_vld
                        || mtcr_psr
                        || inst_rte;


always @(posedge psr_c_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    psr_c <= 1'b0;
  else if(psr_c_updt_vld)
    psr_c <= psr_c_updt_val;
  else
    psr_c <= psr_c;
end




assign psr_value[31:0] = {psr_s, 4'b0, psr_prgsign_ins_cnt_en,
                          psr_prgsign_strong, psr_prgsign_en,
                          psr_vec[7:0], 6'b0,
                          psr_mm, psr_ee, psr_ic, psr_ie,
                          3'b0, psr_bm, psr_af, psr_c};















assign epsr_from_psr_ie     = (psr_value[6]
                               || inst_psrset && iui_psr_ie_sel)
                             && !(inst_psrclr && iui_psr_ie_sel);
assign epsr_from_psr_ee     = (psr_value[8]
                               || inst_psrset && iui_psr_ee_sel)
                             && !(inst_psrclr && iui_psr_ee_sel);

assign epsr_from_psr_c      = iu_cp0_c_vld ? iu_cp0_c : psr_value[0];








assign rte_int              = iu_cp0_int_vld && inst_rte;
assign epsr_with_rte_int    = rte_int;

assign epsr_from_psr        = iu_cp0_expt_vld && !iu_cp0_had_int_vld
                              && !(mtcr_psr || rte_int);
assign epsr_from_write_port = inst_mtcr && iui_psr_epsr_sel
                           || mtcr_psr  && iu_cp0_int_vld 
                           || !iu_cp0_syc_rst_b;
assign epsr_from_load       = iu_cp0_epsr_wen_for_nir;




assign epsr_updt_vld        = epsr_from_psr
                           || epsr_from_write_port
                           || epsr_with_rte_int
                           || epsr_from_load;


always @( psr_value[31]
       or iui_src0[9:6]
       or epsr_from_psr_ee
       or psr_value[7]
       or epsr_vec[7:0]
       or iui_src0[0]
       or epsr_s
       or iu_cp0_updt_val[31]
       or iui_src0[31]
       or epsr_ee
       or epsr_from_psr_ie
       or psr_value[23:16]
       or iu_cp0_updt_val[23:16]
       or epsr_from_load
       or epsr_from_write_port
       or iu_cp0_updt_val[9:6]
       or epsr_from_psr
       or epsr_ic
       or iu_cp0_updt_val[0]
       or epsr_from_psr_c
       or epsr_mm
       or epsr_ie
       or iui_src0[23:16]
       or epsr_c
       or psr_value[9])
begin










if(epsr_from_psr)
begin
  epsr_s_updt_val        = psr_value[31];
  epsr_vec_updt_val[7:0] = psr_value[23:16];
  epsr_mm_updt_val       = psr_value[9];
  epsr_ee_updt_val       = epsr_from_psr_ee;
  epsr_ic_updt_val       = psr_value[7];
  epsr_ie_updt_val       = epsr_from_psr_ie;
  //If c bit is valid when exception occurs, write the C to EPSR
    epsr_c_updt_val      = epsr_from_psr_c;
end
else if(epsr_from_write_port)
begin
  epsr_s_updt_val        = iui_src0[31];
  epsr_vec_updt_val[7:0] = iui_src0[23:16];
  epsr_mm_updt_val       = iui_src0[9];
  epsr_ee_updt_val       = iui_src0[8];
  epsr_ic_updt_val       = iui_src0[7];
  epsr_ie_updt_val       = iui_src0[6];
  epsr_c_updt_val        = iui_src0[0];
end
else if(epsr_from_load)
begin
  epsr_s_updt_val        = iu_cp0_updt_val[31];
  epsr_vec_updt_val[7:0] = iu_cp0_updt_val[23:16];
  epsr_mm_updt_val       = iu_cp0_updt_val[9];
  epsr_ee_updt_val       = iu_cp0_updt_val[8];
  epsr_ic_updt_val       = iu_cp0_updt_val[7];
  epsr_ie_updt_val       = iu_cp0_updt_val[6];
  epsr_c_updt_val        = iu_cp0_updt_val[0];
end
else
begin
  epsr_s_updt_val        = epsr_s;
  epsr_vec_updt_val[7:0] = epsr_vec[7:0];
  epsr_mm_updt_val       = epsr_mm;
  epsr_ee_updt_val       = epsr_ee;
  epsr_ic_updt_val       = epsr_ic;
  epsr_ie_updt_val       = epsr_ie;
  epsr_c_updt_val        = epsr_c;
end

end

always @(posedge epsr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    epsr_s        <= 1'b0;
    epsr_vec[7:0] <= 8'b0;
    epsr_mm       <= 1'b0;
    epsr_ee       <= 1'b0;
    epsr_ic       <= 1'b0;
    epsr_ie       <= 1'b0;
    epsr_c        <= 1'b0;
  end
  else if(epsr_updt_vld)
  begin
    epsr_s        <= epsr_s_updt_val;
    epsr_vec[7:0] <= epsr_vec_updt_val[7:0];
    epsr_mm       <= epsr_mm_updt_val;
    epsr_ee       <= epsr_ee_updt_val;
    epsr_ic       <= epsr_ic_updt_val;
    epsr_ie       <= epsr_ie_updt_val;
    epsr_c        <= epsr_c_updt_val;
  end
  else
  begin
    epsr_s        <= epsr_s;
    epsr_vec[7:0] <= epsr_vec[7:0];
    epsr_mm       <= epsr_mm;
    epsr_ee       <= epsr_ee;
    epsr_ic       <= epsr_ic;
    epsr_ie       <= epsr_ie;
    epsr_c        <= epsr_c;
  end
end


assign epsr_af = 1'b0;

  assign epsr_bm = 1'b0;

  assign epsr_prgsign_en = 1'b0;
  assign epsr_prgsign_strong = 1'b0;
  assign epsr_prgsign_ins_cnt_en = 1'b0;



assign epsr_value[31:0] = {epsr_s, 4'b0, epsr_prgsign_ins_cnt_en,
                           epsr_prgsign_strong, epsr_prgsign_en,
                           epsr_vec[7:0],
                           6'b0, epsr_mm, epsr_ee, epsr_ic, 
                           epsr_ie, 3'b0, epsr_bm, epsr_af, epsr_c};















assign mtcr_epc      = inst_mtcr && iui_oreg_epc_sel;
assign epc_from_load = iu_cp0_epc_wen_for_nir;


always @( iui_src0[31:1]
       or iu_cp0_epc[30:0]
       or mtcr_epc
       or iu_cp0_had_int_vld
       or rte_int
       or iu_cp0_epc_update
       or epc_for_chgflw[30:0]
       or iu_cp0_expt_vld
       or iu_cp0_syc_rst_b)
begin
if((iu_cp0_expt_vld && !rte_int && !iu_cp0_had_int_vld)
    || iu_cp0_epc_update)
  epc_updt_val[30:0] = iu_cp0_epc[30:0];
else if(mtcr_epc || !iu_cp0_syc_rst_b)
  epc_updt_val[30:0] = iui_src0[31:1];
else
  epc_updt_val[30:0] = epc_for_chgflw[30:0];

end

assign epc_for_chgflw[30:0] = epc_from_load ? iu_cp0_updt_val[31:1]
                                            : epc[30:0];

assign epc_updt_vld = iu_cp0_expt_vld || iu_cp0_epc_update 
                   || mtcr_epc || !iu_cp0_syc_rst_b
                   || epc_from_load;

always @(posedge epsr_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    epc[30:0] <= 31'b0;
  else if(epc_updt_vld)
    epc[30:0] <= epc_updt_val[30:0];
  else
    epc[30:0] <= epc[30:0];
end


assign epc_value[31:0] = {epc[30:0],1'b0};























endmodule


























module nm_cp0_randclk(
  randclk_psr_c_mod_en_w2,
  randclk_psr_epsr_mod_en_w46,
  randclk_psr_mod_en_w13
);


output       randclk_psr_c_mod_en_w2;    
output       randclk_psr_epsr_mod_en_w46; 
output       randclk_psr_mod_en_w13;     




wire         randclk_psr_c_mod_en_w2;    
wire         randclk_psr_epsr_mod_en_w46; 
wire         randclk_psr_mod_en_w13;     





assign randclk_psr_c_mod_en_w2     = 1'b0;
assign randclk_psr_mod_en_w13      = 1'b0;
assign randclk_psr_epsr_mod_en_w46 = 1'b0;



endmodule


























module nm_cp0_top(
  cache_cp0_lpmd_ack,
  cp0_cache_lpmd_req,
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_psr_data,
  cp0_had_spsr_data,
  cp0_ifu_c,
  cp0_ifu_ee,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_iu_data,
  cp0_iu_data_vld,
  cp0_iu_dbg_disable_for_tee,
  cp0_iu_ee,
  cp0_iu_ee_for_int,
  cp0_iu_epc,
  cp0_iu_epc_for_chgflw,
  cp0_iu_epsr,
  cp0_iu_expt_vec,
  cp0_iu_expt_vld,
  cp0_iu_flush,
  cp0_iu_flush_chgflw_vld,
  cp0_iu_ic,
  cp0_iu_idly_counter_clear,
  cp0_iu_ie_for_int,
  cp0_iu_int_spcu_en,
  cp0_iu_intsp_we,
  cp0_iu_reg_write_data,
  cp0_iu_req,
  cp0_iu_rte_chgflw_vld,
  cp0_iu_rte_chgflw_vld_for_data,
  cp0_iu_src_c,
  cp0_iu_stall,
  cp0_iu_user_reg14_we,
  cp0_iu_vbr,
  cp0_iu_vec,
  cp0_lsu_mm,
  cp0_lsu_sgbr,
  cp0_lsu_sge,
  cp0_lsu_sgp,
  cp0_lsu_sgtr,
  cp0_mpu_capr_sel,
  cp0_mpu_en,
  cp0_mpu_pacr_sel,
  cp0_mpu_rid_sel,
  cp0_mpu_soft_reset,
  cp0_mpu_updt_capr,
  cp0_mpu_updt_data,
  cp0_mpu_updt_pacr,
  cp0_mpu_updt_rid,
  cp0_pad_psr,
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cp0_yy_be,
  cp0_yy_be_v1,
  cp0_yy_be_v2,
  cp0_yy_clk_en,
  cp0_yy_intsp_sel_post,
  cp0_yy_supv_mode,
  cp0_yy_supv_mode_aft_dbg,
  cpu_intc_int_exit,
  cpu_intc_int_vec,
  cpurst_b,
  forever_cpuclk,
  had_cp0_psr_data,
  had_iu_force_dbg_en,
  had_iu_rte_pc_sel,
  had_yy_xx_dbg,
  had_yy_xx_exit_dbg,
  ifu_cp0_lpmd_ack,
  intc_cpu_intraw_b,
  iu_cp0_af_updt_vld,
  iu_cp0_bm_vld,
  iu_cp0_c,
  iu_cp0_c_vld,
  iu_cp0_cur_epc_update,
  iu_cp0_epc,
  iu_cp0_epc_update,
  iu_cp0_epc_wen_for_nir,
  iu_cp0_epsr_wen_for_nir,
  iu_cp0_ex_data_sel,
  iu_cp0_ex_doze,
  iu_cp0_ex_mfcr,
  iu_cp0_ex_mtcr,
  iu_cp0_ex_psrclr,
  iu_cp0_ex_psrset,
  iu_cp0_ex_rte,
  iu_cp0_ex_sel,
  iu_cp0_ex_stop,
  iu_cp0_ex_wait,
  iu_cp0_expt_vld,
  iu_cp0_had_int_vld,
  iu_cp0_int_vld,
  iu_cp0_intsp_reg14_dout,
  iu_cp0_nest_int_en,
  iu_cp0_oper_mux_en,
  iu_cp0_prgsign_sign_vld,
  iu_cp0_src0,
  iu_cp0_src1,
  iu_cp0_syc_rst_b,
  iu_cp0_updt_val,
  iu_cp0_user_reg14_dout,
  iu_yy_xx_dbgon,
  iu_yy_xx_expt_vec,
  iu_yy_xx_flush,
  mpu_cp0_data,
  pad_yy_gate_clk_en_b,
  sysio_cp0_bigend,
  sysio_cp0_clkratio,
  sysio_cp0_endian_v2,
  sysio_cp0_sys_view_lpmd_b
);


input           cache_cp0_lpmd_ack;            
input           cpurst_b;                      
input           forever_cpuclk;                
input   [31:0]  had_cp0_psr_data;              
input           had_iu_force_dbg_en;           
input           had_iu_rte_pc_sel;             
input           had_yy_xx_dbg;                 
input           had_yy_xx_exit_dbg;            
input           ifu_cp0_lpmd_ack;              
input           intc_cpu_intraw_b;             
input           iu_cp0_af_updt_vld;            
input           iu_cp0_bm_vld;                 
input           iu_cp0_c;                      
input           iu_cp0_c_vld;                  
input           iu_cp0_cur_epc_update;         
input   [30:0]  iu_cp0_epc;                    
input           iu_cp0_epc_update;             
input           iu_cp0_epc_wen_for_nir;        
input           iu_cp0_epsr_wen_for_nir;       
input           iu_cp0_ex_data_sel;            
input           iu_cp0_ex_doze;                
input           iu_cp0_ex_mfcr;                
input           iu_cp0_ex_mtcr;                
input           iu_cp0_ex_psrclr;              
input           iu_cp0_ex_psrset;              
input           iu_cp0_ex_rte;                 
input           iu_cp0_ex_sel;                 
input           iu_cp0_ex_stop;                
input           iu_cp0_ex_wait;                
input           iu_cp0_expt_vld;               
input           iu_cp0_had_int_vld;            
input           iu_cp0_int_vld;                
input   [31:0]  iu_cp0_intsp_reg14_dout;       
input           iu_cp0_nest_int_en;            
input           iu_cp0_oper_mux_en;            
input           iu_cp0_prgsign_sign_vld;       
input   [31:0]  iu_cp0_src0;                   
input   [9 :0]  iu_cp0_src1;                   
input           iu_cp0_syc_rst_b;              
input   [31:0]  iu_cp0_updt_val;               
input   [31:0]  iu_cp0_user_reg14_dout;        
input           iu_yy_xx_dbgon;                
input   [7 :0]  iu_yy_xx_expt_vec;             
input           iu_yy_xx_flush;                
input   [31:0]  mpu_cp0_data;                  
input           pad_yy_gate_clk_en_b;          
input           sysio_cp0_bigend;              
input   [2 :0]  sysio_cp0_clkratio;            
input           sysio_cp0_endian_v2;           
input   [1 :0]  sysio_cp0_sys_view_lpmd_b;     
output          cp0_cache_lpmd_req;            
output  [31:0]  cp0_had_cpuid_idx0;            
output  [1 :0]  cp0_had_lpmd_b;                
output  [31:0]  cp0_had_psr_data;              
output  [31:0]  cp0_had_spsr_data;             
output          cp0_ifu_c;                     
output          cp0_ifu_ee;                    
output          cp0_ifu_in_lpmd;               
output          cp0_ifu_lpmd_req;              
output  [31:0]  cp0_iu_data;                   
output          cp0_iu_data_vld;               
output          cp0_iu_dbg_disable_for_tee;    
output          cp0_iu_ee;                     
output          cp0_iu_ee_for_int;             
output  [31:0]  cp0_iu_epc;                    
output  [30:0]  cp0_iu_epc_for_chgflw;         
output  [31:0]  cp0_iu_epsr;                   
output  [4 :0]  cp0_iu_expt_vec;               
output          cp0_iu_expt_vld;               
output          cp0_iu_flush;                  
output          cp0_iu_flush_chgflw_vld;       
output          cp0_iu_ic;                     
output          cp0_iu_idly_counter_clear;     
output          cp0_iu_ie_for_int;             
output          cp0_iu_int_spcu_en;            
output          cp0_iu_intsp_we;               
output  [31:0]  cp0_iu_reg_write_data;         
output          cp0_iu_req;                    
output          cp0_iu_rte_chgflw_vld;         
output          cp0_iu_rte_chgflw_vld_for_data; 
output          cp0_iu_src_c;                  
output          cp0_iu_stall;                  
output          cp0_iu_user_reg14_we;          
output  [21:0]  cp0_iu_vbr;                    
output  [7 :0]  cp0_iu_vec;                    
output          cp0_lsu_mm;                    
output  [31:0]  cp0_lsu_sgbr;                  
output          cp0_lsu_sge;                   
output          cp0_lsu_sgp;                   
output  [31:0]  cp0_lsu_sgtr;                  
output          cp0_mpu_capr_sel;              
output          cp0_mpu_en;                    
output          cp0_mpu_pacr_sel;              
output          cp0_mpu_rid_sel;               
output          cp0_mpu_soft_reset;            
output          cp0_mpu_updt_capr;             
output  [31:0]  cp0_mpu_updt_data;             
output          cp0_mpu_updt_pacr;             
output          cp0_mpu_updt_rid;              
output  [31:0]  cp0_pad_psr;                   
output          cp0_sysio_ipend_b;             
output  [1 :0]  cp0_sysio_lpmd_b;              
output          cp0_yy_be;                     
output          cp0_yy_be_v1;                  
output          cp0_yy_be_v2;                  
output          cp0_yy_clk_en;                 
output          cp0_yy_intsp_sel_post;         
output          cp0_yy_supv_mode;              
output          cp0_yy_supv_mode_aft_dbg;      
output          cpu_intc_int_exit;             
output  [7 :0]  cpu_intc_int_vec;              




wire            cache_cp0_lpmd_ack;            
wire    [31:0]  ccr_value;                     
wire    [31:0]  chr_value;                     
wire            cp0_cache_lpmd_req;            
wire    [31:0]  cp0_had_cpuid_idx0;            
wire    [1 :0]  cp0_had_lpmd_b;                
wire    [31:0]  cp0_had_psr_data;              
wire    [31:0]  cp0_had_spsr_data;             
wire            cp0_ifu_c;                     
wire            cp0_ifu_ee;                    
wire            cp0_ifu_in_lpmd;               
wire            cp0_ifu_lpmd_req;              
wire    [31:0]  cp0_iu_data;                   
wire            cp0_iu_data_vld;               
wire            cp0_iu_dbg_disable_for_tee;    
wire            cp0_iu_ee;                     
wire            cp0_iu_ee_for_int;             
wire    [31:0]  cp0_iu_epc;                    
wire    [30:0]  cp0_iu_epc_for_chgflw;         
wire    [31:0]  cp0_iu_epsr;                   
wire    [4 :0]  cp0_iu_expt_vec;               
wire            cp0_iu_expt_vld;               
wire            cp0_iu_flush;                  
wire            cp0_iu_flush_chgflw_vld;       
wire            cp0_iu_ic;                     
wire            cp0_iu_idly_counter_clear;     
wire            cp0_iu_ie_for_int;             
wire            cp0_iu_int_spcu_en;            
wire            cp0_iu_intsp_en;               
wire            cp0_iu_intsp_we;               
wire    [31:0]  cp0_iu_reg_write_data;         
wire            cp0_iu_req;                    
wire            cp0_iu_rte_chgflw_vld;         
wire            cp0_iu_rte_chgflw_vld_for_data; 
wire            cp0_iu_src_c;                  
wire            cp0_iu_stall;                  
wire            cp0_iu_user_reg14_we;          
wire    [21:0]  cp0_iu_vbr;                    
wire    [7 :0]  cp0_iu_vec;                    
wire            cp0_lsu_mm;                    
wire    [31:0]  cp0_lsu_sgbr;                  
wire            cp0_lsu_sge;                   
wire            cp0_lsu_sgp;                   
wire    [31:0]  cp0_lsu_sgtr;                  
wire            cp0_mpu_capr_sel;              
wire            cp0_mpu_en;                    
wire            cp0_mpu_pacr_sel;              
wire            cp0_mpu_rid_sel;               
wire            cp0_mpu_soft_reset;            
wire            cp0_mpu_updt_capr;             
wire    [31:0]  cp0_mpu_updt_data;             
wire            cp0_mpu_updt_pacr;             
wire            cp0_mpu_updt_rid;              
wire    [31:0]  cp0_pad_psr;                   
wire            cp0_sysio_ipend_b;             
wire    [1 :0]  cp0_sysio_lpmd_b;              
wire            cp0_yy_be;                     
wire            cp0_yy_be_v1;                  
wire            cp0_yy_be_v2;                  
wire            cp0_yy_clk_en;                 
wire            cp0_yy_intsp_sel_post;         
wire            cp0_yy_supv_mode;              
wire            cp0_yy_supv_mode_aft_dbg;      
wire            cpu_intc_int_exit;             
wire    [7 :0]  cpu_intc_int_vec;              
wire    [31:0]  cpuid_value;                   
wire            cpurst_b;                      
wire    [31:0]  epc_value;                     
wire    [31:0]  epsr_value;                    
wire            forever_cpuclk;                
wire    [31:0]  had_cp0_psr_data;              
wire            had_iu_force_dbg_en;           
wire            had_iu_rte_pc_sel;             
wire            had_yy_xx_dbg;                 
wire            had_yy_xx_exit_dbg;            
wire            ifu_cp0_lpmd_ack;              
wire            inst_doze;                     
wire            inst_lpmd;                     
wire            inst_mfcr;                     
wire            inst_mtcr;                     
wire            inst_psrclr;                   
wire            inst_psrset;                   
wire            inst_rte;                      
wire            inst_stop;                     
wire            inst_wait;                     
wire            intc_cpu_intraw_b;             
wire            iu_cp0_af_updt_vld;            
wire            iu_cp0_bm_vld;                 
wire            iu_cp0_c;                      
wire            iu_cp0_c_vld;                  
wire            iu_cp0_cur_epc_update;         
wire    [30:0]  iu_cp0_epc;                    
wire            iu_cp0_epc_update;             
wire            iu_cp0_epc_wen_for_nir;        
wire            iu_cp0_epsr_wen_for_nir;       
wire            iu_cp0_ex_data_sel;            
wire            iu_cp0_ex_doze;                
wire            iu_cp0_ex_mfcr;                
wire            iu_cp0_ex_mtcr;                
wire            iu_cp0_ex_psrclr;              
wire            iu_cp0_ex_psrset;              
wire            iu_cp0_ex_rte;                 
wire            iu_cp0_ex_sel;                 
wire            iu_cp0_ex_stop;                
wire            iu_cp0_ex_wait;                
wire            iu_cp0_expt_vld;               
wire            iu_cp0_had_int_vld;            
wire            iu_cp0_int_vld;                
wire    [31:0]  iu_cp0_intsp_reg14_dout;       
wire            iu_cp0_nest_int_en;            
wire            iu_cp0_oper_mux_en;            
wire            iu_cp0_prgsign_sign_vld;       
wire    [31:0]  iu_cp0_src0;                   
wire    [9 :0]  iu_cp0_src1;                   
wire            iu_cp0_syc_rst_b;              
wire    [31:0]  iu_cp0_updt_val;               
wire    [31:0]  iu_cp0_user_reg14_dout;        
wire            iu_yy_xx_dbgon;                
wire    [7 :0]  iu_yy_xx_expt_vec;             
wire            iu_yy_xx_flush;                
wire            iui_lpmd_inst_lpmd_for_data;   
wire            iui_oreg_capr_sel;             
wire            iui_oreg_ccr_sel;              
wire            iui_oreg_cpuid_sel;            
wire            iui_oreg_epc_sel;              
wire            iui_oreg_int_sp_sel;           
wire            iui_oreg_nsvbr_sel;            
wire            iui_oreg_pacr_sel;             
wire            iui_oreg_rid_sel;              
wire            iui_oreg_sgbr_sel;             
wire            iui_oreg_sgcr_sel;             
wire            iui_oreg_sgisbr_sel;           
wire            iui_oreg_sgistr_sel;           
wire            iui_oreg_sgtr_sel;             
wire            iui_oreg_srst_sel;             
wire            iui_oreg_user_reg14_sel;       
wire            iui_psr_ee_sel;                
wire            iui_psr_epsr_sel;              
wire            iui_psr_ie_sel;                
wire            iui_psr_psr_sel;               
wire            iui_psr_rte_for_data;          
wire    [31:0]  iui_src0;                      
wire            lpmd_iui_stall;                
wire            lpmd_sm_clk;                   
wire            lpmd_sm_clk_en;                
wire    [31:0]  mpu_cp0_data;                  
wire            oreg_clk;                      
wire            oreg_clk_en;                   
wire            oreg_iui_srst_vld;             
wire            pad_yy_gate_clk_en_b;          
wire            psr_clk;                       
wire            psr_clk_en;                    
wire            psr_oreg_lpmd_sm_clk;          
wire            psr_oreg_lpmd_sm_clk_en;       
wire            psr_s_aft_dbg;                 
wire    [31:0]  psr_value;                     
wire            randclk_psr_c_mod_en_w2;       
wire            randclk_psr_epsr_mod_en_w46;   
wire            randclk_psr_mod_en_w13;        
wire    [31:0]  sgbr_value;                    
wire    [31:0]  sgcr_value;                    
wire    [31:0]  sgisbr_value;                  
wire    [31:0]  sgistr_value;                  
wire    [31:0]  sgtr_value;                    
wire            sysio_cp0_bigend;              
wire    [2 :0]  sysio_cp0_clkratio;            
wire            sysio_cp0_endian_v2;           
wire    [1 :0]  sysio_cp0_sys_view_lpmd_b;     
wire    [31:0]  vbr_value;                     



assign psr_oreg_lpmd_sm_clk_en = psr_clk_en || oreg_clk_en || lpmd_sm_clk_en;

gated_clk_cell  x_psr_lpmd_gated_clk (
  .clk_in                  (forever_cpuclk         ),
  .clk_out                 (psr_oreg_lpmd_sm_clk   ),
  .external_en             (1'b0                   ),
  .global_en               (cp0_yy_clk_en          ),
  .local_en                (psr_oreg_lpmd_sm_clk_en),
  .module_en               (randclk_psr_mod_en_w13 ),
  .pad_yy_gate_clk_en_b    (pad_yy_gate_clk_en_b   )
);








assign oreg_clk    = psr_oreg_lpmd_sm_clk;
assign lpmd_sm_clk = psr_oreg_lpmd_sm_clk;
assign psr_clk     = psr_oreg_lpmd_sm_clk;



nm_cp0_iui  x_nm_cp0_iui (
  .ccr_value                      (ccr_value                     ),
  .chr_value                      (chr_value                     ),
  .cp0_iu_data                    (cp0_iu_data                   ),
  .cp0_iu_data_vld                (cp0_iu_data_vld               ),
  .cp0_iu_dbg_disable_for_tee     (cp0_iu_dbg_disable_for_tee    ),
  .cp0_iu_expt_vec                (cp0_iu_expt_vec               ),
  .cp0_iu_expt_vld                (cp0_iu_expt_vld               ),
  .cp0_iu_flush                   (cp0_iu_flush                  ),
  .cp0_iu_flush_chgflw_vld        (cp0_iu_flush_chgflw_vld       ),
  .cp0_iu_idly_counter_clear      (cp0_iu_idly_counter_clear     ),
  .cp0_iu_req                     (cp0_iu_req                    ),
  .cp0_iu_rte_chgflw_vld          (cp0_iu_rte_chgflw_vld         ),
  .cp0_iu_rte_chgflw_vld_for_data (cp0_iu_rte_chgflw_vld_for_data),
  .cp0_iu_stall                   (cp0_iu_stall                  ),
  .cp0_mpu_capr_sel               (cp0_mpu_capr_sel              ),
  .cp0_mpu_pacr_sel               (cp0_mpu_pacr_sel              ),
  .cp0_mpu_rid_sel                (cp0_mpu_rid_sel               ),
  .cpuid_value                    (cpuid_value                   ),
  .epc_value                      (epc_value                     ),
  .epsr_value                     (epsr_value                    ),
  .inst_doze                      (inst_doze                     ),
  .inst_lpmd                      (inst_lpmd                     ),
  .inst_mfcr                      (inst_mfcr                     ),
  .inst_mtcr                      (inst_mtcr                     ),
  .inst_psrclr                    (inst_psrclr                   ),
  .inst_psrset                    (inst_psrset                   ),
  .inst_rte                       (inst_rte                      ),
  .inst_stop                      (inst_stop                     ),
  .inst_wait                      (inst_wait                     ),
  .iu_cp0_ex_data_sel             (iu_cp0_ex_data_sel            ),
  .iu_cp0_ex_doze                 (iu_cp0_ex_doze                ),
  .iu_cp0_ex_mfcr                 (iu_cp0_ex_mfcr                ),
  .iu_cp0_ex_mtcr                 (iu_cp0_ex_mtcr                ),
  .iu_cp0_ex_psrclr               (iu_cp0_ex_psrclr              ),
  .iu_cp0_ex_psrset               (iu_cp0_ex_psrset              ),
  .iu_cp0_ex_rte                  (iu_cp0_ex_rte                 ),
  .iu_cp0_ex_sel                  (iu_cp0_ex_sel                 ),
  .iu_cp0_ex_stop                 (iu_cp0_ex_stop                ),
  .iu_cp0_ex_wait                 (iu_cp0_ex_wait                ),
  .iu_cp0_intsp_reg14_dout        (iu_cp0_intsp_reg14_dout       ),
  .iu_cp0_oper_mux_en             (iu_cp0_oper_mux_en            ),
  .iu_cp0_src0                    (iu_cp0_src0                   ),
  .iu_cp0_src1                    (iu_cp0_src1                   ),
  .iu_cp0_syc_rst_b               (iu_cp0_syc_rst_b              ),
  .iu_cp0_user_reg14_dout         (iu_cp0_user_reg14_dout        ),
  .iu_yy_xx_dbgon                 (iu_yy_xx_dbgon                ),
  .iui_lpmd_inst_lpmd_for_data    (iui_lpmd_inst_lpmd_for_data   ),
  .iui_oreg_capr_sel              (iui_oreg_capr_sel             ),
  .iui_oreg_ccr_sel               (iui_oreg_ccr_sel              ),
  .iui_oreg_cpuid_sel             (iui_oreg_cpuid_sel            ),
  .iui_oreg_epc_sel               (iui_oreg_epc_sel              ),
  .iui_oreg_int_sp_sel            (iui_oreg_int_sp_sel           ),
  .iui_oreg_nsvbr_sel             (iui_oreg_nsvbr_sel            ),
  .iui_oreg_pacr_sel              (iui_oreg_pacr_sel             ),
  .iui_oreg_rid_sel               (iui_oreg_rid_sel              ),
  .iui_oreg_sgbr_sel              (iui_oreg_sgbr_sel             ),
  .iui_oreg_sgcr_sel              (iui_oreg_sgcr_sel             ),
  .iui_oreg_sgisbr_sel            (iui_oreg_sgisbr_sel           ),
  .iui_oreg_sgistr_sel            (iui_oreg_sgistr_sel           ),
  .iui_oreg_sgtr_sel              (iui_oreg_sgtr_sel             ),
  .iui_oreg_srst_sel              (iui_oreg_srst_sel             ),
  .iui_oreg_user_reg14_sel        (iui_oreg_user_reg14_sel       ),
  .iui_psr_ee_sel                 (iui_psr_ee_sel                ),
  .iui_psr_epsr_sel               (iui_psr_epsr_sel              ),
  .iui_psr_ie_sel                 (iui_psr_ie_sel                ),
  .iui_psr_psr_sel                (iui_psr_psr_sel               ),
  .iui_psr_rte_for_data           (iui_psr_rte_for_data          ),
  .iui_src0                       (iui_src0                      ),
  .lpmd_iui_stall                 (lpmd_iui_stall                ),
  .mpu_cp0_data                   (mpu_cp0_data                  ),
  .oreg_iui_srst_vld              (oreg_iui_srst_vld             ),
  .psr_s_aft_dbg                  (psr_s_aft_dbg                 ),
  .psr_value                      (psr_value                     ),
  .sgbr_value                     (sgbr_value                    ),
  .sgcr_value                     (sgcr_value                    ),
  .sgisbr_value                   (sgisbr_value                  ),
  .sgistr_value                   (sgistr_value                  ),
  .sgtr_value                     (sgtr_value                    ),
  .vbr_value                      (vbr_value                     )
);




nm_cp0_psr  x_nm_cp0_psr (
  .cp0_had_psr_data            (cp0_had_psr_data           ),
  .cp0_had_spsr_data           (cp0_had_spsr_data          ),
  .cp0_ifu_c                   (cp0_ifu_c                  ),
  .cp0_ifu_ee                  (cp0_ifu_ee                 ),
  .cp0_iu_ee                   (cp0_iu_ee                  ),
  .cp0_iu_ee_for_int           (cp0_iu_ee_for_int          ),
  .cp0_iu_epc                  (cp0_iu_epc                 ),
  .cp0_iu_epc_for_chgflw       (cp0_iu_epc_for_chgflw      ),
  .cp0_iu_epsr                 (cp0_iu_epsr                ),
  .cp0_iu_ic                   (cp0_iu_ic                  ),
  .cp0_iu_ie_for_int           (cp0_iu_ie_for_int          ),
  .cp0_iu_intsp_en             (cp0_iu_intsp_en            ),
  .cp0_iu_src_c                (cp0_iu_src_c               ),
  .cp0_iu_vec                  (cp0_iu_vec                 ),
  .cp0_lsu_mm                  (cp0_lsu_mm                 ),
  .cp0_pad_psr                 (cp0_pad_psr                ),
  .cp0_yy_clk_en               (cp0_yy_clk_en              ),
  .cp0_yy_intsp_sel_post       (cp0_yy_intsp_sel_post      ),
  .cp0_yy_supv_mode            (cp0_yy_supv_mode           ),
  .cp0_yy_supv_mode_aft_dbg    (cp0_yy_supv_mode_aft_dbg   ),
  .cpu_intc_int_exit           (cpu_intc_int_exit          ),
  .cpu_intc_int_vec            (cpu_intc_int_vec           ),
  .cpurst_b                    (cpurst_b                   ),
  .epc_value                   (epc_value                  ),
  .epsr_value                  (epsr_value                 ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_cp0_psr_data            (had_cp0_psr_data           ),
  .had_iu_rte_pc_sel           (had_iu_rte_pc_sel          ),
  .had_yy_xx_exit_dbg          (had_yy_xx_exit_dbg         ),
  .inst_mtcr                   (inst_mtcr                  ),
  .inst_psrclr                 (inst_psrclr                ),
  .inst_psrset                 (inst_psrset                ),
  .inst_rte                    (inst_rte                   ),
  .iu_cp0_af_updt_vld          (iu_cp0_af_updt_vld         ),
  .iu_cp0_bm_vld               (iu_cp0_bm_vld              ),
  .iu_cp0_c                    (iu_cp0_c                   ),
  .iu_cp0_c_vld                (iu_cp0_c_vld               ),
  .iu_cp0_cur_epc_update       (iu_cp0_cur_epc_update      ),
  .iu_cp0_epc                  (iu_cp0_epc                 ),
  .iu_cp0_epc_update           (iu_cp0_epc_update          ),
  .iu_cp0_epc_wen_for_nir      (iu_cp0_epc_wen_for_nir     ),
  .iu_cp0_epsr_wen_for_nir     (iu_cp0_epsr_wen_for_nir    ),
  .iu_cp0_ex_sel               (iu_cp0_ex_sel              ),
  .iu_cp0_expt_vld             (iu_cp0_expt_vld            ),
  .iu_cp0_had_int_vld          (iu_cp0_had_int_vld         ),
  .iu_cp0_int_vld              (iu_cp0_int_vld             ),
  .iu_cp0_nest_int_en          (iu_cp0_nest_int_en         ),
  .iu_cp0_prgsign_sign_vld     (iu_cp0_prgsign_sign_vld    ),
  .iu_cp0_syc_rst_b            (iu_cp0_syc_rst_b           ),
  .iu_cp0_updt_val             (iu_cp0_updt_val            ),
  .iu_yy_xx_dbgon              (iu_yy_xx_dbgon             ),
  .iu_yy_xx_expt_vec           (iu_yy_xx_expt_vec          ),
  .iui_oreg_epc_sel            (iui_oreg_epc_sel           ),
  .iui_psr_ee_sel              (iui_psr_ee_sel             ),
  .iui_psr_epsr_sel            (iui_psr_epsr_sel           ),
  .iui_psr_ie_sel              (iui_psr_ie_sel             ),
  .iui_psr_psr_sel             (iui_psr_psr_sel            ),
  .iui_psr_rte_for_data        (iui_psr_rte_for_data       ),
  .iui_src0                    (iui_src0                   ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .psr_clk                     (psr_clk                    ),
  .psr_clk_en                  (psr_clk_en                 ),
  .psr_s_aft_dbg               (psr_s_aft_dbg              ),
  .psr_value                   (psr_value                  ),
  .randclk_psr_c_mod_en_w2     (randclk_psr_c_mod_en_w2    ),
  .randclk_psr_epsr_mod_en_w46 (randclk_psr_epsr_mod_en_w46)
);



nm_cp0_oreg  x_nm_cp0_oreg (
  .ccr_value               (ccr_value              ),
  .chr_value               (chr_value              ),
  .cp0_had_cpuid_idx0      (cp0_had_cpuid_idx0     ),
  .cp0_iu_int_spcu_en      (cp0_iu_int_spcu_en     ),
  .cp0_iu_intsp_en         (cp0_iu_intsp_en        ),
  .cp0_iu_intsp_we         (cp0_iu_intsp_we        ),
  .cp0_iu_reg_write_data   (cp0_iu_reg_write_data  ),
  .cp0_iu_user_reg14_we    (cp0_iu_user_reg14_we   ),
  .cp0_iu_vbr              (cp0_iu_vbr             ),
  .cp0_lsu_sgbr            (cp0_lsu_sgbr           ),
  .cp0_lsu_sge             (cp0_lsu_sge            ),
  .cp0_lsu_sgp             (cp0_lsu_sgp            ),
  .cp0_lsu_sgtr            (cp0_lsu_sgtr           ),
  .cp0_mpu_en              (cp0_mpu_en             ),
  .cp0_mpu_soft_reset      (cp0_mpu_soft_reset     ),
  .cp0_mpu_updt_capr       (cp0_mpu_updt_capr      ),
  .cp0_mpu_updt_data       (cp0_mpu_updt_data      ),
  .cp0_mpu_updt_pacr       (cp0_mpu_updt_pacr      ),
  .cp0_mpu_updt_rid        (cp0_mpu_updt_rid       ),
  .cp0_yy_be               (cp0_yy_be              ),
  .cp0_yy_be_v1            (cp0_yy_be_v1           ),
  .cp0_yy_be_v2            (cp0_yy_be_v2           ),
  .cp0_yy_intsp_sel_post   (cp0_yy_intsp_sel_post  ),
  .cpuid_value             (cpuid_value            ),
  .cpurst_b                (cpurst_b               ),
  .had_iu_force_dbg_en     (had_iu_force_dbg_en    ),
  .inst_mfcr               (inst_mfcr              ),
  .inst_mtcr               (inst_mtcr              ),
  .iu_cp0_syc_rst_b        (iu_cp0_syc_rst_b       ),
  .iui_oreg_capr_sel       (iui_oreg_capr_sel      ),
  .iui_oreg_ccr_sel        (iui_oreg_ccr_sel       ),
  .iui_oreg_cpuid_sel      (iui_oreg_cpuid_sel     ),
  .iui_oreg_int_sp_sel     (iui_oreg_int_sp_sel    ),
  .iui_oreg_nsvbr_sel      (iui_oreg_nsvbr_sel     ),
  .iui_oreg_pacr_sel       (iui_oreg_pacr_sel      ),
  .iui_oreg_rid_sel        (iui_oreg_rid_sel       ),
  .iui_oreg_sgbr_sel       (iui_oreg_sgbr_sel      ),
  .iui_oreg_sgcr_sel       (iui_oreg_sgcr_sel      ),
  .iui_oreg_sgisbr_sel     (iui_oreg_sgisbr_sel    ),
  .iui_oreg_sgistr_sel     (iui_oreg_sgistr_sel    ),
  .iui_oreg_sgtr_sel       (iui_oreg_sgtr_sel      ),
  .iui_oreg_srst_sel       (iui_oreg_srst_sel      ),
  .iui_oreg_user_reg14_sel (iui_oreg_user_reg14_sel),
  .iui_src0                (iui_src0               ),
  .oreg_clk                (oreg_clk               ),
  .oreg_clk_en             (oreg_clk_en            ),
  .oreg_iui_srst_vld       (oreg_iui_srst_vld      ),
  .sgbr_value              (sgbr_value             ),
  .sgcr_value              (sgcr_value             ),
  .sgisbr_value            (sgisbr_value           ),
  .sgistr_value            (sgistr_value           ),
  .sgtr_value              (sgtr_value             ),
  .sysio_cp0_bigend        (sysio_cp0_bigend       ),
  .sysio_cp0_clkratio      (sysio_cp0_clkratio     ),
  .sysio_cp0_endian_v2     (sysio_cp0_endian_v2    ),
  .vbr_value               (vbr_value              )
);



nm_cp0_lpmd  x_nm_cp0_lpmd (
  .cache_cp0_lpmd_ack          (cache_cp0_lpmd_ack         ),
  .cp0_cache_lpmd_req          (cp0_cache_lpmd_req         ),
  .cp0_had_lpmd_b              (cp0_had_lpmd_b             ),
  .cp0_ifu_in_lpmd             (cp0_ifu_in_lpmd            ),
  .cp0_ifu_lpmd_req            (cp0_ifu_lpmd_req           ),
  .cp0_sysio_ipend_b           (cp0_sysio_ipend_b          ),
  .cp0_sysio_lpmd_b            (cp0_sysio_lpmd_b           ),
  .cp0_yy_clk_en               (cp0_yy_clk_en              ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_yy_xx_dbg               (had_yy_xx_dbg              ),
  .ifu_cp0_lpmd_ack            (ifu_cp0_lpmd_ack           ),
  .inst_doze                   (inst_doze                  ),
  .inst_lpmd                   (inst_lpmd                  ),
  .inst_stop                   (inst_stop                  ),
  .inst_wait                   (inst_wait                  ),
  .intc_cpu_intraw_b           (intc_cpu_intraw_b          ),
  .iu_cp0_ex_sel               (iu_cp0_ex_sel              ),
  .iu_yy_xx_dbgon              (iu_yy_xx_dbgon             ),
  .iu_yy_xx_flush              (iu_yy_xx_flush             ),
  .iui_lpmd_inst_lpmd_for_data (iui_lpmd_inst_lpmd_for_data),
  .lpmd_iui_stall              (lpmd_iui_stall             ),
  .lpmd_sm_clk                 (lpmd_sm_clk                ),
  .lpmd_sm_clk_en              (lpmd_sm_clk_en             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .sysio_cp0_sys_view_lpmd_b   (sysio_cp0_sys_view_lpmd_b  )
);




nm_cp0_randclk  x_nm_cp0_randclk (
  .randclk_psr_c_mod_en_w2     (randclk_psr_c_mod_en_w2    ),
  .randclk_psr_epsr_mod_en_w46 (randclk_psr_epsr_mod_en_w46),
  .randclk_psr_mod_en_w13      (randclk_psr_mod_en_w13     )
);



endmodule


























module CK802_20200318(
  biu_pad_haddr,
  biu_pad_hburst,
  biu_pad_hprot,
  biu_pad_hsize,
  biu_pad_htrans,
  biu_pad_hwdata,
  biu_pad_hwrite,
  cp0_pad_psr,
  cpu_pad_dfs_ack,
  ctim_pad_int_vld,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  iu_pad_gpr_data,
  iu_pad_gpr_index,
  iu_pad_gpr_we,
  iu_pad_inst_retire,
  iu_pad_inst_split,
  iu_pad_retire_pc,
  pad_biu_hrdata,
  pad_biu_hready,
  pad_biu_hresp,
  pad_bmu_iahbl_base,
  pad_bmu_iahbl_mask,
  pad_cpu_dfs_req,
  pad_cpu_rst_b,
  pad_ctim_calib,
  pad_ctim_refclk,
  pad_had_jtg_tclk,
  pad_had_jtg_tms_i,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_sysio_bigend_b,
  pad_sysio_dbgrq_b,
  pad_sysio_endian_v2,
  pad_vic_int_cfg,
  pad_vic_int_vld,
  pad_yy_gate_clk_en_b,
  pad_yy_test_mode,
  pll_core_cpuclk,
  sysio_pad_idlyn_b,
  sysio_pad_lpmd_b,
  sysio_pad_srst
);


































































































input   [31:0]  pad_biu_hrdata;                      
input           pad_biu_hready;                      
input           pad_biu_hresp;                       
input   [11:0]  pad_bmu_iahbl_base;                  
input   [11:0]  pad_bmu_iahbl_mask;                  
input           pad_cpu_dfs_req;                     
input           pad_cpu_rst_b;                       
input   [25:0]  pad_ctim_calib;                      
input           pad_ctim_refclk;                     
input           pad_had_jtg_tclk;                    
input           pad_had_jtg_tms_i;                   
input           pad_had_jtg_trst_b;                  
input           pad_had_rst_b;                       
input   [31:0]  pad_iahbl_hrdata;                    
input           pad_iahbl_hready;                    
input           pad_iahbl_hresp;                     
input           pad_sysio_bigend_b;                  
input           pad_sysio_dbgrq_b;                   
input           pad_sysio_endian_v2;                 
input   [31:0]  pad_vic_int_cfg;                     
input   [31:0]  pad_vic_int_vld;                     
input           pad_yy_gate_clk_en_b;                
input           pad_yy_test_mode;                    
input           pll_core_cpuclk;                     
output  [31:0]  biu_pad_haddr;                       
output  [2 :0]  biu_pad_hburst;                      
output  [3 :0]  biu_pad_hprot;                       
output  [2 :0]  biu_pad_hsize;                       
output  [1 :0]  biu_pad_htrans;                      
output  [31:0]  biu_pad_hwdata;                      
output          biu_pad_hwrite;                      
output  [31:0]  cp0_pad_psr;                         
output          cpu_pad_dfs_ack;                     
output          ctim_pad_int_vld;                    
output  [1 :0]  had_pad_jdb_pm;                      
output          had_pad_jtg_tms_o;                   
output          had_pad_jtg_tms_oe;                  
output  [31:0]  iahbl_pad_haddr;                     
output  [2 :0]  iahbl_pad_hburst;                    
output  [3 :0]  iahbl_pad_hprot;                     
output  [2 :0]  iahbl_pad_hsize;                     
output  [1 :0]  iahbl_pad_htrans;                    
output  [31:0]  iahbl_pad_hwdata;                    
output          iahbl_pad_hwrite;                    
output  [31:0]  iu_pad_gpr_data;                     
output  [4 :0]  iu_pad_gpr_index;                    
output          iu_pad_gpr_we;                       
output          iu_pad_inst_retire;                  
output          iu_pad_inst_split;                   
output  [31:0]  iu_pad_retire_pc;                    
output          sysio_pad_idlyn_b;                   
output  [1 :0]  sysio_pad_lpmd_b;                    
output          sysio_pad_srst;                      




wire    [31:0]  biu_pad_haddr;                       
wire    [2 :0]  biu_pad_hburst;                      
wire    [3 :0]  biu_pad_hprot;                       
wire    [2 :0]  biu_pad_hsize;                       
wire    [1 :0]  biu_pad_htrans;                      
wire    [31:0]  biu_pad_hwdata;                      
wire            biu_pad_hwrite;                      
wire            bmu_tcipif_dbus_acc_deny;            
wire    [31:0]  bmu_tcipif_dbus_addr;                
wire            bmu_tcipif_dbus_chk_fail;            
wire            bmu_tcipif_dbus_req;                 
wire            bmu_tcipif_dbus_supv_mode;           
wire    [31:0]  bmu_tcipif_dbus_wdata;               
wire            bmu_tcipif_dbus_write;               
wire            bmu_tcipif_ibus_acc_deny;            
wire    [31:0]  bmu_tcipif_ibus_addr;                
wire            bmu_tcipif_ibus_req;                 
wire            bmu_tcipif_ibus_write;               
wire    [31:0]  cp0_had_cpuid_idx0;                  
wire    [1 :0]  cp0_had_lpmd_b;                      
wire    [31:0]  cp0_had_psr_data;                    
wire    [31:0]  cp0_had_spsr_data;                   
wire    [31:0]  cp0_pad_psr;                         
wire            cp0_yy_be_v2;                        
wire    [7 :0]  cpu_intc_ack_vec;                    
wire            cpu_intc_int_ack;                    
wire            cpu_intc_int_exit;                   
wire    [7 :0]  cpu_intc_int_vec;                    
wire            cpu_pad_dfs_ack;                     
wire            cpurst_b;                            
wire            ctim_pad_int_vld;                    
wire            forever_cpuclk;                      
wire            forever_cpuclk_nogated;              
wire            forever_jtgclk;                      
wire            had_core_dbg_mode_req;               
wire            had_core_exit_dbg;                   
wire    [31:0]  had_cp0_psr_data;                    
wire    [31:0]  had_idu_wbbr_data;                   
wire            had_idu_wbbr_vld;                    
wire            had_ifu_inst_bkpt_dbq_req;           
wire            had_ifu_inst_bkpt_dbqexp_req;        
wire    [31:0]  had_ifu_ir;                          
wire            had_ifu_ir_vld;                      
wire            had_iu_bkpt_trace_en;                
wire            had_iu_dr_set_req;                   
wire            had_iu_flush_mbee;                   
wire            had_iu_force_dbg_en;                 
wire            had_iu_int_vld;                      
wire            had_iu_mbkpt_fsm_index_mbee;         
wire            had_iu_mem_bkpt_exp_req;             
wire            had_iu_mem_bkpt_mask;                
wire            had_iu_mem_bkpt_req;                 
wire    [30:0]  had_iu_pc;                           
wire            had_iu_rte_pc_sel;                   
wire            had_iu_trace_req;                    
wire            had_iu_trace_req_for_dbg_disable;    
wire            had_iu_xx_fdb;                       
wire            had_iu_xx_jdbreq;                    
wire    [1 :0]  had_pad_jdb_pm;                      
wire            had_pad_jtg_tms_o;                   
wire            had_pad_jtg_tms_oe;                  
wire            had_tcipif_cmplt;                    
wire    [31:0]  had_tcipif_rdata;                    
wire            had_yy_xx_dbg;                       
wire            had_yy_xx_dp_index_mbee;             
wire            hadrst_b;                            
wire    [31:0]  iahbl_pad_haddr;                     
wire    [2 :0]  iahbl_pad_hburst;                    
wire    [3 :0]  iahbl_pad_hprot;                     
wire    [2 :0]  iahbl_pad_hsize;                     
wire    [1 :0]  iahbl_pad_htrans;                    
wire    [31:0]  iahbl_pad_hwdata;                    
wire            iahbl_pad_hwrite;                    
wire            ifu_had_chg_flw_inst;                
wire            ifu_had_fetch_expt_vld;              
wire            ifu_had_inst_dbg_disable;            
wire    [31:0]  ifu_had_match_pc;                    
wire            ifu_had_split_first;                 
wire            intc_cpu_int_b;                      
wire            intc_cpu_intraw_b;                   
wire    [7 :0]  intc_cpu_vec_b;                      
wire            iu_had_adr_dbg_ack;                  
wire            iu_had_data_bkpt_occur_vld;          
wire            iu_had_dbg_disable_for_tee;          
wire            iu_had_dr_dbg_ack;                   
wire            iu_had_expt_vld;                     
wire            iu_had_fast_retire_acc_err_pc_update; 
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;   
wire            iu_had_flush;                        
wire            iu_had_inst_bkpt_occur_vld;          
wire            iu_had_int_ack;                      
wire            iu_had_retire_with_had_int;          
wire            iu_had_trace_occur_vld;              
wire            iu_had_xx_bkpt_inst;                 
wire    [31:0]  iu_had_xx_data;                      
wire            iu_had_xx_data_vld;                  
wire            iu_had_xx_dbg_ack;                   
wire            iu_had_xx_mldst;                     
wire            iu_had_xx_retire;                    
wire            iu_had_xx_retire_normal;             
wire    [31:0]  iu_had_xx_retire_pc;                 
wire    [31:0]  iu_pad_gpr_data;                     
wire    [4 :0]  iu_pad_gpr_index;                    
wire            iu_pad_gpr_we;                       
wire            iu_pad_inst_retire;                  
wire            iu_pad_inst_split;                   
wire    [31:0]  iu_pad_retire_pc;                    
wire            iu_yy_xx_dbgon;                      
wire    [31:0]  lsu_had_addr;                        
wire            lsu_had_addr_vld;                    
wire            lsu_had_ex_cmplt;                    
wire            lsu_had_st;                          
wire    [31:0]  pad_biu_hrdata;                      
wire            pad_biu_hready;                      
wire            pad_biu_hresp;                       
wire    [11:0]  pad_bmu_iahbl_base;                  
wire    [11:0]  pad_bmu_iahbl_mask;                  
wire            pad_cpu_dfs_req;                     
wire            pad_cpu_rst_b;                       
wire    [25:0]  pad_ctim_calib;                      
wire            pad_ctim_refclk;                     
wire            pad_had_jtg_tclk;                    
wire            pad_had_jtg_tms_i;                   
wire            pad_had_jtg_trst_b;                  
wire            pad_had_rst_b;                       
wire    [31:0]  pad_iahbl_hrdata;                    
wire            pad_iahbl_hready;                    
wire            pad_iahbl_hresp;                     
wire            pad_sysio_bigend_b;                  
wire            pad_sysio_dbgrq_b;                   
wire            pad_sysio_endian_v2;                 
wire    [31:0]  pad_vic_int_cfg;                     
wire    [31:0]  pad_vic_int_vld;                     
wire            pad_yy_gate_clk_en_b;                
wire            pad_yy_test_mode;                    
wire            pll_core_cpuclk;                     
wire            pwrm_cpu_avrg_power_inst_issue;      
wire            pwrm_cpu_bus_peak_power_limit_en;    
wire            pwrm_cpu_inst_peak_power_limit_en;   
wire            pwrm_cpu_peak_power_limit_en;        
wire            sysio_had_sdb_req_b;                 
wire            sysio_pad_idlyn_b;                   
wire    [1 :0]  sysio_pad_lpmd_b;                    
wire            sysio_pad_srst;                      
wire            tcipif_bmu_dbus_acc_err;             
wire    [31:0]  tcipif_bmu_dbus_data;                
wire            tcipif_bmu_dbus_data_vld;            
wire            tcipif_bmu_dbus_grnt;                
wire            tcipif_bmu_dbus_trans_cmplt;         
wire            tcipif_bmu_ibus_acc_err;             
wire    [31:0]  tcipif_bmu_ibus_data;                
wire            tcipif_bmu_ibus_data_vld;            
wire            tcipif_bmu_ibus_grnt;                
wire            tcipif_bmu_ibus_trans_cmplt;         
wire    [15:0]  tcipif_had_addr;                     
wire            tcipif_had_sel;                      
wire    [31:0]  tcipif_had_wdata;                    
wire            tcipif_had_write;                    
wire            trst_b;                              






nm_core_top  x_nm_core_top (
  .biu_pad_haddr                        (biu_pad_haddr                       ),
  .biu_pad_hburst                       (biu_pad_hburst                      ),
  .biu_pad_hprot                        (biu_pad_hprot                       ),
  .biu_pad_hsize                        (biu_pad_hsize                       ),
  .biu_pad_htrans                       (biu_pad_htrans                      ),
  .biu_pad_hwdata                       (biu_pad_hwdata                      ),
  .biu_pad_hwrite                       (biu_pad_hwrite                      ),
  .bmu_tcipif_dbus_acc_deny             (bmu_tcipif_dbus_acc_deny            ),
  .bmu_tcipif_dbus_addr                 (bmu_tcipif_dbus_addr                ),
  .bmu_tcipif_dbus_chk_fail             (bmu_tcipif_dbus_chk_fail            ),
  .bmu_tcipif_dbus_req                  (bmu_tcipif_dbus_req                 ),
  .bmu_tcipif_dbus_supv_mode            (bmu_tcipif_dbus_supv_mode           ),
  .bmu_tcipif_dbus_wdata                (bmu_tcipif_dbus_wdata               ),
  .bmu_tcipif_dbus_write                (bmu_tcipif_dbus_write               ),
  .bmu_tcipif_ibus_acc_deny             (bmu_tcipif_ibus_acc_deny            ),
  .bmu_tcipif_ibus_addr                 (bmu_tcipif_ibus_addr                ),
  .bmu_tcipif_ibus_req                  (bmu_tcipif_ibus_req                 ),
  .bmu_tcipif_ibus_write                (bmu_tcipif_ibus_write               ),
  .cp0_had_cpuid_idx0                   (cp0_had_cpuid_idx0                  ),
  .cp0_had_lpmd_b                       (cp0_had_lpmd_b                      ),
  .cp0_had_psr_data                     (cp0_had_psr_data                    ),
  .cp0_had_spsr_data                    (cp0_had_spsr_data                   ),
  .cp0_pad_psr                          (cp0_pad_psr                         ),
  .cp0_yy_be_v2                         (cp0_yy_be_v2                        ),
  .cpu_intc_ack_vec                     (cpu_intc_ack_vec                    ),
  .cpu_intc_int_ack                     (cpu_intc_int_ack                    ),
  .cpu_intc_int_exit                    (cpu_intc_int_exit                   ),
  .cpu_intc_int_vec                     (cpu_intc_int_vec                    ),
  .cpu_pad_dfs_ack                      (cpu_pad_dfs_ack                     ),
  .cpurst_b                             (cpurst_b                            ),
  .forever_cpuclk                       (forever_cpuclk                      ),
  .had_core_dbg_mode_req                (had_core_dbg_mode_req               ),
  .had_core_exit_dbg                    (had_core_exit_dbg                   ),
  .had_cp0_psr_data                     (had_cp0_psr_data                    ),
  .had_idu_wbbr_data                    (had_idu_wbbr_data                   ),
  .had_idu_wbbr_vld                     (had_idu_wbbr_vld                    ),
  .had_ifu_inst_bkpt_dbq_req            (had_ifu_inst_bkpt_dbq_req           ),
  .had_ifu_inst_bkpt_dbqexp_req         (had_ifu_inst_bkpt_dbqexp_req        ),
  .had_ifu_ir                           (had_ifu_ir                          ),
  .had_ifu_ir_vld                       (had_ifu_ir_vld                      ),
  .had_iu_bkpt_trace_en                 (had_iu_bkpt_trace_en                ),
  .had_iu_dr_set_req                    (had_iu_dr_set_req                   ),
  .had_iu_flush_mbee                    (had_iu_flush_mbee                   ),
  .had_iu_force_dbg_en                  (had_iu_force_dbg_en                 ),
  .had_iu_int_vld                       (had_iu_int_vld                      ),
  .had_iu_mbkpt_fsm_index_mbee          (had_iu_mbkpt_fsm_index_mbee         ),
  .had_iu_mem_bkpt_exp_req              (had_iu_mem_bkpt_exp_req             ),
  .had_iu_mem_bkpt_mask                 (had_iu_mem_bkpt_mask                ),
  .had_iu_mem_bkpt_req                  (had_iu_mem_bkpt_req                 ),
  .had_iu_pc                            (had_iu_pc                           ),
  .had_iu_rte_pc_sel                    (had_iu_rte_pc_sel                   ),
  .had_iu_trace_req                     (had_iu_trace_req                    ),
  .had_iu_trace_req_for_dbg_disable     (had_iu_trace_req_for_dbg_disable    ),
  .had_iu_xx_fdb                        (had_iu_xx_fdb                       ),
  .had_iu_xx_jdbreq                     (had_iu_xx_jdbreq                    ),
  .had_yy_xx_dbg                        (had_yy_xx_dbg                       ),
  .had_yy_xx_dp_index_mbee              (had_yy_xx_dp_index_mbee             ),
  .iahbl_pad_haddr                      (iahbl_pad_haddr                     ),
  .iahbl_pad_hburst                     (iahbl_pad_hburst                    ),
  .iahbl_pad_hprot                      (iahbl_pad_hprot                     ),
  .iahbl_pad_hsize                      (iahbl_pad_hsize                     ),
  .iahbl_pad_htrans                     (iahbl_pad_htrans                    ),
  .iahbl_pad_hwdata                     (iahbl_pad_hwdata                    ),
  .iahbl_pad_hwrite                     (iahbl_pad_hwrite                    ),
  .ifu_had_chg_flw_inst                 (ifu_had_chg_flw_inst                ),
  .ifu_had_fetch_expt_vld               (ifu_had_fetch_expt_vld              ),
  .ifu_had_inst_dbg_disable             (ifu_had_inst_dbg_disable            ),
  .ifu_had_match_pc                     (ifu_had_match_pc                    ),
  .ifu_had_split_first                  (ifu_had_split_first                 ),
  .intc_cpu_int_b                       (intc_cpu_int_b                      ),
  .intc_cpu_intraw_b                    (intc_cpu_intraw_b                   ),
  .intc_cpu_vec_b                       (intc_cpu_vec_b                      ),
  .iu_had_adr_dbg_ack                   (iu_had_adr_dbg_ack                  ),
  .iu_had_data_bkpt_occur_vld           (iu_had_data_bkpt_occur_vld          ),
  .iu_had_dbg_disable_for_tee           (iu_had_dbg_disable_for_tee          ),
  .iu_had_dr_dbg_ack                    (iu_had_dr_dbg_ack                   ),
  .iu_had_expt_vld                      (iu_had_expt_vld                     ),
  .iu_had_fast_retire_acc_err_pc_update (iu_had_fast_retire_acc_err_pc_update),
  .iu_had_fast_retire_acc_err_pc_val    (iu_had_fast_retire_acc_err_pc_val   ),
  .iu_had_flush                         (iu_had_flush                        ),
  .iu_had_inst_bkpt_occur_vld           (iu_had_inst_bkpt_occur_vld          ),
  .iu_had_int_ack                       (iu_had_int_ack                      ),
  .iu_had_retire_with_had_int           (iu_had_retire_with_had_int          ),
  .iu_had_trace_occur_vld               (iu_had_trace_occur_vld              ),
  .iu_had_xx_bkpt_inst                  (iu_had_xx_bkpt_inst                 ),
  .iu_had_xx_data                       (iu_had_xx_data                      ),
  .iu_had_xx_data_vld                   (iu_had_xx_data_vld                  ),
  .iu_had_xx_dbg_ack                    (iu_had_xx_dbg_ack                   ),
  .iu_had_xx_mldst                      (iu_had_xx_mldst                     ),
  .iu_had_xx_retire                     (iu_had_xx_retire                    ),
  .iu_had_xx_retire_normal              (iu_had_xx_retire_normal             ),
  .iu_had_xx_retire_pc                  (iu_had_xx_retire_pc                 ),
  .iu_pad_gpr_data                      (iu_pad_gpr_data                     ),
  .iu_pad_gpr_index                     (iu_pad_gpr_index                    ),
  .iu_pad_gpr_we                        (iu_pad_gpr_we                       ),
  .iu_pad_inst_retire                   (iu_pad_inst_retire                  ),
  .iu_pad_inst_split                    (iu_pad_inst_split                   ),
  .iu_pad_retire_pc                     (iu_pad_retire_pc                    ),
  .iu_yy_xx_dbgon                       (iu_yy_xx_dbgon                      ),
  .lsu_had_addr                         (lsu_had_addr                        ),
  .lsu_had_addr_vld                     (lsu_had_addr_vld                    ),
  .lsu_had_ex_cmplt                     (lsu_had_ex_cmplt                    ),
  .lsu_had_st                           (lsu_had_st                          ),
  .pad_biu_hrdata                       (pad_biu_hrdata                      ),
  .pad_biu_hready                       (pad_biu_hready                      ),
  .pad_biu_hresp                        (pad_biu_hresp                       ),
  .pad_bmu_iahbl_base                   (pad_bmu_iahbl_base                  ),
  .pad_bmu_iahbl_mask                   (pad_bmu_iahbl_mask                  ),
  .pad_cpu_dfs_req                      (pad_cpu_dfs_req                     ),
  .pad_iahbl_hrdata                     (pad_iahbl_hrdata                    ),
  .pad_iahbl_hready                     (pad_iahbl_hready                    ),
  .pad_iahbl_hresp                      (pad_iahbl_hresp                     ),
  .pad_sysio_bigend_b                   (pad_sysio_bigend_b                  ),
  .pad_sysio_dbgrq_b                    (pad_sysio_dbgrq_b                   ),
  .pad_sysio_endian_v2                  (pad_sysio_endian_v2                 ),
  .pad_yy_gate_clk_en_b                 (pad_yy_gate_clk_en_b                ),
  .pwrm_cpu_avrg_power_inst_issue       (pwrm_cpu_avrg_power_inst_issue      ),
  .pwrm_cpu_bus_peak_power_limit_en     (pwrm_cpu_bus_peak_power_limit_en    ),
  .pwrm_cpu_inst_peak_power_limit_en    (pwrm_cpu_inst_peak_power_limit_en   ),
  .pwrm_cpu_peak_power_limit_en         (pwrm_cpu_peak_power_limit_en        ),
  .sysio_had_sdb_req_b                  (sysio_had_sdb_req_b                 ),
  .sysio_pad_idlyn_b                    (sysio_pad_idlyn_b                   ),
  .sysio_pad_lpmd_b                     (sysio_pad_lpmd_b                    ),
  .sysio_pad_srst                       (sysio_pad_srst                      ),
  .tcipif_bmu_dbus_acc_err              (tcipif_bmu_dbus_acc_err             ),
  .tcipif_bmu_dbus_data                 (tcipif_bmu_dbus_data                ),
  .tcipif_bmu_dbus_data_vld             (tcipif_bmu_dbus_data_vld            ),
  .tcipif_bmu_dbus_grnt                 (tcipif_bmu_dbus_grnt                ),
  .tcipif_bmu_dbus_trans_cmplt          (tcipif_bmu_dbus_trans_cmplt         ),
  .tcipif_bmu_ibus_acc_err              (tcipif_bmu_ibus_acc_err             ),
  .tcipif_bmu_ibus_data                 (tcipif_bmu_ibus_data                ),
  .tcipif_bmu_ibus_data_vld             (tcipif_bmu_ibus_data_vld            ),
  .tcipif_bmu_ibus_grnt                 (tcipif_bmu_ibus_grnt                ),
  .tcipif_bmu_ibus_trans_cmplt          (tcipif_bmu_ibus_trans_cmplt         )
);







nm_had_top  x_nm_had_top (
  .cp0_had_cpuid_idx0                   (cp0_had_cpuid_idx0                  ),
  .cp0_had_lpmd_b                       (cp0_had_lpmd_b                      ),
  .cp0_had_psr_data                     (cp0_had_psr_data                    ),
  .cp0_had_spsr_data                    (cp0_had_spsr_data                   ),
  .forever_cpuclk_nogated               (forever_cpuclk_nogated              ),
  .had_core_dbg_mode_req                (had_core_dbg_mode_req               ),
  .had_cp0_psr_data                     (had_cp0_psr_data                    ),
  .had_idu_wbbr_data                    (had_idu_wbbr_data                   ),
  .had_idu_wbbr_vld                     (had_idu_wbbr_vld                    ),
  .had_ifu_inst_bkpt_dbq_req            (had_ifu_inst_bkpt_dbq_req           ),
  .had_ifu_inst_bkpt_dbqexp_req         (had_ifu_inst_bkpt_dbqexp_req        ),
  .had_ifu_ir                           (had_ifu_ir                          ),
  .had_ifu_ir_vld                       (had_ifu_ir_vld                      ),
  .had_iu_bkpt_trace_en                 (had_iu_bkpt_trace_en                ),
  .had_iu_dr_set_req                    (had_iu_dr_set_req                   ),
  .had_iu_flush_mbee                    (had_iu_flush_mbee                   ),
  .had_iu_force_dbg_en                  (had_iu_force_dbg_en                 ),
  .had_iu_int_vld                       (had_iu_int_vld                      ),
  .had_iu_mbkpt_fsm_index_mbee          (had_iu_mbkpt_fsm_index_mbee         ),
  .had_iu_mem_bkpt_exp_req              (had_iu_mem_bkpt_exp_req             ),
  .had_iu_mem_bkpt_mask                 (had_iu_mem_bkpt_mask                ),
  .had_iu_mem_bkpt_req                  (had_iu_mem_bkpt_req                 ),
  .had_iu_pc                            (had_iu_pc                           ),
  .had_iu_rte_pc_sel                    (had_iu_rte_pc_sel                   ),
  .had_iu_trace_req                     (had_iu_trace_req                    ),
  .had_iu_trace_req_for_dbg_disable     (had_iu_trace_req_for_dbg_disable    ),
  .had_iu_xx_fdb                        (had_iu_xx_fdb                       ),
  .had_iu_xx_jdbreq                     (had_iu_xx_jdbreq                    ),
  .had_pad_jdb_pm                       (had_pad_jdb_pm                      ),
  .had_pad_jtg_tms_o                    (had_pad_jtg_tms_o                   ),
  .had_pad_jtg_tms_oe                   (had_pad_jtg_tms_oe                  ),
  .had_tcipif_cmplt                     (had_tcipif_cmplt                    ),
  .had_tcipif_rdata                     (had_tcipif_rdata                    ),
  .had_yy_xx_dbg                        (had_yy_xx_dbg                       ),
  .had_yy_xx_dp_index_mbee              (had_yy_xx_dp_index_mbee             ),
  .had_yy_xx_exit_dbg                   (had_core_exit_dbg                   ),
  .hadrst_b                             (hadrst_b                            ),
  .ifu_had_chg_flw_inst                 (ifu_had_chg_flw_inst                ),
  .ifu_had_fetch_expt_vld               (ifu_had_fetch_expt_vld              ),
  .ifu_had_inst_dbg_disable             (ifu_had_inst_dbg_disable            ),
  .ifu_had_match_pc                     (ifu_had_match_pc                    ),
  .ifu_had_split_first                  (ifu_had_split_first                 ),
  .iu_had_adr_dbg_ack                   (iu_had_adr_dbg_ack                  ),
  .iu_had_data_bkpt_occur_vld           (iu_had_data_bkpt_occur_vld          ),
  .iu_had_dbg_disable_for_tee           (iu_had_dbg_disable_for_tee          ),
  .iu_had_dr_dbg_ack                    (iu_had_dr_dbg_ack                   ),
  .iu_had_expt_vld                      (iu_had_expt_vld                     ),
  .iu_had_fast_retire_acc_err_pc_update (iu_had_fast_retire_acc_err_pc_update),
  .iu_had_fast_retire_acc_err_pc_val    (iu_had_fast_retire_acc_err_pc_val   ),
  .iu_had_flush                         (iu_had_flush                        ),
  .iu_had_inst_bkpt_occur_vld           (iu_had_inst_bkpt_occur_vld          ),
  .iu_had_int_ack                       (iu_had_int_ack                      ),
  .iu_had_retire_with_had_int           (iu_had_retire_with_had_int          ),
  .iu_had_trace_occur_vld               (iu_had_trace_occur_vld              ),
  .iu_had_xx_bkpt_inst                  (iu_had_xx_bkpt_inst                 ),
  .iu_had_xx_data                       (iu_had_xx_data                      ),
  .iu_had_xx_data_vld                   (iu_had_xx_data_vld                  ),
  .iu_had_xx_dbg_ack                    (iu_had_xx_dbg_ack                   ),
  .iu_had_xx_mldst                      (iu_had_xx_mldst                     ),
  .iu_had_xx_retire                     (iu_had_xx_retire                    ),
  .iu_had_xx_retire_normal              (iu_had_xx_retire_normal             ),
  .iu_had_xx_retire_pc                  (iu_had_xx_retire_pc                 ),
  .iu_yy_xx_dbgon                       (iu_yy_xx_dbgon                      ),
  .lsu_had_addr                         (lsu_had_addr                        ),
  .lsu_had_addr_vld                     (lsu_had_addr_vld                    ),
  .lsu_had_ex_cmplt                     (lsu_had_ex_cmplt                    ),
  .lsu_had_st                           (lsu_had_st                          ),
  .pad_had_jtg_tms_i                    (pad_had_jtg_tms_i                   ),
  .pad_yy_gate_clk_en_b                 (pad_yy_gate_clk_en_b                ),
  .sysio_had_sdb_req_b                  (sysio_had_sdb_req_b                 ),
  .tcipif_had_addr                      (tcipif_had_addr                     ),
  .tcipif_had_sel                       (tcipif_had_sel                      ),
  .tcipif_had_wdata                     (tcipif_had_wdata                    ),
  .tcipif_had_write                     (tcipif_had_write                    ),
  .tclk                                 (forever_jtgclk                      ),
  .trst_b                               (trst_b                              )
);












nm_clkrst_top  x_nm_clkrst_top (
  .cpurst_b               (cpurst_b              ),
  .forever_cpuclk         (forever_cpuclk        ),
  .forever_cpuclk_nogated (forever_cpuclk_nogated),
  .forever_jtgclk         (forever_jtgclk        ),
  .hadrst_b               (hadrst_b              ),
  .pad_cpu_rst_b          (pad_cpu_rst_b         ),
  .pad_had_jtg_tclk       (pad_had_jtg_tclk      ),
  .pad_had_jtg_trst_b     (pad_had_jtg_trst_b    ),
  .pad_had_rst_b          (pad_had_rst_b         ),
  .pad_yy_test_mode       (pad_yy_test_mode      ),
  .pll_core_cpuclk        (pll_core_cpuclk       ),
  .trst_b                 (trst_b                )
);






nm_tcipif_top  x_nm_tcipif_top (
  .bmu_tcipif_dbus_acc_deny          (bmu_tcipif_dbus_acc_deny         ),
  .bmu_tcipif_dbus_addr              (bmu_tcipif_dbus_addr             ),
  .bmu_tcipif_dbus_chk_fail          (bmu_tcipif_dbus_chk_fail         ),
  .bmu_tcipif_dbus_req               (bmu_tcipif_dbus_req              ),
  .bmu_tcipif_dbus_supv_mode         (bmu_tcipif_dbus_supv_mode        ),
  .bmu_tcipif_dbus_wdata             (bmu_tcipif_dbus_wdata            ),
  .bmu_tcipif_dbus_write             (bmu_tcipif_dbus_write            ),
  .bmu_tcipif_ibus_acc_deny          (bmu_tcipif_ibus_acc_deny         ),
  .bmu_tcipif_ibus_addr              (bmu_tcipif_ibus_addr             ),
  .bmu_tcipif_ibus_req               (bmu_tcipif_ibus_req              ),
  .bmu_tcipif_ibus_write             (bmu_tcipif_ibus_write            ),
  .cp0_yy_be_v2                      (cp0_yy_be_v2                     ),
  .cpu_intc_ack_vec                  (cpu_intc_ack_vec                 ),
  .cpu_intc_int_ack                  (cpu_intc_int_ack                 ),
  .cpu_intc_int_exit                 (cpu_intc_int_exit                ),
  .cpu_intc_int_vec                  (cpu_intc_int_vec                 ),
  .cpurst_b                          (cpurst_b                         ),
  .ctim_pad_int_vld                  (ctim_pad_int_vld                 ),
  .forever_cpuclk                    (forever_cpuclk                   ),
  .forever_cpuclk_nogated            (forever_cpuclk_nogated           ),
  .had_tcipif_cmplt                  (had_tcipif_cmplt                 ),
  .had_tcipif_rdata                  (had_tcipif_rdata                 ),
  .intc_cpu_int_b                    (intc_cpu_int_b                   ),
  .intc_cpu_intraw_b                 (intc_cpu_intraw_b                ),
  .intc_cpu_vec_b                    (intc_cpu_vec_b                   ),
  .iu_yy_xx_dbgon                    (iu_yy_xx_dbgon                   ),
  .pad_ctim_calib                    (pad_ctim_calib                   ),
  .pad_ctim_refclk                   (pad_ctim_refclk                  ),
  .pad_vic_int_cfg                   (pad_vic_int_cfg                  ),
  .pad_vic_int_vld                   (pad_vic_int_vld                  ),
  .pad_yy_gate_clk_en_b              (pad_yy_gate_clk_en_b             ),
  .pwrm_cpu_avrg_power_inst_issue    (pwrm_cpu_avrg_power_inst_issue   ),
  .pwrm_cpu_bus_peak_power_limit_en  (pwrm_cpu_bus_peak_power_limit_en ),
  .pwrm_cpu_inst_peak_power_limit_en (pwrm_cpu_inst_peak_power_limit_en),
  .pwrm_cpu_peak_power_limit_en      (pwrm_cpu_peak_power_limit_en     ),
  .tcipif_bmu_dbus_acc_err           (tcipif_bmu_dbus_acc_err          ),
  .tcipif_bmu_dbus_data              (tcipif_bmu_dbus_data             ),
  .tcipif_bmu_dbus_data_vld          (tcipif_bmu_dbus_data_vld         ),
  .tcipif_bmu_dbus_grnt              (tcipif_bmu_dbus_grnt             ),
  .tcipif_bmu_dbus_trans_cmplt       (tcipif_bmu_dbus_trans_cmplt      ),
  .tcipif_bmu_ibus_acc_err           (tcipif_bmu_ibus_acc_err          ),
  .tcipif_bmu_ibus_data              (tcipif_bmu_ibus_data             ),
  .tcipif_bmu_ibus_data_vld          (tcipif_bmu_ibus_data_vld         ),
  .tcipif_bmu_ibus_grnt              (tcipif_bmu_ibus_grnt             ),
  .tcipif_bmu_ibus_trans_cmplt       (tcipif_bmu_ibus_trans_cmplt      ),
  .tcipif_had_addr                   (tcipif_had_addr                  ),
  .tcipif_had_sel                    (tcipif_had_sel                   ),
  .tcipif_had_wdata                  (tcipif_had_wdata                 ),
  .tcipif_had_write                  (tcipif_had_write                 )
);











endmodule

























module nm_had_bkpt(
  bkpt_ctrl_inst_fetch_dbq_req,
  bkpt_ctrl_req,
  cpuclk,
  had_core_dbg_mode_req,
  hadrst_b,
  ifu_had_chg_flw_inst,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  iu_had_expt_vld,
  iu_had_flush,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_yy_xx_dbgon,
  lsu_had_addr,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  lsu_had_st,
  regs_bkpt_base,
  regs_bkpt_ctrl,
  regs_bkpt_mask
);


input           cpuclk;                      
input           had_core_dbg_mode_req;       
input           hadrst_b;                    
input           ifu_had_chg_flw_inst;        
input           ifu_had_fetch_expt_vld;      
input           ifu_had_inst_dbg_disable;    
input   [31:0]  ifu_had_match_pc;            
input           ifu_had_split_first;         
input           iu_had_expt_vld;             
input           iu_had_flush;                
input           iu_had_xx_mldst;             
input           iu_had_xx_retire;            
input           iu_had_xx_retire_normal;     
input           iu_yy_xx_dbgon;              
input   [31:0]  lsu_had_addr;                
input           lsu_had_addr_vld;            
input           lsu_had_ex_cmplt;            
input           lsu_had_st;                  
input   [31:0]  regs_bkpt_base;              
input   [2 :0]  regs_bkpt_ctrl;              
input   [7 :0]  regs_bkpt_mask;              
output          bkpt_ctrl_inst_fetch_dbq_req; 
output          bkpt_ctrl_req;               


reg             bkpt_counter;                
reg             data_bkpt_vld_pre;           
reg             inst_fetch_bkpt_vld;         
reg             lsu_had_addr_vld_latch;      


wire            bkpt_ctrl_inst_fetch_dbq_req; 
wire            bkpt_ctrl_req;               
wire            bkpt_en;                     
wire            bkpt_expt_reset;             
wire            counter_neg_dbg_req;         
wire            cpuclk;                      
wire            data_addr_match;             
wire            data_bkpt_dbg_req;           
wire            data_bkpt_match;             
wire            data_bkpt_match_vld;         
wire            data_bkpt_occur;             
wire            data_bkpt_vld;               
wire            had_core_dbg_mode_req;       
wire            hadrst_b;                    
wire            ifu_had_chg_flw_inst;        
wire            ifu_had_fetch_expt_vld;      
wire            ifu_had_inst_dbg_disable;    
wire    [31:0]  ifu_had_match_pc;            
wire            ifu_had_split_first;         
wire            inst_fetch_addr_match;       
wire            inst_fetch_bkpt_hit;         
wire            iu_had_expt_vld;             
wire            iu_had_flush;                
wire            iu_had_xx_mldst;             
wire            iu_had_xx_retire;            
wire            iu_had_xx_retire_normal;     
wire            iu_yy_xx_dbgon;              
wire    [31:0]  lsu_had_addr;                
wire            lsu_had_addr_vld;            
wire            lsu_had_ex_cmplt;            
wire            lsu_had_st;                  
wire    [31:0]  regs_bkpt_base;              
wire    [2 :0]  regs_bkpt_ctrl;              
wire    [7 :0]  regs_bkpt_mask;              








assign bkpt_en = |regs_bkpt_ctrl[2:0];







assign data_addr_match = ((lsu_had_addr[31:0] & {24'hFF_FFFF,regs_bkpt_mask[7:0]})
                           == regs_bkpt_base[31:0]);

assign data_bkpt_match     = data_addr_match;
assign data_bkpt_match_vld = data_bkpt_match && lsu_had_addr_vld;



assign data_bkpt_occur = (data_bkpt_match_vld || lsu_had_addr_vld_latch) &&
                         iu_had_xx_retire;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    lsu_had_addr_vld_latch <= 1'b0;
  else if (lsu_had_ex_cmplt || iu_had_flush)
    lsu_had_addr_vld_latch <= 1'b0;
  else if (data_bkpt_match_vld)
    lsu_had_addr_vld_latch <= 1'b1;
  else
    lsu_had_addr_vld_latch <= lsu_had_addr_vld_latch;
end













assign inst_fetch_addr_match = ((ifu_had_match_pc[31:0]
                                 & {24'hFF_FFFF, regs_bkpt_mask[7:0]}
                                ) == regs_bkpt_base[31:0]
                               ); 

assign inst_fetch_bkpt_hit = inst_fetch_addr_match
                             && bkpt_en
                             && ifu_had_split_first
                             && !had_core_dbg_mode_req;
































always @( regs_bkpt_ctrl[2:0]
       or ifu_had_chg_flw_inst
       or inst_fetch_bkpt_hit
       or data_bkpt_occur
       or lsu_had_st)
begin
  inst_fetch_bkpt_vld = 1'b0;
  data_bkpt_vld_pre = 1'b0;
  case (regs_bkpt_ctrl[2:0])
    3'b001: begin     // any access may cause bkpt
      inst_fetch_bkpt_vld = inst_fetch_bkpt_hit;
      data_bkpt_vld_pre = data_bkpt_occur;
    end
    3'b010:           // any instruction access may cause bkpt
      inst_fetch_bkpt_vld = inst_fetch_bkpt_hit;
    3'b011:           // any data access may cause bkpt
      data_bkpt_vld_pre = data_bkpt_occur;
    3'b100:           // any change flow instruction may casue bkpt 
      inst_fetch_bkpt_vld = inst_fetch_bkpt_hit && ifu_had_chg_flw_inst;
    3'b101:           // any store data access may cause bkpt
      data_bkpt_vld_pre = data_bkpt_occur && lsu_had_st;
    3'b110:           // any load data access may cause bkpt
      data_bkpt_vld_pre = data_bkpt_occur && !lsu_had_st;
    default: begin
      inst_fetch_bkpt_vld = 1'b0;
      data_bkpt_vld_pre = 1'b0;
    end
  endcase

end

assign data_bkpt_vld = bkpt_en && data_bkpt_vld_pre;
assign bkpt_ctrl_inst_fetch_dbq_req = inst_fetch_bkpt_vld
                                  && !ifu_had_fetch_expt_vld
                                  && !ifu_had_inst_dbg_disable
                                  && !iu_yy_xx_dbgon;

assign bkpt_expt_reset = iu_had_expt_vld;
 

always @(posedge cpuclk or negedge hadrst_b)
begin
  if(!hadrst_b)
    bkpt_counter <= 1'b0;
  else if (bkpt_ctrl_req || bkpt_expt_reset)
    bkpt_counter <= 1'b0;
  else if (!bkpt_counter && data_bkpt_vld && iu_had_xx_mldst)
    bkpt_counter <= 1'b1;
  else
    bkpt_counter <= bkpt_counter;
end

assign data_bkpt_dbg_req   = !bkpt_counter && data_bkpt_vld && !iu_had_xx_mldst;

assign counter_neg_dbg_req = bkpt_counter  && !iu_had_xx_mldst
                          && iu_had_xx_retire;


assign bkpt_ctrl_req =   (data_bkpt_dbg_req || counter_neg_dbg_req)
                      && !iu_yy_xx_dbgon
                      && bkpt_en
                      && iu_had_xx_retire_normal;


endmodule

























module nm_had_bkpt_lite(
  bkpt_ctrl_inst_fetch_dbq_req,
  bkpt_ctrl_req,
  cpuclk,
  had_core_dbg_mode_req,
  hadrst_b,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  iu_had_expt_vld,
  iu_had_flush,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_yy_xx_dbgon,
  lsu_had_addr,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  regs_bkpt_base,
  regs_bkpt_en
);


input           cpuclk;                      
input           had_core_dbg_mode_req;       
input           hadrst_b;                    
input           ifu_had_fetch_expt_vld;      
input           ifu_had_inst_dbg_disable;    
input   [31:0]  ifu_had_match_pc;            
input           ifu_had_split_first;         
input           iu_had_expt_vld;             
input           iu_had_flush;                
input           iu_had_xx_mldst;             
input           iu_had_xx_retire;            
input           iu_had_xx_retire_normal;     
input           iu_yy_xx_dbgon;              
input   [31:0]  lsu_had_addr;                
input           lsu_had_addr_vld;            
input           lsu_had_ex_cmplt;            
input   [31:0]  regs_bkpt_base;              
input           regs_bkpt_en;                
output          bkpt_ctrl_inst_fetch_dbq_req; 
output          bkpt_ctrl_req;               


reg             bkpt_counter;                
reg             lsu_had_addr_vld_latch;      


wire            bkpt_ctrl_inst_fetch_dbq_req; 
wire            bkpt_ctrl_req;               
wire            bkpt_en;                     
wire            bkpt_expt_reset;             
wire            counter_neg_dbg_req;         
wire            cpuclk;                      
wire            data_addr_match;             
wire            data_bkpt_dbg_req;           
wire            data_bkpt_match;             
wire            data_bkpt_match_vld;         
wire            data_bkpt_occur;             
wire            data_bkpt_vld;               
wire            had_core_dbg_mode_req;       
wire            hadrst_b;                    
wire            ifu_had_fetch_expt_vld;      
wire            ifu_had_inst_dbg_disable;    
wire    [31:0]  ifu_had_match_pc;            
wire            ifu_had_split_first;         
wire            inst_addr_match;             
wire            inst_bkpt_occur;             
wire            inst_bkpt_vld;               
wire            iu_had_expt_vld;             
wire            iu_had_flush;                
wire            iu_had_xx_mldst;             
wire            iu_had_xx_retire;            
wire            iu_had_xx_retire_normal;     
wire            iu_yy_xx_dbgon;              
wire    [31:0]  lsu_had_addr;                
wire            lsu_had_addr_vld;            
wire            lsu_had_ex_cmplt;            
wire    [31:0]  regs_bkpt_base;              
wire            regs_bkpt_en;                


assign bkpt_en = regs_bkpt_en;









assign data_addr_match = (lsu_had_addr[31:0] == regs_bkpt_base[31:0]);                           

assign data_bkpt_match     = data_addr_match;
assign data_bkpt_match_vld = data_bkpt_match && lsu_had_addr_vld;



assign data_bkpt_occur = (data_bkpt_match_vld || lsu_had_addr_vld_latch) &&
                         iu_had_xx_retire;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    lsu_had_addr_vld_latch <= 1'b0;
  else if (lsu_had_ex_cmplt || iu_had_flush)
    lsu_had_addr_vld_latch <= 1'b0;
  else if (data_bkpt_match_vld)
    lsu_had_addr_vld_latch <= 1'b1;
  else
    lsu_had_addr_vld_latch <= lsu_had_addr_vld_latch;
end











assign inst_addr_match = (ifu_had_match_pc[31:0] == regs_bkpt_base[31:0]);                             

assign inst_bkpt_occur = inst_addr_match
                         && !ifu_had_fetch_expt_vld
                         && !ifu_had_inst_dbg_disable
                         && ifu_had_split_first
                         && !iu_yy_xx_dbgon
                         && !had_core_dbg_mode_req;
                             

assign inst_bkpt_vld = bkpt_en ? inst_bkpt_occur : 1'b0;
assign data_bkpt_vld = bkpt_en ? data_bkpt_occur : 1'b0;






assign bkpt_ctrl_inst_fetch_dbq_req = inst_bkpt_vld;

assign bkpt_expt_reset = iu_had_expt_vld;


always @(posedge cpuclk or negedge hadrst_b)
begin
  if(!hadrst_b)
    bkpt_counter <= 1'b0;
  else if (bkpt_ctrl_req || bkpt_expt_reset)
    bkpt_counter <= 1'b0;
  else if (!bkpt_counter && data_bkpt_vld && iu_had_xx_mldst)
    bkpt_counter <= 1'b1;
  else
    bkpt_counter <= bkpt_counter;
end

assign data_bkpt_dbg_req   = !bkpt_counter && data_bkpt_vld && !iu_had_xx_mldst;

assign counter_neg_dbg_req = bkpt_counter && !iu_had_xx_mldst
                             && iu_had_xx_retire;


assign bkpt_ctrl_req = (data_bkpt_dbg_req || counter_neg_dbg_req)
                       && !iu_yy_xx_dbgon
                       && iu_had_xx_retire_normal
                       && bkpt_en;


endmodule























module nm_had_ctrl(
  bkpta_ctrl_inst_fetch_dbq_req,
  bkpta_ctrl_req,
  bkptb_ctrl_inst_fetch_dbq_req,
  bkptb_ctrl_req,
  bkptc_ctrl_inst_fetch_dbq_req,
  bkptc_ctrl_req,
  bkptd_ctrl_inst_fetch_dbq_req,
  bkptd_ctrl_req,
  bkpte_ctrl_inst_fetch_dbq_req,
  bkpte_ctrl_req,
  cpuclk,
  ctrl_regs_exit_dbg,
  ctrl_regs_update_adro,
  ctrl_regs_update_dro,
  ctrl_regs_update_mbo,
  ctrl_regs_update_swo,
  ctrl_regs_update_to,
  had_ifu_inst_bkpt_dbq_req,
  had_ifu_inst_bkpt_dbqexp_req,
  had_iu_bkpt_trace_en,
  had_iu_dr_set_req,
  had_iu_flush_mbee,
  had_iu_mbkpt_fsm_index_mbee,
  had_iu_mem_bkpt_exp_req,
  had_iu_mem_bkpt_mask,
  had_iu_mem_bkpt_req,
  had_iu_trace_req,
  had_iu_trace_req_for_dbg_disable,
  had_iu_xx_jdbreq,
  had_yy_xx_dbg,
  had_yy_xx_dp_index_mbee,
  had_yy_xx_exit_dbg,
  hadrst_b,
  iu_had_adr_dbg_ack,
  iu_had_data_bkpt_occur_vld,
  iu_had_dbg_disable_for_tee,
  iu_had_dr_dbg_ack,
  iu_had_inst_bkpt_occur_vld,
  iu_had_trace_occur_vld,
  iu_had_xx_bkpt_inst,
  iu_yy_xx_dbgon,
  jtag_xx_update_dr,
  pin_ctrl_jdb_req,
  regs_bkpta_bkpti_en,
  regs_ctrl_adr,
  regs_ctrl_dr,
  regs_ctrl_exit_sel,
  regs_ctrl_hacr_ex,
  regs_ctrl_hacr_go,
  regs_ctrl_had_int_on,
  regs_ctrl_mbee,
  regs_trace_en,
  sysio_had_sdb_req_b,
  trace_ctrl_req,
  trace_ctrl_req_for_dbg_disable
);


input          bkpta_ctrl_inst_fetch_dbq_req;   
input          bkpta_ctrl_req;                  
input          bkptb_ctrl_inst_fetch_dbq_req;   
input          bkptb_ctrl_req;                  
input          bkptc_ctrl_inst_fetch_dbq_req;   
input          bkptc_ctrl_req;                  
input          bkptd_ctrl_inst_fetch_dbq_req;   
input          bkptd_ctrl_req;                  
input          bkpte_ctrl_inst_fetch_dbq_req;   
input          bkpte_ctrl_req;                  
input          cpuclk;                          
input          hadrst_b;                        
input          iu_had_adr_dbg_ack;              
input          iu_had_data_bkpt_occur_vld;      
input          iu_had_dbg_disable_for_tee;      
input          iu_had_dr_dbg_ack;               
input          iu_had_inst_bkpt_occur_vld;      
input          iu_had_trace_occur_vld;          
input          iu_had_xx_bkpt_inst;             
input          iu_yy_xx_dbgon;                  
input          jtag_xx_update_dr;               
input          pin_ctrl_jdb_req;                
input          regs_bkpta_bkpti_en;             
input          regs_ctrl_adr;                   
input          regs_ctrl_dr;                    
input          regs_ctrl_exit_sel;              
input          regs_ctrl_hacr_ex;               
input          regs_ctrl_hacr_go;               
input          regs_ctrl_had_int_on;            
input   [8:0]  regs_ctrl_mbee;                  
input          regs_trace_en;                   
input          sysio_had_sdb_req_b;             
input          trace_ctrl_req;                  
input          trace_ctrl_req_for_dbg_disable;  
output         ctrl_regs_exit_dbg;              
output         ctrl_regs_update_adro;           
output         ctrl_regs_update_dro;            
output         ctrl_regs_update_mbo;            
output         ctrl_regs_update_swo;            
output         ctrl_regs_update_to;             
output         had_ifu_inst_bkpt_dbq_req;       
output         had_ifu_inst_bkpt_dbqexp_req;    
output         had_iu_bkpt_trace_en;            
output         had_iu_dr_set_req;               
output         had_iu_flush_mbee;               
output         had_iu_mbkpt_fsm_index_mbee;     
output         had_iu_mem_bkpt_exp_req;         
output         had_iu_mem_bkpt_mask;            
output         had_iu_mem_bkpt_req;             
output         had_iu_trace_req;                
output         had_iu_trace_req_for_dbg_disable; 
output         had_iu_xx_jdbreq;                
output         had_yy_xx_dbg;                   
output         had_yy_xx_dp_index_mbee;         
output         had_yy_xx_exit_dbg;              


reg            ctrl_exit_dbg;                   


wire           adr_set_req;                     
wire           bkpta_ctrl_inst_fetch_dbq_req;   
wire           bkpta_ctrl_req;                  
wire           bkptb_ctrl_inst_fetch_dbq_req;   
wire           bkptb_ctrl_req;                  
wire           bkptc_ctrl_inst_fetch_dbq_req;   
wire           bkptc_ctrl_req;                  
wire           bkptd_ctrl_inst_fetch_dbq_req;   
wire           bkptd_ctrl_req;                  
wire           bkpte_ctrl_inst_fetch_dbq_req;   
wire           bkpte_ctrl_req;                  
wire           cpuclk;                          
wire           ctrl_regs_exit_dbg;              
wire           ctrl_regs_update_adro;           
wire           ctrl_regs_update_dro;            
wire           ctrl_regs_update_mbo;            
wire           ctrl_regs_update_swo;            
wire           ctrl_regs_update_to;             
wire           dr_set_req;                      
wire           exit_dbg;                        
wire           had_ifu_inst_bkpt_dbq_req;       
wire           had_ifu_inst_bkpt_dbqexp_req;    
wire           had_iu_bkpt_trace_en;            
wire           had_iu_dr_set_req;               
wire           had_iu_flush_mbee;               
wire           had_iu_mbkpt_fsm_index_mbee;     
wire           had_iu_mem_bkpt_exp_req;         
wire           had_iu_mem_bkpt_mask;            
wire           had_iu_mem_bkpt_req;             
wire           had_iu_trace_req;                
wire           had_iu_trace_req_for_dbg_disable; 
wire           had_iu_xx_jdbreq;                
wire           had_yy_xx_dbg;                   
wire           had_yy_xx_dp_index_mbee;         
wire           had_yy_xx_exit_dbg;              
wire           hadrst_b;                        
wire           iu_had_adr_dbg_ack;              
wire           iu_had_data_bkpt_occur_vld;      
wire           iu_had_dbg_disable_for_tee;      
wire           iu_had_dr_dbg_ack;               
wire           iu_had_inst_bkpt_occur_vld;      
wire           iu_had_trace_occur_vld;          
wire           iu_had_xx_bkpt_inst;             
wire           iu_yy_xx_dbgon;                  
wire           jtag_xx_update_dr;               
wire           mem_bkpt_dbg_req;                
wire           mem_bkpt_dbgexp_req;             
wire           pin_ctrl_jdb_req;                
wire           regs_bkpta_bkpti_en;             
wire           regs_ctrl_adr;                   
wire           regs_ctrl_dr;                    
wire           regs_ctrl_exit_sel;              
wire           regs_ctrl_hacr_ex;               
wire           regs_ctrl_hacr_go;               
wire           regs_ctrl_had_int_on;            
wire    [8:0]  regs_ctrl_mbee;                  
wire           regs_trace_en;                   
wire           sync_dbg_req;                    
wire           sysio_had_sdb_req_b;             
wire           trace_ctrl_req;                  
wire           trace_ctrl_req_for_dbg_disable;  
wire           trace_req;                       















assign trace_req = trace_ctrl_req;







assign mem_bkpt_dbg_req    = (bkpta_ctrl_req && !regs_ctrl_mbee[0])
                          || (bkptb_ctrl_req && !regs_ctrl_mbee[1])
                          || (bkptc_ctrl_req && !regs_ctrl_mbee[2])
                          || (bkptd_ctrl_req && !regs_ctrl_mbee[3])
                          || (bkpte_ctrl_req && !regs_ctrl_mbee[4]);
assign mem_bkpt_dbgexp_req = (bkpta_ctrl_req &&  regs_ctrl_mbee[0])
                          || (bkptb_ctrl_req &&  regs_ctrl_mbee[1])
                          || (bkptc_ctrl_req &&  regs_ctrl_mbee[2])
                          || (bkptd_ctrl_req &&  regs_ctrl_mbee[3])
                          || (bkpte_ctrl_req &&  regs_ctrl_mbee[4]);










assign had_ifu_inst_bkpt_dbq_req = ((bkpta_ctrl_inst_fetch_dbq_req
                                 && !regs_ctrl_mbee[0])
                                 || (bkptb_ctrl_inst_fetch_dbq_req
                                 && !regs_ctrl_mbee[1])
                                 || (bkptc_ctrl_inst_fetch_dbq_req
                                 && !regs_ctrl_mbee[2])
                                 || (bkptd_ctrl_inst_fetch_dbq_req
                                 && !regs_ctrl_mbee[3])
                                 || (bkpte_ctrl_inst_fetch_dbq_req
                                 && !regs_ctrl_mbee[4])
                                   ) && !regs_ctrl_had_int_on
                                     && !iu_had_dbg_disable_for_tee;

assign had_ifu_inst_bkpt_dbqexp_req = ((bkpta_ctrl_inst_fetch_dbq_req
                                    &&  regs_ctrl_mbee[0])
                                    || (bkptb_ctrl_inst_fetch_dbq_req
                                    &&  regs_ctrl_mbee[1])
                                    || (bkptc_ctrl_inst_fetch_dbq_req
                                    &&  regs_ctrl_mbee[2])
                                    || (bkptd_ctrl_inst_fetch_dbq_req
                                    &&  regs_ctrl_mbee[3])
                                    || (bkpte_ctrl_inst_fetch_dbq_req
                                    &&  regs_ctrl_mbee[4])
                                      ) && !regs_ctrl_had_int_on
                                        && !iu_had_dbg_disable_for_tee;


assign dr_set_req  = regs_ctrl_dr;

assign adr_set_req = regs_ctrl_adr;

assign sync_dbg_req = dr_set_req || !sysio_had_sdb_req_b;

assign had_iu_dr_set_req = sync_dbg_req && !iu_yy_xx_dbgon;

assign had_iu_trace_req = trace_req && !iu_yy_xx_dbgon;

assign had_iu_mem_bkpt_req = mem_bkpt_dbg_req && !iu_yy_xx_dbgon;

assign had_iu_mem_bkpt_mask = (mem_bkpt_dbg_req || mem_bkpt_dbgexp_req) && !iu_yy_xx_dbgon;

assign had_iu_mem_bkpt_exp_req = 1'b0;

assign had_iu_xx_jdbreq =  (pin_ctrl_jdb_req || adr_set_req) 
                        && !iu_yy_xx_dbgon;


assign had_iu_trace_req_for_dbg_disable = trace_ctrl_req_for_dbg_disable
                                       && !iu_yy_xx_dbgon;


assign had_iu_bkpt_trace_en = regs_bkpta_bkpti_en || regs_trace_en;







assign had_yy_xx_dbg = sync_dbg_req
                    || pin_ctrl_jdb_req
                    || adr_set_req;













assign ctrl_regs_update_adro = iu_had_adr_dbg_ack;





assign ctrl_regs_update_dro = iu_had_dr_dbg_ack;





assign ctrl_regs_update_mbo = iu_had_data_bkpt_occur_vld 
                           || iu_had_inst_bkpt_occur_vld;





assign ctrl_regs_update_swo = iu_had_xx_bkpt_inst;





assign ctrl_regs_update_to = iu_had_trace_occur_vld;







assign exit_dbg = (regs_ctrl_hacr_ex && regs_ctrl_hacr_go) &&
                  jtag_xx_update_dr && regs_ctrl_exit_sel  &&
                  iu_yy_xx_dbgon;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    ctrl_exit_dbg <= 1'b0;
  else 
    ctrl_exit_dbg <= exit_dbg;
end

assign ctrl_regs_exit_dbg = ctrl_exit_dbg;

assign had_yy_xx_exit_dbg = ctrl_exit_dbg;








  assign had_iu_mbkpt_fsm_index_mbee = 1'b0;



assign had_yy_xx_dp_index_mbee = 1'b0;

assign had_iu_flush_mbee        = 1'b0;


endmodule























module nm_had_ddc(
  cpuclk,
  ddc_regs_ffy,
  ddc_regs_ir,
  ddc_regs_update_csr,
  ddc_regs_update_ir,
  hadrst_b,
  iu_had_xx_retire,
  jtag_xx_update_dr,
  regs_ddc_daddr_sel,
  regs_ddc_ddata_sel,
  regs_xx_ddc_en
);


input           cpuclk;             
input           hadrst_b;           
input           iu_had_xx_retire;   
input           jtag_xx_update_dr;  
input           regs_ddc_daddr_sel; 
input           regs_ddc_ddata_sel; 
input           regs_xx_ddc_en;     
output          ddc_regs_ffy;       
output  [31:0]  ddc_regs_ir;        
output          ddc_regs_update_csr; 
output          ddc_regs_update_ir; 


reg     [3 :0]  cur_st;             
reg     [3 :0]  nxt_st;             


wire            addr_gen;           
wire            addr_ready;         
wire            addr_sel;           
wire            cpuclk;             
wire            data_ld_finish;     
wire            data_ready;         
wire            data_sel;           
wire            ddc_regs_ffy;       
wire    [31:0]  ddc_regs_ir;        
wire            ddc_regs_update_csr; 
wire            ddc_regs_update_ir; 
wire            hadrst_b;           
wire            iu_had_xx_retire;   
wire            jtag_xx_update_dr;  
wire            regs_ddc_daddr_sel; 
wire            regs_ddc_ddata_sel; 
wire            regs_xx_ddc_en;     
wire            stw_inst_retire;    
wire            stw_sel;            






parameter DDC_IDLE        = 4'h0;
parameter DDC_ADDR_WAIT   = 4'h1;
parameter DDC_ADDR_LD     = 4'h2;
parameter DDC_DATA_WAIT   = 4'h3;
parameter DDC_DATA_LD     = 4'h4;
parameter DDC_STW_WAIT    = 4'h5;
parameter DDC_STW_LD      = 4'h6;
parameter DDC_STW_FINISH  = 4'h7;
parameter DDC_ADDR_GEN    = 4'h8;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    cur_st[3:0] <= DDC_IDLE;
  else
    cur_st[3:0] <= nxt_st[3:0];
end

always @( * )
begin
  case(cur_st[3:0])
    DDC_IDLE : begin
      if (regs_xx_ddc_en)
        nxt_st[3:0] = DDC_ADDR_WAIT;
      else
        nxt_st[3:0] = DDC_IDLE;
    end
    DDC_ADDR_WAIT : begin // wait addr be loaded into daddr
      if (addr_ready)
        nxt_st[3:0] = DDC_ADDR_LD;
      else
        nxt_st[3:0] = DDC_ADDR_WAIT;
    end
    DDC_ADDR_LD : begin  // load "mov r0, r0" to ir, ffy and wbbr
      nxt_st[3:0] = DDC_DATA_WAIT;
    end
    DDC_DATA_WAIT : begin
      // if (addr_ld_finish && data_ready) // wait base prepare finish and data ready.
      if (data_ready) // wait base prepare finish and data ready.
        nxt_st[3:0] = DDC_DATA_LD;
      else if (addr_ready) // re-prepare base
        nxt_st[3:0] = DDC_ADDR_LD;
      else if (!regs_xx_ddc_en)
        nxt_st[3:0] = DDC_IDLE;
      else
        nxt_st[3:0] = DDC_DATA_WAIT;
    end
    DDC_DATA_LD : begin
      nxt_st[3:0] = DDC_STW_WAIT; // load "mov r1, r1" to ir, ffy and wbbr
    end
    DDC_STW_WAIT : begin
      if (data_ld_finish)  // wait for "mov r1, r1" retire: data prepare finish
        nxt_st[3:0] = DDC_STW_LD;
      else
        nxt_st[3:0] = DDC_STW_WAIT;
    end
    DDC_STW_LD : begin      // load "stw r1, r0" to ir
      nxt_st[3:0] = DDC_STW_FINISH;
    end
    DDC_STW_FINISH : begin // wait for stw finish
      if (stw_inst_retire)
        nxt_st[3:0] = DDC_ADDR_GEN;
      else
        nxt_st[3:0] = DDC_STW_FINISH;
    end
    DDC_ADDR_GEN : begin   // increase addr and recycle
      nxt_st[3:0] = DDC_DATA_WAIT;
    end
    default : begin
      nxt_st[3:0] = DDC_IDLE;
    end
  endcase
end


















assign data_ld_finish = iu_had_xx_retire;
assign stw_inst_retire = iu_had_xx_retire;



assign addr_ready = jtag_xx_update_dr && regs_ddc_daddr_sel;
assign data_ready = jtag_xx_update_dr && regs_ddc_ddata_sel;



assign addr_sel   = cur_st[3:0] == DDC_ADDR_LD;
assign data_sel   = cur_st[3:0] == DDC_DATA_LD;
assign stw_sel    = cur_st[3:0] == DDC_STW_LD;
assign addr_gen   = cur_st[3:0] == DDC_ADDR_GEN;

































assign ddc_regs_update_ir   = addr_sel || data_sel || stw_sel || addr_gen;
assign ddc_regs_ir[31:0] = addr_sel ? 32'hc4004820  // mov32 r0, r0
                         : data_sel ? 32'hc4014821  // mov32 r1, r1
                         : stw_sel  ? 32'hdc202000  // st32.w r1, r0, #0
                         : 32'he4000003;  // addi32 r0, r0, 0x4

assign ddc_regs_update_csr  = addr_sel || data_sel || stw_sel || addr_gen;
assign ddc_regs_ffy = (addr_sel || data_sel) ? 1'b1 : 1'b0;






endmodule
























module nm_had_jtag2(
  cpuclk,
  forever_cpuclk_nogated,
  hadrst_b,
  jtag2_pin_tms_o,
  jtag2_pin_tms_oe,
  jtag_regs_srst,
  jtag_regs_update_hacr,
  jtag_xx_data,
  jtag_xx_update_dr,
  pin_sm_tap_en,
  pin_xx_tms_i,
  regs_jtag_data,
  regs_jtag_hacr_rw,
  regs_jtag_reg16_sel,
  regs_jtag_reg8_sel,
  sm_xx_tap_on,
  tclk,
  trst_b
);


input           cpuclk;                
input           forever_cpuclk_nogated; 
input           hadrst_b;              
input           pin_sm_tap_en;         
input           pin_xx_tms_i;          
input   [31:0]  regs_jtag_data;        
input           regs_jtag_hacr_rw;     
input           regs_jtag_reg16_sel;   
input           regs_jtag_reg8_sel;    
input           tclk;                  
input           trst_b;                
output          jtag2_pin_tms_o;       
output          jtag2_pin_tms_oe;      
output          jtag_regs_srst;        
output          jtag_regs_update_hacr; 
output  [31:0]  jtag_xx_data;          
output          jtag_xx_update_dr;     
output          sm_xx_tap_on;          


reg             parity;                
reg     [31:0]  shifter;               
reg     [31:0]  shifter_pre;           
reg     [3 :0]  sm2_cur_st;            
reg     [4 :0]  sm2_data_counter;      
reg     [3 :0]  sm2_nxt_st;            
reg             sm2_parity;            
reg             sm2_read_vld;          
reg     [1 :0]  sm2_rs;                
reg             sm2_rs_counter;        
reg     [6 :0]  sm2_rst_cnt;           
reg             sm_xx_tap_on;          
reg             tdo;                   
reg             tms_oe;                


wire            cpuclk;                
wire            forever_cpuclk_nogated; 
wire            had_pad_wakeup_req_b;  
wire            hadrst_b;              
wire            jtag2_pin_tms_o;       
wire            jtag2_pin_tms_oe;      
wire            jtag_regs_srst;        
wire            jtag_regs_update_hacr; 
wire    [31:0]  jtag_xx_data;          
wire            jtag_xx_update_dr;     
wire            pin_sm_tap_en;         
wire            pin_xx_tms_i;          
wire    [31:0]  regs_jtag_data;        
wire            sm2_capture_dr;        
wire            sm2_load_rw;           
wire            sm2_parity_vld;        
wire            sm2_rs_cdic_dr_sel;    
wire            sm2_rs_had_dr_sel;     
wire            sm2_rs_had_ir_sel;     
wire            sm2_rst_vld;           
wire            sm2_rst_vld_cpu;       
wire            sm2_shift_dr;          
wire            sm2_shift_ir;          
wire            sm2_shift_par;         
wire            sm2_shift_sync;        
wire            sm2_shift_vld;         
wire            sm2_start_vld;         
wire            sm2_sync_vld;          
wire            sm2_trn1;              
wire            sm2_trn2;              
wire            sm2_update_dr;         
wire            sm2_update_dr_cpu;     
wire            sm2_update_ir;         
wire            sm2_update_ir_cpu;     
wire            tap_on;                
wire            tclk;                  
wire            tdi;                   
wire            tms_i;                 
wire            trst_b;                







parameter TAP2_IDLE   = 4'b0000;
parameter TAP2_START  = 4'b0001;
parameter TAP2_RW     = 4'b0011;
parameter TAP2_RS     = 4'b0010;
parameter TAP2_TRN1   = 4'b0110;
parameter TAP2_DATA   = 4'b0111;
parameter TAP2_SYNC   = 4'b0101;
parameter TAP2_PARITY = 4'b0100;
parameter TAP2_TRN2   = 4'b1100;



always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    sm2_cur_st[3:0] <= TAP2_IDLE;
  else if (sm2_rst_vld && tms_i)
    sm2_cur_st[3:0] <= TAP2_IDLE;
  else
    sm2_cur_st[3:0] <= sm2_nxt_st[3:0];
end


always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    sm2_rst_cnt[6:0] <= 7'd80;
  else begin
    if (!tms_i)
      sm2_rst_cnt[6:0] <= 7'd80;
    else if (sm2_rst_cnt[6:0] != 7'd0)
      sm2_rst_cnt[6:0] <= sm2_rst_cnt[6:0] - 7'd1;
    else
      sm2_rst_cnt[6:0] <= 7'd80;
  end
end

assign sm2_rst_vld = (sm2_rst_cnt[6:0] == 7'd00);






nm_had_sync  x_nm_had_sync_sm2_rst (
  .clk1            (cpuclk         ),
  .clk2            (tclk           ),
  .rst1_b          (hadrst_b       ),
  .rst2_b          (trst_b         ),
  .sync_in         (sm2_rst_vld    ),
  .sync_out        (sm2_rst_vld_cpu)
);








assign jtag_regs_srst = sm2_rst_vld_cpu;


always @( * )
begin
  case (sm2_cur_st[3:0])
    TAP2_IDLE : begin
      if (pin_sm_tap_en) begin
        if (!tms_i)
          sm2_nxt_st[3:0] = TAP2_RW;
        else
          sm2_nxt_st[3:0] = TAP2_START;
      end
      else
        sm2_nxt_st[3:0] = TAP2_IDLE;
    end
    TAP2_START : begin
      if (!tms_i) // sample START bit, logic 0
        sm2_nxt_st[3:0] = TAP2_RW;
      else
        sm2_nxt_st[3:0] = TAP2_START;
    end
    TAP2_RW : begin  // RnW bit, 1=Read Op, 0=Write Op
      sm2_nxt_st[3:0] = TAP2_RS;
    end
    TAP2_RS : begin // RS[1:0] - Register Group Select
      if (sm2_rs_counter == 1'b0)
        sm2_nxt_st[3:0] = TAP2_TRN1;
      else
        sm2_nxt_st[3:0] = TAP2_RS;
    end
    TAP2_TRN1 : begin // Turn Around 1
      if (sm2_read_vld)  // Read operation need a sync cycle
        sm2_nxt_st[3:0] = TAP2_SYNC;
      else               // write operation
        sm2_nxt_st[3:0] = TAP2_DATA;
    end
    TAP2_SYNC : begin
      sm2_nxt_st[3:0] = TAP2_DATA;
    end
    TAP2_DATA : begin // IR or DR, Sample or Set
      if (sm2_data_counter[4:0] == 5'b0)
        sm2_nxt_st[3:0] = TAP2_PARITY;
      else
        sm2_nxt_st[3:0] = TAP2_DATA;
    end
    TAP2_PARITY : begin
      sm2_nxt_st[3:0] = TAP2_TRN2;
    end
    TAP2_TRN2 : begin
      sm2_nxt_st[3:0] = TAP2_START;
    end
    default : begin
      sm2_nxt_st[3:0] = TAP2_IDLE;
    end
  endcase
end




assign sm2_load_rw    = sm2_cur_st[3:0] == TAP2_RW;
assign sm2_trn1       = sm2_cur_st[3:0] == TAP2_TRN1;
assign sm2_trn2       = sm2_cur_st[3:0] == TAP2_TRN2;
assign sm2_start_vld  = sm2_cur_st[3:0] == TAP2_RW;
assign sm2_shift_vld  = sm2_cur_st[3:0] == TAP2_DATA;
assign sm2_parity_vld = sm2_cur_st[3:0] == TAP2_PARITY;
assign sm2_sync_vld   = sm2_cur_st[3:0] == TAP2_SYNC;

assign sm2_shift_par  = sm2_parity_vld;
assign sm2_shift_sync = sm2_sync_vld;



assign sm2_shift_ir   = sm2_rs_had_ir_sel && sm2_shift_vld;
assign sm2_shift_dr   = sm2_rs_had_dr_sel && sm2_shift_vld;
assign sm2_update_ir  = sm2_rs_had_ir_sel && sm2_trn2      && (!sm2_parity);
assign sm2_update_dr  = sm2_rs_had_dr_sel && !sm2_read_vld && sm2_trn2 && (!sm2_parity);
assign sm2_capture_dr = sm2_rs_had_dr_sel &&  sm2_read_vld && sm2_trn1;



nm_had_sync  x_nm_had_sync_ir (
  .clk1              (cpuclk           ),
  .clk2              (tclk             ),
  .rst1_b            (hadrst_b         ),
  .rst2_b            (trst_b           ),
  .sync_in           (sm2_update_ir    ),
  .sync_out          (sm2_update_ir_cpu)
);










nm_had_sync  x_nm_had_sync_dr (
  .clk1              (cpuclk           ),
  .clk2              (tclk             ),
  .rst1_b            (hadrst_b         ),
  .rst2_b            (trst_b           ),
  .sync_in           (sm2_update_dr    ),
  .sync_out          (sm2_update_dr_cpu)
);












































assign jtag_regs_update_hacr = sm2_update_ir_cpu;
assign jtag_xx_update_dr     = sm2_update_dr_cpu;


assign had_pad_wakeup_req_b = (sm2_cur_st[3:0] == TAP2_IDLE)
                           || (sm2_cur_st[3:0] == TAP2_START);




always @(posedge tclk)
begin
  if (sm2_load_rw)
    sm2_read_vld <= pin_xx_tms_i;
end



always @(posedge tclk)
begin
  if (sm2_start_vld)
    sm2_rs_counter <= 1'b1;
  else if (sm2_cur_st[3:0] == TAP2_RS)
    sm2_rs_counter <= 1'b0;
  else
    sm2_rs_counter <= sm2_rs_counter;
end

always @(posedge tclk)
begin
  if (sm2_cur_st[3:0] == TAP2_RS)
    sm2_rs[1:0] <= {pin_xx_tms_i, sm2_rs[1]};
  else
    sm2_rs[1:0] <= sm2_rs[1:0];
end


assign sm2_rs_cdic_dr_sel = sm2_rs[1:0] == 2'b01;
assign sm2_rs_had_ir_sel  = sm2_rs[1:0] == 2'b10;
assign sm2_rs_had_dr_sel  = sm2_rs[1:0] == 2'b11;




always @(posedge tclk)
begin
  if (sm2_cur_st[3:0] == TAP2_TRN1) begin
    if (sm2_rs_had_dr_sel || sm2_rs_cdic_dr_sel)
      sm2_data_counter[4:0] <= 5'b11111;
    else
      sm2_data_counter[4:0] <= 5'b00111;
  end
  else if (sm2_shift_vld)
    sm2_data_counter[4:0] <= sm2_data_counter[4:0] - 5'b1;
end



always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tms_oe <= 1'b0; // default is input
  else if (sm2_rst_vld)
    tms_oe <= 1'b0;
  else if (sm2_trn1 && sm2_read_vld)
    tms_oe <= 1'b1;
  else if (sm2_trn2)
    tms_oe <= 1'b0;
  else
    tms_oe <= tms_oe;
end



always @(posedge tclk)
begin
  if (sm2_start_vld)
    sm2_parity <= 1'b1;
  else if ((sm2_rs_had_dr_sel || sm2_rs_had_ir_sel) && sm2_shift_vld)
    sm2_parity <= sm2_parity ^ pin_xx_tms_i; // calculate the parity bit
  else if (sm2_parity_vld)
    sm2_parity <= sm2_parity ^ pin_xx_tms_i; // check received parity bit
  else
    sm2_parity <= sm2_parity;
end




assign tap_on = !(sm2_cur_st[3:0] == TAP2_IDLE);



always @(posedge forever_cpuclk_nogated or negedge hadrst_b)
begin
  if (!hadrst_b)
    sm_xx_tap_on <= 1'b0;
  else if (tap_on)
    sm_xx_tap_on <= 1'b1;
  else
    sm_xx_tap_on <= sm_xx_tap_on;
end







always @( * )
begin
  shifter_pre[31:0] = 32'b0;
  if (sm2_shift_ir)        // shift ir (ir register is write only)
    shifter_pre[7:0]  = {tdi, shifter[7:1]};
  else if (sm2_capture_dr) // capture dr
    shifter_pre[31:0] = regs_jtag_data[31:0];
  else if (sm2_shift_dr)   // shift dr
    shifter_pre[31:0] = {tdi, shifter[31:1]};
  else 
    shifter_pre[31:0] = shifter[31:0];
end

assign jtag_xx_data[31:0] = shifter[31:0];


always @(posedge tclk)
begin
  shifter[31:0] <= shifter_pre[31:0];
end



always @(negedge tclk or negedge trst_b)
begin
  if (!trst_b)
    tdo <= 1'b1;
  else if (sm2_shift_sync)
    tdo <= 1'b0;
  else if (sm2_shift_dr && sm2_read_vld)
    tdo <= shifter[0];
  else if (sm2_shift_par && sm2_read_vld)
    tdo <= parity;
  else
    tdo <= 1'b1;
end


always @(posedge tclk)
begin
  if (sm2_capture_dr)
    parity <= 1'b1;
  else if (sm2_shift_dr && sm2_read_vld)
    parity <= parity ^ shifter[0];
  else
    parity <= parity;
end




assign jtag2_pin_tms_oe = tms_oe;
assign jtag2_pin_tms_o  = tdo;
assign tms_i            = pin_xx_tms_i;
assign tdi              = pin_xx_tms_i;


endmodule























module nm_had_pin(
  cpuclk,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  hadrst_b,
  iu_yy_xx_dbgon,
  jtag2_pin_tms_o,
  jtag2_pin_tms_oe,
  pad_had_jtg_tms_i,
  pin_ctrl_jdb_req,
  pin_sm_tap_en,
  pin_xx_tms_i,
  regs_pin_pm,
  tclk,
  trst_b
);


input          cpuclk;            
input          hadrst_b;          
input          iu_yy_xx_dbgon;    
input          jtag2_pin_tms_o;   
input          jtag2_pin_tms_oe;  
input          pad_had_jtg_tms_i; 
input   [1:0]  regs_pin_pm;       
input          tclk;              
input          trst_b;            
output  [1:0]  had_pad_jdb_pm;    
output         had_pad_jtg_tms_o; 
output         had_pad_jtg_tms_oe; 
output         pin_ctrl_jdb_req;  
output         pin_sm_tap_en;     
output         pin_xx_tms_i;      


reg            had_pad_jdb_ack_b; 
reg     [1:0]  had_pad_jdb_pm;    
reg            jdb_ack_clr;       


wire           cpuclk;            
wire           had_pad_jtg_tap_on; 
wire           had_pad_jtg_tms_o; 
wire           had_pad_jtg_tms_oe; 
wire           hadrst_b;          
wire           iu_yy_xx_dbgon;    
wire    [1:0]  jdb_pm;            
wire           jdb_tap_en;        
wire           jtag2_pin_tms_o;   
wire           jtag2_pin_tms_oe;  
wire           pad_had_jtg_tap_en; 
wire           pad_had_jtg_tms_i; 
wire           pin_ctrl_jdb_req;  
wire           pin_sm_tap_en;     
wire           pin_xx_tms_i;      
wire    [1:0]  regs_pin_pm;       
wire           tclk;              
wire           trst_b;            
























assign jdb_tap_en = 1'b0;



















assign pin_ctrl_jdb_req = 1'b0;






























assign pin_sm_tap_en = jdb_tap_en || pad_had_jtg_tap_en;
assign pad_had_jtg_tap_en = 1'b1;








assign jdb_pm[1:0] = regs_pin_pm[1:0];

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
   had_pad_jdb_pm[1:0] <= 2'b0;
  end
  else 
  begin
   had_pad_jdb_pm[1:0] <= jdb_pm[1:0];
  end
end







always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    had_pad_jdb_ack_b <= 1'b1;
  else if (jdb_ack_clr)
    had_pad_jdb_ack_b <= 1'b1;
  else if (iu_yy_xx_dbgon)
    had_pad_jdb_ack_b <= 1'b0;
  else
    had_pad_jdb_ack_b <= had_pad_jdb_ack_b;
end

always @(posedge tclk or negedge trst_b)
begin
  if (!trst_b)
    jdb_ack_clr <= 1'b0;
  else if (!had_pad_jdb_ack_b)
    jdb_ack_clr <= 1'b1;
  else if (!iu_yy_xx_dbgon)
    jdb_ack_clr <= 1'b0;
  else
    jdb_ack_clr <= jdb_ack_clr;
end





assign had_pad_jtg_tap_on = pin_sm_tap_en;


assign pin_xx_tms_i = pad_had_jtg_tms_i;
assign had_pad_jtg_tms_o = jtag2_pin_tms_o;
assign had_pad_jtg_tms_oe = jtag2_pin_tms_oe;


endmodule

























module nm_had_regs(
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_psr_data,
  cp0_had_spsr_data,
  cpuclk,
  ctrl_regs_exit_dbg,
  ctrl_regs_update_adro,
  ctrl_regs_update_dro,
  ctrl_regs_update_mbo,
  ctrl_regs_update_swo,
  ctrl_regs_update_to,
  ddc_regs_ffy,
  ddc_regs_ir,
  ddc_regs_update_csr,
  ddc_regs_update_ir,
  had_core_dbg_mode_req,
  had_cp0_psr_data,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_iu_force_dbg_en,
  had_iu_int_vld,
  had_iu_pc,
  had_iu_rte_pc_sel,
  had_iu_xx_fdb,
  had_tcipif_cmplt,
  had_tcipif_rdata,
  hadrst_b,
  iu_had_fast_retire_acc_err_pc_update,
  iu_had_fast_retire_acc_err_pc_val,
  iu_had_int_ack,
  iu_had_retire_with_had_int,
  iu_had_xx_data,
  iu_had_xx_data_vld,
  iu_had_xx_dbg_ack,
  iu_had_xx_retire_pc,
  iu_yy_xx_dbgon,
  jtag_regs_srst,
  jtag_regs_update_hacr,
  jtag_xx_data,
  jtag_xx_update_dr,
  regs_bkpta_base,
  regs_bkpta_bkpti_en,
  regs_bkpta_ctrl,
  regs_bkpta_mask,
  regs_bkptb_base,
  regs_bkptb_ctrl,
  regs_bkptb_mask,
  regs_bkptc_base,
  regs_bkptc_en,
  regs_bkptd_base,
  regs_bkptd_en,
  regs_bkpte_base,
  regs_bkpte_en,
  regs_ctrl_adr,
  regs_ctrl_dr,
  regs_ctrl_exit_sel,
  regs_ctrl_hacr_ex,
  regs_ctrl_hacr_go,
  regs_ctrl_had_int_on,
  regs_ctrl_mbee,
  regs_ddc_daddr_sel,
  regs_ddc_ddata_sel,
  regs_jtag_data,
  regs_jtag_hacr_rw,
  regs_jtag_reg16_sel,
  regs_jtag_reg8_sel,
  regs_pin_pm,
  regs_trace_en,
  regs_xx_ddc_en,
  tcipif_had_addr,
  tcipif_had_sel,
  tcipif_had_wdata,
  tcipif_had_write
);


input   [31:0]  cp0_had_cpuid_idx0;                  
input   [1 :0]  cp0_had_lpmd_b;                      
input   [31:0]  cp0_had_psr_data;                    
input   [31:0]  cp0_had_spsr_data;                   
input           cpuclk;                              
input           ctrl_regs_exit_dbg;                  
input           ctrl_regs_update_adro;               
input           ctrl_regs_update_dro;                
input           ctrl_regs_update_mbo;                
input           ctrl_regs_update_swo;                
input           ctrl_regs_update_to;                 
input           ddc_regs_ffy;                        
input   [31:0]  ddc_regs_ir;                         
input           ddc_regs_update_csr;                 
input           ddc_regs_update_ir;                  
input           hadrst_b;                            
input           iu_had_fast_retire_acc_err_pc_update; 
input   [30:0]  iu_had_fast_retire_acc_err_pc_val;   
input           iu_had_int_ack;                      
input           iu_had_retire_with_had_int;          
input   [31:0]  iu_had_xx_data;                      
input           iu_had_xx_data_vld;                  
input           iu_had_xx_dbg_ack;                   
input   [31:0]  iu_had_xx_retire_pc;                 
input           iu_yy_xx_dbgon;                      
input           jtag_regs_srst;                      
input           jtag_regs_update_hacr;               
input   [31:0]  jtag_xx_data;                        
input           jtag_xx_update_dr;                   
input   [15:0]  tcipif_had_addr;                     
input           tcipif_had_sel;                      
input   [31:0]  tcipif_had_wdata;                    
input           tcipif_had_write;                    
output          had_core_dbg_mode_req;               
output  [31:0]  had_cp0_psr_data;                    
output  [31:0]  had_idu_wbbr_data;                   
output          had_idu_wbbr_vld;                    
output  [31:0]  had_ifu_ir;                          
output          had_ifu_ir_vld;                      
output          had_iu_force_dbg_en;                 
output          had_iu_int_vld;                      
output  [30:0]  had_iu_pc;                           
output          had_iu_rte_pc_sel;                   
output          had_iu_xx_fdb;                       
output          had_tcipif_cmplt;                    
output  [31:0]  had_tcipif_rdata;                    
output  [31:0]  regs_bkpta_base;                     
output          regs_bkpta_bkpti_en;                 
output  [2 :0]  regs_bkpta_ctrl;                     
output  [7 :0]  regs_bkpta_mask;                     
output  [31:0]  regs_bkptb_base;                     
output  [2 :0]  regs_bkptb_ctrl;                     
output  [7 :0]  regs_bkptb_mask;                     
output  [31:0]  regs_bkptc_base;                     
output          regs_bkptc_en;                       
output  [31:0]  regs_bkptd_base;                     
output          regs_bkptd_en;                       
output  [31:0]  regs_bkpte_base;                     
output          regs_bkpte_en;                       
output          regs_ctrl_adr;                       
output          regs_ctrl_dr;                        
output          regs_ctrl_exit_sel;                  
output          regs_ctrl_hacr_ex;                   
output          regs_ctrl_hacr_go;                   
output          regs_ctrl_had_int_on;                
output  [8 :0]  regs_ctrl_mbee;                      
output          regs_ddc_daddr_sel;                  
output          regs_ddc_ddata_sel;                  
output  [31:0]  regs_jtag_data;                      
output          regs_jtag_hacr_rw;                   
output          regs_jtag_reg16_sel;                 
output          regs_jtag_reg8_sel;                  
output  [1 :0]  regs_pin_pm;                         
output          regs_trace_en;                       
output          regs_xx_ddc_en;                      


reg             adro;                                
reg     [31:0]  baba_reg;                            
reg     [31:0]  babb_reg;                            
reg     [31:0]  babc_reg;                            
reg     [31:0]  babd_reg;                            
reg     [31:0]  babe_reg;                            
reg     [7 :0]  bama_reg;                            
reg     [7 :0]  bamb_reg;                            
reg     [1 :0]  bsel;                                
reg             dro;                                 
reg             fdb;                                 
reg             ffy;                                 
reg     [7 :0]  hacr_reg;                            
reg             hcr_adr;                             
reg     [2 :0]  hcr_bca;                             
reg     [2 :0]  hcr_bcb;                             
reg             hcr_bxen_bkptc;                      
reg             hcr_bxen_bkptd;                      
reg             hcr_bxen_bkpte;                      
reg             hcr_ddcen;                           
reg             hcr_dr;                              
reg             hcr_tme;                             
reg             mbo;                                 
reg     [30:0]  pc;                                  
reg             pm_dbg_mode;                         
reg             psr_c;                               
reg             psr_ee;                              
reg             psr_ic;                              
reg             psr_ie;                              
reg             psr_mm;                              
reg             psr_s;                               
reg     [7 :0]  psr_vec;                             
reg     [31:0]  regs_rdata;                          
reg             swo;                                 
reg             to;                                  
reg     [31:0]  wbbr_reg;                            


wire            baba_wen;                            
wire            babb_wen;                            
wire            babc_wen;                            
wire            babd_wen;                            
wire            babe_wen;                            
wire    [31:0]  babf_reg;                            
wire    [31:0]  babg_reg;                            
wire    [31:0]  babh_reg;                            
wire    [31:0]  babi_reg;                            
wire            bama_wen;                            
wire            bamb_wen;                            
wire    [7 :0]  bamc_reg;                            
wire    [7 :0]  bamd_reg;                            
wire    [7 :0]  bame_reg;                            
wire    [7 :0]  bamf_reg;                            
wire    [7 :0]  bamg_reg;                            
wire    [7 :0]  bamh_reg;                            
wire    [7 :0]  bami_reg;                            
wire            bsel_0;                              
wire            bsel_0_jtg;                          
wire            bsel_0_tcipif;                       
wire            bsel_1;                              
wire            bsel_1_jtg;                          
wire            bsel_1_tcipif;                       
wire    [1 :0]  bsel_val;                            
wire            bsel_wen;                            
wire    [31:0]  cp0_had_cpuid_idx0;                  
wire    [1 :0]  cp0_had_lpmd_b;                      
wire    [31:0]  cp0_had_psr_data;                    
wire            cp0_had_secu_dbg_en;                 
wire    [31:0]  cp0_had_spsr_data;                   
wire            cpuclk;                              
wire    [15:0]  csr_reg;                             
wire            csr_wen;                             
wire            ctrl_regs_exit_dbg;                  
wire            ctrl_regs_update_adro;               
wire            ctrl_regs_update_dro;                
wire            ctrl_regs_update_mbo;                
wire            ctrl_regs_update_swo;                
wire            ctrl_regs_update_to;                 
wire    [31:0]  dacsr_rd_val;                        
wire    [31:0]  dacsr_reg;                           
wire    [31:0]  darwr_reg;                           
wire    [31:0]  datr_reg;                            
wire    [31:0]  dbg_ctrl_reg;                        
wire            dbgexp_regs_updt_vld;                
wire            ddc_regs_ffy;                        
wire    [31:0]  ddc_regs_ir;                         
wire            ddc_regs_update_csr;                 
wire            ddc_regs_update_ir;                  
wire    [31:0]  dder_rd_val;                         
wire    [31:0]  ddera_reg;                           
wire            ddera_vld;                           
wire    [31:0]  dderb_reg;                           
wire            dderb_vld;                           
wire    [31:0]  force_reg;                           
wire            hacr_ex;                             
wire            hacr_go;                             
wire            hacr_indx_baba_sel;                  
wire            hacr_indx_baba_sel_rd;               
wire            hacr_indx_babb_sel;                  
wire            hacr_indx_babb_sel_rd;               
wire            hacr_indx_babc_sel;                  
wire            hacr_indx_babc_sel_rd;               
wire            hacr_indx_babd_sel;                  
wire            hacr_indx_babd_sel_rd;               
wire            hacr_indx_babe_sel;                  
wire            hacr_indx_babe_sel_rd;               
wire            hacr_indx_babf_sel;                  
wire            hacr_indx_babf_sel_rd;               
wire            hacr_indx_babg_sel;                  
wire            hacr_indx_babg_sel_rd;               
wire            hacr_indx_babh_sel;                  
wire            hacr_indx_babh_sel_rd;               
wire            hacr_indx_babi_sel;                  
wire            hacr_indx_babi_sel_rd;               
wire            hacr_indx_bama_sel;                  
wire            hacr_indx_bama_sel_rd;               
wire            hacr_indx_bamb_sel;                  
wire            hacr_indx_bamb_sel_rd;               
wire            hacr_indx_bamc_sel;                  
wire            hacr_indx_bamc_sel_rd;               
wire            hacr_indx_bamd_sel;                  
wire            hacr_indx_bamd_sel_rd;               
wire            hacr_indx_bame_sel;                  
wire            hacr_indx_bame_sel_rd;               
wire            hacr_indx_bamf_sel;                  
wire            hacr_indx_bamf_sel_rd;               
wire            hacr_indx_bamg_sel;                  
wire            hacr_indx_bamg_sel_rd;               
wire            hacr_indx_bamh_sel;                  
wire            hacr_indx_bamh_sel_rd;               
wire            hacr_indx_bami_sel;                  
wire            hacr_indx_bami_sel_rd;               
wire            hacr_indx_bsel_sel;                  
wire            hacr_indx_bsel_sel_rd;               
wire            hacr_indx_bypass_sel;                
wire            hacr_indx_csr_sel;                   
wire            hacr_indx_csr_sel_rd;                
wire            hacr_indx_dacsr_sel;                 
wire            hacr_indx_dacsr_sel_rd;              
wire            hacr_indx_daddr_sel;                 
wire            hacr_indx_daddr_sel_rd;              
wire            hacr_indx_darwr_sel;                 
wire            hacr_indx_darwr_sel_rd;              
wire            hacr_indx_datr_sel;                  
wire            hacr_indx_datr_sel_rd;               
wire            hacr_indx_dbg_ctrl_sel;              
wire            hacr_indx_dbg_ctrl_sel_rd;           
wire            hacr_indx_ddata_sel;                 
wire            hacr_indx_ddata_sel_rd;              
wire            hacr_indx_dder_sel_rd;               
wire            hacr_indx_force_reg_sel;             
wire            hacr_indx_force_reg_sel_rd;          
wire            hacr_indx_hcr_sel;                   
wire            hacr_indx_hcr_sel_rd;                
wire            hacr_indx_hsr2_sel;                  
wire            hacr_indx_hsr2_sel_rd;               
wire            hacr_indx_hsr_sel;                   
wire            hacr_indx_hsr_sel_rd;                
wire            hacr_indx_id_sel;                    
wire            hacr_indx_id_sel_rd;                 
wire            hacr_indx_ir_sel;                    
wire            hacr_indx_mbca_sel;                  
wire            hacr_indx_mbca_sel_rd;               
wire            hacr_indx_mbcb_sel;                  
wire            hacr_indx_mbcb_sel_rd;               
wire            hacr_indx_mbee_sel;                  
wire            hacr_indx_mbee_sel_rd;               
wire            hacr_indx_mbir_sel;                  
wire            hacr_indx_mbir_sel_rd;               
wire            hacr_indx_mbse_sel;                  
wire            hacr_indx_mbse_sel_rd;               
wire            hacr_indx_pc_sel;                    
wire            hacr_indx_pc_sel_rd;                 
wire            hacr_indx_prof_cnt_sel;              
wire            hacr_indx_prof_cnt_sel_rd;           
wire            hacr_indx_psr_sel;                   
wire            hacr_indx_psr_sel_rd;                
wire    [4 :0]  hacr_indx_reuse;                     
wire            hacr_indx_sysrsv_sel;                
wire            hacr_indx_sysrsv_sel_rd;             
wire            hacr_indx_tc_sel;                    
wire            hacr_indx_tc_sel_rd;                 
wire            hacr_indx_wbbr_sel;                  
wire            hacr_indx_wbbr_sel_rd;               
wire            hacr_rw;                             
wire            had_core_dbg_mode_req;               
wire    [31:0]  had_cp0_psr_data;                    
wire    [31:0]  had_idu_wbbr_data;                   
wire            had_idu_wbbr_vld;                    
wire    [31:0]  had_ifu_ir;                          
wire            had_ifu_ir_vld;                      
wire            had_iu_force_dbg_en;                 
wire            had_iu_int_vld;                      
wire    [30:0]  had_iu_pc;                           
wire            had_iu_rte_pc_sel;                   
wire            had_iu_xx_fdb;                       
wire            had_tcipif_cmplt;                    
wire    [31:0]  had_tcipif_rdata;                    
wire            hadrst_b;                            
wire            hcr_bca_wen;                         
wire            hcr_bcb_wen;                         
wire    [6 :0]  hcr_bxen;                            
wire    [2 :0]  hcr_bxen_bkpt4;                      
wire    [3 :0]  hcr_bxen_bkpt8;                      
wire            hcr_bxen_bkptc_wen;                  
wire            hcr_bxen_bkptd_wen;                  
wire            hcr_bxen_bkpte_wen;                  
wire            hcr_ddae;                            
wire            hcr_jtgr_int_en;                     
wire            hcr_jtgw_int_en;                     
wire    [31:0]  hcr_reg;                             
wire            hcr_wen_jtg_only;                    
wire    [31:0]  hsr2_reg;                            
wire            hsr_dbg_dis;                         
wire    [15:0]  hsr_reg;                             
wire    [31:0]  id_reg;                              
wire            iu_had_fast_retire_acc_err_pc_update; 
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;   
wire            iu_had_int_ack;                      
wire            iu_had_retire_with_had_int;          
wire    [31:0]  iu_had_xx_data;                      
wire            iu_had_xx_data_vld;                  
wire            iu_had_xx_dbg_ack;                   
wire    [31:0]  iu_had_xx_retire_pc;                 
wire            iu_yy_xx_dbgon;                      
wire            jr_active;                           
wire            jtag_psr_pc_wen;                     
wire            jtag_regs_srst;                      
wire            jtag_regs_update_hacr;               
wire    [31:0]  jtag_xx_data;                        
wire            jtag_xx_update_dr;                   
wire            jw_active;                           
wire    [31:0]  mbee_reg;                            
wire    [3 :0]  mbir_reg;                            
wire    [31:0]  mbse_reg;                            
wire    [31:0]  pc_reg;                              
wire            pc_wen;                              
wire    [1 :0]  pm;                                  
wire            pm_lowpwr_mode;                      
wire            prof_cnt_en;                         
wire    [31:0]  prof_cnt_reg;                        
wire            psr_af;                              
wire            psr_bm;                              
wire            psr_hs;                              
wire            psr_prgisgn_en;                      
wire            psr_prgsign_ins_cnt_en;              
wire            psr_prgsign_strong;                  
wire    [31:0]  psr_reg;                             
wire            psr_sc;                              
wire            psr_se;                              
wire            psr_sp;                              
wire            psr_wen;                             
wire    [31:0]  regs_bkpta_base;                     
wire            regs_bkpta_bkpti_en;                 
wire    [2 :0]  regs_bkpta_ctrl;                     
wire    [7 :0]  regs_bkpta_mask;                     
wire    [31:0]  regs_bkptb_base;                     
wire    [2 :0]  regs_bkptb_ctrl;                     
wire    [7 :0]  regs_bkptb_mask;                     
wire    [31:0]  regs_bkptc_base;                     
wire            regs_bkptc_en;                       
wire    [31:0]  regs_bkptd_base;                     
wire            regs_bkptd_en;                       
wire    [31:0]  regs_bkpte_base;                     
wire            regs_bkpte_en;                       
wire            regs_ctrl_adr;                       
wire            regs_ctrl_dr;                        
wire            regs_ctrl_exit_sel;                  
wire            regs_ctrl_hacr_ex;                   
wire            regs_ctrl_hacr_go;                   
wire            regs_ctrl_had_int_on;                
wire    [8 :0]  regs_ctrl_mbee;                      
wire            regs_ddc_daddr_sel;                  
wire            regs_ddc_ddata_sel;                  
wire    [31:0]  regs_jtag_data;                      
wire            regs_jtag_hacr_rw;                   
wire            regs_jtag_reg16_sel;                 
wire            regs_jtag_reg8_sel;                  
wire    [1 :0]  regs_pin_pm;                         
wire            regs_trace_en;                       
wire            regs_xx_ddc_en;                      
wire    [31:0]  regs_xx_wdata;                       
wire            rte_pc_sel;                          
wire            sec_bit_jtag;                        
wire            sec_jtag;                            
wire            secure_mode_match_jtag;              
wire            tcipif_dcc_updt_vld;                 
wire    [15:0]  tcipif_had_addr;                     
wire            tcipif_had_sel;                      
wire    [31:0]  tcipif_had_wdata;                    
wire            tcipif_psr_pc_wen;                   
wire            tcipif_reg_sel;                      
wire            wbbr_wen;                            








always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hacr_reg[7:0] <= 8'h82; // point to HAD_ID, read op
  else if (jtag_regs_srst)
    hacr_reg[7:0] <= 8'h82;
  else if (jtag_regs_update_hacr)
    hacr_reg[7:0] <= jtag_xx_data[7:0];
  else
    hacr_reg[7:0] <= hacr_reg[7:0];
end

assign hacr_rw = hacr_reg[7];
assign hacr_go = hacr_reg[6];
assign hacr_ex = hacr_reg[5];

assign tcipif_reg_sel       = 1'b0;
assign hacr_indx_reuse[4:0] = tcipif_reg_sel ?  tcipif_had_addr[6:2] : hacr_reg[4:0];




assign bsel_wen = jtag_xx_update_dr && hacr_indx_bsel_sel;
always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bsel[1:0] <= 2'b0;
  else if (jtag_regs_srst)
    bsel[1:0] <= 2'b0;
  else if (bsel_wen)
    bsel[1:0] <= jtag_xx_data[1:0];
  else
    bsel[1:0] <= bsel[1:0];
end


  assign bsel_val[1:0] = {1'b0, bsel[0]};


assign bsel_0_jtg    = bsel_val[1:0] == 2'b0;
assign bsel_0_tcipif = tcipif_had_addr[11:7] == 5'b0;
assign bsel_0        = tcipif_reg_sel ? bsel_0_tcipif : bsel_0_jtg;

  assign bsel_1_jtg    = bsel_val[1:0] == 2'b1;
  assign bsel_1_tcipif = tcipif_had_addr[11:7] == 5'b1;
  assign bsel_1        = tcipif_reg_sel ? bsel_1_tcipif : bsel_1_jtg;


assign hacr_indx_bsel_sel     = (hacr_indx_reuse[4:0] == 5'b11110); //for any bank


assign hacr_indx_id_sel       = (hacr_indx_reuse[4:0] == 5'b00010) && bsel_0;
assign hacr_indx_tc_sel       = 1'b0;
assign hacr_indx_bypass_sel   = (hacr_indx_reuse[4:0] == 5'b01100) && bsel_0;
assign hacr_indx_hsr_sel      = (hacr_indx_reuse[4:0] == 5'b01110) && bsel_0;
assign hacr_indx_wbbr_sel     = (hacr_indx_reuse[4:0] == 5'b10001) && bsel_0;
assign hacr_indx_ir_sel       = (hacr_indx_reuse[4:0] == 5'b10100) && bsel_0;
assign hacr_indx_csr_sel      = (hacr_indx_reuse[4:0] == 5'b10101) && bsel_0;
assign hacr_indx_daddr_sel    = (hacr_indx_reuse[4:0] == 5'b11000) && bsel_0;
assign hacr_indx_ddata_sel    = (hacr_indx_reuse[4:0] == 5'b11001) && bsel_0;
assign hacr_indx_sysrsv_sel   = (hacr_indx_reuse[4:0] == 5'b11111) && bsel_0;

assign hacr_indx_psr_sel      = (hacr_indx_reuse[4:0] == 5'b10010) && bsel_0;
assign hacr_indx_pc_sel       = (hacr_indx_reuse[4:0] == 5'b10011) && bsel_0;
assign hacr_indx_hcr_sel      = (hacr_indx_reuse[4:0] == 5'b01101) && bsel_0;
assign hacr_indx_hsr2_sel     = 1'b0;

assign hacr_indx_mbca_sel     = 1'b0;
assign hacr_indx_mbcb_sel     = 1'b0;
assign hacr_indx_baba_sel     = (hacr_indx_reuse[4:0] == 5'b00111) && bsel_0;
assign hacr_indx_bama_sel     = (hacr_indx_reuse[4:0] == 5'b01001) && bsel_0;

assign hacr_indx_babb_sel     = (hacr_indx_reuse[4:0] == 5'b01000) && bsel_0;
assign hacr_indx_bamb_sel     = (hacr_indx_reuse[4:0] == 5'b01010) && bsel_0;


assign hacr_indx_babc_sel     = (hacr_indx_reuse[4:0] == 5'b00000) && bsel_1;
assign hacr_indx_babd_sel     = (hacr_indx_reuse[4:0] == 5'b00010) && bsel_1;
assign hacr_indx_babe_sel     = (hacr_indx_reuse[4:0] == 5'b00100) && bsel_1;
assign hacr_indx_bamc_sel     = 1'b0;
assign hacr_indx_bamd_sel     = 1'b0;
assign hacr_indx_bame_sel     = 1'b0;

assign hacr_indx_babf_sel     = 1'b0;
assign hacr_indx_babg_sel     = 1'b0;
assign hacr_indx_babh_sel     = 1'b0;
assign hacr_indx_babi_sel     = 1'b0;
assign hacr_indx_bamf_sel     = 1'b0;
assign hacr_indx_bamg_sel     = 1'b0;
assign hacr_indx_bamh_sel     = 1'b0;
assign hacr_indx_bami_sel     = 1'b0;

assign hacr_indx_dacsr_sel    = 1'b0;
assign hacr_indx_datr_sel     = 1'b0;
assign hacr_indx_darwr_sel    = 1'b0;

assign hacr_indx_mbir_sel     = 1'b0;
assign hacr_indx_mbee_sel     = 1'b0;
assign hacr_indx_mbse_sel     = 1'b0;


assign hacr_indx_dbg_ctrl_sel  = 1'b0;
assign hacr_indx_prof_cnt_sel  = 1'b0;
assign hacr_indx_force_reg_sel = 1'b0;

assign tcipif_dcc_updt_vld           = 1'b0;



assign dbgexp_regs_updt_vld          = jtag_xx_update_dr;

assign regs_xx_wdata[31:0]       = tcipif_reg_sel ? tcipif_had_wdata[31:0]
                                                  : jtag_xx_data[31:0];





















assign id_reg[31:28] = 4'b0001; // JTAG_2 interface

assign id_reg[27:26] = cp0_had_cpuid_idx0[27:26];

assign id_reg[25:18] = 8'b0;

assign id_reg[17]    = 1'b0;

assign id_reg[16]    = 1'b0;

assign id_reg[15:12] = 4'd5;





























































assign id_reg[11:8]  = 4'd11;
assign id_reg[7:4]   = 4'b0010;



assign id_reg[3:0]   = 4'b0001;








assign baba_wen = dbgexp_regs_updt_vld && hacr_indx_baba_sel;

always @(posedge cpuclk)
begin
  if (baba_wen)
    baba_reg[31:0] <= regs_xx_wdata[31:0];
  else
    baba_reg[31:0] <= baba_reg[31:0];
end





assign bama_wen = dbgexp_regs_updt_vld && hacr_indx_bama_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bama_reg[7:0] <= 8'b0;
  else if (bama_wen)
    bama_reg[7:0] <= regs_xx_wdata[7:0];
  else
    bama_reg[7:0] <= bama_reg[7:0];
end




assign babb_wen = dbgexp_regs_updt_vld && hacr_indx_babb_sel;

always @(posedge cpuclk)
begin
  if (babb_wen)
    babb_reg[31:0] <= regs_xx_wdata[31:0];
  else
    babb_reg[31:0] <= babb_reg[31:0];
end





assign bamb_wen = dbgexp_regs_updt_vld && hacr_indx_bamb_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    bamb_reg[7:0] <= 8'b0;
  else if (bamb_wen)
    bamb_reg[7:0] <= regs_xx_wdata[7:0];
  else
    bamb_reg[7:0] <= bamb_reg[7:0];
end




assign wbbr_wen = jtag_xx_update_dr && (hacr_indx_wbbr_sel
                                     || hacr_indx_daddr_sel
                                     || hacr_indx_ddata_sel);
always @(posedge cpuclk)
begin
  if (wbbr_wen)
    wbbr_reg[31:0] <= jtag_xx_data[31:0];


  else if (iu_had_xx_data_vld)
    wbbr_reg[31:0] <= iu_had_xx_data[31:0];
  else
    wbbr_reg[31:0] <= wbbr_reg[31:0];
end





assign jtag_psr_pc_wen   = jtag_xx_update_dr && iu_yy_xx_dbgon;
assign tcipif_psr_pc_wen = tcipif_dcc_updt_vld && !iu_had_retire_with_had_int;
assign psr_wen = (jtag_psr_pc_wen || tcipif_psr_pc_wen)
               && hacr_indx_psr_sel;


always @(posedge cpuclk)
begin
  if (iu_had_xx_dbg_ack) begin
    psr_s        <= cp0_had_psr_data[31];
    psr_vec[7:0] <= cp0_had_psr_data[23:16];
    psr_mm       <= cp0_had_psr_data[9];
    psr_ee       <= cp0_had_psr_data[8];
    psr_ic       <= cp0_had_psr_data[7];
    psr_ie       <= cp0_had_psr_data[6];
    psr_c        <= cp0_had_psr_data[0];
  end
  else if (iu_had_int_ack) begin
    psr_s        <= cp0_had_spsr_data[31];
    psr_vec[7:0] <= cp0_had_spsr_data[23:16];
    psr_mm       <= cp0_had_spsr_data[9];
    psr_ee       <= cp0_had_spsr_data[8];
    psr_ic       <= cp0_had_spsr_data[7];
    psr_ie       <= cp0_had_spsr_data[6];
    psr_c        <= cp0_had_spsr_data[0];
  end
  else if (psr_wen) begin
    psr_s        <= regs_xx_wdata[31];
    psr_vec[7:0] <= regs_xx_wdata[23:16];
    psr_mm       <= regs_xx_wdata[9];
    psr_ee       <= regs_xx_wdata[8];
    psr_ic       <= regs_xx_wdata[7];
    psr_ie       <= regs_xx_wdata[6];
    psr_c        <= regs_xx_wdata[0];
  end
end

assign psr_se = 1'b0;
assign psr_sp = 1'b0;
assign psr_hs = 1'b0;
assign psr_sc = 1'b0;

assign psr_prgsign_ins_cnt_en = 1'b0;
assign psr_prgsign_strong     = 1'b0;
assign psr_prgisgn_en         = 1'b0;

assign psr_bm = 1'b0;

assign psr_af = 1'b0;

assign psr_reg[31:0] = {psr_s , psr_se, psr_sp, psr_hs,
                        psr_sc, psr_prgsign_ins_cnt_en,
                        psr_prgsign_strong, psr_prgisgn_en,
                        psr_vec[7:0], 6'b0,
                        psr_mm, psr_ee, psr_ic, psr_ie, 
                        3'b0, psr_bm, psr_af, psr_c};





assign pc_wen = (jtag_psr_pc_wen || tcipif_psr_pc_wen)
              && hacr_indx_pc_sel;
always @(posedge cpuclk)
begin
  if (iu_had_fast_retire_acc_err_pc_update || iu_had_int_ack)
    pc[30:0] <= iu_had_fast_retire_acc_err_pc_val[30:0];
  else if (iu_had_xx_dbg_ack)
    pc[30:0] <= iu_had_xx_retire_pc[31:1];
  else if (pc_wen)
    pc[30:0] <= regs_xx_wdata[31:1];
  else
    pc[30:0] <= pc[30:0];
end

assign pc_reg[31:0] = {pc[30:0], 1'b0};








assign csr_wen = jtag_xx_update_dr && hacr_indx_csr_sel;
always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    ffy         <= 1'b0;
    fdb         <= 1'b0;
  end
  else if (csr_wen) begin
    ffy         <= jtag_xx_data[8];
    fdb         <= jtag_xx_data[7];
  end
  else if (ddc_regs_update_csr) begin
    ffy         <= ddc_regs_ffy;
    fdb         <= 1'b0;
  end
  else begin
    ffy         <= ffy;
    fdb         <= fdb;
  end
end

assign csr_reg[15:0] = {7'b0, ffy, fdb, 7'b0};




























assign hcr_wen_jtg_only = jtag_xx_update_dr && hacr_indx_hcr_sel;
always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    hcr_adr      <= 1'b0; // Debug Request when CPU Dead
    hcr_ddcen    <= 1'b0; // DDC mode Enable
    hcr_dr       <= 1'b0; // Debug Request
    hcr_tme      <= 1'b0; // Trace Mode Enable
  end
  else if (hcr_wen_jtg_only) begin
    hcr_adr      <= jtag_xx_data[21];
    hcr_ddcen    <= jtag_xx_data[20];
    hcr_dr       <= jtag_xx_data[15];
    hcr_tme      <= jtag_xx_data[13];
  end
  else begin
    hcr_adr      <= hcr_adr;
    hcr_ddcen    <= hcr_ddcen;
    hcr_dr       <= hcr_dr;
    hcr_tme      <= hcr_tme;
  end
end

assign hcr_bca_wen = dbgexp_regs_updt_vld && hacr_indx_hcr_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    hcr_bca[2:0] <= 3'b0; // memory Breakpoint Cotrol A
  end
  else if (hcr_bca_wen) begin
    hcr_bca[2:0] <= regs_xx_wdata[2:0];
  end
  else begin
    hcr_bca[2:0] <= hcr_bca[2:0];
  end
end

  assign hcr_bcb_wen = dbgexp_regs_updt_vld && hacr_indx_hcr_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b) begin
    hcr_bcb[2:0]  <= 3'b0;
  end
  else if (hcr_bcb_wen) begin
    hcr_bcb[2:0]  <= regs_xx_wdata[8:6];
  end
  else begin
    hcr_bcb[2:0]  <= hcr_bcb[2:0];
  end
end


assign hcr_bxen_bkptc_wen = dbgexp_regs_updt_vld && hacr_indx_hcr_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hcr_bxen_bkptc <= 1'b0;
  else if (hcr_bxen_bkptc_wen)
    hcr_bxen_bkptc <= regs_xx_wdata[22];
  else
    hcr_bxen_bkptc <= hcr_bxen_bkptc;
end

assign hcr_bxen_bkptd_wen = dbgexp_regs_updt_vld && hacr_indx_hcr_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hcr_bxen_bkptd <= 1'b0;
  else if (hcr_bxen_bkptd_wen)
    hcr_bxen_bkptd <= regs_xx_wdata[23];
  else
    hcr_bxen_bkptd <= hcr_bxen_bkptd;
end

assign hcr_bxen_bkpte_wen = dbgexp_regs_updt_vld && hacr_indx_hcr_sel;

always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    hcr_bxen_bkpte <= 1'b0;
  else if (hcr_bxen_bkpte_wen)
    hcr_bxen_bkpte <= regs_xx_wdata[24];
  else
    hcr_bxen_bkpte <= hcr_bxen_bkpte;
end

assign hcr_bxen_bkpt4[2:0] = {hcr_bxen_bkpte, hcr_bxen_bkptd, hcr_bxen_bkptc};

assign hcr_bxen_bkpt8[3:0] = 4'b0;

assign hcr_bxen[6:0] = {hcr_bxen_bkpt8[3:0], hcr_bxen_bkpt4[2:0]};

assign hcr_ddae = 1'b0;

assign hcr_jtgr_int_en = 1'b0;
assign hcr_jtgw_int_en = 1'b0;

assign hcr_reg[31:0] = {2'b0, hcr_ddae, hcr_bxen[6:0], hcr_adr, hcr_ddcen,
                        hcr_jtgr_int_en, hcr_jtgw_int_en, 2'b0, hcr_dr, 1'b0,
                        hcr_tme, 4'b0, hcr_bcb[2:0], 3'b0, hcr_bca[2:0]};

assign regs_bkpta_bkpti_en = (hcr_bxen[6:0] != 7'b0)
                          || (hcr_bcb[2:0]  != 3'b0)
                          || (hcr_bca[2:0]  != 3'b0);





































always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    adro <= 1'b0;
  else if (ctrl_regs_update_adro)
    adro <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    adro <= 1'b0;
  else
    adro <= adro;
end


always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    dro <= 1'b0;
  else if (ctrl_regs_update_dro)
    dro <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    dro <= 1'b0;
  else
    dro <= dro;
end


always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    mbo <= 1'b0;
  else if (ctrl_regs_update_mbo)
    mbo <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    mbo <= 1'b0;
  else
    mbo <= mbo;
end


always @(posedge cpuclk or negedge hadrst_b)
begin                                                                                               
  if (!hadrst_b)
    swo <= 1'b0;
  else if (ctrl_regs_update_swo)
    swo <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    swo <= 1'b0;
  else
    swo <= swo;
end


always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
    to <= 1'b0;
  else if (ctrl_regs_update_to)
    to <= 1'b1;
  else if (ctrl_regs_exit_dbg)
    to <= 1'b0;
  else
    to <= to;
end



assign pm_lowpwr_mode = !cp0_had_lpmd_b[1] || !cp0_had_lpmd_b[0];


always @(posedge cpuclk or negedge hadrst_b)
begin
  if (!hadrst_b)
  begin
    pm_dbg_mode <= 1'b0;
  end
  else
  begin
    if (ctrl_regs_exit_dbg)
      pm_dbg_mode <= 1'b0;
    else if (iu_yy_xx_dbgon)
      pm_dbg_mode <= 1'b1;
    else
      pm_dbg_mode <= pm_dbg_mode;
  end
end

assign pm[1:0] = {pm_dbg_mode, pm_lowpwr_mode};













assign had_core_dbg_mode_req = pm_dbg_mode && !iu_yy_xx_dbgon;
assign hsr_reg[15:0] = {6'b0, adro, dro,
                        mbo, swo, to, 3'b0, pm[1:0]};




assign hsr_dbg_dis = 1'b0;

assign ddera_vld = 1'b0;
assign dderb_vld = 1'b0;
assign jw_active  = 1'b0; 
assign jr_active  = 1'b0;
assign rte_pc_sel = 1'b0; 
assign regs_ctrl_had_int_on = 1'b0;
assign had_iu_rte_pc_sel = 1'b0;
assign had_iu_int_vld = 1'b0;

assign hsr2_reg[31:0] = {26'b0, rte_pc_sel,
                         jr_active, jw_active, 
                         dderb_vld, ddera_vld, hsr_dbg_dis};




assign ddera_reg[31:0] = 32'b0;
assign dderb_reg[31:0] = 32'b0;









assign dacsr_reg[31:0] = 32'b0;
assign darwr_reg[31:0] = 32'b0;
assign datr_reg[31:0]  = 32'b0;

assign sec_jtag = 1'b0;
assign cp0_had_secu_dbg_en = 1'b1;

assign secure_mode_match_jtag = cp0_had_secu_dbg_en || ~(cp0_had_secu_dbg_en || sec_jtag);
assign sec_bit_jtag = cp0_had_secu_dbg_en? dacsr_reg[10] : 1'b0; 







assign babc_wen = dbgexp_regs_updt_vld && hacr_indx_babc_sel;

always @(posedge cpuclk)
begin
  if (babc_wen)
    babc_reg[31:0] <= regs_xx_wdata[31:0];
  else
    babc_reg[31:0] <= babc_reg[31:0];
end














assign babd_wen = dbgexp_regs_updt_vld && hacr_indx_babd_sel;

always @(posedge cpuclk)
begin
  if (babd_wen)
    babd_reg[31:0] <= regs_xx_wdata[31:0];
  else
    babd_reg[31:0] <= babd_reg[31:0];
end














assign babe_wen = dbgexp_regs_updt_vld && hacr_indx_babe_sel;

always @(posedge cpuclk)
begin
  if (babe_wen)
    babe_reg[31:0] <= regs_xx_wdata[31:0];
  else
    babe_reg[31:0] <= babe_reg[31:0];
end











assign babf_reg[31:0] = 32'b0;
assign babg_reg[31:0] = 32'b0;
assign babh_reg[31:0] = 32'b0;
assign babi_reg[31:0] = 32'b0;

assign bamc_reg[7:0] = 8'b0;
assign bamd_reg[7:0] = 8'b0;
assign bame_reg[7:0] = 8'b0;
assign bamf_reg[7:0] = 8'b0;
assign bamg_reg[7:0] = 8'b0;
assign bamh_reg[7:0] = 8'b0;
assign bami_reg[7:0] = 8'b0;

assign mbir_reg[3:0]  = 4'b0;
assign mbee_reg[31:0] = 32'b0;
assign mbse_reg[31:0] = 32'b0;







assign prof_cnt_en        = 1'b0;
assign prof_cnt_reg[31:0] = 32'b0;

assign dbg_ctrl_reg[31:0] = {31'b0, prof_cnt_en};




assign had_iu_force_dbg_en = 1'b0;
assign force_reg[31:0] = 32'b0;




assign hacr_indx_bsel_sel_rd      = hacr_indx_bsel_sel   && !tcipif_reg_sel;
assign hacr_indx_id_sel_rd        = hacr_indx_id_sel     && !tcipif_reg_sel;
assign hacr_indx_tc_sel_rd        = 1'b0;
assign hacr_indx_hsr_sel_rd       = hacr_indx_hsr_sel    && !tcipif_reg_sel;
assign hacr_indx_wbbr_sel_rd      = hacr_indx_wbbr_sel   && !tcipif_reg_sel;
assign hacr_indx_csr_sel_rd       = hacr_indx_csr_sel    && !tcipif_reg_sel;
assign hacr_indx_daddr_sel_rd     = hacr_indx_daddr_sel  && !tcipif_reg_sel;
assign hacr_indx_ddata_sel_rd     = hacr_indx_ddata_sel  && !tcipif_reg_sel;
assign hacr_indx_sysrsv_sel_rd    = hacr_indx_sysrsv_sel && !tcipif_reg_sel;

assign hacr_indx_psr_sel_rd       = hacr_indx_psr_sel
                                && !tcipif_reg_sel;

assign hacr_indx_pc_sel_rd        = hacr_indx_pc_sel
                                && !tcipif_reg_sel;

assign hacr_indx_hsr2_sel_rd      = hacr_indx_hsr2_sel
                                && !tcipif_reg_sel;
assign hacr_indx_dder_sel_rd      = 1'b0;

  assign hacr_indx_hcr_sel_rd     = hacr_indx_hcr_sel && !tcipif_reg_sel;

assign hacr_indx_mbca_sel_rd      = 1'b0;
assign hacr_indx_mbcb_sel_rd      = 1'b0;
assign hacr_indx_bamc_sel_rd      = 1'b0;
assign hacr_indx_bamd_sel_rd      = 1'b0;
assign hacr_indx_bame_sel_rd      = 1'b0;
assign hacr_indx_bamf_sel_rd      = 1'b0;
assign hacr_indx_bamg_sel_rd      = 1'b0;
assign hacr_indx_bamh_sel_rd      = 1'b0;
assign hacr_indx_bami_sel_rd      = 1'b0;
assign hacr_indx_baba_sel_rd      = hacr_indx_baba_sel && !tcipif_reg_sel;
assign hacr_indx_bama_sel_rd      = hacr_indx_bama_sel && !tcipif_reg_sel;
assign hacr_indx_babb_sel_rd      = hacr_indx_babb_sel && !tcipif_reg_sel;
assign hacr_indx_bamb_sel_rd      = hacr_indx_bamb_sel && !tcipif_reg_sel;
assign hacr_indx_babc_sel_rd      = hacr_indx_babc_sel && !tcipif_reg_sel;
assign hacr_indx_babd_sel_rd      = hacr_indx_babd_sel && !tcipif_reg_sel;
assign hacr_indx_babe_sel_rd      = hacr_indx_babe_sel && !tcipif_reg_sel;
assign hacr_indx_babf_sel_rd      = hacr_indx_babf_sel && !tcipif_reg_sel;
assign hacr_indx_babg_sel_rd      = hacr_indx_babg_sel && !tcipif_reg_sel;
assign hacr_indx_babh_sel_rd      = hacr_indx_babh_sel && !tcipif_reg_sel;
assign hacr_indx_babi_sel_rd      = hacr_indx_babi_sel && !tcipif_reg_sel;

assign hacr_indx_dacsr_sel_rd     = hacr_indx_dacsr_sel && !tcipif_reg_sel;
assign hacr_indx_datr_sel_rd      = hacr_indx_datr_sel  && !tcipif_reg_sel;
assign hacr_indx_darwr_sel_rd     = hacr_indx_darwr_sel && !tcipif_reg_sel
                                 && secure_mode_match_jtag;

assign hacr_indx_mbir_sel_rd      = hacr_indx_mbir_sel;
assign hacr_indx_mbee_sel_rd      = hacr_indx_mbee_sel;
assign hacr_indx_mbse_sel_rd      = hacr_indx_mbse_sel;

assign hacr_indx_dbg_ctrl_sel_rd  = hacr_indx_dbg_ctrl_sel  && !tcipif_reg_sel;
assign hacr_indx_prof_cnt_sel_rd  = hacr_indx_prof_cnt_sel  && !tcipif_reg_sel;
assign hacr_indx_force_reg_sel_rd = hacr_indx_force_reg_sel && !tcipif_reg_sel;


assign dder_rd_val[31:0]  = tcipif_reg_sel ? ddera_reg[31:0] : dderb_reg[31:0];
assign dacsr_rd_val[31:0] = {dacsr_reg[31:11], sec_bit_jtag, dacsr_reg[9:0]};

always @( * )
begin
  case (1'b1)
    hacr_indx_bsel_sel_rd :
      regs_rdata[31:0] = {30'b0, bsel_val[1:0]};

    hacr_indx_id_sel_rd :
      regs_rdata[31:0] = id_reg[31:0];
    hacr_indx_tc_sel_rd :
      regs_rdata[31:0] = 32'b0;
    hacr_indx_mbca_sel_rd :
      regs_rdata[31:0] = 32'b0;
    hacr_indx_baba_sel_rd :
      regs_rdata[31:0] = baba_reg[31:0];
    hacr_indx_bama_sel_rd :
      regs_rdata[31:0] = {24'b0, bama_reg[7:0]};
    hacr_indx_hcr_sel_rd :
      regs_rdata[31:0] = hcr_reg[31:0];
    hacr_indx_hsr_sel_rd :
      regs_rdata[31:0] = {16'b0, hsr_reg[15:0]};
    hacr_indx_hsr2_sel_rd :
      regs_rdata[31:0] = hsr2_reg[31:0];
    hacr_indx_wbbr_sel_rd :
      regs_rdata[31:0] = wbbr_reg[31:0];
    hacr_indx_psr_sel_rd :
      regs_rdata[31:0] = psr_reg[31:0];
    hacr_indx_pc_sel_rd :
      regs_rdata[31:0] = pc_reg[31:0];
    hacr_indx_csr_sel_rd :
      regs_rdata[31:0] = {16'b0, csr_reg[15:0]};
    hacr_indx_dder_sel_rd :
      regs_rdata[31:0] = dder_rd_val[31:0];
    hacr_indx_daddr_sel_rd :
      regs_rdata[31:0] = wbbr_reg[31:0];
    hacr_indx_ddata_sel_rd :
      regs_rdata[31:0] = wbbr_reg[31:0];
    hacr_indx_sysrsv_sel_rd :
      regs_rdata[31:0] = id_reg[31:0];
    hacr_indx_mbcb_sel_rd :
      regs_rdata[31:0] = 32'b0;
    hacr_indx_babb_sel_rd:
      regs_rdata[31:0] = babb_reg[31:0];
    hacr_indx_bamb_sel_rd:
      regs_rdata[31:0] = {24'b0, bamb_reg[7:0]};

    hacr_indx_babc_sel_rd :
      regs_rdata[31:0] = babc_reg[31:0];
    hacr_indx_bamc_sel_rd :
      regs_rdata[31:0] = {24'b0, bamc_reg[7:0]};
    hacr_indx_babd_sel_rd :
      regs_rdata[31:0] = babd_reg[31:0];
    hacr_indx_bamd_sel_rd :
      regs_rdata[31:0] = {24'b0, bamd_reg[7:0]};
    hacr_indx_babe_sel_rd :
      regs_rdata[31:0] = babe_reg[31:0];
    hacr_indx_bame_sel_rd :
      regs_rdata[31:0] = {24'b0, bame_reg[7:0]};
    hacr_indx_babf_sel_rd :
      regs_rdata[31:0] = babf_reg[31:0];
    hacr_indx_bamf_sel_rd :
      regs_rdata[31:0] = {24'b0, bamf_reg[7:0]};
    hacr_indx_babg_sel_rd :
      regs_rdata[31:0] = babg_reg[31:0];
    hacr_indx_bamg_sel_rd :
      regs_rdata[31:0] = {24'b0, bamg_reg[7:0]};
    hacr_indx_babh_sel_rd :
      regs_rdata[31:0] = babh_reg[31:0];
    hacr_indx_bamh_sel_rd :
      regs_rdata[31:0] = {24'b0, bamh_reg[7:0]};
    hacr_indx_babi_sel_rd :
      regs_rdata[31:0] = babi_reg[31:0];
    hacr_indx_bami_sel_rd :
      regs_rdata[31:0] = {24'b0, bami_reg[7:0]};
    hacr_indx_dacsr_sel_rd :
      regs_rdata[31:0] = dacsr_rd_val[31:0];
    hacr_indx_datr_sel_rd :
      regs_rdata[31:0] = datr_reg[31:0];
    hacr_indx_darwr_sel_rd :
      regs_rdata[31:0] = darwr_reg[31:0];
    hacr_indx_mbir_sel_rd :
      regs_rdata[31:0] = {28'b0, mbir_reg[3:0]};
    hacr_indx_mbee_sel_rd :
      regs_rdata[31:0] = mbee_reg[31:0];
    hacr_indx_mbse_sel_rd :
      regs_rdata[31:0] = mbse_reg[31:0];

    hacr_indx_dbg_ctrl_sel_rd :
      regs_rdata[31:0] = dbg_ctrl_reg[31:0];
    hacr_indx_prof_cnt_sel_rd :
      regs_rdata[31:0] = prof_cnt_reg[31:0];
    hacr_indx_force_reg_sel_rd :
      regs_rdata[31:0] = force_reg[31:0];
    default :
      regs_rdata[31:0] = 32'b0;
  endcase
end







assign had_ifu_ir[31:0] = ddc_regs_update_ir ? ddc_regs_ir[31:0]
                                             : jtag_xx_data[31:0];
assign had_ifu_ir_vld   =
  ((jtag_xx_update_dr && hacr_indx_ir_sel && hacr_go && !hacr_ex) ||
  (ddc_regs_update_ir && hcr_ddcen)) && iu_yy_xx_dbgon;


assign had_iu_pc[30:0] = pc_reg[31:1];
assign had_iu_xx_fdb   = fdb;
                                                                                                    

assign had_idu_wbbr_data[31:0] = wbbr_reg[31:0];
assign had_idu_wbbr_vld        = ffy && iu_yy_xx_dbgon;


assign had_cp0_psr_data[31:0] = psr_reg[31:0];


assign had_tcipif_cmplt       = tcipif_had_sel;
assign had_tcipif_rdata[31:0] = 32'b0;




assign regs_jtag_data[31:0]  = regs_rdata[31:0];
assign regs_jtag_hacr_rw     = hacr_rw;
assign regs_jtag_reg8_sel    = hacr_indx_mbca_sel ||
                               hacr_indx_mbcb_sel ||
                               hacr_indx_bama_sel ||
                               hacr_indx_bamb_sel ||
                               hacr_indx_tc_sel   ||
                               hacr_indx_bamc_sel ||
                               hacr_indx_bamd_sel ||
                               hacr_indx_bame_sel ||
                               hacr_indx_bamf_sel ||
                               hacr_indx_bamg_sel ||
                               hacr_indx_bamh_sel ||
                               hacr_indx_bami_sel;

assign regs_jtag_reg16_sel   = hacr_indx_hsr_sel ||
                               hacr_indx_csr_sel;

assign regs_ctrl_hacr_go     = hacr_go;
assign regs_ctrl_hacr_ex     = hacr_ex;
assign regs_ctrl_dr          = hcr_dr;
assign regs_ctrl_adr         = hcr_adr;
assign regs_ctrl_exit_sel    = hacr_indx_pc_sel    ||
                               hacr_indx_ir_sel    ||
                               hacr_indx_wbbr_sel  ||
                               hacr_indx_psr_sel   ||
                               hacr_indx_csr_sel   ||
                               hacr_indx_bypass_sel;


assign regs_ddc_daddr_sel    = hacr_indx_daddr_sel;
assign regs_ddc_ddata_sel    = hacr_indx_ddata_sel;
assign regs_xx_ddc_en        = hcr_ddcen;


assign regs_trace_en         = hcr_tme;

assign regs_pin_pm[1:0]      = pm[1:0];

assign regs_bkpta_base[31:0] = baba_reg[31:0];
assign regs_bkpta_mask[7:0]  = bama_reg[7:0];
assign regs_bkpta_ctrl[2:0]  = hcr_bca[2:0];



assign regs_bkptb_base[31:0] = babb_reg[31:0];
assign regs_bkptb_mask[7:0]  = bamb_reg[7:0];
assign regs_bkptb_ctrl[2:0]  = hcr_bcb[2:0];



assign regs_bkptc_base[31:0] = babc_reg[31:0];

assign regs_bkptc_en         = hcr_bxen[0];

assign regs_bkptd_base[31:0] = babd_reg[31:0];

assign regs_bkptd_en         = hcr_bxen[1];

assign regs_bkpte_base[31:0] = babe_reg[31:0];

assign regs_bkpte_en         = hcr_bxen[2];


assign regs_ctrl_mbee[8:0]   = mbee_reg[8:0];


endmodule



























module nm_had_sync(
  clk1,
  clk2,
  rst1_b,
  rst2_b,
  sync_in,
  sync_out
);


input        clk1;         
input        clk2;         
input        rst1_b;       
input        rst2_b;       
input        sync_in;      
output       sync_out;     


reg          sync_ff1_clk1; 
reg          sync_ff2_clk1; 
reg          sync_ff3_clk1; 
reg          sync_ff_clk2; 


wire         clk1;         
wire         clk2;         
wire         rst1_b;       
wire         rst2_b;       
wire         sync_in;      
wire         sync_out;     










always @(posedge clk2 or negedge rst2_b)
begin
  if (!rst2_b)
    sync_ff_clk2 <= 1'b0;
  else
    sync_ff_clk2 <= sync_in;
end

always @(posedge clk1 or negedge rst1_b)
begin
  if (!rst1_b) begin
    sync_ff1_clk1 <= 1'b0;
    sync_ff2_clk1 <= 1'b0;
  end
  else begin
    sync_ff1_clk1 <= sync_ff_clk2;
    sync_ff2_clk1 <= sync_ff1_clk1;
  end   
end


always @(posedge clk1 or negedge rst1_b)
begin
  if (!rst1_b)
    sync_ff3_clk1 <= 1'b0;
  else
    sync_ff3_clk1 <= sync_ff2_clk1;
end

assign sync_out = !sync_ff3_clk1 && sync_ff2_clk1;


endmodule


























module nm_had_top(
  cp0_had_cpuid_idx0,
  cp0_had_lpmd_b,
  cp0_had_psr_data,
  cp0_had_spsr_data,
  forever_cpuclk_nogated,
  had_core_dbg_mode_req,
  had_cp0_psr_data,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_ifu_inst_bkpt_dbq_req,
  had_ifu_inst_bkpt_dbqexp_req,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_iu_bkpt_trace_en,
  had_iu_dr_set_req,
  had_iu_flush_mbee,
  had_iu_force_dbg_en,
  had_iu_int_vld,
  had_iu_mbkpt_fsm_index_mbee,
  had_iu_mem_bkpt_exp_req,
  had_iu_mem_bkpt_mask,
  had_iu_mem_bkpt_req,
  had_iu_pc,
  had_iu_rte_pc_sel,
  had_iu_trace_req,
  had_iu_trace_req_for_dbg_disable,
  had_iu_xx_fdb,
  had_iu_xx_jdbreq,
  had_pad_jdb_pm,
  had_pad_jtg_tms_o,
  had_pad_jtg_tms_oe,
  had_tcipif_cmplt,
  had_tcipif_rdata,
  had_yy_xx_dbg,
  had_yy_xx_dp_index_mbee,
  had_yy_xx_exit_dbg,
  hadrst_b,
  ifu_had_chg_flw_inst,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  iu_had_adr_dbg_ack,
  iu_had_data_bkpt_occur_vld,
  iu_had_dbg_disable_for_tee,
  iu_had_dr_dbg_ack,
  iu_had_expt_vld,
  iu_had_fast_retire_acc_err_pc_update,
  iu_had_fast_retire_acc_err_pc_val,
  iu_had_flush,
  iu_had_inst_bkpt_occur_vld,
  iu_had_int_ack,
  iu_had_retire_with_had_int,
  iu_had_trace_occur_vld,
  iu_had_xx_bkpt_inst,
  iu_had_xx_data,
  iu_had_xx_data_vld,
  iu_had_xx_dbg_ack,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_had_xx_retire_pc,
  iu_yy_xx_dbgon,
  lsu_had_addr,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  lsu_had_st,
  pad_had_jtg_tms_i,
  pad_yy_gate_clk_en_b,
  sysio_had_sdb_req_b,
  tcipif_had_addr,
  tcipif_had_sel,
  tcipif_had_wdata,
  tcipif_had_write,
  tclk,
  trst_b
);


input   [31:0]  cp0_had_cpuid_idx0;                  
input   [1 :0]  cp0_had_lpmd_b;                      
input   [31:0]  cp0_had_psr_data;                    
input   [31:0]  cp0_had_spsr_data;                   
input           forever_cpuclk_nogated;              
input           hadrst_b;                            
input           ifu_had_chg_flw_inst;                
input           ifu_had_fetch_expt_vld;              
input           ifu_had_inst_dbg_disable;            
input   [31:0]  ifu_had_match_pc;                    
input           ifu_had_split_first;                 
input           iu_had_adr_dbg_ack;                  
input           iu_had_data_bkpt_occur_vld;          
input           iu_had_dbg_disable_for_tee;          
input           iu_had_dr_dbg_ack;                   
input           iu_had_expt_vld;                     
input           iu_had_fast_retire_acc_err_pc_update; 
input   [30:0]  iu_had_fast_retire_acc_err_pc_val;   
input           iu_had_flush;                        
input           iu_had_inst_bkpt_occur_vld;          
input           iu_had_int_ack;                      
input           iu_had_retire_with_had_int;          
input           iu_had_trace_occur_vld;              
input           iu_had_xx_bkpt_inst;                 
input   [31:0]  iu_had_xx_data;                      
input           iu_had_xx_data_vld;                  
input           iu_had_xx_dbg_ack;                   
input           iu_had_xx_mldst;                     
input           iu_had_xx_retire;                    
input           iu_had_xx_retire_normal;             
input   [31:0]  iu_had_xx_retire_pc;                 
input           iu_yy_xx_dbgon;                      
input   [31:0]  lsu_had_addr;                        
input           lsu_had_addr_vld;                    
input           lsu_had_ex_cmplt;                    
input           lsu_had_st;                          
input           pad_had_jtg_tms_i;                   
input           pad_yy_gate_clk_en_b;                
input           sysio_had_sdb_req_b;                 
input   [15:0]  tcipif_had_addr;                     
input           tcipif_had_sel;                      
input   [31:0]  tcipif_had_wdata;                    
input           tcipif_had_write;                    
input           tclk;                                
input           trst_b;                              
output          had_core_dbg_mode_req;               
output  [31:0]  had_cp0_psr_data;                    
output  [31:0]  had_idu_wbbr_data;                   
output          had_idu_wbbr_vld;                    
output          had_ifu_inst_bkpt_dbq_req;           
output          had_ifu_inst_bkpt_dbqexp_req;        
output  [31:0]  had_ifu_ir;                          
output          had_ifu_ir_vld;                      
output          had_iu_bkpt_trace_en;                
output          had_iu_dr_set_req;                   
output          had_iu_flush_mbee;                   
output          had_iu_force_dbg_en;                 
output          had_iu_int_vld;                      
output          had_iu_mbkpt_fsm_index_mbee;         
output          had_iu_mem_bkpt_exp_req;             
output          had_iu_mem_bkpt_mask;                
output          had_iu_mem_bkpt_req;                 
output  [30:0]  had_iu_pc;                           
output          had_iu_rte_pc_sel;                   
output          had_iu_trace_req;                    
output          had_iu_trace_req_for_dbg_disable;    
output          had_iu_xx_fdb;                       
output          had_iu_xx_jdbreq;                    
output  [1 :0]  had_pad_jdb_pm;                      
output          had_pad_jtg_tms_o;                   
output          had_pad_jtg_tms_oe;                  
output          had_tcipif_cmplt;                    
output  [31:0]  had_tcipif_rdata;                    
output          had_yy_xx_dbg;                       
output          had_yy_xx_dp_index_mbee;             
output          had_yy_xx_exit_dbg;                  




wire            bkpta_ctrl_inst_fetch_dbq_req;       
wire            bkpta_ctrl_req;                      
wire            bkptb_ctrl_inst_fetch_dbq_req;       
wire            bkptb_ctrl_req;                      
wire            bkptc_ctrl_inst_fetch_dbq_req;       
wire            bkptc_ctrl_req;                      
wire            bkptd_ctrl_inst_fetch_dbq_req;       
wire            bkptd_ctrl_req;                      
wire            bkpte_ctrl_inst_fetch_dbq_req;       
wire            bkpte_ctrl_req;                      
wire    [31:0]  cp0_had_cpuid_idx0;                  
wire    [1 :0]  cp0_had_lpmd_b;                      
wire    [31:0]  cp0_had_psr_data;                    
wire    [31:0]  cp0_had_spsr_data;                   
wire            cpuclk;                              
wire            ctrl_regs_exit_dbg;                  
wire            ctrl_regs_update_adro;               
wire            ctrl_regs_update_dro;                
wire            ctrl_regs_update_mbo;                
wire            ctrl_regs_update_swo;                
wire            ctrl_regs_update_to;                 
wire            ddc_regs_ffy;                        
wire    [31:0]  ddc_regs_ir;                         
wire            ddc_regs_update_csr;                 
wire            ddc_regs_update_ir;                  
wire            forever_cpuclk_nogated;              
wire            had_clk_en;                          
wire            had_core_dbg_mode_req;               
wire    [31:0]  had_cp0_psr_data;                    
wire    [31:0]  had_idu_wbbr_data;                   
wire            had_idu_wbbr_vld;                    
wire            had_ifu_inst_bkpt_dbq_req;           
wire            had_ifu_inst_bkpt_dbqexp_req;        
wire    [31:0]  had_ifu_ir;                          
wire            had_ifu_ir_vld;                      
wire            had_iu_bkpt_trace_en;                
wire            had_iu_dr_set_req;                   
wire            had_iu_flush_mbee;                   
wire            had_iu_force_dbg_en;                 
wire            had_iu_int_vld;                      
wire            had_iu_mbkpt_fsm_index_mbee;         
wire            had_iu_mem_bkpt_exp_req;             
wire            had_iu_mem_bkpt_mask;                
wire            had_iu_mem_bkpt_req;                 
wire    [30:0]  had_iu_pc;                           
wire            had_iu_rte_pc_sel;                   
wire            had_iu_trace_req;                    
wire            had_iu_trace_req_for_dbg_disable;    
wire            had_iu_xx_fdb;                       
wire            had_iu_xx_jdbreq;                    
wire    [1 :0]  had_pad_jdb_pm;                      
wire            had_pad_jtg_tms_o;                   
wire            had_pad_jtg_tms_oe;                  
wire            had_tcipif_cmplt;                    
wire    [31:0]  had_tcipif_rdata;                    
wire            had_yy_xx_dbg;                       
wire            had_yy_xx_dp_index_mbee;             
wire            had_yy_xx_exit_dbg;                  
wire            hadrst_b;                            
wire            ifu_had_chg_flw_inst;                
wire            ifu_had_fetch_expt_vld;              
wire            ifu_had_inst_dbg_disable;            
wire    [31:0]  ifu_had_match_pc;                    
wire            ifu_had_split_first;                 
wire            iu_had_adr_dbg_ack;                  
wire            iu_had_data_bkpt_occur_vld;          
wire            iu_had_dbg_disable_for_tee;          
wire            iu_had_dr_dbg_ack;                   
wire            iu_had_expt_vld;                     
wire            iu_had_fast_retire_acc_err_pc_update; 
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;   
wire            iu_had_flush;                        
wire            iu_had_inst_bkpt_occur_vld;          
wire            iu_had_int_ack;                      
wire            iu_had_retire_with_had_int;          
wire            iu_had_trace_occur_vld;              
wire            iu_had_xx_bkpt_inst;                 
wire    [31:0]  iu_had_xx_data;                      
wire            iu_had_xx_data_vld;                  
wire            iu_had_xx_dbg_ack;                   
wire            iu_had_xx_mldst;                     
wire            iu_had_xx_retire;                    
wire            iu_had_xx_retire_normal;             
wire    [31:0]  iu_had_xx_retire_pc;                 
wire            iu_yy_xx_dbgon;                      
wire            jtag2_pin_tms_o;                     
wire            jtag2_pin_tms_oe;                    
wire            jtag_regs_srst;                      
wire            jtag_regs_update_hacr;               
wire    [31:0]  jtag_xx_data;                        
wire            jtag_xx_update_dr;                   
wire    [31:0]  lsu_had_addr;                        
wire            lsu_had_addr_vld;                    
wire            lsu_had_ex_cmplt;                    
wire            lsu_had_st;                          
wire            pad_had_jtg_tms_i;                   
wire            pad_yy_gate_clk_en_b;                
wire            pin_ctrl_jdb_req;                    
wire            pin_sm_tap_en;                       
wire            pin_xx_tms_i;                        
wire    [31:0]  regs_bkpta_base;                     
wire            regs_bkpta_bkpti_en;                 
wire    [2 :0]  regs_bkpta_ctrl;                     
wire    [7 :0]  regs_bkpta_mask;                     
wire    [31:0]  regs_bkptb_base;                     
wire    [2 :0]  regs_bkptb_ctrl;                     
wire    [7 :0]  regs_bkptb_mask;                     
wire    [31:0]  regs_bkptc_base;                     
wire            regs_bkptc_en;                       
wire    [31:0]  regs_bkptd_base;                     
wire            regs_bkptd_en;                       
wire    [31:0]  regs_bkpte_base;                     
wire            regs_bkpte_en;                       
wire            regs_ctrl_adr;                       
wire            regs_ctrl_dr;                        
wire            regs_ctrl_exit_sel;                  
wire            regs_ctrl_hacr_ex;                   
wire            regs_ctrl_hacr_go;                   
wire            regs_ctrl_had_int_on;                
wire    [8 :0]  regs_ctrl_mbee;                      
wire            regs_ddc_daddr_sel;                  
wire            regs_ddc_ddata_sel;                  
wire    [31:0]  regs_jtag_data;                      
wire            regs_jtag_hacr_rw;                   
wire            regs_jtag_reg16_sel;                 
wire            regs_jtag_reg8_sel;                  
wire    [1 :0]  regs_pin_pm;                         
wire            regs_trace_en;                       
wire            regs_xx_ddc_en;                      
wire            sm_xx_tap_on;                        
wire            sysio_had_sdb_req_b;                 
wire    [15:0]  tcipif_had_addr;                     
wire            tcipif_had_sel;                      
wire    [31:0]  tcipif_had_wdata;                    
wire            tcipif_had_write;                    
wire            tclk;                                
wire            trace_ctrl_req;                      
wire            trace_ctrl_req_for_dbg_disable;      
wire            trst_b;                              



gated_clk_cell  x_nm_had_gated_clk (
  .clk_in                 (forever_cpuclk_nogated),
  .clk_out                (cpuclk                ),
  .external_en            (1'b0                  ),
  .global_en              (1'b1                  ),
  .local_en               (1'b0                  ),
  .module_en              (had_clk_en            ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  )
);








assign had_clk_en = sm_xx_tap_on || tcipif_had_sel;



nm_had_bkpt  x_nm_had_bkpta (
  .bkpt_ctrl_inst_fetch_dbq_req  (bkpta_ctrl_inst_fetch_dbq_req),
  .bkpt_ctrl_req                 (bkpta_ctrl_req               ),
  .cpuclk                        (cpuclk                       ),
  .had_core_dbg_mode_req         (had_core_dbg_mode_req        ),
  .hadrst_b                      (hadrst_b                     ),
  .ifu_had_chg_flw_inst          (ifu_had_chg_flw_inst         ),
  .ifu_had_fetch_expt_vld        (ifu_had_fetch_expt_vld       ),
  .ifu_had_inst_dbg_disable      (ifu_had_inst_dbg_disable     ),
  .ifu_had_match_pc              (ifu_had_match_pc             ),
  .ifu_had_split_first           (ifu_had_split_first          ),
  .iu_had_expt_vld               (iu_had_expt_vld              ),
  .iu_had_flush                  (iu_had_flush                 ),
  .iu_had_xx_mldst               (iu_had_xx_mldst              ),
  .iu_had_xx_retire              (iu_had_xx_retire             ),
  .iu_had_xx_retire_normal       (iu_had_xx_retire_normal      ),
  .iu_yy_xx_dbgon                (iu_yy_xx_dbgon               ),
  .lsu_had_addr                  (lsu_had_addr                 ),
  .lsu_had_addr_vld              (lsu_had_addr_vld             ),
  .lsu_had_ex_cmplt              (lsu_had_ex_cmplt             ),
  .lsu_had_st                    (lsu_had_st                   ),
  .regs_bkpt_base                (regs_bkpta_base              ),
  .regs_bkpt_ctrl                (regs_bkpta_ctrl              ),
  .regs_bkpt_mask                (regs_bkpta_mask              )
);




nm_had_bkpt  x_nm_had_bkptb (
  .bkpt_ctrl_inst_fetch_dbq_req  (bkptb_ctrl_inst_fetch_dbq_req),
  .bkpt_ctrl_req                 (bkptb_ctrl_req               ),
  .cpuclk                        (cpuclk                       ),
  .had_core_dbg_mode_req         (had_core_dbg_mode_req        ),
  .hadrst_b                      (hadrst_b                     ),
  .ifu_had_chg_flw_inst          (ifu_had_chg_flw_inst         ),
  .ifu_had_fetch_expt_vld        (ifu_had_fetch_expt_vld       ),
  .ifu_had_inst_dbg_disable      (ifu_had_inst_dbg_disable     ),
  .ifu_had_match_pc              (ifu_had_match_pc             ),
  .ifu_had_split_first           (ifu_had_split_first          ),
  .iu_had_expt_vld               (iu_had_expt_vld              ),
  .iu_had_flush                  (iu_had_flush                 ),
  .iu_had_xx_mldst               (iu_had_xx_mldst              ),
  .iu_had_xx_retire              (iu_had_xx_retire             ),
  .iu_had_xx_retire_normal       (iu_had_xx_retire_normal      ),
  .iu_yy_xx_dbgon                (iu_yy_xx_dbgon               ),
  .lsu_had_addr                  (lsu_had_addr                 ),
  .lsu_had_addr_vld              (lsu_had_addr_vld             ),
  .lsu_had_ex_cmplt              (lsu_had_ex_cmplt             ),
  .lsu_had_st                    (lsu_had_st                   ),
  .regs_bkpt_base                (regs_bkptb_base              ),
  .regs_bkpt_ctrl                (regs_bkptb_ctrl              ),
  .regs_bkpt_mask                (regs_bkptb_mask              )
);




nm_had_bkpt_lite  x_nm_had_bkptc (
  .bkpt_ctrl_inst_fetch_dbq_req  (bkptc_ctrl_inst_fetch_dbq_req),
  .bkpt_ctrl_req                 (bkptc_ctrl_req               ),
  .cpuclk                        (cpuclk                       ),
  .had_core_dbg_mode_req         (had_core_dbg_mode_req        ),
  .hadrst_b                      (hadrst_b                     ),
  .ifu_had_fetch_expt_vld        (ifu_had_fetch_expt_vld       ),
  .ifu_had_inst_dbg_disable      (ifu_had_inst_dbg_disable     ),
  .ifu_had_match_pc              (ifu_had_match_pc             ),
  .ifu_had_split_first           (ifu_had_split_first          ),
  .iu_had_expt_vld               (iu_had_expt_vld              ),
  .iu_had_flush                  (iu_had_flush                 ),
  .iu_had_xx_mldst               (iu_had_xx_mldst              ),
  .iu_had_xx_retire              (iu_had_xx_retire             ),
  .iu_had_xx_retire_normal       (iu_had_xx_retire_normal      ),
  .iu_yy_xx_dbgon                (iu_yy_xx_dbgon               ),
  .lsu_had_addr                  (lsu_had_addr                 ),
  .lsu_had_addr_vld              (lsu_had_addr_vld             ),
  .lsu_had_ex_cmplt              (lsu_had_ex_cmplt             ),
  .regs_bkpt_base                (regs_bkptc_base              ),
  .regs_bkpt_en                  (regs_bkptc_en                )
);




nm_had_bkpt_lite  x_nm_had_bkptd (
  .bkpt_ctrl_inst_fetch_dbq_req  (bkptd_ctrl_inst_fetch_dbq_req),
  .bkpt_ctrl_req                 (bkptd_ctrl_req               ),
  .cpuclk                        (cpuclk                       ),
  .had_core_dbg_mode_req         (had_core_dbg_mode_req        ),
  .hadrst_b                      (hadrst_b                     ),
  .ifu_had_fetch_expt_vld        (ifu_had_fetch_expt_vld       ),
  .ifu_had_inst_dbg_disable      (ifu_had_inst_dbg_disable     ),
  .ifu_had_match_pc              (ifu_had_match_pc             ),
  .ifu_had_split_first           (ifu_had_split_first          ),
  .iu_had_expt_vld               (iu_had_expt_vld              ),
  .iu_had_flush                  (iu_had_flush                 ),
  .iu_had_xx_mldst               (iu_had_xx_mldst              ),
  .iu_had_xx_retire              (iu_had_xx_retire             ),
  .iu_had_xx_retire_normal       (iu_had_xx_retire_normal      ),
  .iu_yy_xx_dbgon                (iu_yy_xx_dbgon               ),
  .lsu_had_addr                  (lsu_had_addr                 ),
  .lsu_had_addr_vld              (lsu_had_addr_vld             ),
  .lsu_had_ex_cmplt              (lsu_had_ex_cmplt             ),
  .regs_bkpt_base                (regs_bkptd_base              ),
  .regs_bkpt_en                  (regs_bkptd_en                )
);




nm_had_bkpt_lite  x_nm_had_bkpte (
  .bkpt_ctrl_inst_fetch_dbq_req  (bkpte_ctrl_inst_fetch_dbq_req),
  .bkpt_ctrl_req                 (bkpte_ctrl_req               ),
  .cpuclk                        (cpuclk                       ),
  .had_core_dbg_mode_req         (had_core_dbg_mode_req        ),
  .hadrst_b                      (hadrst_b                     ),
  .ifu_had_fetch_expt_vld        (ifu_had_fetch_expt_vld       ),
  .ifu_had_inst_dbg_disable      (ifu_had_inst_dbg_disable     ),
  .ifu_had_match_pc              (ifu_had_match_pc             ),
  .ifu_had_split_first           (ifu_had_split_first          ),
  .iu_had_expt_vld               (iu_had_expt_vld              ),
  .iu_had_flush                  (iu_had_flush                 ),
  .iu_had_xx_mldst               (iu_had_xx_mldst              ),
  .iu_had_xx_retire              (iu_had_xx_retire             ),
  .iu_had_xx_retire_normal       (iu_had_xx_retire_normal      ),
  .iu_yy_xx_dbgon                (iu_yy_xx_dbgon               ),
  .lsu_had_addr                  (lsu_had_addr                 ),
  .lsu_had_addr_vld              (lsu_had_addr_vld             ),
  .lsu_had_ex_cmplt              (lsu_had_ex_cmplt             ),
  .regs_bkpt_base                (regs_bkpte_base              ),
  .regs_bkpt_en                  (regs_bkpte_en                )
);












nm_had_ctrl  x_nm_had_ctrl (
  .bkpta_ctrl_inst_fetch_dbq_req    (bkpta_ctrl_inst_fetch_dbq_req   ),
  .bkpta_ctrl_req                   (bkpta_ctrl_req                  ),
  .bkptb_ctrl_inst_fetch_dbq_req    (bkptb_ctrl_inst_fetch_dbq_req   ),
  .bkptb_ctrl_req                   (bkptb_ctrl_req                  ),
  .bkptc_ctrl_inst_fetch_dbq_req    (bkptc_ctrl_inst_fetch_dbq_req   ),
  .bkptc_ctrl_req                   (bkptc_ctrl_req                  ),
  .bkptd_ctrl_inst_fetch_dbq_req    (bkptd_ctrl_inst_fetch_dbq_req   ),
  .bkptd_ctrl_req                   (bkptd_ctrl_req                  ),
  .bkpte_ctrl_inst_fetch_dbq_req    (bkpte_ctrl_inst_fetch_dbq_req   ),
  .bkpte_ctrl_req                   (bkpte_ctrl_req                  ),
  .cpuclk                           (cpuclk                          ),
  .ctrl_regs_exit_dbg               (ctrl_regs_exit_dbg              ),
  .ctrl_regs_update_adro            (ctrl_regs_update_adro           ),
  .ctrl_regs_update_dro             (ctrl_regs_update_dro            ),
  .ctrl_regs_update_mbo             (ctrl_regs_update_mbo            ),
  .ctrl_regs_update_swo             (ctrl_regs_update_swo            ),
  .ctrl_regs_update_to              (ctrl_regs_update_to             ),
  .had_ifu_inst_bkpt_dbq_req        (had_ifu_inst_bkpt_dbq_req       ),
  .had_ifu_inst_bkpt_dbqexp_req     (had_ifu_inst_bkpt_dbqexp_req    ),
  .had_iu_bkpt_trace_en             (had_iu_bkpt_trace_en            ),
  .had_iu_dr_set_req                (had_iu_dr_set_req               ),
  .had_iu_flush_mbee                (had_iu_flush_mbee               ),
  .had_iu_mbkpt_fsm_index_mbee      (had_iu_mbkpt_fsm_index_mbee     ),
  .had_iu_mem_bkpt_exp_req          (had_iu_mem_bkpt_exp_req         ),
  .had_iu_mem_bkpt_mask             (had_iu_mem_bkpt_mask            ),
  .had_iu_mem_bkpt_req              (had_iu_mem_bkpt_req             ),
  .had_iu_trace_req                 (had_iu_trace_req                ),
  .had_iu_trace_req_for_dbg_disable (had_iu_trace_req_for_dbg_disable),
  .had_iu_xx_jdbreq                 (had_iu_xx_jdbreq                ),
  .had_yy_xx_dbg                    (had_yy_xx_dbg                   ),
  .had_yy_xx_dp_index_mbee          (had_yy_xx_dp_index_mbee         ),
  .had_yy_xx_exit_dbg               (had_yy_xx_exit_dbg              ),
  .hadrst_b                         (hadrst_b                        ),
  .iu_had_adr_dbg_ack               (iu_had_adr_dbg_ack              ),
  .iu_had_data_bkpt_occur_vld       (iu_had_data_bkpt_occur_vld      ),
  .iu_had_dbg_disable_for_tee       (iu_had_dbg_disable_for_tee      ),
  .iu_had_dr_dbg_ack                (iu_had_dr_dbg_ack               ),
  .iu_had_inst_bkpt_occur_vld       (iu_had_inst_bkpt_occur_vld      ),
  .iu_had_trace_occur_vld           (iu_had_trace_occur_vld          ),
  .iu_had_xx_bkpt_inst              (iu_had_xx_bkpt_inst             ),
  .iu_yy_xx_dbgon                   (iu_yy_xx_dbgon                  ),
  .jtag_xx_update_dr                (jtag_xx_update_dr               ),
  .pin_ctrl_jdb_req                 (pin_ctrl_jdb_req                ),
  .regs_bkpta_bkpti_en              (regs_bkpta_bkpti_en             ),
  .regs_ctrl_adr                    (regs_ctrl_adr                   ),
  .regs_ctrl_dr                     (regs_ctrl_dr                    ),
  .regs_ctrl_exit_sel               (regs_ctrl_exit_sel              ),
  .regs_ctrl_hacr_ex                (regs_ctrl_hacr_ex               ),
  .regs_ctrl_hacr_go                (regs_ctrl_hacr_go               ),
  .regs_ctrl_had_int_on             (regs_ctrl_had_int_on            ),
  .regs_ctrl_mbee                   (regs_ctrl_mbee                  ),
  .regs_trace_en                    (regs_trace_en                   ),
  .sysio_had_sdb_req_b              (sysio_had_sdb_req_b             ),
  .trace_ctrl_req                   (trace_ctrl_req                  ),
  .trace_ctrl_req_for_dbg_disable   (trace_ctrl_req_for_dbg_disable  )
);



nm_had_ddc  x_nm_had_ddc (
  .cpuclk              (cpuclk             ),
  .ddc_regs_ffy        (ddc_regs_ffy       ),
  .ddc_regs_ir         (ddc_regs_ir        ),
  .ddc_regs_update_csr (ddc_regs_update_csr),
  .ddc_regs_update_ir  (ddc_regs_update_ir ),
  .hadrst_b            (hadrst_b           ),
  .iu_had_xx_retire    (iu_had_xx_retire   ),
  .jtag_xx_update_dr   (jtag_xx_update_dr  ),
  .regs_ddc_daddr_sel  (regs_ddc_daddr_sel ),
  .regs_ddc_ddata_sel  (regs_ddc_ddata_sel ),
  .regs_xx_ddc_en      (regs_xx_ddc_en     )
);



nm_had_pin  x_nm_had_pin (
  .cpuclk             (cpuclk            ),
  .had_pad_jdb_pm     (had_pad_jdb_pm    ),
  .had_pad_jtg_tms_o  (had_pad_jtg_tms_o ),
  .had_pad_jtg_tms_oe (had_pad_jtg_tms_oe),
  .hadrst_b           (hadrst_b          ),
  .iu_yy_xx_dbgon     (iu_yy_xx_dbgon    ),
  .jtag2_pin_tms_o    (jtag2_pin_tms_o   ),
  .jtag2_pin_tms_oe   (jtag2_pin_tms_oe  ),
  .pad_had_jtg_tms_i  (pad_had_jtg_tms_i ),
  .pin_ctrl_jdb_req   (pin_ctrl_jdb_req  ),
  .pin_sm_tap_en      (pin_sm_tap_en     ),
  .pin_xx_tms_i       (pin_xx_tms_i      ),
  .regs_pin_pm        (regs_pin_pm       ),
  .tclk               (tclk              ),
  .trst_b             (trst_b            )
);



nm_had_regs  x_nm_had_regs (
  .cp0_had_cpuid_idx0                   (cp0_had_cpuid_idx0                  ),
  .cp0_had_lpmd_b                       (cp0_had_lpmd_b                      ),
  .cp0_had_psr_data                     (cp0_had_psr_data                    ),
  .cp0_had_spsr_data                    (cp0_had_spsr_data                   ),
  .cpuclk                               (cpuclk                              ),
  .ctrl_regs_exit_dbg                   (ctrl_regs_exit_dbg                  ),
  .ctrl_regs_update_adro                (ctrl_regs_update_adro               ),
  .ctrl_regs_update_dro                 (ctrl_regs_update_dro                ),
  .ctrl_regs_update_mbo                 (ctrl_regs_update_mbo                ),
  .ctrl_regs_update_swo                 (ctrl_regs_update_swo                ),
  .ctrl_regs_update_to                  (ctrl_regs_update_to                 ),
  .ddc_regs_ffy                         (ddc_regs_ffy                        ),
  .ddc_regs_ir                          (ddc_regs_ir                         ),
  .ddc_regs_update_csr                  (ddc_regs_update_csr                 ),
  .ddc_regs_update_ir                   (ddc_regs_update_ir                  ),
  .had_core_dbg_mode_req                (had_core_dbg_mode_req               ),
  .had_cp0_psr_data                     (had_cp0_psr_data                    ),
  .had_idu_wbbr_data                    (had_idu_wbbr_data                   ),
  .had_idu_wbbr_vld                     (had_idu_wbbr_vld                    ),
  .had_ifu_ir                           (had_ifu_ir                          ),
  .had_ifu_ir_vld                       (had_ifu_ir_vld                      ),
  .had_iu_force_dbg_en                  (had_iu_force_dbg_en                 ),
  .had_iu_int_vld                       (had_iu_int_vld                      ),
  .had_iu_pc                            (had_iu_pc                           ),
  .had_iu_rte_pc_sel                    (had_iu_rte_pc_sel                   ),
  .had_iu_xx_fdb                        (had_iu_xx_fdb                       ),
  .had_tcipif_cmplt                     (had_tcipif_cmplt                    ),
  .had_tcipif_rdata                     (had_tcipif_rdata                    ),
  .hadrst_b                             (hadrst_b                            ),
  .iu_had_fast_retire_acc_err_pc_update (iu_had_fast_retire_acc_err_pc_update),
  .iu_had_fast_retire_acc_err_pc_val    (iu_had_fast_retire_acc_err_pc_val   ),
  .iu_had_int_ack                       (iu_had_int_ack                      ),
  .iu_had_retire_with_had_int           (iu_had_retire_with_had_int          ),
  .iu_had_xx_data                       (iu_had_xx_data                      ),
  .iu_had_xx_data_vld                   (iu_had_xx_data_vld                  ),
  .iu_had_xx_dbg_ack                    (iu_had_xx_dbg_ack                   ),
  .iu_had_xx_retire_pc                  (iu_had_xx_retire_pc                 ),
  .iu_yy_xx_dbgon                       (iu_yy_xx_dbgon                      ),
  .jtag_regs_srst                       (jtag_regs_srst                      ),
  .jtag_regs_update_hacr                (jtag_regs_update_hacr               ),
  .jtag_xx_data                         (jtag_xx_data                        ),
  .jtag_xx_update_dr                    (jtag_xx_update_dr                   ),
  .regs_bkpta_base                      (regs_bkpta_base                     ),
  .regs_bkpta_bkpti_en                  (regs_bkpta_bkpti_en                 ),
  .regs_bkpta_ctrl                      (regs_bkpta_ctrl                     ),
  .regs_bkpta_mask                      (regs_bkpta_mask                     ),
  .regs_bkptb_base                      (regs_bkptb_base                     ),
  .regs_bkptb_ctrl                      (regs_bkptb_ctrl                     ),
  .regs_bkptb_mask                      (regs_bkptb_mask                     ),
  .regs_bkptc_base                      (regs_bkptc_base                     ),
  .regs_bkptc_en                        (regs_bkptc_en                       ),
  .regs_bkptd_base                      (regs_bkptd_base                     ),
  .regs_bkptd_en                        (regs_bkptd_en                       ),
  .regs_bkpte_base                      (regs_bkpte_base                     ),
  .regs_bkpte_en                        (regs_bkpte_en                       ),
  .regs_ctrl_adr                        (regs_ctrl_adr                       ),
  .regs_ctrl_dr                         (regs_ctrl_dr                        ),
  .regs_ctrl_exit_sel                   (regs_ctrl_exit_sel                  ),
  .regs_ctrl_hacr_ex                    (regs_ctrl_hacr_ex                   ),
  .regs_ctrl_hacr_go                    (regs_ctrl_hacr_go                   ),
  .regs_ctrl_had_int_on                 (regs_ctrl_had_int_on                ),
  .regs_ctrl_mbee                       (regs_ctrl_mbee                      ),
  .regs_ddc_daddr_sel                   (regs_ddc_daddr_sel                  ),
  .regs_ddc_ddata_sel                   (regs_ddc_ddata_sel                  ),
  .regs_jtag_data                       (regs_jtag_data                      ),
  .regs_jtag_hacr_rw                    (regs_jtag_hacr_rw                   ),
  .regs_jtag_reg16_sel                  (regs_jtag_reg16_sel                 ),
  .regs_jtag_reg8_sel                   (regs_jtag_reg8_sel                  ),
  .regs_pin_pm                          (regs_pin_pm                         ),
  .regs_trace_en                        (regs_trace_en                       ),
  .regs_xx_ddc_en                       (regs_xx_ddc_en                      ),
  .tcipif_had_addr                      (tcipif_had_addr                     ),
  .tcipif_had_sel                       (tcipif_had_sel                      ),
  .tcipif_had_wdata                     (tcipif_had_wdata                    ),
  .tcipif_had_write                     (tcipif_had_write                    )
);




nm_had_jtag2  x_nm_had_jtag2 (
  .cpuclk                 (cpuclk                ),
  .forever_cpuclk_nogated (forever_cpuclk_nogated),
  .hadrst_b               (hadrst_b              ),
  .jtag2_pin_tms_o        (jtag2_pin_tms_o       ),
  .jtag2_pin_tms_oe       (jtag2_pin_tms_oe      ),
  .jtag_regs_srst         (jtag_regs_srst        ),
  .jtag_regs_update_hacr  (jtag_regs_update_hacr ),
  .jtag_xx_data           (jtag_xx_data          ),
  .jtag_xx_update_dr      (jtag_xx_update_dr     ),
  .pin_sm_tap_en          (pin_sm_tap_en         ),
  .pin_xx_tms_i           (pin_xx_tms_i          ),
  .regs_jtag_data         (regs_jtag_data        ),
  .regs_jtag_hacr_rw      (regs_jtag_hacr_rw     ),
  .regs_jtag_reg16_sel    (regs_jtag_reg16_sel   ),
  .regs_jtag_reg8_sel     (regs_jtag_reg8_sel    ),
  .sm_xx_tap_on           (sm_xx_tap_on          ),
  .tclk                   (tclk                  ),
  .trst_b                 (trst_b                )
);




nm_had_trace  x_nm_had_trace (
  .had_core_dbg_mode_req          (had_core_dbg_mode_req         ),
  .iu_had_xx_mldst                (iu_had_xx_mldst               ),
  .iu_had_xx_retire               (iu_had_xx_retire              ),
  .iu_had_xx_retire_normal        (iu_had_xx_retire_normal       ),
  .iu_yy_xx_dbgon                 (iu_yy_xx_dbgon                ),
  .regs_trace_en                  (regs_trace_en                 ),
  .trace_ctrl_req                 (trace_ctrl_req                ),
  .trace_ctrl_req_for_dbg_disable (trace_ctrl_req_for_dbg_disable)
);



endmodule


























module nm_had_trace(
  had_core_dbg_mode_req,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_yy_xx_dbgon,
  regs_trace_en,
  trace_ctrl_req,
  trace_ctrl_req_for_dbg_disable
);


input        had_core_dbg_mode_req;         
input        iu_had_xx_mldst;               
input        iu_had_xx_retire;              
input        iu_had_xx_retire_normal;       
input        iu_yy_xx_dbgon;                
input        regs_trace_en;                 
output       trace_ctrl_req;                
output       trace_ctrl_req_for_dbg_disable; 




wire         had_core_dbg_mode_req;         
wire         iu_had_xx_mldst;               
wire         iu_had_xx_retire;              
wire         iu_had_xx_retire_normal;       
wire         iu_yy_xx_dbgon;                
wire         regs_trace_en;                 
wire         trace_counter_eq_0;            
wire         trace_ctrl_req;                
wire         trace_ctrl_req_for_dbg_disable; 
wire         trace_en;                      
wire         trace_vld;                     











assign trace_en  = !iu_yy_xx_dbgon
                && regs_trace_en
                && !had_core_dbg_mode_req;

assign trace_vld =    iu_had_xx_retire
                  && !iu_had_xx_mldst
                  && trace_en;





































assign trace_counter_eq_0 = 1'b1;







assign trace_ctrl_req = trace_vld && trace_counter_eq_0
                        && iu_had_xx_retire_normal;

assign trace_ctrl_req_for_dbg_disable = 1'b0;



endmodule

























module nm_iahbl_top(
  ahblif_idle,
  bmu_iahbl_dbus_acc_deny,
  bmu_iahbl_dbus_addr,
  bmu_iahbl_dbus_chk_fail,
  bmu_iahbl_dbus_prot,
  bmu_iahbl_dbus_req,
  bmu_iahbl_dbus_req_without_cmplt,
  bmu_iahbl_dbus_size,
  bmu_iahbl_dbus_wdata,
  bmu_iahbl_dbus_write,
  bmu_iahbl_ibus_acc_deny,
  bmu_iahbl_ibus_addr,
  bmu_iahbl_ibus_hit,
  bmu_iahbl_ibus_prot,
  bmu_iahbl_ibus_req,
  bmu_iahbl_ibus_req_no_hit,
  bmu_iahbl_ibus_size,
  bmu_iahbl_ibus_vec_redirect,
  cpurst_b,
  dahblif_other_mask,
  forever_cpuclk,
  iahbl_bmu_dbus_acc_err,
  iahbl_bmu_dbus_data,
  iahbl_bmu_dbus_data_vld,
  iahbl_bmu_dbus_grnt,
  iahbl_bmu_dbus_trans_cmplt,
  iahbl_bmu_ibus_acc_err,
  iahbl_bmu_ibus_data,
  iahbl_bmu_ibus_data_vld,
  iahbl_bmu_ibus_grnt,
  iahbl_bmu_ibus_trans_cmplt,
  iahbl_pad_haddr,
  iahbl_pad_hburst,
  iahbl_pad_hprot,
  iahbl_pad_hsize,
  iahbl_pad_htrans,
  iahbl_pad_hwdata,
  iahbl_pad_hwrite,
  iahblif_other_mask,
  pad_cpu_halt_ff2,
  pad_iahbl_hrdata,
  pad_iahbl_hready,
  pad_iahbl_hresp,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_bus_peak_power_limit_en,
  sahblif_iahblif_mask
);


input           bmu_iahbl_dbus_acc_deny;         
input   [31:0]  bmu_iahbl_dbus_addr;             
input           bmu_iahbl_dbus_chk_fail;         
input   [3 :0]  bmu_iahbl_dbus_prot;             
input           bmu_iahbl_dbus_req;              
input           bmu_iahbl_dbus_req_without_cmplt; 
input   [1 :0]  bmu_iahbl_dbus_size;             
input   [31:0]  bmu_iahbl_dbus_wdata;            
input           bmu_iahbl_dbus_write;            
input           bmu_iahbl_ibus_acc_deny;         
input   [31:0]  bmu_iahbl_ibus_addr;             
input           bmu_iahbl_ibus_hit;              
input   [3 :0]  bmu_iahbl_ibus_prot;             
input           bmu_iahbl_ibus_req;              
input           bmu_iahbl_ibus_req_no_hit;       
input   [1 :0]  bmu_iahbl_ibus_size;             
input           bmu_iahbl_ibus_vec_redirect;     
input           cpurst_b;                        
input           dahblif_other_mask;              
input           forever_cpuclk;                  
input           pad_cpu_halt_ff2;                
input   [31:0]  pad_iahbl_hrdata;                
input           pad_iahbl_hready;                
input           pad_iahbl_hresp;                 
input           pad_yy_gate_clk_en_b;            
input           pwrm_cpu_bus_peak_power_limit_en; 
input           sahblif_iahblif_mask;            
output          ahblif_idle;                     
output          iahbl_bmu_dbus_acc_err;          
output  [31:0]  iahbl_bmu_dbus_data;             
output          iahbl_bmu_dbus_data_vld;         
output          iahbl_bmu_dbus_grnt;             
output          iahbl_bmu_dbus_trans_cmplt;      
output          iahbl_bmu_ibus_acc_err;          
output  [31:0]  iahbl_bmu_ibus_data;             
output          iahbl_bmu_ibus_data_vld;         
output          iahbl_bmu_ibus_grnt;             
output          iahbl_bmu_ibus_trans_cmplt;      
output  [31:0]  iahbl_pad_haddr;                 
output  [2 :0]  iahbl_pad_hburst;                
output  [3 :0]  iahbl_pad_hprot;                 
output  [2 :0]  iahbl_pad_hsize;                 
output  [1 :0]  iahbl_pad_htrans;                
output  [31:0]  iahbl_pad_hwdata;                
output          iahbl_pad_hwrite;                
output          iahblif_other_mask;              




wire            ahbl_clk_en;                     
wire            ahbl_gated_clk;                  
wire            ahblif_busy;                     
wire            ahblif_idle;                     
wire            ahblif_power_mask;               
wire            bmu_iahbl_dbus_acc_deny;         
wire    [31:0]  bmu_iahbl_dbus_addr;             
wire            bmu_iahbl_dbus_chk_fail;         
wire    [3 :0]  bmu_iahbl_dbus_prot;             
wire            bmu_iahbl_dbus_req;              
wire            bmu_iahbl_dbus_req_without_cmplt; 
wire    [1 :0]  bmu_iahbl_dbus_size;             
wire    [31:0]  bmu_iahbl_dbus_wdata;            
wire            bmu_iahbl_dbus_write;            
wire            bmu_iahbl_ibus_acc_deny;         
wire    [31:0]  bmu_iahbl_ibus_addr;             
wire            bmu_iahbl_ibus_hit;              
wire    [3 :0]  bmu_iahbl_ibus_prot;             
wire            bmu_iahbl_ibus_req;              
wire            bmu_iahbl_ibus_req_no_hit;       
wire    [1 :0]  bmu_iahbl_ibus_size;             
wire            bmu_iahbl_ibus_vec_redirect;     
wire            cpu_acc_err;                     
wire    [31:0]  cpu_addr;                        
wire            cpu_data_vld;                    
wire    [3 :0]  cpu_prot;                        
wire    [31:0]  cpu_rdata;                       
wire            cpu_req;                         
wire            cpu_req_for_grnt;                
wire            cpu_req_for_peak_power;          
wire            cpu_req_grnt;                    
wire            cpu_req_power_masked;            
wire            cpu_sec;                         
wire    [1 :0]  cpu_size;                        
wire            cpu_trans_cmplt;                 
wire            cpu_vec_redirect;                
wire    [31:0]  cpu_wdata;                       
wire            cpu_wdata_sel;                   
wire    [31:0]  cpu_wr_data;                     
wire            cpu_write;                       
wire            cpurst_b;                        
wire            dahblif_other_mask;              
wire            dbus_mask;                       
wire            forever_cpuclk;                  
wire            iahbl_bmu_dbus_acc_err;          
wire    [31:0]  iahbl_bmu_dbus_data;             
wire            iahbl_bmu_dbus_data_vld;         
wire            iahbl_bmu_dbus_grnt;             
wire            iahbl_bmu_dbus_trans_cmplt;      
wire            iahbl_bmu_ibus_acc_err;          
wire    [31:0]  iahbl_bmu_ibus_data;             
wire            iahbl_bmu_ibus_data_vld;         
wire            iahbl_bmu_ibus_grnt;             
wire            iahbl_bmu_ibus_trans_cmplt;      
wire    [31:0]  iahbl_pad_haddr;                 
wire    [2 :0]  iahbl_pad_hburst;                
wire    [3 :0]  iahbl_pad_hprot;                 
wire    [2 :0]  iahbl_pad_hsize;                 
wire    [1 :0]  iahbl_pad_htrans;                
wire    [31:0]  iahbl_pad_hwdata;                
wire            iahbl_pad_hwrite;                
wire            iahblif_other_mask;              
wire            ibus_not_granted;                
wire            pad_cpu_halt_ff2;                
wire    [31:0]  pad_iahbl_hrdata;                
wire            pad_iahbl_hready;                
wire            pad_iahbl_hresp;                 
wire            pad_yy_gate_clk_en_b;            
wire            pwrm_cpu_bus_peak_power_limit_en; 
wire            sahblif_iahblif_mask;            




 //==========================================================
 //  Instance Gated Cell for Most Common Use
 //==========================================================

gated_clk_cell  x_gated_ahbl_cpuclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ahbl_gated_clk      ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dbus_mask           ),
  .module_en            (ahbl_clk_en         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);







 











nm_ahbl_req_arb  x_nm_ahbl_req_arb (
  .ahbl_bmu_dbus_acc_err                   (iahbl_bmu_dbus_acc_err                 ),
  .ahbl_bmu_dbus_data                      (iahbl_bmu_dbus_data                    ),
  .ahbl_bmu_dbus_data_vld                  (iahbl_bmu_dbus_data_vld                ),
  .ahbl_bmu_dbus_grnt                      (iahbl_bmu_dbus_grnt                    ),
  .ahbl_bmu_dbus_trans_cmplt               (iahbl_bmu_dbus_trans_cmplt             ),
  .ahbl_bmu_ibus_acc_err                   (iahbl_bmu_ibus_acc_err                 ),
  .ahbl_bmu_ibus_data                      (iahbl_bmu_ibus_data                    ),
  .ahbl_bmu_ibus_data_vld                  (iahbl_bmu_ibus_data_vld                ),
  .ahbl_bmu_ibus_grnt                      (iahbl_bmu_ibus_grnt                    ),
  .ahbl_bmu_ibus_trans_cmplt               (iahbl_bmu_ibus_trans_cmplt             ),
  .ahbl_gated_clk                          (ahbl_gated_clk                         ),
  .bmu_ahbl_dbus_acc_deny                  (bmu_iahbl_dbus_acc_deny                ),
  .bmu_ahbl_dbus_addr                      (bmu_iahbl_dbus_addr                    ),
  .bmu_ahbl_dbus_chk_fail                  (bmu_iahbl_dbus_chk_fail                ),
  .bmu_ahbl_dbus_prot                      (bmu_iahbl_dbus_prot                    ),
  .bmu_ahbl_dbus_req                       (bmu_iahbl_dbus_req                     ),
  .bmu_ahbl_dbus_req_without_cmplt         (bmu_iahbl_dbus_req_without_cmplt       ),
  .bmu_ahbl_dbus_req_without_deny_chk_fail (bmu_iahbl_dbus_req                     ),
  .bmu_ahbl_dbus_size                      (bmu_iahbl_dbus_size                    ),
  .bmu_ahbl_dbus_write                     (bmu_iahbl_dbus_write                   ),
  .bmu_ahbl_ibus_acc_deny                  (bmu_iahbl_ibus_acc_deny                ),
  .bmu_ahbl_ibus_addr                      (bmu_iahbl_ibus_addr                    ),
  .bmu_ahbl_ibus_hit                       (bmu_iahbl_ibus_hit                     ),
  .bmu_ahbl_ibus_prot                      (bmu_iahbl_ibus_prot                    ),
  .bmu_ahbl_ibus_req                       (bmu_iahbl_ibus_req                     ),
  .bmu_ahbl_ibus_req_no_hit                (bmu_iahbl_ibus_req_no_hit              ),
  .bmu_ahbl_ibus_size                      (bmu_iahbl_ibus_size                    ),
  .bmu_ahbl_ibus_vec_redirect              (bmu_iahbl_ibus_vec_redirect            ),
  .bmu_ahbl_ibus_write                     (1'b0                                   ),
  .bmu_ahbl_wdata                          (bmu_iahbl_dbus_wdata                   ),
  .cpu_acc_err                             (cpu_acc_err                            ),
  .cpu_addr                                (cpu_addr                               ),
  .cpu_data_vld                            (cpu_data_vld                           ),
  .cpu_prot                                (cpu_prot                               ),
  .cpu_rdata                               (cpu_rdata                              ),
  .cpu_req                                 (cpu_req                                ),
  .cpu_req_for_grnt                        (cpu_req_for_grnt                       ),
  .cpu_req_for_peak_power                  (cpu_req_for_peak_power                 ),
  .cpu_req_grnt                            (cpu_req_grnt                           ),
  .cpu_sec                                 (cpu_sec                                ),
  .cpu_size                                (cpu_size                               ),
  .cpu_trans_cmplt                         (cpu_trans_cmplt                        ),
  .cpu_vec_redirect                        (cpu_vec_redirect                       ),
  .cpu_wdata                               (cpu_wdata                              ),
  .cpu_write                               (cpu_write                              ),
  .cpurst_b                                (cpurst_b                               ),
  .ibus_not_granted                        (ibus_not_granted                       )
);

assign dbus_mask = ibus_not_granted;

















































































































































































































nm_ahbl_if  x_nm_ahbl_if (
  .ahbLif_ahbl_haddr    (iahbl_pad_haddr     ),
  .ahbLif_ahbl_hburst   (iahbl_pad_hburst    ),
  .ahbLif_ahbl_hprot    (iahbl_pad_hprot     ),
  .ahbLif_ahbl_hsize    (iahbl_pad_hsize     ),
  .ahbLif_ahbl_htrans   (iahbl_pad_htrans    ),
  .ahbLif_ahbl_hwdata   (iahbl_pad_hwdata    ),
  .ahbLif_ahbl_hwrite   (iahbl_pad_hwrite    ),
  .ahbl_ahbLif_hrdata   (pad_iahbl_hrdata    ),
  .ahbl_ahbLif_hready   (pad_iahbl_hready    ),
  .ahbl_ahbLif_hresp    (pad_iahbl_hresp     ),
  .ahbl_clk_en          (ahbl_clk_en         ),
  .ahbl_gated_clk       (ahbl_gated_clk      ),
  .ahblif_busy          (ahblif_busy         ),
  .ahblif_idle          (ahblif_idle         ),
  .ahblif_power_mask    (ahblif_power_mask   ),
  .cpu_acc_err          (cpu_acc_err         ),
  .cpu_addr             (cpu_addr            ),
  .cpu_data_vld         (cpu_data_vld        ),
  .cpu_prot             (cpu_prot            ),
  .cpu_rdata            (cpu_rdata           ),
  .cpu_req              (cpu_req             ),
  .cpu_req_grnt         (cpu_req_grnt        ),
  .cpu_req_power_masked (cpu_req_power_masked),
  .cpu_sec              (cpu_sec             ),
  .cpu_size             (cpu_size            ),
  .cpu_trans_cmplt      (cpu_trans_cmplt     ),
  .cpu_vec_redirect     (cpu_vec_redirect    ),
  .cpu_wdata_sel        (cpu_wdata_sel       ),
  .cpu_wr_data          (cpu_wr_data         ),
  .cpu_write            (cpu_write           ),
  .cpurst_b             (cpurst_b            ),
  .pad_cpu_halt_ff2     (pad_cpu_halt_ff2    )
);

assign cpu_wr_data[31:0] = {32{cpu_wdata_sel}} & cpu_wdata[31:0];
assign iahblif_other_mask = ahblif_busy && pwrm_cpu_bus_peak_power_limit_en;
assign ahblif_power_mask  = sahblif_iahblif_mask || dahblif_other_mask;
assign cpu_req_power_masked = cpu_req && !ahblif_power_mask;
























endmodule

























module nm_ifu_addrgen(
  addrgen_ibuf_chgflw_no_pipe_down,
  addrgen_ibusif_chgflw_addr,
  addrgen_ibusif_chgflw_vld,
  addrgen_ibusif_chgflw_vld_for_data,
  addrgen_ibusif_ifpc_updt,
  addrgen_ifctrl_inst_br_taken,
  addrgen_ifctrl_inst_jmp_r15,
  addrgen_ifdp_br_vld,
  addrgen_ifdp_brchgflw_pc,
  addrgen_top_clk_en,
  addrgen_xx_ibus_idle,
  cp0_ifu_c,
  cpurst_b,
  ibuf_addrgen_inst,
  ibuf_addrgen_inst_branch,
  ibusif_ifdp_ifpc,
  ibusif_xx_ibus_idle,
  ifctrl_addrgen_inst_vld_no_cancel,
  ifctrl_ibuf_pop_en,
  ifctrl_xx_ifcancel,
  ifctrl_xx_random_inst_vld,
  ifu_misc_clk,
  iu_ifu_c_write_back,
  iu_ifu_ex_stall,
  iu_ifu_r15,
  iu_ifu_r15_vld,
  split_addrgen_jmpr15
);


input           cp0_ifu_c;                         
input           cpurst_b;                          
input   [31:0]  ibuf_addrgen_inst;                 
input           ibuf_addrgen_inst_branch;          
input   [30:0]  ibusif_ifdp_ifpc;                  
input           ibusif_xx_ibus_idle;               
input           ifctrl_addrgen_inst_vld_no_cancel; 
input           ifctrl_ibuf_pop_en;                
input           ifctrl_xx_ifcancel;                
input           ifctrl_xx_random_inst_vld;         
input           ifu_misc_clk;                      
input           iu_ifu_c_write_back;               
input           iu_ifu_ex_stall;                   
input   [30:0]  iu_ifu_r15;                        
input           iu_ifu_r15_vld;                    
input           split_addrgen_jmpr15;              
output          addrgen_ibuf_chgflw_no_pipe_down;  
output  [30:0]  addrgen_ibusif_chgflw_addr;        
output          addrgen_ibusif_chgflw_vld;         
output          addrgen_ibusif_chgflw_vld_for_data; 
output          addrgen_ibusif_ifpc_updt;          
output          addrgen_ifctrl_inst_br_taken;      
output          addrgen_ifctrl_inst_jmp_r15;       
output          addrgen_ifdp_br_vld;               
output  [31:0]  addrgen_ifdp_brchgflw_pc;          
output          addrgen_top_clk_en;                
output          addrgen_xx_ibus_idle;              


reg     [1 :0]  chgflw_cur_st;                     
reg     [1 :0]  chgflw_nxt_st;                     


wire    [30:0]  adder_pc;                          
wire    [30:0]  adder_src0_pc;                     
wire    [30:0]  adder_src0_pc_mask;                
wire    [30:0]  adder_src1_offset;                 
wire    [30:0]  addrgen_chgflw_pc;                 
wire    [30:0]  addrgen_chgflw_pc_pre;             
wire            addrgen_ibuf_chgflw_no_pipe_down;  
wire    [30:0]  addrgen_ibusif_chgflw_addr;        
wire            addrgen_ibusif_chgflw_vld;         
wire            addrgen_ibusif_chgflw_vld_for_data; 
wire            addrgen_ibusif_ifpc_updt;          
wire            addrgen_ifctrl_inst_br_taken;      
wire            addrgen_ifctrl_inst_jmp_r15;       
wire            addrgen_ifdp_br_vld;               
wire    [31:0]  addrgen_ifdp_brchgflw_pc;          
wire            addrgen_inst32;                    
wire            addrgen_top_clk_en;                
wire            addrgen_xx_ibus_idle;              
wire    [30:0]  branch_offset;                     
wire            branch_offset_negative;            
wire            chgflw_fix_br_vld;                 
wire            chgflw_mask_trig;                  
wire            chgflw_mask_vld;                   
wire            chgflw_taken_vld;                  
wire            cond_bf;                           
wire            cond_br;                           
wire            cond_bt;                           
wire            condbr_not_taken_when_fix_branch;  
wire            condbr_taken;                      
wire            condbr_taken_by_c;                 
wire            condbr_taken_pre;                  
wire            condbr_taken_predict;              
wire            condbr_when_fix_branch;            
wire            condbt_taken_info;                 
wire            cp0_ifu_c;                         
wire            cpurst_b;                          
wire    [31:0]  ibuf_addrgen_inst;                 
wire            ibuf_addrgen_inst_branch;          
wire            ibuf_addrgen_inst_mux_21;          
wire            ibuf_addrgen_inst_mux_22;          
wire            ibuf_addrgen_inst_mux_26;          
wire            ibuf_addrgen_inst_mux_27;          
wire            ibuf_addrgen_inst_mux_31;          
wire    [30:0]  ibusif_ifdp_ifpc;                  
wire            ibusif_xx_ibus_idle;               
wire            ifctrl_addrgen_inst_vld_no_cancel; 
wire            ifctrl_ibuf_pop_en;                
wire            ifctrl_xx_ifcancel;                
wire            ifctrl_xx_random_inst_vld;         
wire            ifu_misc_clk;                      
wire            imm10;                             
wire            imm16;                             
wire            imm26;                             
wire            inst_bf;                           
wire            inst_br;                           
wire            inst_br_taken;                     
wire            inst_branch;                       
wire            inst_bsr;                          
wire            inst_bt;                           
wire            inst_chgflw;                       
wire            inst_chgflw_vld;                   
wire            inst_condbr_taken;                 
wire            inst_jmp_r15;                      
wire            inst_rts;                          
wire            inst_uncond_br;                    
wire            iu_ifu_c_write_back;               
wire            iu_ifu_ex_stall;                   
wire    [30:0]  iu_ifu_r15;                        
wire            iu_ifu_r15_vld;                    
wire            jmp_r15;                           
wire            split_addrgen_jmpr15;              
wire            uncond_br;                         



parameter CHGFLW_IDLE = 2'b00,
          CHGFLW_MASK = 2'b01,
          FIX_BRANCH  = 2'b10;






assign branch_offset[30:0] = {31{imm26}}
                               & {{5 {ibuf_addrgen_inst[25]}},ibuf_addrgen_inst[25:0]}
                           | {31{imm16}}
                               & {{15{ibuf_addrgen_inst[15]}},ibuf_addrgen_inst[15:0]}
                           | {31{imm10}}
                               & {{21{ibuf_addrgen_inst[25]}},ibuf_addrgen_inst[25:16]};

assign branch_offset_negative = branch_offset[30];

assign adder_src0_pc[30:0]     = ibusif_ifdp_ifpc[30:0];
assign adder_src1_offset[30:0] = branch_offset[30:0];

assign adder_src0_pc_mask[30:8] = adder_src0_pc[30:8];
assign adder_src0_pc_mask[7:0]  = adder_src0_pc[7:0] & {8{inst_branch}};
assign adder_pc[30:0] = adder_src0_pc_mask[30:0] + adder_src1_offset[30:0];

assign addrgen_chgflw_pc_pre[30:0] = inst_branch ? adder_pc[30:0]
                                                 : iu_ifu_r15[30:0];

assign addrgen_chgflw_pc[30:0] = addrgen_chgflw_pc_pre[30:0];









assign addrgen_inst32 = ibuf_addrgen_inst[31];// && ibuf_addrgen_inst[30];

assign inst_bsr = (ibuf_addrgen_inst[31:26] == 6'b111000);

assign inst_rts = ({ibuf_addrgen_inst[31:26],ibuf_addrgen_inst[21:16]}
                    == 12'b011110111100);//jmp16 r15
                                      

assign ibuf_addrgen_inst_mux_31 = ibuf_addrgen_inst[31] & ibuf_addrgen_inst_branch;
assign ibuf_addrgen_inst_mux_27 = ibuf_addrgen_inst[27] & ibuf_addrgen_inst_branch;
assign ibuf_addrgen_inst_mux_26 = ibuf_addrgen_inst[26] & ibuf_addrgen_inst_branch;
assign ibuf_addrgen_inst_mux_22 = ibuf_addrgen_inst[22] & ibuf_addrgen_inst_branch;
assign ibuf_addrgen_inst_mux_21 = ibuf_addrgen_inst[21] & ibuf_addrgen_inst_branch;

assign inst_br  = ({ibuf_addrgen_inst_mux_31, ibuf_addrgen_inst_mux_27} == 2'b00)//br16
               || ({ibuf_addrgen_inst_mux_31,ibuf_addrgen_inst_mux_22,ibuf_addrgen_inst_mux_21 } == 3'b100);//br32;

assign inst_bt  = ({ibuf_addrgen_inst_mux_31, ibuf_addrgen_inst_mux_26} == 2'b00)//bt16
               || ({ibuf_addrgen_inst_mux_31, ibuf_addrgen_inst_mux_22,ibuf_addrgen_inst_mux_21} == 3'b111);//bt32

assign inst_bf  = ({ibuf_addrgen_inst_mux_27, ibuf_addrgen_inst_mux_26} == 2'b11)//bf16
               || ({ibuf_addrgen_inst_mux_31, ibuf_addrgen_inst_mux_22,ibuf_addrgen_inst_mux_21} == 3'b110);//bf32


assign imm26 = inst_bsr;
assign imm16 = addrgen_inst32  && ibuf_addrgen_inst_branch;
assign imm10 = !addrgen_inst32 && ibuf_addrgen_inst_branch; 


assign uncond_br   = inst_bsr || ibuf_addrgen_inst_branch && inst_br;
assign inst_branch = inst_bsr || ibuf_addrgen_inst_branch;


assign cond_bt = ibuf_addrgen_inst_branch && inst_bt;
assign cond_bf = ibuf_addrgen_inst_branch && inst_bf;

assign cond_br = cond_bt || cond_bf;





assign jmp_r15 = inst_rts || split_addrgen_jmpr15;





assign condbr_not_taken_when_fix_branch = 1'b0;
assign condbr_when_fix_branch = 1'b0;




assign condbr_taken_by_c    = cond_bt && cp0_ifu_c
                           || cond_bf && !cp0_ifu_c;

assign condbr_taken_predict = cond_br && branch_offset_negative;



assign condbr_taken_pre = iu_ifu_c_write_back ? condbr_taken_predict : condbr_taken_by_c;
assign condbr_taken = (condbr_taken_pre || chgflw_taken_vld) && !chgflw_fix_br_vld && cond_br;

assign inst_condbr_taken = condbr_taken && ifctrl_addrgen_inst_vld_no_cancel;
assign inst_uncond_br    = uncond_br    && ifctrl_addrgen_inst_vld_no_cancel; 
assign inst_jmp_r15      = jmp_r15      && ifctrl_addrgen_inst_vld_no_cancel;


assign inst_br_taken = inst_uncond_br || inst_condbr_taken; 
assign inst_chgflw   = inst_jmp_r15   || inst_br_taken || condbr_when_fix_branch;

assign inst_chgflw_vld = (inst_jmp_r15 && iu_ifu_r15_vld
                          || inst_br_taken
                          || condbr_when_fix_branch
                            ) && ibusif_xx_ibus_idle
                              && !ifctrl_xx_random_inst_vld
                              && !chgflw_mask_vld;


always @(posedge ifu_misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    chgflw_cur_st[1:0] <= CHGFLW_IDLE;
  else if(ifctrl_xx_ifcancel)
    chgflw_cur_st[1:0] <= CHGFLW_IDLE;
  else
    chgflw_cur_st[1:0] <= chgflw_nxt_st[1:0];
end

assign chgflw_mask_trig = inst_chgflw_vld
                          && !ifctrl_xx_ifcancel
                          && iu_ifu_ex_stall;


always @( condbr_not_taken_when_fix_branch
       or chgflw_cur_st
       or ifctrl_ibuf_pop_en
       or chgflw_mask_trig)
begin
case(chgflw_cur_st)
CHGFLW_IDLE:
begin
  chgflw_nxt_st = CHGFLW_IDLE;
  if(chgflw_mask_trig)
    begin
      if(condbr_not_taken_when_fix_branch)
        chgflw_nxt_st = FIX_BRANCH;
      else
        chgflw_nxt_st = CHGFLW_MASK;
    end
end
CHGFLW_MASK:
begin
  chgflw_nxt_st = CHGFLW_MASK;
  if(ifctrl_ibuf_pop_en)
    chgflw_nxt_st = CHGFLW_IDLE;
end
FIX_BRANCH:
begin
  chgflw_nxt_st = FIX_BRANCH;
  if(ifctrl_ibuf_pop_en)
    chgflw_nxt_st = CHGFLW_IDLE;
end
default:
begin
  chgflw_nxt_st = CHGFLW_IDLE;
end
endcase

end

assign chgflw_mask_vld   = (chgflw_cur_st != CHGFLW_IDLE);
assign chgflw_taken_vld  = (chgflw_cur_st == CHGFLW_MASK);
assign chgflw_fix_br_vld = (chgflw_cur_st == FIX_BRANCH);

assign addrgen_top_clk_en = chgflw_mask_trig || chgflw_mask_vld;





assign addrgen_xx_ibus_idle = ibusif_xx_ibus_idle || chgflw_mask_vld;



assign addrgen_ifctrl_inst_br_taken = inst_br_taken || condbr_when_fix_branch;
assign addrgen_ifctrl_inst_jmp_r15  = inst_jmp_r15;





assign addrgen_ibuf_chgflw_no_pipe_down = chgflw_mask_trig;





assign addrgen_ibusif_chgflw_vld_for_data = inst_chgflw
                                              && ibusif_xx_ibus_idle
                                         || chgflw_mask_vld;
assign addrgen_ibusif_chgflw_vld          = inst_chgflw_vld;
assign addrgen_ibusif_chgflw_addr[30:0]   = addrgen_chgflw_pc[30:0];
assign addrgen_ibusif_ifpc_updt           = inst_chgflw
                                            && ifctrl_ibuf_pop_en;






assign condbt_taken_info = condbr_taken;
assign addrgen_ifdp_brchgflw_pc[31:0] = {adder_pc[30:0], condbt_taken_info};
assign addrgen_ifdp_br_vld = ifctrl_addrgen_inst_vld_no_cancel
                             && (uncond_br || cond_br);



endmodule


























module nm_ifu_ibuf(
  addrgen_ibuf_chgflw_no_pipe_down,
  addrgen_ibusif_chgflw_vld,
  cp0_yy_clk_en,
  cpuclk,
  cpurst_b,
  forever_cpuclk,
  had_ifu_ir,
  had_ifu_ir_vld,
  ibuf_addrgen_inst,
  ibuf_addrgen_inst_branch,
  ibuf_ibusif_inst_fetch,
  ibuf_ibusif_inst_fetch_mask,
  ibuf_ifctrl_inst16_vld,
  ibuf_ifctrl_inst32_vld,
  ibuf_ifctrl_peak_power_mask,
  ibuf_ifctrl_pop0_branch32,
  ibuf_ifctrl_pop0_mls32,
  ibuf_ifctrl_pop0_mult32_high,
  ibuf_ifdp_acc_err,
  ibuf_ifdp_inst,
  ibuf_ifdp_inst_dbg_disable,
  ibuf_ifdp_pop0_acc_err,
  ibuf_top_clk_en,
  ibuf_xx_empty,
  ibuf_xx_pop0_vld,
  ibuf_xx_pop1_vld,
  ibusif_ibuf_high_predecode_info,
  ibusif_ibuf_low_predecode_info,
  ibusif_ibuf_no_trans,
  ibusif_xx_16bit_inst,
  ibusif_xx_acc_err,
  ibusif_xx_data,
  ibusif_xx_trans_cmplt,
  ibusif_xx_unalign_fetch,
  ifctrl_ibuf_bypass_vld,
  ifctrl_ibuf_inst_pipe_down,
  ifctrl_ibuf_pop_en,
  ifctrl_xx_ifcancel,
  ifu_misc_clk,
  iu_yy_xx_dbgon,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_avrg_power_inst_issue,
  pwrm_cpu_inst_peak_power_limit_en,
  pwrm_cpu_peak_power_limit_en,
  randclk_ibuf_entry_data_mod_en_w16,
  randclk_ibuf_pop_mod_en_w3,
  randclk_ibuf_push_mod_en_w3
);


input           addrgen_ibuf_chgflw_no_pipe_down;  
input           addrgen_ibusif_chgflw_vld;         
input           cp0_yy_clk_en;                     
input           cpuclk;                            
input           cpurst_b;                          
input           forever_cpuclk;                    
input   [31:0]  had_ifu_ir;                        
input           had_ifu_ir_vld;                    
input           ibusif_ibuf_high_predecode_info;   
input           ibusif_ibuf_low_predecode_info;    
input           ibusif_ibuf_no_trans;              
input           ibusif_xx_16bit_inst;              
input           ibusif_xx_acc_err;                 
input   [31:0]  ibusif_xx_data;                    
input           ibusif_xx_trans_cmplt;             
input           ibusif_xx_unalign_fetch;           
input           ifctrl_ibuf_bypass_vld;            
input           ifctrl_ibuf_inst_pipe_down;        
input           ifctrl_ibuf_pop_en;                
input           ifctrl_xx_ifcancel;                
input           ifu_misc_clk;                      
input           iu_yy_xx_dbgon;                    
input           pad_yy_gate_clk_en_b;              
input           pwrm_cpu_avrg_power_inst_issue;    
input           pwrm_cpu_inst_peak_power_limit_en; 
input           pwrm_cpu_peak_power_limit_en;      
input   [3 :0]  randclk_ibuf_entry_data_mod_en_w16; 
input           randclk_ibuf_pop_mod_en_w3;        
input           randclk_ibuf_push_mod_en_w3;       
output  [31:0]  ibuf_addrgen_inst;                 
output          ibuf_addrgen_inst_branch;          
output          ibuf_ibusif_inst_fetch;            
output          ibuf_ibusif_inst_fetch_mask;       
output          ibuf_ifctrl_inst16_vld;            
output          ibuf_ifctrl_inst32_vld;            
output          ibuf_ifctrl_peak_power_mask;       
output          ibuf_ifctrl_pop0_branch32;         
output          ibuf_ifctrl_pop0_mls32;            
output          ibuf_ifctrl_pop0_mult32_high;      
output          ibuf_ifdp_acc_err;                 
output  [31:0]  ibuf_ifdp_inst;                    
output          ibuf_ifdp_inst_dbg_disable;        
output          ibuf_ifdp_pop0_acc_err;            
output          ibuf_top_clk_en;                   
output          ibuf_xx_empty;                     
output          ibuf_xx_pop0_vld;                  
output          ibuf_xx_pop1_vld;                  


reg     [3 :0]  pop0;                              
reg             pop0_acc_err;                      
reg             pop0_branch;                       
reg     [15:0]  pop0_inst;                         
reg     [3 :0]  pop0_shift;                        
reg             pop0_vld;                          
reg             pop1_acc_err;                      
reg     [15:0]  pop1_inst;                         
reg             pop1_vld;                          
reg     [3 :0]  push0;                             
reg     [3 :0]  push0_shift;                       


wire            acc_err_upd_en;                    
wire            addrgen_ibuf_chgflw_no_pipe_down;  
wire            addrgen_ibusif_chgflw_vld;         
wire            align_fetch_bypass_32bit;          
wire            cp0_yy_clk_en;                     
wire            cpuclk;                            
wire            cpurst_b;                          
wire            entry0_acc_err;                    
wire            entry0_create0_en;                 
wire            entry0_create1_en;                 
wire    [16:0]  entry0_inst;                       
wire            entry0_part_flush;                 
wire            entry0_randclk_data_mod_en_w16;    
wire            entry0_retire0_en;                 
wire            entry0_retire1_en;                 
wire            entry0_vld;                        
wire            entry1_acc_err;                    
wire            entry1_create0_en;                 
wire            entry1_create1_en;                 
wire    [16:0]  entry1_inst;                       
wire            entry1_part_flush;                 
wire            entry1_randclk_data_mod_en_w16;    
wire            entry1_retire0_en;                 
wire            entry1_retire1_en;                 
wire            entry1_vld;                        
wire            entry2_acc_err;                    
wire            entry2_create0_en;                 
wire            entry2_create1_en;                 
wire    [16:0]  entry2_inst;                       
wire            entry2_part_flush;                 
wire            entry2_randclk_data_mod_en_w16;    
wire            entry2_retire0_en;                 
wire            entry2_retire1_en;                 
wire            entry2_vld;                        
wire            entry3_acc_err;                    
wire            entry3_create0_en;                 
wire            entry3_create1_en;                 
wire    [16:0]  entry3_inst;                       
wire            entry3_part_flush;                 
wire            entry3_randclk_data_mod_en_w16;    
wire            entry3_retire0_en;                 
wire            entry3_retire1_en;                 
wire            entry3_vld;                        
wire    [3 :0]  flush_2_entry_ptr;                 
wire    [3 :0]  flush_3_entry_ptr;                 
wire            forever_cpuclk;                    
wire            had_create0_en;                    
wire            had_create1_en;                    
wire    [31:0]  had_ifu_ir;                        
wire            had_ifu_ir_vld;                    
wire            had_lrw_inst;                      
wire    [31:0]  ibuf_addrgen_inst;                 
wire            ibuf_addrgen_inst_branch;          
wire            ibuf_create0_en;                   
wire            ibuf_create1_en;                   
wire            ibuf_empty;                        
wire            ibuf_fetch_empty;                  
wire            ibuf_fetch_more_than_two;          
wire            ibuf_flush;                        
wire            ibuf_ibusif_inst_fetch;            
wire            ibuf_ibusif_inst_fetch_mask;       
wire            ibuf_ifctrl_inst16_vld;            
wire            ibuf_ifctrl_inst32_vld;            
wire            ibuf_ifctrl_peak_power_mask;       
wire            ibuf_ifctrl_pop0_branch32;         
wire            ibuf_ifctrl_pop0_mls32;            
wire            ibuf_ifctrl_pop0_mult32_high;      
wire            ibuf_ifdp_acc_err;                 
wire    [31:0]  ibuf_ifdp_inst;                    
wire            ibuf_ifdp_inst_dbg_disable;        
wire            ibuf_ifdp_pop0_acc_err;            
wire            ibuf_inst16;                       
wire            ibuf_inst32;                       
wire            ibuf_inst_32_vld;                  
wire            ibuf_inst_fetch;                   
wire            ibuf_no_inst;                      
wire            ibuf_no_inst_during_pipe_down;     
wire    [3 :0]  ibuf_part_flush_ptr;               
wire            ibuf_pop0_branch32;                
wire            ibuf_pop0_mls32;                   
wire            ibuf_pop0_mult32_high;             
wire            ibuf_pop_upd_clk;                  
wire            ibuf_pop_upd_en;                   
wire            ibuf_push_upd_clk;                 
wire            ibuf_push_upd_en;                  
wire            ibuf_retire0_en;                   
wire            ibuf_retire0_en_vld;               
wire            ibuf_retire1_en;                   
wire            ibuf_three_avalbe;                 
wire            ibuf_top_clk_en;                   
wire            ibuf_two_avalbe;                   
wire    [1 :0]  ibuf_vld_num;                      
wire            ibuf_xx_empty;                     
wire            ibuf_xx_pop0_vld;                  
wire            ibuf_xx_pop1_vld;                  
wire            ibus_create0_en;                   
wire            ibus_create1_en;                   
wire            ibusif_ibuf_high_predecode_info;   
wire            ibusif_ibuf_low_predecode_info;    
wire            ibusif_ibuf_no_trans;              
wire            ibusif_xx_16bit_inst;              
wire            ibusif_xx_acc_err;                 
wire    [31:0]  ibusif_xx_data;                    
wire            ibusif_xx_trans_cmplt;             
wire            ibusif_xx_unalign_fetch;           
wire            ifctrl_ibuf_bypass_vld;            
wire            ifctrl_ibuf_inst_pipe_down;        
wire            ifctrl_ibuf_pop_en;                
wire            ifctrl_xx_ifcancel;                
wire            ifu_misc_clk;                      
wire            iu_yy_xx_dbgon;                    
wire            pad_yy_gate_clk_en_b;              
wire            peak_power_mask;                   
wire            pop0_inst_32;                      
wire    [3 :0]  pop1;                              
wire    [3 :0]  push1;                             
wire            pwrm_cpu_avrg_power_inst_issue;    
wire            pwrm_cpu_inst_peak_power_limit_en; 
wire            pwrm_cpu_peak_power_limit_en;      
wire    [3 :0]  randclk_ibuf_entry_data_mod_en_w16; 
wire            randclk_ibuf_pop_mod_en_w3;        
wire            randclk_ibuf_push_mod_en_w3;       
wire            seu_core_rbi_issue_en;             
wire            unalign_fetch_bypass_16bit;        



parameter IDLE     = 2'b00,
          POP1_EN  = 2'b01,
          POP2_EN  = 2'b10,
          FLUSH    = 2'b11;




assign seu_core_rbi_issue_en = 1'b1;





gated_clk_cell  x_ibuf_push_upd_clkhdr (
  .clk_in                      (forever_cpuclk             ),
  .clk_out                     (ibuf_push_upd_clk          ),
  .external_en                 (1'b0                       ),
  .global_en                   (cp0_yy_clk_en              ),
  .local_en                    (ibuf_push_upd_en           ),
  .module_en                   (randclk_ibuf_push_mod_en_w3),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);








assign ibuf_push_upd_en = ibuf_flush || ibuf_create0_en;


gated_clk_cell  x_ibuf_pop_upd_clkhdr (
  .clk_in                     (forever_cpuclk            ),
  .clk_out                    (ibuf_pop_upd_clk          ),
  .external_en                (1'b0                      ),
  .global_en                  (cp0_yy_clk_en             ),
  .local_en                   (ibuf_pop_upd_en           ),
  .module_en                  (randclk_ibuf_pop_mod_en_w3),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      )
);








assign ibuf_pop_upd_en = ibuf_retire0_en_vld && !ibuf_flush;










assign acc_err_upd_en = iu_yy_xx_dbgon
                     || ibusif_xx_trans_cmplt
                          && (ibusif_xx_acc_err ||
                              entry0_acc_err    ||
                              entry1_acc_err    ||
                              entry2_acc_err    || 
                              entry3_acc_err    
                             );

assign ibuf_top_clk_en = acc_err_upd_en;



parameter ENTRY_NUM = 4;








nm_ifu_ibuf_entry  x_ibuf_entry_0 (
  .addrgen_ibuf_chgflw_no_pipe_down (addrgen_ibuf_chgflw_no_pipe_down),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cpuclk                           (cpuclk                          ),
  .cpurst_b                         (cpurst_b                        ),
  .entry_acc_err                    (entry0_acc_err                  ),
  .entry_create0_en                 (entry0_create0_en               ),
  .entry_create1_en                 (entry0_create1_en               ),
  .entry_inst                       (entry0_inst                     ),
  .entry_part_flush                 (entry0_part_flush               ),
  .entry_randclk_data_mod_en_w16    (entry0_randclk_data_mod_en_w16  ),
  .entry_retire0_en                 (entry0_retire0_en               ),
  .entry_retire1_en                 (entry0_retire1_en               ),
  .entry_vld                        (entry0_vld                      ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .ibuf_flush                       (ibuf_flush                      ),
  .ibuf_no_inst_during_pipe_down    (ibuf_no_inst_during_pipe_down   ),
  .ibusif_ibuf_high_predecode_info  (ibusif_ibuf_high_predecode_info ),
  .ibusif_ibuf_low_predecode_info   (ibusif_ibuf_low_predecode_info  ),
  .ibusif_xx_acc_err                (ibusif_xx_acc_err               ),
  .ibusif_xx_data                   (ibusif_xx_data                  ),
  .ifu_misc_clk                     (ifu_misc_clk                    ),
  .iu_yy_xx_dbgon                   (iu_yy_xx_dbgon                  ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            )
);














nm_ifu_ibuf_entry  x_ibuf_entry_1 (
  .addrgen_ibuf_chgflw_no_pipe_down (addrgen_ibuf_chgflw_no_pipe_down),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cpuclk                           (cpuclk                          ),
  .cpurst_b                         (cpurst_b                        ),
  .entry_acc_err                    (entry1_acc_err                  ),
  .entry_create0_en                 (entry1_create0_en               ),
  .entry_create1_en                 (entry1_create1_en               ),
  .entry_inst                       (entry1_inst                     ),
  .entry_part_flush                 (entry1_part_flush               ),
  .entry_randclk_data_mod_en_w16    (entry1_randclk_data_mod_en_w16  ),
  .entry_retire0_en                 (entry1_retire0_en               ),
  .entry_retire1_en                 (entry1_retire1_en               ),
  .entry_vld                        (entry1_vld                      ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .ibuf_flush                       (ibuf_flush                      ),
  .ibuf_no_inst_during_pipe_down    (ibuf_no_inst_during_pipe_down   ),
  .ibusif_ibuf_high_predecode_info  (ibusif_ibuf_high_predecode_info ),
  .ibusif_ibuf_low_predecode_info   (ibusif_ibuf_low_predecode_info  ),
  .ibusif_xx_acc_err                (ibusif_xx_acc_err               ),
  .ibusif_xx_data                   (ibusif_xx_data                  ),
  .ifu_misc_clk                     (ifu_misc_clk                    ),
  .iu_yy_xx_dbgon                   (iu_yy_xx_dbgon                  ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            )
);














nm_ifu_ibuf_entry  x_ibuf_entry_2 (
  .addrgen_ibuf_chgflw_no_pipe_down (addrgen_ibuf_chgflw_no_pipe_down),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cpuclk                           (cpuclk                          ),
  .cpurst_b                         (cpurst_b                        ),
  .entry_acc_err                    (entry2_acc_err                  ),
  .entry_create0_en                 (entry2_create0_en               ),
  .entry_create1_en                 (entry2_create1_en               ),
  .entry_inst                       (entry2_inst                     ),
  .entry_part_flush                 (entry2_part_flush               ),
  .entry_randclk_data_mod_en_w16    (entry2_randclk_data_mod_en_w16  ),
  .entry_retire0_en                 (entry2_retire0_en               ),
  .entry_retire1_en                 (entry2_retire1_en               ),
  .entry_vld                        (entry2_vld                      ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .ibuf_flush                       (ibuf_flush                      ),
  .ibuf_no_inst_during_pipe_down    (ibuf_no_inst_during_pipe_down   ),
  .ibusif_ibuf_high_predecode_info  (ibusif_ibuf_high_predecode_info ),
  .ibusif_ibuf_low_predecode_info   (ibusif_ibuf_low_predecode_info  ),
  .ibusif_xx_acc_err                (ibusif_xx_acc_err               ),
  .ibusif_xx_data                   (ibusif_xx_data                  ),
  .ifu_misc_clk                     (ifu_misc_clk                    ),
  .iu_yy_xx_dbgon                   (iu_yy_xx_dbgon                  ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            )
);














nm_ifu_ibuf_entry  x_ibuf_entry_3 (
  .addrgen_ibuf_chgflw_no_pipe_down (addrgen_ibuf_chgflw_no_pipe_down),
  .cp0_yy_clk_en                    (cp0_yy_clk_en                   ),
  .cpuclk                           (cpuclk                          ),
  .cpurst_b                         (cpurst_b                        ),
  .entry_acc_err                    (entry3_acc_err                  ),
  .entry_create0_en                 (entry3_create0_en               ),
  .entry_create1_en                 (entry3_create1_en               ),
  .entry_inst                       (entry3_inst                     ),
  .entry_part_flush                 (entry3_part_flush               ),
  .entry_randclk_data_mod_en_w16    (entry3_randclk_data_mod_en_w16  ),
  .entry_retire0_en                 (entry3_retire0_en               ),
  .entry_retire1_en                 (entry3_retire1_en               ),
  .entry_vld                        (entry3_vld                      ),
  .forever_cpuclk                   (forever_cpuclk                  ),
  .had_ifu_ir                       (had_ifu_ir                      ),
  .ibuf_flush                       (ibuf_flush                      ),
  .ibuf_no_inst_during_pipe_down    (ibuf_no_inst_during_pipe_down   ),
  .ibusif_ibuf_high_predecode_info  (ibusif_ibuf_high_predecode_info ),
  .ibusif_ibuf_low_predecode_info   (ibusif_ibuf_low_predecode_info  ),
  .ibusif_xx_acc_err                (ibusif_xx_acc_err               ),
  .ibusif_xx_data                   (ibusif_xx_data                  ),
  .ifu_misc_clk                     (ifu_misc_clk                    ),
  .iu_yy_xx_dbgon                   (iu_yy_xx_dbgon                  ),
  .pad_yy_gate_clk_en_b             (pad_yy_gate_clk_en_b            )
);


















assign entry0_randclk_data_mod_en_w16 = randclk_ibuf_entry_data_mod_en_w16[0];
assign entry1_randclk_data_mod_en_w16 = randclk_ibuf_entry_data_mod_en_w16[1];
assign entry2_randclk_data_mod_en_w16 = randclk_ibuf_entry_data_mod_en_w16[2];
assign entry3_randclk_data_mod_en_w16 = randclk_ibuf_entry_data_mod_en_w16[3];






always @( entry3_acc_err
       or entry1_vld
       or entry1_acc_err
       or entry1_inst[16:0]
       or entry0_inst[16:0]
       or entry0_acc_err
       or entry2_inst[16:0]
       or entry3_inst[16:0]
       or entry0_vld
       or entry2_vld
       or entry3_vld
       or entry2_acc_err
       or pop0[3:0])
begin
  case(pop0[ENTRY_NUM-1:0])
  4'b0001:
  begin
    pop0_vld          = entry0_vld;




    pop0_branch      = entry0_inst[16]; 
    pop0_inst[15:0]   = entry0_inst[15:0];
    pop0_acc_err      = entry0_acc_err;
  end
  4'b0010:
  begin
    pop0_vld          = entry1_vld;




    pop0_branch       = entry1_inst[16];
    pop0_inst[15:0]   = entry1_inst[15:0];
    pop0_acc_err      = entry1_acc_err;
  end
  4'b0100:
  begin
    pop0_vld          = entry2_vld;




    pop0_branch       = entry2_inst[16];
    pop0_inst[15:0]   = entry2_inst[15:0];
    pop0_acc_err      = entry2_acc_err;
  end
  4'b1000:
  begin
    pop0_vld          = entry3_vld;




    pop0_branch       = entry3_inst[16];
    pop0_inst[15:0]   = entry3_inst[15:0];
    pop0_acc_err      = entry3_acc_err;
  end
  default:
  begin
    pop0_vld          = 1'bx;




    pop0_branch       = 1'bx;
    pop0_inst[15:0]   = 16'bx;
    pop0_acc_err      = 1'bx;
  end
  endcase

end



always @( entry3_acc_err
       or entry1_vld
       or entry1_acc_err
       or entry2_inst[15:0]
       or pop1[3:0]
       or entry0_acc_err
       or entry0_vld
       or entry2_vld
       or entry1_inst[15:0]
       or entry3_vld
       or entry2_acc_err
       or entry3_inst[15:0]
       or entry0_inst[15:0])
begin
  case(pop1[ENTRY_NUM-1:0])
  4'b0001:
  begin
    pop1_vld          = entry0_vld;
    pop1_inst[15:0]   = entry0_inst[15:0];
    pop1_acc_err      = entry0_acc_err;
  end
  4'b0010:
  begin
    pop1_vld          = entry1_vld;
    pop1_inst[15:0]   = entry1_inst[15:0];
    pop1_acc_err      = entry1_acc_err;
  end
  4'b0100:
  begin
    pop1_vld          = entry2_vld;
    pop1_inst[15:0]   = entry2_inst[15:0];
    pop1_acc_err      = entry2_acc_err;
  end
  4'b1000:
  begin
   pop1_vld          = entry3_vld;
   pop1_inst[15:0]   = entry3_inst[15:0];
   pop1_acc_err      = entry3_acc_err;
  end
  default:
  begin
    pop1_vld          = 1'bx;
    pop1_inst[15:0]   = 16'bx;
    pop1_acc_err      = 1'bx;
  end
  endcase

end














assign align_fetch_bypass_32bit = //!ibusif_xx_unalign_fetch &&
                                  ibuf_empty &&
                                  !ibusif_xx_16bit_inst;

assign unalign_fetch_bypass_16bit = ibusif_xx_unalign_fetch;// &&
                                  //  ibuf_empty &&
                                  //  ibusif_xx_16bit_inst;



assign ibus_create0_en = ibusif_xx_trans_cmplt &&
                         (!ifctrl_ibuf_bypass_vld ||
                          !(align_fetch_bypass_32bit ||
                            unalign_fetch_bypass_16bit
                           )
                         );
assign had_lrw_inst   = ({had_ifu_ir[31:29],had_ifu_ir[27:26]}
                          == 5'b00000
                        ) || //lrw16
                        (had_ifu_ir[31:23] == 9'b111010101);//lrw32
assign had_create0_en = iu_yy_xx_dbgon && had_ifu_ir_vld && !had_lrw_inst;

assign ibuf_create0_en = ibus_create0_en || had_create0_en;



assign ibus_create1_en = ibusif_xx_trans_cmplt &&
                         !ifctrl_ibuf_bypass_vld &&
                         !ibusif_xx_unalign_fetch;

assign had_create1_en = had_create0_en &&
                        (had_ifu_ir[31:30] == 2'b11);

assign ibuf_create1_en = ibus_create1_en || had_create1_en;





always @(posedge ibuf_push_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    push0[ENTRY_NUM-1:0] <= 4'b0001;
  else if(addrgen_ibuf_chgflw_no_pipe_down)
    push0[ENTRY_NUM-1:0] <= pop0_shift[ENTRY_NUM-1:0]; 
  else if(ibuf_flush)
    push0[ENTRY_NUM-1:0] <= pop0[ENTRY_NUM-1:0];
  else if(ibuf_create0_en)
    push0[ENTRY_NUM-1:0] <= push0_shift[ENTRY_NUM-1:0];
end


always @( ibuf_create1_en
       or push0[3:0])
begin
  if(ibuf_create1_en)
    push0_shift[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-3:0],
                                  push0[ENTRY_NUM-1:ENTRY_NUM-2]};
  else
    push0_shift[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-2:0],
                                  push0[ENTRY_NUM-1]};

end


assign {entry3_create0_en,
        entry2_create0_en,
        entry1_create0_en,
        entry0_create0_en} = push0[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create0_en}};


assign push1[ENTRY_NUM-1:0] = {push0[ENTRY_NUM-2:0],
                               push0[ENTRY_NUM-1]};


assign {entry3_create1_en,
        entry2_create1_en,
        entry1_create1_en,
        entry0_create1_en} = push1[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_create1_en}};








assign ibuf_retire0_en = pop0_vld && ifctrl_ibuf_pop_en;

assign ibuf_retire1_en = ibuf_inst32 && ifctrl_ibuf_pop_en;






assign ibuf_retire0_en_vld = ibuf_retire0_en;
assign ibuf_inst_32_vld = ibuf_inst32;
assign peak_power_mask = 1'b0;



always @(posedge ibuf_pop_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pop0[ENTRY_NUM-1:0] <= 4'b0001;
  else if(ibuf_flush)
    pop0[ENTRY_NUM-1:0] <= pop0[ENTRY_NUM-1:0];
  else if(ibuf_retire0_en_vld)
    pop0[ENTRY_NUM-1:0] <= pop0_shift[ENTRY_NUM-1:0];
end


always @( pop0[3:0]
       or ibuf_inst_32_vld)
begin
  if(ibuf_inst_32_vld)
    pop0_shift[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-3:0],
                                 pop0[ENTRY_NUM-1:ENTRY_NUM-2]};
  else
    pop0_shift[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-2:0],
                                 pop0[ENTRY_NUM-1]};

end


assign {entry3_retire0_en,
        entry2_retire0_en,
        entry1_retire0_en,
        entry0_retire0_en} = pop0[ENTRY_NUM-1:0] & {ENTRY_NUM{ibuf_retire0_en}};


assign pop1[ENTRY_NUM-1:0] = {pop0[ENTRY_NUM-2:0],
                              pop0[ENTRY_NUM-1]};


assign {entry3_retire1_en,
        entry2_retire1_en,
        entry1_retire1_en,
        entry0_retire1_en} = pop1[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{ibuf_retire1_en}};


assign flush_2_entry_ptr[ENTRY_NUM-1:0] = ~(pop0[ENTRY_NUM-1:0] | pop1[ENTRY_NUM-1:0]);
assign flush_3_entry_ptr[ENTRY_NUM-1:0] = ~pop0[ENTRY_NUM-1:0];
assign ibuf_part_flush_ptr[ENTRY_NUM-1:0] = ibuf_inst32
                                             ? flush_2_entry_ptr[ENTRY_NUM-1:0]
                                             : flush_3_entry_ptr[ENTRY_NUM-1:0];
assign {entry3_part_flush,
        entry2_part_flush,
        entry1_part_flush,
        entry0_part_flush} = ibuf_part_flush_ptr[ENTRY_NUM-1:0] &
                             {ENTRY_NUM{addrgen_ibuf_chgflw_no_pipe_down}};





assign pop0_inst_32 = pop0_inst[15:14] == 2'b11;
assign ibuf_inst32 = pop0_vld && pop1_vld && pop0_inst_32;


assign ibuf_inst16 = pop0_vld && !pop0_inst_32;




assign ibuf_flush = ifctrl_xx_ifcancel ||
                    addrgen_ibusif_chgflw_vld;





assign ibuf_vld_num[1:0] = entry0_vld + entry1_vld + entry2_vld + entry3_vld;




assign ibuf_two_avalbe   = (ibuf_vld_num[1:0] == 2'b10); 

assign ibuf_three_avalbe = (ibuf_vld_num[1:0] == 2'b01);       





assign ibuf_empty = !(entry0_vld || entry1_vld || entry2_vld || entry3_vld);


assign ibuf_no_inst = !ibuf_inst32 && !ibuf_inst16;

assign ibuf_no_inst_during_pipe_down = ifctrl_ibuf_inst_pipe_down && ibuf_no_inst;






assign ibuf_fetch_empty = ibuf_empty;




assign ibuf_fetch_more_than_two = (ibuf_two_avalbe || ibuf_three_avalbe) &&
                                   ibusif_ibuf_no_trans;















assign ibuf_inst_fetch = ibuf_fetch_empty ||
                         ibuf_fetch_more_than_two;







assign ibuf_pop0_branch32 = pop0_inst_32 &&
                            ((pop0_inst[13:10] == 4'b1000) || pop0_branch);// || pop0_bt || pop0_bf);
assign ibuf_pop0_mls32 = pop0_inst[15:11] == 5'b11010;
assign ibuf_pop0_mult32_high = pop0_inst[15:10] == 6'b110001;








assign ibuf_xx_empty = ibuf_empty;
assign ibuf_xx_pop0_vld = pop0_vld;
assign ibuf_xx_pop1_vld = pop1_vld;




assign ibuf_ibusif_inst_fetch = ibuf_inst_fetch;


assign ibuf_ibusif_inst_fetch_mask = peak_power_mask ||
                                     (pwrm_cpu_peak_power_limit_en &&
                                      !ibuf_no_inst);













assign ibuf_ifctrl_inst32_vld = ibuf_inst32 &&
                                pwrm_cpu_avrg_power_inst_issue &&
                                seu_core_rbi_issue_en;
assign ibuf_ifctrl_inst16_vld = ibuf_inst16 &&
                                pwrm_cpu_avrg_power_inst_issue &&
                                seu_core_rbi_issue_en;
assign ibuf_ifctrl_pop0_branch32 = ibuf_pop0_branch32;
assign ibuf_ifctrl_pop0_mls32 = ibuf_pop0_mls32;
assign ibuf_ifctrl_pop0_mult32_high = ibuf_pop0_mult32_high;


assign ibuf_ifctrl_peak_power_mask = peak_power_mask || pwrm_cpu_peak_power_limit_en
                                  || pwrm_cpu_inst_peak_power_limit_en;







assign ibuf_ifdp_inst[31:0] = {pop0_inst[15:0], pop1_inst[15:0]};

assign ibuf_ifdp_acc_err = (ibuf_inst32 && (pop0_acc_err || pop1_acc_err)) ||
                           (ibuf_inst16 && pop0_acc_err);
assign ibuf_ifdp_pop0_acc_err = pop0_vld && pop0_acc_err;

assign ibuf_ifdp_inst_dbg_disable = 1'b0;




assign ibuf_addrgen_inst[31:0] = {pop0_inst[15:0], pop1_inst[15:0]};




assign ibuf_addrgen_inst_branch = pop0_branch;




endmodule



























module nm_ifu_ibuf_entry(
  addrgen_ibuf_chgflw_no_pipe_down,
  cp0_yy_clk_en,
  cpuclk,
  cpurst_b,
  entry_acc_err,
  entry_create0_en,
  entry_create1_en,
  entry_inst,
  entry_part_flush,
  entry_randclk_data_mod_en_w16,
  entry_retire0_en,
  entry_retire1_en,
  entry_vld,
  forever_cpuclk,
  had_ifu_ir,
  ibuf_flush,
  ibuf_no_inst_during_pipe_down,
  ibusif_ibuf_high_predecode_info,
  ibusif_ibuf_low_predecode_info,
  ibusif_xx_acc_err,
  ibusif_xx_data,
  ifu_misc_clk,
  iu_yy_xx_dbgon,
  pad_yy_gate_clk_en_b
);


input           addrgen_ibuf_chgflw_no_pipe_down; 
input           cp0_yy_clk_en;                   
input           cpuclk;                          
input           cpurst_b;                        
input           entry_create0_en;                
input           entry_create1_en;                
input           entry_part_flush;                
input           entry_randclk_data_mod_en_w16;   
input           entry_retire0_en;                
input           entry_retire1_en;                
input           forever_cpuclk;                  
input   [31:0]  had_ifu_ir;                      
input           ibuf_flush;                      
input           ibuf_no_inst_during_pipe_down;   
input           ibusif_ibuf_high_predecode_info; 
input           ibusif_ibuf_low_predecode_info;  
input           ibusif_xx_acc_err;               
input   [31:0]  ibusif_xx_data;                  
input           ifu_misc_clk;                    
input           iu_yy_xx_dbgon;                  
input           pad_yy_gate_clk_en_b;            
output          entry_acc_err;                   
output  [16:0]  entry_inst;                      
output          entry_vld;                       


reg             entry_acc_err;                   
reg     [16:0]  entry_inst;                      
reg             entry_vld;                       


wire            addrgen_ibuf_chgflw_no_pipe_down; 
wire            cp0_yy_clk_en;                   
wire            cpuclk;                          
wire            cpurst_b;                        
wire            entry_create;                    
wire            entry_create0_en;                
wire            entry_create1_en;                
wire            entry_part_flush;                
wire            entry_randclk_data_mod_en_w16;   
wire            entry_retire;                    
wire            entry_retire0_en;                
wire            entry_retire1_en;                
wire            forever_cpuclk;                  
wire    [31:0]  had_ifu_ir;                      
wire            ibuf_data_upd_clk;               
wire            ibuf_data_upd_en;                
wire            ibuf_flush;                      
wire            ibuf_no_inst_during_pipe_down;   
wire    [16:0]  ibus_inst_info_high;             
wire    [16:0]  ibus_inst_info_low;              
wire            ibusif_ibuf_high_predecode_info; 
wire            ibusif_ibuf_low_predecode_info;  
wire            ibusif_xx_acc_err;               
wire    [31:0]  ibusif_xx_data;                  
wire            ifu_misc_clk;                    
wire            iu_yy_xx_dbgon;                  
wire            pad_yy_gate_clk_en_b;            







gated_clk_cell  x_ibuf_data_upd_clkhdr (
  .clk_in                        (forever_cpuclk               ),
  .clk_out                       (ibuf_data_upd_clk            ),
  .external_en                   (1'b0                         ),
  .global_en                     (cp0_yy_clk_en                ),
  .local_en                      (ibuf_data_upd_en             ),
  .module_en                     (entry_randclk_data_mod_en_w16),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         )
);








assign ibuf_data_upd_en = entry_create0_en || entry_create1_en;












assign entry_create  = entry_create0_en || entry_create1_en;
assign entry_retire  = entry_retire0_en || entry_retire1_en;








always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_vld <= 1'b0;
  else if(entry_part_flush)
    entry_vld <= 1'b0;
  else if(ibuf_flush && !addrgen_ibuf_chgflw_no_pipe_down)
    entry_vld <= 1'b0;
  else if(entry_create)
    entry_vld <= 1'b1;
  else if(entry_retire)
    entry_vld <= 1'b0;
end




assign ibus_inst_info_high[16:0] = {ibusif_ibuf_high_predecode_info,
                                    ibusif_xx_data[31:16]};

assign ibus_inst_info_low[16:0]  = {ibusif_ibuf_low_predecode_info,
                                    ibusif_xx_data[15:0]};

always @(posedge ibuf_data_upd_clk)
begin
  if(iu_yy_xx_dbgon)
    begin
      if(entry_create0_en)
        entry_inst[16:0] <= {1'b0, had_ifu_ir[31:16]};
      else if(entry_create1_en)
        entry_inst[16:0] <= {1'b0, had_ifu_ir[15:0]};
    end
  else
    begin
      if(entry_create0_en)
        begin
          if(ibuf_no_inst_during_pipe_down)

            entry_inst[16:0] <= ibus_inst_info_low[16:0];
          else
            entry_inst[16:0] <= ibus_inst_info_high[16:0];
        end
      else if(entry_create1_en)
        entry_inst[16:0] <= ibus_inst_info_low[16:0];
    end
end






always @(posedge ifu_misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    entry_acc_err <= 1'b0;
  else if(entry_create)
    entry_acc_err <= ibusif_xx_acc_err;
end



endmodule






























module nm_ifu_ibusif(
  addrgen_ibusif_chgflw_addr,
  addrgen_ibusif_chgflw_vld,
  addrgen_ibusif_chgflw_vld_for_data,
  addrgen_ibusif_ifpc_updt,
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_yy_be,
  cp0_yy_be_v2,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  cru_ifu_acc_ca,
  forever_cpuclk,
  ibuf_ibusif_inst_fetch,
  ibuf_ibusif_inst_fetch_mask,
  ibusif_ibuf_high_predecode_info,
  ibusif_ibuf_low_predecode_info,
  ibusif_ibuf_no_trans,
  ibusif_ifctrl_inst_mult32_low,
  ibusif_ifctrl_inst_no_bypass,
  ibusif_ifdp_ifpc,
  ibusif_top_clk_en,
  ibusif_xx_16bit_inst,
  ibusif_xx_acc_err,
  ibusif_xx_data,
  ibusif_xx_ibus_idle,
  ibusif_xx_trans_cmplt,
  ibusif_xx_unalign_fetch,
  ifctrl_ibuf_pop_en,
  ifctrl_xx_ex_inst_vld_for_peak_power,
  ifdp_ibusif_32bit,
  ifu_bmu_addr,
  ifu_bmu_idle,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_wfd1,
  ifu_cp0_lpmd_ack,
  ifu_iu_ibus_idle,
  ifu_iu_vector_ibus_in_idle,
  ifu_iu_xx_ibus_data,
  ifu_misc_clk,
  iu_ifu_addr,
  iu_ifu_data_fetch,
  iu_ifu_data_fetch_for_data,
  iu_ifu_inst_fetch,
  iu_ifu_inst_fetch_for_data,
  iu_ifu_inst_fetch_mask,
  iu_ifu_security_violation,
  iu_yy_xx_dbgon,
  mpu_ifu_acc_scu,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_peak_power_limit_en
);


input   [30:0]  addrgen_ibusif_chgflw_addr;          
input           addrgen_ibusif_chgflw_vld;           
input           addrgen_ibusif_chgflw_vld_for_data;  
input           addrgen_ibusif_ifpc_updt;            
input           bmu_xx_ibus_acc_err;                 
input   [31:0]  bmu_xx_ibus_data;                    
input           bmu_xx_ibus_grnt;                    
input           bmu_xx_ibus_trans_cmplt;             
input           cp0_ifu_in_lpmd;                     
input           cp0_ifu_lpmd_req;                    
input           cp0_yy_be;                           
input           cp0_yy_be_v2;                        
input           cp0_yy_clk_en;                       
input           cp0_yy_supv_mode_aft_dbg;            
input           cpurst_b;                            
input           cru_ifu_acc_ca;                      
input           forever_cpuclk;                      
input           ibuf_ibusif_inst_fetch;              
input           ibuf_ibusif_inst_fetch_mask;         
input           ifctrl_ibuf_pop_en;                  
input           ifctrl_xx_ex_inst_vld_for_peak_power; 
input           ifdp_ibusif_32bit;                   
input           ifu_misc_clk;                        
input   [30:0]  iu_ifu_addr;                         
input           iu_ifu_data_fetch;                   
input           iu_ifu_data_fetch_for_data;          
input           iu_ifu_inst_fetch;                   
input           iu_ifu_inst_fetch_for_data;          
input           iu_ifu_inst_fetch_mask;              
input           iu_ifu_security_violation;           
input           iu_yy_xx_dbgon;                      
input           mpu_ifu_acc_scu;                     
input           pad_yy_gate_clk_en_b;                
input           pwrm_cpu_peak_power_limit_en;        
output          ibusif_ibuf_high_predecode_info;     
output          ibusif_ibuf_low_predecode_info;      
output          ibusif_ibuf_no_trans;                
output          ibusif_ifctrl_inst_mult32_low;       
output          ibusif_ifctrl_inst_no_bypass;        
output  [30:0]  ibusif_ifdp_ifpc;                    
output          ibusif_top_clk_en;                   
output          ibusif_xx_16bit_inst;                
output          ibusif_xx_acc_err;                   
output  [31:0]  ibusif_xx_data;                      
output          ibusif_xx_ibus_idle;                 
output          ibusif_xx_trans_cmplt;               
output          ibusif_xx_unalign_fetch;             
output  [31:0]  ifu_bmu_addr;                        
output          ifu_bmu_idle;                        
output  [3 :0]  ifu_bmu_prot;                        
output          ifu_bmu_req;                         
output          ifu_bmu_wfd1;                        
output          ifu_cp0_lpmd_ack;                    
output          ifu_iu_ibus_idle;                    
output          ifu_iu_vector_ibus_in_idle;          
output  [31:0]  ifu_iu_xx_ibus_data;                 


reg             abort_cur_st;                        
reg             abort_nxt_st;                        
reg     [29:0]  addr_cnt;                            
reg     [2 :0]  cur_st;                              
reg     [31:0]  ibus_data;                           
reg     [3 :0]  ibus_prot_reg;                       
reg     [30:0]  if_pc;                               
reg     [2 :0]  nxt_st;                              
reg             unalign_fetch_reg;                   


wire    [1 :0]  adder_scr1;                          
wire            addr_cnt_high_upd_clk;               
wire            addr_cnt_high_upd_en;                
wire            addr_cnt_low_upd_clk;                
wire            addr_cnt_low_upd_en;                 
wire            addr_cnt_upd_en;                     
wire    [30:0]  addrgen_ibusif_chgflw_addr;          
wire            addrgen_ibusif_chgflw_vld;           
wire            addrgen_ibusif_chgflw_vld_for_data;  
wire            addrgen_ibusif_ifpc_updt;            
wire            bmu_xx_ibus_acc_err;                 
wire    [31:0]  bmu_xx_ibus_data;                    
wire    [31:0]  bmu_xx_ibus_data_aft_pol;            
wire            bmu_xx_ibus_grnt;                    
wire            bmu_xx_ibus_trans_cmplt;             
wire            change_flow_vld;                     
wire            cp0_ifu_in_lpmd;                     
wire            cp0_ifu_lpmd_req;                    
wire            cp0_yy_be;                           
wire            cp0_yy_be_v2;                        
wire            cp0_yy_clk_en;                       
wire            cp0_yy_supv_mode_aft_dbg;            
wire            cpurst_b;                            
wire            cru_ifu_acc_ca;                      
wire            flop_out_bus;                        
wire            forever_cpuclk;                      
wire            ibuf_ibusif_inst_fetch;              
wire            ibuf_ibusif_inst_fetch_mask;         
wire            ibus_abort_trig;                     
wire            ibus_acc_err;                        
wire    [30:0]  ibus_addr;                           
wire            ibus_br_high_predecode_info;         
wire            ibus_br_low_predecode_info;          
wire            ibus_busy;                           
wire    [31:0]  ibus_data_pre;                       
wire            ibus_inst_br16;                      
wire            ibus_inst_br32;                      
wire            ibus_inst_bsr32;                     
wire            ibus_inst_fetch_cmplt;               
wire            ibus_inst_high_predecode_br;         
wire            ibus_inst_low_predecode_br;          
wire            ibus_inst_mls;                       
wire            ibus_inst_mult16;                    
wire            ibus_inst_mult32;                    
wire            ibus_inst_mult32_low;                
wire            ibus_inst_nest_int;                  
wire            ibus_inst_no_bypass;                 
wire            ibus_inst_push_pop;                  
wire            ibus_inst_req;                       
wire            ibus_inst_rts16;                     
wire            ibus_no_outstanding;                 
wire    [30:0]  ibus_nonseq_addr;                    
wire    [3 :0]  ibus_prot;                           
wire            ibus_prot_buf;                       
wire            ibus_prot_buf_sel;                   
wire            ibus_req;                            
wire    [30:0]  ibus_seq_addr;                       
wire            ibus_trans_abort;                    
wire            ibusif_ibuf_high_predecode_info;     
wire            ibusif_ibuf_low_predecode_info;      
wire            ibusif_ibuf_no_trans;                
wire            ibusif_ifctrl_inst_mult32_low;       
wire            ibusif_ifctrl_inst_no_bypass;        
wire    [30:0]  ibusif_ifdp_ifpc;                    
wire            ibusif_top_clk_en;                   
wire            ibusif_xx_16bit_inst;                
wire            ibusif_xx_acc_err;                   
wire    [31:0]  ibusif_xx_data;                      
wire            ibusif_xx_ibus_idle;                 
wire            ibusif_xx_trans_cmplt;               
wire            ibusif_xx_unalign_fetch;             
wire            if_pc_chgflw_upd;                    
wire    [30:0]  if_pc_inc;                           
wire            if_pc_upd_clk_high_en;               
wire            if_pc_upd_clk_low_en;                
wire            if_pc_upd_high_clk;                  
wire            if_pc_upd_low_clk;                   
wire            ifctrl_ibuf_pop_en;                  
wire            ifctrl_ifdp_pipe_down_upd;           
wire            ifctrl_xx_ex_inst_vld_for_peak_power; 
wire            ifdp_ibusif_32bit;                   
wire    [31:0]  ifu_bmu_addr;                        
wire            ifu_bmu_idle;                        
wire    [3 :0]  ifu_bmu_prot;                        
wire            ifu_bmu_req;                         
wire            ifu_bmu_wfd1;                        
wire            ifu_cp0_lpmd_ack;                    
wire            ifu_iu_ibus_idle;                    
wire            ifu_iu_vector_ibus_in_idle;          
wire    [31:0]  ifu_iu_xx_ibus_data;                 
wire            ifu_misc_clk;                        
wire    [29:0]  inc_addr;                            
wire            inst_chgflw_for_data;                
wire            internal_inst_fetch;                 
wire            internal_inst_fetch_pre;             
wire    [30:0]  iu_ifu_addr;                         
wire            iu_ifu_data_fetch;                   
wire            iu_ifu_data_fetch_for_data;          
wire            iu_ifu_inst_fetch;                   
wire            iu_ifu_inst_fetch_for_data;          
wire            iu_ifu_inst_fetch_mask;              
wire            iu_ifu_security_violation;           
wire            iu_yy_xx_dbgon;                      
wire            lpmd_mask;                           
wire            mpu_ifu_acc_scu;                     
wire            pad_yy_gate_clk_en_b;                
wire            peak_power_mask;                     
wire            pwrm_cpu_peak_power_limit_en;        
wire            sm_upd_clk;                          
wire            sm_upd_en;                           






parameter IDLE     = 3'b001,
          WFG1     = 3'b010,
          WFD1     = 3'b011,
          WFD1WFG2 = 3'b000,
          WFD1WFD2 = 3'b110;

parameter ABORT_IDLE = 1'b0,
          ABORT_VLD  = 1'b1;








gated_clk_cell  x_ibus_addr_cnt_low_clkhdr (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (addr_cnt_low_upd_clk),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (addr_cnt_low_upd_en ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









gated_clk_cell  x_ibus_addr_cnt_high_clkhdr (
  .clk_in                (forever_cpuclk       ),
  .clk_out               (addr_cnt_high_upd_clk),
  .external_en           (1'b0                 ),
  .global_en             (cp0_yy_clk_en        ),
  .local_en              (addr_cnt_high_upd_en ),
  .module_en             (1'b0                 ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b )
);










gated_clk_cell  x_sm_upd_clkhdr (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sm_upd_clk          ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (sm_upd_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);








assign sm_upd_en = ibus_req || iu_ifu_inst_fetch_for_data ||
                   addrgen_ibusif_chgflw_vld_for_data ||
                   bmu_xx_ibus_trans_cmplt || 
                   (cur_st != IDLE);











assign ibus_seq_addr[30:0] = {addr_cnt[29:0], 1'b0};

assign ibus_nonseq_addr[30:0] = (iu_ifu_inst_fetch_for_data || iu_ifu_data_fetch_for_data)
                                      ? iu_ifu_addr[30:0]
                                      : addrgen_ibusif_chgflw_addr[30:0];

assign ibus_addr[30:0] = (iu_ifu_inst_fetch_for_data
                          || iu_ifu_data_fetch_for_data
                          || addrgen_ibusif_chgflw_vld_for_data)
                                      ? ibus_nonseq_addr[30:0]
                                      : ibus_seq_addr[30:0];

































assign change_flow_vld = iu_ifu_inst_fetch ||
                         addrgen_ibusif_chgflw_vld;
assign addr_cnt_upd_en = change_flow_vld ||
                         (!iu_ifu_data_fetch_for_data && bmu_xx_ibus_grnt);






assign addr_cnt_low_upd_en  = addr_cnt_upd_en;
assign addr_cnt_high_upd_en = change_flow_vld ||
                              !iu_ifu_data_fetch_for_data && bmu_xx_ibus_grnt
                               && (addr_cnt[10] ^ inc_addr[10]);
always @(posedge addr_cnt_low_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    addr_cnt[9:0] <= 10'b0;
  else if(addr_cnt_low_upd_en)
    addr_cnt[9:0] <= inc_addr[9:0];
end

always @(posedge addr_cnt_high_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    addr_cnt[29:10] <= 20'b0;
  else if(addr_cnt_high_upd_en)
    addr_cnt[29:10] <= inc_addr[29:10];
end


assign inc_addr[29:0] = ibus_addr[30:1] + bmu_xx_ibus_grnt;


gated_clk_cell  x_if_pc_high_clkhdr (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (if_pc_upd_low_clk   ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (if_pc_upd_clk_low_en),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









assign if_pc_upd_clk_low_en = if_pc_chgflw_upd || ifctrl_ifdp_pipe_down_upd;

assign if_pc_chgflw_upd = iu_ifu_inst_fetch ||
                          addrgen_ibusif_ifpc_updt;

assign ifctrl_ifdp_pipe_down_upd = ifctrl_ibuf_pop_en;


gated_clk_cell  x_if_pc_low_clkhdr (
  .clk_in                (forever_cpuclk       ),
  .clk_out               (if_pc_upd_high_clk   ),
  .external_en           (1'b0                 ),
  .global_en             (cp0_yy_clk_en        ),
  .local_en              (if_pc_upd_clk_high_en),
  .module_en             (1'b0                 ),
  .pad_yy_gate_clk_en_b  (pad_yy_gate_clk_en_b )
);








 
assign if_pc_upd_clk_high_en = if_pc_chgflw_upd || ifctrl_ifdp_pipe_down_upd && (if_pc[7] ^ if_pc_inc[7]);

always @(posedge if_pc_upd_low_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    if_pc[6:0] <= 7'b0;
  else if(if_pc_chgflw_upd)
    if_pc[6:0] <= ibus_nonseq_addr[6:0];
  else if(ifctrl_ifdp_pipe_down_upd)
    if_pc[6:0] <= if_pc_inc[6:0];
end

always @(posedge if_pc_upd_high_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    if_pc[30:7] <= 24'b0;
  else if(if_pc_chgflw_upd)
    if_pc[30:7] <= ibus_nonseq_addr[30:7];
  else if(ifctrl_ifdp_pipe_down_upd)
    if_pc[30:7] <= if_pc_inc[30:7];
end

assign adder_scr1[1:0] = ifdp_ibusif_32bit? 2'b10: 2'b01;
assign if_pc_inc[30:0] = if_pc[30:0] + adder_scr1[1:0];






























assign ibusif_ifdp_ifpc[30:0] = if_pc[30:0];






assign bmu_xx_ibus_data_aft_pol[31:0] = bmu_xx_ibus_data[31:0];



assign ibus_data_pre[31:0] = cp0_yy_be_v2 ? {bmu_xx_ibus_data_aft_pol[7:0],  bmu_xx_ibus_data_aft_pol[15:8],
                                             bmu_xx_ibus_data_aft_pol[23:16],bmu_xx_ibus_data_aft_pol[31:24]}
                                          : bmu_xx_ibus_data_aft_pol[31:0];









always @( cp0_yy_be
       or ibus_data_pre[31:0]
       or unalign_fetch_reg)
begin
  case({cp0_yy_be, unalign_fetch_reg})
    2'b00 : ibus_data[31:16] = ibus_data_pre[15:0];
    2'b01 : ibus_data[31:16] = ibus_data_pre[31:16];
    2'b10 : ibus_data[31:16] = ibus_data_pre[31:16];
    2'b11 : ibus_data[31:16] = ibus_data_pre[15:0];
  endcase

end


always @( cp0_yy_be
       or ibus_data_pre[31:0])
begin
  case({cp0_yy_be})
    1'b0 : ibus_data[15:0] = ibus_data_pre[31:16];
    1'b1 : ibus_data[15:0] = ibus_data_pre[15:0];
  endcase

end

















assign ibus_busy = !cur_st[0];




















always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    unalign_fetch_reg <= 1'b0;
  else if(change_flow_vld)
    unalign_fetch_reg <= ibus_addr[0];
  else if(ibus_inst_fetch_cmplt)
    unalign_fetch_reg <= 1'b0;
end    

assign ibus_prot[3:0] = {cru_ifu_acc_ca,
                         mpu_ifu_acc_scu,
                         cp0_yy_supv_mode_aft_dbg,
                         1'b0};

always @(posedge sm_upd_clk)
begin
  if(ibus_prot_buf)
    ibus_prot_reg[3:0] <= ibus_prot[3:0];
end









assign inst_chgflw_for_data = addrgen_ibusif_chgflw_vld_for_data
                              || iu_ifu_inst_fetch_for_data
                              || iu_ifu_data_fetch_for_data;
assign internal_inst_fetch_pre = ibuf_ibusif_inst_fetch 
                                    && !inst_chgflw_for_data
                              || addrgen_ibusif_chgflw_vld
                                    && !iu_ifu_inst_fetch_for_data
                                    && !iu_ifu_data_fetch_for_data
                              || iu_ifu_inst_fetch;

assign internal_inst_fetch = internal_inst_fetch_pre &&
                             !lpmd_mask &&
                             !iu_yy_xx_dbgon &&
                             !peak_power_mask &&
                             !iu_ifu_inst_fetch_mask &&
                             !iu_ifu_security_violation;

assign lpmd_mask = cp0_ifu_in_lpmd || cp0_ifu_lpmd_req;

assign peak_power_mask = (pwrm_cpu_peak_power_limit_en &&
                          (ifctrl_xx_ex_inst_vld_for_peak_power ||
                           (cur_st != IDLE))
                         ) ||
                         ibuf_ibusif_inst_fetch_mask;







assign flop_out_bus = 1'b0;

always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_st[2:0] <= IDLE;
  else
    cur_st[2:0]  <= nxt_st[2:0];
end



always @( internal_inst_fetch
       or bmu_xx_ibus_trans_cmplt
       or bmu_xx_ibus_grnt
       or flop_out_bus
       or cur_st)
begin
case(cur_st)
IDLE:
begin
  if(internal_inst_fetch)
    begin
      if(bmu_xx_ibus_grnt)
        nxt_st = WFD1;
      else
        nxt_st = WFG1;
    end
  else
    nxt_st = IDLE;
end
WFG1:
begin
  if(bmu_xx_ibus_grnt)
    nxt_st = WFD1;
  else
    nxt_st = WFG1;
end
WFD1:
begin
  if(bmu_xx_ibus_trans_cmplt)
    begin
      if(internal_inst_fetch)
        begin
          if(bmu_xx_ibus_grnt)
            nxt_st = WFD1;
          else
            nxt_st = WFG1;
        end
      else
        nxt_st = IDLE;
    end
  else if(internal_inst_fetch)
    begin //flop out bus can grant 2 outstanding inst fetch
      if(bmu_xx_ibus_grnt && flop_out_bus)
        nxt_st = WFD1WFD2;
      else
        nxt_st = WFD1WFG2;
    end
  else
    nxt_st = WFD1;
end
WFD1WFG2:
begin
  if(bmu_xx_ibus_trans_cmplt)
    begin
      if(bmu_xx_ibus_grnt)
        nxt_st = WFD1;
      else
        nxt_st = WFG1;
    end
  else
    begin
      if(bmu_xx_ibus_grnt && flop_out_bus)
        nxt_st = WFD1WFD2;
      else
        nxt_st = WFD1WFG2;
    end
end
WFD1WFD2:
begin
  if(bmu_xx_ibus_trans_cmplt)
    nxt_st = WFD1;
  else
    nxt_st = WFD1WFD2;
end
default:
begin
  nxt_st = IDLE;
end
endcase

end

assign ibus_inst_fetch_cmplt = ((cur_st == WFD1) 
                             || (cur_st == WFD1WFG2)
                             || (cur_st == WFD1WFD2)
                               )  && bmu_xx_ibus_trans_cmplt
                                  && !ibus_trans_abort;
assign ibus_acc_err = ((cur_st == WFD1)
                    || (cur_st == WFD1WFG2)
                    || (cur_st == WFD1WFD2)
                      )  &&  bmu_xx_ibus_acc_err;
assign ibus_inst_req = (cur_st == IDLE)
                         && internal_inst_fetch
                    || (cur_st == WFG1)
                    || (cur_st == WFD1)
                         && internal_inst_fetch
                    || (cur_st == WFD1WFG2);
                    
assign ibus_abort_trig = (cur_st == WFD1)
                           && !bmu_xx_ibus_trans_cmplt

                           && change_flow_vld; 

assign ibus_no_outstanding = (cur_st == IDLE)
                          || (cur_st == WFG1)
                          || (cur_st == WFD1)
                               && bmu_xx_ibus_trans_cmplt
                          || (cur_st == WFD1WFG2)
                               && bmu_xx_ibus_trans_cmplt;

assign ibus_prot_buf = ((cur_st == IDLE) || (cur_st == WFD1))
                    && ((nxt_st == WFG1) || (nxt_st == WFD1WFG2));

assign ibus_prot_buf_sel = (cur_st == WFG1) || (cur_st == WFD1WFG2);

assign ibus_req = ibus_inst_req || iu_ifu_data_fetch;



always @(posedge ifu_misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    abort_cur_st <= ABORT_IDLE;
  else
    abort_cur_st <= abort_nxt_st;
end


always @( abort_cur_st
       or bmu_xx_ibus_trans_cmplt
       or ibus_abort_trig)
begin
case(abort_cur_st)
ABORT_IDLE:
begin
  abort_nxt_st = ABORT_IDLE;
  if(ibus_abort_trig)
    abort_nxt_st = ABORT_VLD;
end
ABORT_VLD:
begin
  abort_nxt_st = ABORT_VLD;
  if(bmu_xx_ibus_trans_cmplt)
    abort_nxt_st = ABORT_IDLE;
end
default:
begin
  abort_nxt_st = ABORT_IDLE;
end
endcase

end

assign ibus_trans_abort = (abort_cur_st == ABORT_VLD);

assign ibusif_top_clk_en = ibus_abort_trig || ibus_trans_abort;










































assign ibus_inst_no_bypass = ibus_inst_mls ||
                             ibus_inst_mult16 ||
                             ibus_inst_mult32 ||
                             ibus_inst_push_pop ||
                             ibus_inst_nest_int ||
                             ibus_inst_br16 ||
                             ibus_inst_rts16 ||
                             ibus_inst_br32 ||
                             ibus_inst_bsr32;


assign ibus_inst_mls = (ibus_data[31:27] == 5'b11010);


assign ibus_inst_mult16 = 1'b0;
assign ibus_inst_mult32 = 1'b0;
assign ibus_inst_mult32_low = 1'b0;


assign ibus_inst_push_pop = ({ibus_data[31:26], ibus_data[23], ibus_data[21]} == 8'b00010110);


assign ibus_inst_nest_int = ({ibus_data[31:26], ibus_data[23:22]} == 8'b00010101);


assign ibus_inst_br16  = (ibus_data[31:28] == 4'b0) && (ibus_data[27:26] != 2'b0); //bt/bf/br16
assign ibus_inst_rts16 = ({ibus_data[31:26],ibus_data[21:16]}
                               == 12'b011110111100);//jmp16 r15

assign ibus_inst_br32  = (ibus_data[31:23] == 9'b111010000);//bt/bf/br32
assign ibus_inst_bsr32 = (ibus_data[31:26] == 6'b111000);//bsr32









assign ibus_inst_high_predecode_br = ((ibus_data[31:28] == 4'b0) 
                                       && (ibus_data[27:26] != 2'b0)
                                     ) ||//bt16 bf16 br16
                                     (ibus_data[31:23] == 9'b111010000);  //bt/bf/br32





assign ibus_br_high_predecode_info  = ibus_inst_high_predecode_br;







assign ibus_inst_low_predecode_br = ((ibus_data[15:12] == 4'b0000) &&
                                     (ibus_data[11:10] != 2'b00)
                                    ) ||//bt16 bf16 br16
                                    (ibus_data[15:7] == 9'b111010000);//bt/bf/br32







assign ibus_br_low_predecode_info = ibus_inst_low_predecode_br;








assign ifu_bmu_req = ibus_req;
assign ifu_bmu_idle = ibus_no_outstanding;

assign ifu_bmu_wfd1 = (cur_st == WFD1) || (cur_st == IDLE);
assign ifu_bmu_addr[31:0] = {ibus_addr[30:1], 2'b0};
assign ifu_bmu_prot[3:0] = ibus_prot_buf_sel ? ibus_prot_reg[3:0]
                                             : ibus_prot[3:0];




assign ibusif_ifctrl_inst_no_bypass = ibus_inst_no_bypass;
assign ibusif_ifctrl_inst_mult32_low = ibus_inst_mult32_low;





assign ibusif_ibuf_high_predecode_info = ibus_br_high_predecode_info;
assign ibusif_ibuf_low_predecode_info  = ibus_br_low_predecode_info;
assign ibusif_ibuf_no_trans            = (cur_st == IDLE);




assign ibusif_xx_ibus_idle = !ibus_busy;
assign ibusif_xx_data[31:0] = ibus_data[31:0];
assign ibusif_xx_acc_err = ibus_acc_err && !iu_yy_xx_dbgon;
assign ibusif_xx_unalign_fetch = unalign_fetch_reg;

assign ibusif_xx_trans_cmplt = ibus_inst_fetch_cmplt
                               && !iu_ifu_inst_fetch_mask //when expt no inst to ifu is valid
                               && !iu_yy_xx_dbgon;
assign ibusif_xx_16bit_inst = !(ibus_data[31:30] == 2'b11);




assign ifu_iu_ibus_idle = !ibus_busy;
assign ifu_iu_vector_ibus_in_idle = (cur_st == IDLE);
assign ifu_iu_xx_ibus_data[31:0] = ibus_data_pre[31:0];




assign ifu_cp0_lpmd_ack = cp0_ifu_lpmd_req && (cur_st == IDLE);



endmodule



























module nm_ifu_ifctrl(
  addrgen_ifctrl_inst_br_taken,
  addrgen_ifctrl_inst_jmp_r15,
  addrgen_xx_ibus_idle,
  cpuclk,
  cpurst_b,
  had_core_dbg_mode_req,
  ibuf_ifctrl_inst16_vld,
  ibuf_ifctrl_inst32_vld,
  ibuf_ifctrl_peak_power_mask,
  ibuf_ifctrl_pop0_branch32,
  ibuf_ifctrl_pop0_mls32,
  ibuf_ifctrl_pop0_mult32_high,
  ibuf_ifdp_inst_dbg_disable,
  ibuf_xx_empty,
  ibuf_xx_pop0_vld,
  ibuf_xx_pop1_vld,
  ibusif_ifctrl_inst_mult32_low,
  ibusif_ifctrl_inst_no_bypass,
  ibusif_xx_16bit_inst,
  ibusif_xx_trans_cmplt,
  ibusif_xx_unalign_fetch,
  ifctrl_addrgen_inst_vld_no_cancel,
  ifctrl_ibuf_bypass_vld,
  ifctrl_ibuf_inst_pipe_down,
  ifctrl_ibuf_pop_en,
  ifctrl_ifdp_pipe_down,
  ifctrl_ifdp_pipe_down_for_hs,
  ifctrl_ifdp_power_related_bypass_vld,
  ifctrl_split_inst_vld_no_cancel,
  ifctrl_xx_ex_inst_vld_for_peak_power,
  ifctrl_xx_ifcancel,
  ifctrl_xx_random_inst_vld,
  ifu_iu_ex_inst_vld,
  ifu_iu_inst_buf_inst_dbg_disable,
  ifu_iu_inst_buf_inst_vld,
  iu_ifu_ex_stall,
  iu_ifu_inst_fetch,
  iu_ifu_inst_fetch_without_dbg_disable,
  iu_ifu_not_wait_for_dbg_disable,
  iu_ifu_r15_vld,
  iu_yy_xx_dbgon,
  iu_yy_xx_flush,
  pwrm_cpu_avrg_power_inst_issue,
  split_ifctrl_hs_inst_vld,
  split_ifctrl_hs_stall,
  split_ifctrl_hs_stall_part,
  split_ifctrl_int_acc_stall,
  split_ifctrl_mult_stall,
  split_ifctrl_push_pop_stall,
  split_xx_on,
  split_xx_stall
);


input        addrgen_ifctrl_inst_br_taken;         
input        addrgen_ifctrl_inst_jmp_r15;          
input        addrgen_xx_ibus_idle;                 
input        cpuclk;                               
input        cpurst_b;                             
input        had_core_dbg_mode_req;                
input        ibuf_ifctrl_inst16_vld;               
input        ibuf_ifctrl_inst32_vld;               
input        ibuf_ifctrl_peak_power_mask;          
input        ibuf_ifctrl_pop0_branch32;            
input        ibuf_ifctrl_pop0_mls32;               
input        ibuf_ifctrl_pop0_mult32_high;         
input        ibuf_ifdp_inst_dbg_disable;           
input        ibuf_xx_empty;                        
input        ibuf_xx_pop0_vld;                     
input        ibuf_xx_pop1_vld;                     
input        ibusif_ifctrl_inst_mult32_low;        
input        ibusif_ifctrl_inst_no_bypass;         
input        ibusif_xx_16bit_inst;                 
input        ibusif_xx_trans_cmplt;                
input        ibusif_xx_unalign_fetch;              
input        iu_ifu_ex_stall;                      
input        iu_ifu_inst_fetch;                    
input        iu_ifu_inst_fetch_without_dbg_disable; 
input        iu_ifu_not_wait_for_dbg_disable;      
input        iu_ifu_r15_vld;                       
input        iu_yy_xx_dbgon;                       
input        iu_yy_xx_flush;                       
input        pwrm_cpu_avrg_power_inst_issue;       
input        split_ifctrl_hs_inst_vld;             
input        split_ifctrl_hs_stall;                
input        split_ifctrl_hs_stall_part;           
input        split_ifctrl_int_acc_stall;           
input        split_ifctrl_mult_stall;              
input        split_ifctrl_push_pop_stall;          
input        split_xx_on;                          
input        split_xx_stall;                       
output       ifctrl_addrgen_inst_vld_no_cancel;    
output       ifctrl_ibuf_bypass_vld;               
output       ifctrl_ibuf_inst_pipe_down;           
output       ifctrl_ibuf_pop_en;                   
output       ifctrl_ifdp_pipe_down;                
output       ifctrl_ifdp_pipe_down_for_hs;         
output       ifctrl_ifdp_power_related_bypass_vld; 
output       ifctrl_split_inst_vld_no_cancel;      
output       ifctrl_xx_ex_inst_vld_for_peak_power; 
output       ifctrl_xx_ifcancel;                   
output       ifctrl_xx_random_inst_vld;            
output       ifu_iu_ex_inst_vld;                   
output       ifu_iu_inst_buf_inst_dbg_disable;     
output       ifu_iu_inst_buf_inst_vld;             


reg          ex_inst_vld;                          


wire         addrgen_ifctrl_inst_br_taken;         
wire         addrgen_ifctrl_inst_jmp_r15;          
wire         addrgen_xx_ibus_idle;                 
wire         branch_taken_stall;                   
wire         cpuclk;                               
wire         cpurst_b;                             
wire         had_core_dbg_mode_req;                
wire         ibuf_bypass_vld;                      
wire         ibuf_ifctrl_inst16_vld;               
wire         ibuf_ifctrl_inst32_vld;               
wire         ibuf_ifctrl_peak_power_mask;          
wire         ibuf_ifctrl_pop0_branch32;            
wire         ibuf_ifctrl_pop0_mls32;               
wire         ibuf_ifctrl_pop0_mult32_high;         
wire         ibuf_ifdp_inst_dbg_disable;           
wire         ibuf_inst_vld;                        
wire         ibuf_pop_en;                          
wire         ibuf_xx_empty;                        
wire         ibuf_xx_pop0_vld;                     
wire         ibuf_xx_pop1_vld;                     
wire         ibus_bypass_inst_vld;                 
wire         ibusif_ifctrl_inst_mult32_low;        
wire         ibusif_ifctrl_inst_no_bypass;         
wire         ibusif_xx_16bit_inst;                 
wire         ibusif_xx_trans_cmplt;                
wire         ibusif_xx_unalign_fetch;              
wire         if_cancel;                            
wire         if_cancel_for_pipeline;               
wire         if_inst_stall;                        
wire         if_inst_vld;                          
wire         if_inst_vld_for_ex;                   
wire         if_inst_vld_for_ex_aft_hs;            
wire         if_pipe_down;                         
wire         if_pipe_down_for_hs;                  
wire         ifctrl_addrgen_inst_vld_no_cancel;    
wire         ifctrl_ibuf_bypass_vld;               
wire         ifctrl_ibuf_inst_pipe_down;           
wire         ifctrl_ibuf_pop_en;                   
wire         ifctrl_ifdp_pipe_down;                
wire         ifctrl_ifdp_pipe_down_for_hs;         
wire         ifctrl_ifdp_power_related_bypass_vld; 
wire         ifctrl_split_inst_vld_no_cancel;      
wire         ifctrl_xx_ex_inst_vld_for_peak_power; 
wire         ifctrl_xx_ifcancel;                   
wire         ifctrl_xx_random_inst_vld;            
wire         ifu_iu_ex_inst_vld;                   
wire         ifu_iu_inst_buf_inst_dbg_disable;     
wire         ifu_iu_inst_buf_inst_vld;             
wire         inst_vld;                             
wire         iu_ifu_ex_stall;                      
wire         iu_ifu_inst_fetch;                    
wire         iu_ifu_inst_fetch_without_dbg_disable; 
wire         iu_ifu_not_wait_for_dbg_disable;      
wire         iu_ifu_r15_vld;                       
wire         iu_yy_xx_dbgon;                       
wire         iu_yy_xx_flush;                       
wire         jmp_r15_stall;                        
wire         power_related_bypass_vld;             
wire         pwrm_cpu_avrg_power_inst_issue;       
wire         random_inst_vld;                      
wire         seu_core_rbi_issue_en;                
wire         seu_xx_random_inst_vld;               
wire         split_ifctrl_hs_inst_vld;             
wire         split_ifctrl_hs_stall;                
wire         split_ifctrl_hs_stall_part;           
wire         split_ifctrl_int_acc_stall;           
wire         split_ifctrl_mult_stall;              
wire         split_ifctrl_push_pop_stall;          
wire         split_xx_on;                          
wire         split_xx_stall;                       





assign seu_core_rbi_issue_en = 1'b1;
assign seu_xx_random_inst_vld = 1'b0;





assign power_related_bypass_vld = !ibuf_ifctrl_peak_power_mask &&
                                  pwrm_cpu_avrg_power_inst_issue &&
                                  seu_core_rbi_issue_en &&
                                  !split_ifctrl_hs_stall_part;

assign random_inst_vld = seu_xx_random_inst_vld &&
                         !iu_yy_xx_dbgon &&
                         !had_core_dbg_mode_req &&
                         !split_xx_on &&
                         !ibuf_ifctrl_peak_power_mask &&
                         pwrm_cpu_avrg_power_inst_issue &&
                         seu_core_rbi_issue_en &&
                         !split_ifctrl_hs_stall_part;

assign ibuf_inst_vld = (ibuf_ifctrl_inst32_vld ||
                        ibuf_ifctrl_inst16_vld
                       ) 
                    && !split_ifctrl_hs_stall
                    && !split_ifctrl_int_acc_stall;



assign inst_vld = random_inst_vld ||
                  ibuf_inst_vld ||
                  ibus_bypass_inst_vld;






assign ibus_bypass_inst_vld = ibusif_xx_trans_cmplt &&
                              power_related_bypass_vld &&

                              ( (ibuf_xx_empty &&
                                 (!ibusif_xx_unalign_fetch ||
                                  ibusif_xx_16bit_inst 
                                 ) &&
                                 !ibusif_ifctrl_inst_no_bypass
                                ) ||



                                (ibuf_xx_pop0_vld &&
                                 !ibuf_xx_pop1_vld &&
                                 !ibuf_ifctrl_inst16_vld &&
                                 !(ibuf_ifctrl_pop0_branch32 ||
                                   ibuf_ifctrl_pop0_mls32 ||
                                   ibuf_ifctrl_pop0_mult32_high &&
                                   ibusif_ifctrl_inst_mult32_low
                                  )
                                )
                              );


assign if_inst_vld = inst_vld && !if_cancel; 
                 

assign if_inst_vld_for_ex = if_inst_vld && !if_inst_stall;

assign if_inst_stall = //cond_br_stall ||
                       branch_taken_stall ||
                       jmp_r15_stall ||
                       split_ifctrl_push_pop_stall ||
                       split_ifctrl_mult_stall;




assign branch_taken_stall = addrgen_ifctrl_inst_br_taken &&
                            !addrgen_xx_ibus_idle;

assign jmp_r15_stall     = addrgen_ifctrl_inst_jmp_r15 &&
                           (!addrgen_xx_ibus_idle ||
                            !iu_ifu_r15_vld
                           );







assign if_cancel = iu_ifu_inst_fetch || iu_yy_xx_flush;

assign if_cancel_for_pipeline = iu_ifu_inst_fetch_without_dbg_disable 
                                && !split_ifctrl_hs_stall_part 
                             || iu_yy_xx_flush;








assign if_pipe_down = if_inst_vld_for_ex && !iu_ifu_ex_stall;

assign if_pipe_down_for_hs = split_ifctrl_hs_inst_vld && !iu_ifu_ex_stall;




assign if_inst_vld_for_ex_aft_hs = if_inst_vld_for_ex
                                || split_ifctrl_hs_inst_vld;
always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ex_inst_vld <= 1'b0;
  else if(if_cancel_for_pipeline)
    ex_inst_vld <= 1'b0;
  else if(!iu_ifu_ex_stall)
    ex_inst_vld <= if_inst_vld_for_ex_aft_hs;
end

assign ifu_iu_ex_inst_vld = ex_inst_vld;

assign ifu_iu_inst_buf_inst_vld = ibuf_ifctrl_inst32_vld || ibuf_ifctrl_inst16_vld;
assign ifu_iu_inst_buf_inst_dbg_disable = ibuf_ifdp_inst_dbg_disable;












assign ibuf_bypass_vld = if_pipe_down &&
                         ibus_bypass_inst_vld &&
                         !random_inst_vld;




assign ibuf_pop_en = if_pipe_down &&
                     !random_inst_vld &&
                     !split_xx_stall;










assign ifctrl_xx_ifcancel = if_cancel;
assign ifctrl_xx_random_inst_vld = random_inst_vld;
assign ifctrl_xx_ex_inst_vld_for_peak_power = ex_inst_vld &&
                                              iu_ifu_not_wait_for_dbg_disable;




assign ifctrl_ibuf_bypass_vld = ibuf_bypass_vld;
assign ifctrl_ibuf_inst_pipe_down = if_pipe_down && !random_inst_vld;
assign ifctrl_ibuf_pop_en = ibuf_pop_en;





assign ifctrl_split_inst_vld_no_cancel = (ibuf_ifctrl_inst32_vld ||
                                          ibuf_ifctrl_inst16_vld )								
                                      && !split_ifctrl_hs_stall;




assign ifctrl_ifdp_pipe_down = if_pipe_down;
assign ifctrl_ifdp_pipe_down_for_hs = if_pipe_down_for_hs;
assign ifctrl_ifdp_power_related_bypass_vld = power_related_bypass_vld;




assign ifctrl_addrgen_inst_vld_no_cancel = ibuf_inst_vld;







endmodule


























module nm_ifu_ifdp(
  addrgen_ifdp_br_vld,
  addrgen_ifdp_brchgflw_pc,
  cp0_ifu_ee,
  cp0_yy_clk_en,
  cpurst_b,
  forever_cpuclk,
  had_core_dbg_mode_req,
  had_ifu_inst_bkpt_dbq_req,
  had_ifu_inst_bkpt_dbqexp_req,
  had_yy_xx_dp_index_mbee,
  ibuf_ifdp_acc_err,
  ibuf_ifdp_inst,
  ibuf_ifdp_pop0_acc_err,
  ibuf_xx_empty,
  ibuf_xx_pop0_vld,
  ibuf_xx_pop1_vld,
  ibusif_ifdp_ifpc,
  ibusif_xx_acc_err,
  ibusif_xx_data,
  ifctrl_ifdp_pipe_down,
  ifctrl_ifdp_pipe_down_for_hs,
  ifctrl_ifdp_power_related_bypass_vld,
  ifctrl_xx_random_inst_vld,
  ifdp_ibusif_32bit,
  ifdp_split_inst,
  ifdp_split_inst32,
  ifu_had_chg_flw_inst,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_dst_reg,
  ifu_iu_ex_expt_vld,
  ifu_iu_ex_imm,
  ifu_iu_ex_inst_bkpt,
  ifu_iu_ex_inst_dbg_disable,
  ifu_iu_ex_int_spcu_mask,
  ifu_iu_ex_int_spcu_vld,
  ifu_iu_ex_main_unit_sel,
  ifu_iu_ex_ni,
  ifu_iu_ex_op,
  ifu_iu_ex_pcode,
  ifu_iu_ex_predec_imm_vld,
  ifu_iu_ex_prvlg_expt_vld,
  ifu_iu_ex_rand_vld,
  ifu_iu_ex_sop,
  ifu_iu_ex_sp_oper,
  ifu_iu_ex_split_on,
  ifu_iu_ex_src0_reg,
  ifu_iu_ex_src1_reg,
  ifu_iu_inst_bkpt_dbg_occur_vld,
  ifu_iu_inst_bkpt_dbgexp_occur_vld,
  iu_ifu_imm_data,
  iu_ifu_imm_write_en,
  iu_ifu_kill_inst,
  pad_yy_gate_clk_en_b,
  randclk_ifdp_immh_mod_en_w16,
  randclk_ifdp_imml_mod_en_w8,
  randclk_ifdp_other_info_mod_en_w8,
  randclk_ifdp_pcode_mod_en_w5,
  randclk_ifdp_reg_mod_en_w48,
  randclk_ifdp_src1_mod_en_w5,
  split_ifdp_cr_oper,
  split_ifdp_dest_sel,
  split_ifdp_gpr_index,
  split_ifdp_hs_dest,
  split_ifdp_hs_inst,
  split_ifdp_hs_src1,
  split_ifdp_imm,
  split_ifdp_imm_sel,
  split_ifdp_int_acc_imm,
  split_ifdp_int_acc_sel,
  split_ifdp_int_mask,
  split_ifdp_int_spcu_mask,
  split_ifdp_int_spcu_vld,
  split_ifdp_mult_vld,
  split_ifdp_op,
  split_ifdp_op_sop_sel,
  split_ifdp_pcode,
  split_ifdp_pcode_sel,
  split_ifdp_pop_vld,
  split_ifdp_prvlg_expt_vld,
  split_ifdp_sop,
  split_ifdp_sp_oper,
  split_ifdp_split_first,
  split_ifdp_src0,
  split_ifdp_src0_sel,
  split_ifdp_src1_sel,
  split_xx_stall
);


input           addrgen_ifdp_br_vld;                 
input   [31:0]  addrgen_ifdp_brchgflw_pc;            
input           cp0_ifu_ee;                          
input           cp0_yy_clk_en;                       
input           cpurst_b;                            
input           forever_cpuclk;                      
input           had_core_dbg_mode_req;               
input           had_ifu_inst_bkpt_dbq_req;           
input           had_ifu_inst_bkpt_dbqexp_req;        
input           had_yy_xx_dp_index_mbee;             
input           ibuf_ifdp_acc_err;                   
input   [31:0]  ibuf_ifdp_inst;                      
input           ibuf_ifdp_pop0_acc_err;              
input           ibuf_xx_empty;                       
input           ibuf_xx_pop0_vld;                    
input           ibuf_xx_pop1_vld;                    
input   [30:0]  ibusif_ifdp_ifpc;                    
input           ibusif_xx_acc_err;                   
input   [31:0]  ibusif_xx_data;                      
input           ifctrl_ifdp_pipe_down;               
input           ifctrl_ifdp_pipe_down_for_hs;        
input           ifctrl_ifdp_power_related_bypass_vld; 
input           ifctrl_xx_random_inst_vld;           
input   [31:0]  iu_ifu_imm_data;                     
input           iu_ifu_imm_write_en;                 
input           iu_ifu_kill_inst;                    
input           pad_yy_gate_clk_en_b;                
input           randclk_ifdp_immh_mod_en_w16;        
input           randclk_ifdp_imml_mod_en_w8;         
input           randclk_ifdp_other_info_mod_en_w8;   
input           randclk_ifdp_pcode_mod_en_w5;        
input           randclk_ifdp_reg_mod_en_w48;         
input           randclk_ifdp_src1_mod_en_w5;         
input           split_ifdp_cr_oper;                  
input           split_ifdp_dest_sel;                 
input   [4 :0]  split_ifdp_gpr_index;                
input           split_ifdp_hs_dest;                  
input           split_ifdp_hs_inst;                  
input           split_ifdp_hs_src1;                  
input   [4 :0]  split_ifdp_imm;                      
input           split_ifdp_imm_sel;                  
input   [4 :0]  split_ifdp_int_acc_imm;              
input           split_ifdp_int_acc_sel;              
input           split_ifdp_int_mask;                 
input           split_ifdp_int_spcu_mask;            
input           split_ifdp_int_spcu_vld;             
input           split_ifdp_mult_vld;                 
input   [5 :0]  split_ifdp_op;                       
input           split_ifdp_op_sop_sel;               
input   [4 :0]  split_ifdp_pcode;                    
input           split_ifdp_pcode_sel;                
input           split_ifdp_pop_vld;                  
input           split_ifdp_prvlg_expt_vld;           
input   [5 :0]  split_ifdp_sop;                      
input           split_ifdp_sp_oper;                  
input           split_ifdp_split_first;              
input   [4 :0]  split_ifdp_src0;                     
input           split_ifdp_src0_sel;                 
input           split_ifdp_src1_sel;                 
input           split_xx_stall;                      
output          ifdp_ibusif_32bit;                   
output  [31:0]  ifdp_split_inst;                     
output          ifdp_split_inst32;                   
output          ifu_had_chg_flw_inst;                
output          ifu_had_fetch_expt_vld;              
output          ifu_had_inst_dbg_disable;            
output  [31:0]  ifu_had_match_pc;                    
output          ifu_had_split_first;                 
output          ifu_iu_ex_cr_oper;                   
output  [4 :0]  ifu_iu_ex_dst_reg;                   
output          ifu_iu_ex_expt_vld;                  
output  [31:0]  ifu_iu_ex_imm;                       
output          ifu_iu_ex_inst_bkpt;                 
output          ifu_iu_ex_inst_dbg_disable;          
output          ifu_iu_ex_int_spcu_mask;             
output          ifu_iu_ex_int_spcu_vld;              
output  [1 :0]  ifu_iu_ex_main_unit_sel;             
output          ifu_iu_ex_ni;                        
output  [5 :0]  ifu_iu_ex_op;                        
output  [4 :0]  ifu_iu_ex_pcode;                     
output          ifu_iu_ex_predec_imm_vld;            
output          ifu_iu_ex_prvlg_expt_vld;            
output          ifu_iu_ex_rand_vld;                  
output  [5 :0]  ifu_iu_ex_sop;                       
output          ifu_iu_ex_sp_oper;                   
output          ifu_iu_ex_split_on;                  
output  [4 :0]  ifu_iu_ex_src0_reg;                  
output  [4 :0]  ifu_iu_ex_src1_reg;                  
output          ifu_iu_inst_bkpt_dbg_occur_vld;      
output          ifu_iu_inst_bkpt_dbgexp_occur_vld;   


reg     [4 :0]  dest_16;                             
reg     [4 :0]  dest_32;                             
reg             dest_update_16;                      
reg             dest_update_32;                      
reg             expt_vld_pre;                        
reg             ifu_iu_ex_cr_oper;                   
reg     [4 :0]  ifu_iu_ex_dst_reg;                   
reg             ifu_iu_ex_expt_vld;                  
reg     [31:0]  ifu_iu_ex_imm;                       
reg             ifu_iu_ex_inst_bkpt;                 
reg             ifu_iu_ex_int_spcu_mask;             
reg             ifu_iu_ex_int_spcu_vld;              
reg     [1 :0]  ifu_iu_ex_main_unit_sel;             
reg             ifu_iu_ex_ni;                        
reg     [5 :0]  ifu_iu_ex_op;                        
reg     [4 :0]  ifu_iu_ex_pcode;                     
reg             ifu_iu_ex_predec_imm_vld;            
reg             ifu_iu_ex_prvlg_expt_vld;            
reg             ifu_iu_ex_rand_vld;                  
reg     [5 :0]  ifu_iu_ex_sop;                       
reg             ifu_iu_ex_sp_oper;                   
reg             ifu_iu_ex_split_on;                  
reg     [4 :0]  ifu_iu_ex_src0_reg;                  
reg     [4 :0]  ifu_iu_ex_src1_reg;                  
reg             ifu_iu_inst_bkpt_dbg_occur_vld;      
reg     [15:0]  imm16_16;                            
reg     [15:0]  imm16_32;                            
reg     [31:0]  inst_internal;                       
reg             predecd_main_dupalu_sel;             
reg             predecd_main_lsu_sel;                
reg             predecd_src1_imm_vld;                
reg     [4 :0]  src0_16;                             
reg             src0_update_16;                      
reg     [4 :0]  src1_16;                             
reg     [4 :0]  src1_32;                             
reg             src1_update_16;                      
reg             src1_update_32;                      
reg             sub_op_update_16;                    
reg             sub_op_update_32;                    


wire            addrgen_ifdp_br_vld;                 
wire    [31:0]  addrgen_ifdp_brchgflw_pc;            
wire    [15:0]  bstack_imm;                          
wire            bstack_inst_vld;                     
wire            cp0_ifu_ee;                          
wire            cp0_yy_clk_en;                       
wire            cpurst_b;                            
wire    [4 :0]  dest;                                
wire    [4 :0]  dest_for_arith_misc;                 
wire    [4 :0]  dest_for_arith_reg;                  
wire    [4 :0]  dest_for_imm_1op;                    
wire    [4 :0]  dest_for_stack;                      
wire    [4 :0]  dest_post;                           
wire            dest_update;                         
wire            expt_vld;                            
wire            expt_vld_aft_hs;                     
wire            expt_when_ibuf_one_entry_vld;        
wire            forever_cpuclk;                      
wire            had_core_dbg_mode_req;               
wire            had_ifu_inst_bkpt_dbq_req;           
wire            had_ifu_inst_bkpt_dbqexp_req;        
wire            had_yy_xx_dp_index_mbee;             
wire            ibuf_ifdp_acc_err;                   
wire    [31:0]  ibuf_ifdp_inst;                      
wire            ibuf_ifdp_pop0_acc_err;              
wire            ibuf_xx_empty;                       
wire            ibuf_xx_pop0_vld;                    
wire            ibuf_xx_pop1_vld;                    
wire    [30:0]  ibusif_ifdp_ifpc;                    
wire            ibusif_xx_acc_err;                   
wire    [31:0]  ibusif_xx_data;                      
wire            if_bkpt_vld;                         
wire    [31:0]  if_inst_16;                          
wire    [31:0]  if_inst_32;                          
wire            if_inst_32_bit;                      
wire    [31:0]  if_inst_post;                        
wire            ifctrl_ifdp_pipe_down;               
wire            ifctrl_ifdp_pipe_down_for_hs;        
wire            ifctrl_ifdp_power_related_bypass_vld; 
wire            ifctrl_xx_random_inst_vld;           
wire            ifdp_dest_upd_en;                    
wire            ifdp_ibusif_32bit;                   
wire            ifdp_imm_15_0_upd_clk;               
wire            ifdp_imm_15_0_upd_en;                
wire            ifdp_imm_31_16_upd_clk;              
wire            ifdp_imm_31_16_upd_en;               
wire            ifdp_imm_upd_en;                     
wire            ifdp_jmp_jsr_inst;                   
wire            ifdp_jmpix;                          
wire            ifdp_op_upd_en;                      
wire            ifdp_other_info_upd_clk;             
wire            ifdp_other_info_upd_en;              
wire            ifdp_pcode_clk_en;                   
wire            ifdp_pcode_upd_clk;                  
wire            ifdp_pcode_upd_en;                   
wire            ifdp_pcode_vld;                      
wire            ifdp_reg_upd_clk;                    
wire            ifdp_reg_upd_en;                     
wire            ifdp_sop_upd_clk;                    
wire            ifdp_sop_upd_en;                     
wire    [31:0]  ifdp_split_inst;                     
wire            ifdp_split_inst32;                   
wire            ifdp_src0_upd_en;                    
wire            ifdp_src1_upd_clk;                   
wire            ifdp_src1_upd_en;                    
wire            ifu_had_chg_flw_inst;                
wire            ifu_had_fetch_expt_vld;              
wire            ifu_had_inst_dbg_disable;            
wire    [31:0]  ifu_had_match_pc;                    
wire            ifu_had_split_first;                 
wire            ifu_iu_ex_fix_mult;                  
wire    [15:0]  ifu_iu_ex_imm_post;                  
wire    [15:0]  ifu_iu_ex_imm_post_31_16;            
wire            ifu_iu_ex_inst_dbg_disable;          
wire            ifu_iu_inst_bkpt_dbgexp_occur_vld;   
wire            imm12_32bit;                         
wire    [15:0]  imm16;                               
wire            imm16_32bit;                         
wire    [15:0]  imm16_post;                          
wire    [15:0]  imm16_post_pre;                      
wire            imm18_grs_32bit;                     
wire            imm3_16bit;                          
wire            imm5_16bit;                          
wire            imm5_low_32bit;                      
wire            imm5_mfcr_32bit;                     
wire            imm5_mtcr_32bit;                     
wire            imm5_normal_32bit;                   
wire            imm7_16bit;                          
wire            imm8_16bit;                          
wire            imm8_16bit_ldst_sp;                  
wire            imm8_inv_16bit;                      
wire            imm_common_vld;                      
wire            imm_update;                          
wire            inst_bkpt;                           
wire            inst_bkpt_aft_hs;                    
wire            inst_dbg_disable;                    
wire    [31:0]  iu_ifu_imm_data;                     
wire            iu_ifu_imm_write_en;                 
wire            iu_ifu_kill_inst;                    
wire    [5 :0]  major_op;                            
wire    [5 :0]  major_op_aft_random_inst;            
wire    [5 :0]  major_op_post;                       
wire            pad_yy_gate_clk_en_b;                
wire    [4 :0]  pcode;                               
wire            pcode_init;                          
wire    [4 :0]  pcode_post;                          
wire    [4 :0]  pcode_post_pre;                      
wire            predec_arith_misc;                   
wire            predec_cmp_reg;                      
wire            predec_ext;                          
wire            predec_ff1;                          
wire            predec_grs_vld;                      
wire            predec_inc_cond;                     
wire            predec_inc_cond_sop;                 
wire            predec_op_arith_reg;                 
wire            predec_src0_special;                 
wire            predec_tstnbz_or_mov;                
wire            predecd_main_dupalu_sel_aft_hs;      
wire    [1 :0]  predecd_main_unit_sel;               
wire    [8 :0]  predecode_info_for_ex_stage;         
wire    [16:0]  predecode_info_for_ex_stage_dupalu;  
wire            randclk_ifdp_immh_mod_en_w16;        
wire            randclk_ifdp_imml_mod_en_w8;         
wire            randclk_ifdp_other_info_mod_en_w8;   
wire            randclk_ifdp_pcode_mod_en_w5;        
wire            randclk_ifdp_reg_mod_en_w48;         
wire            randclk_ifdp_src1_mod_en_w5;         
wire            seu_xx_fix_mult;                     
wire    [31:0]  seu_xx_random_inst;                  
wire            split_ifdp_cr_oper;                  
wire            split_ifdp_dest_sel;                 
wire    [4 :0]  split_ifdp_gpr_index;                
wire            split_ifdp_hs_dest;                  
wire            split_ifdp_hs_inst;                  
wire            split_ifdp_hs_src1;                  
wire    [4 :0]  split_ifdp_imm;                      
wire            split_ifdp_imm_sel;                  
wire    [4 :0]  split_ifdp_int_acc_imm;              
wire            split_ifdp_int_acc_sel;              
wire            split_ifdp_int_mask;                 
wire            split_ifdp_int_spcu_mask;            
wire            split_ifdp_int_spcu_vld;             
wire            split_ifdp_mult_vld;                 
wire    [5 :0]  split_ifdp_op;                       
wire            split_ifdp_op_sop_sel;               
wire    [4 :0]  split_ifdp_pcode;                    
wire            split_ifdp_pcode_sel;                
wire            split_ifdp_pop_vld;                  
wire            split_ifdp_prvlg_expt_vld;           
wire    [5 :0]  split_ifdp_sop;                      
wire            split_ifdp_sp_oper;                  
wire            split_ifdp_split_first;              
wire    [4 :0]  split_ifdp_src0;                     
wire            split_ifdp_src0_sel;                 
wire            split_ifdp_src1_sel;                 
wire            split_xx_stall;                      
wire    [4 :0]  src0;                                
wire    [4 :0]  src0_32;                             
wire    [3 :0]  src0_for_arith_reg;                  
wire    [4 :0]  src0_for_stack;                      
wire    [4 :0]  src0_post;                           
wire            src0_update;                         
wire            src0_update_32;                      
wire    [4 :0]  src1;                                
wire    [4 :0]  src1_for_arith_reg;                  
wire    [4 :0]  src1_post;                           
wire            src1_update;                         
wire            src1_vld_for_logic;                  
wire            src1_vld_for_stack;                  
wire    [5 :0]  sub_op;                              
wire    [5 :0]  sub_op_16;                           
wire    [5 :0]  sub_op_32;                           
wire    [5 :0]  sub_op_post;                         
wire            sub_op_update;                       
wire            sub_op_update_32_aft;                






assign seu_xx_random_inst[31:0] = 32'b0;





gated_clk_cell  x_ifdp_reg_upd_clkhdr (
  .clk_in                      (forever_cpuclk             ),
  .clk_out                     (ifdp_reg_upd_clk           ),
  .external_en                 (1'b0                       ),
  .global_en                   (cp0_yy_clk_en              ),
  .local_en                    (ifdp_reg_upd_en            ),
  .module_en                   (randclk_ifdp_reg_mod_en_w48),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);








assign ifdp_reg_upd_en = ifdp_op_upd_en;


gated_clk_cell  x_ifdp_other_info_upd_clkhdr (
  .clk_in                            (forever_cpuclk                   ),
  .clk_out                           (ifdp_other_info_upd_clk          ),
  .external_en                       (1'b0                             ),
  .global_en                         (cp0_yy_clk_en                    ),
  .local_en                          (ifdp_other_info_upd_en           ),
  .module_en                         (randclk_ifdp_other_info_mod_en_w8),
  .pad_yy_gate_clk_en_b              (pad_yy_gate_clk_en_b             )
);










gated_clk_cell  x_ifdp_sop_upd_clkhdr (
  .clk_in                            (forever_cpuclk                   ),
  .clk_out                           (ifdp_sop_upd_clk                 ),
  .external_en                       (1'b0                             ),
  .global_en                         (cp0_yy_clk_en                    ),
  .local_en                          (ifdp_sop_upd_en                  ),
  .module_en                         (randclk_ifdp_other_info_mod_en_w8),
  .pad_yy_gate_clk_en_b              (pad_yy_gate_clk_en_b             )
);



















gated_clk_cell  x_ifdp_src1_upd_clkhdr (
  .clk_in                      (forever_cpuclk             ),
  .clk_out                     (ifdp_src1_upd_clk          ),
  .external_en                 (1'b0                       ),
  .global_en                   (cp0_yy_clk_en              ),
  .local_en                    (ifdp_src1_upd_en           ),
  .module_en                   (randclk_ifdp_src1_mod_en_w5),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);































gated_clk_cell  x_ifdp_imm_15_0_upd_clkhdr (
  .clk_in                      (forever_cpuclk             ),
  .clk_out                     (ifdp_imm_15_0_upd_clk      ),
  .external_en                 (1'b0                       ),
  .global_en                   (cp0_yy_clk_en              ),
  .local_en                    (ifdp_imm_15_0_upd_en       ),
  .module_en                   (randclk_ifdp_imml_mod_en_w8),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);























gated_clk_cell  x_ifdp_pcode_upd_clkhdr (
  .clk_in                       (forever_cpuclk              ),
  .clk_out                      (ifdp_pcode_upd_clk          ),
  .external_en                  (1'b0                        ),
  .global_en                    (cp0_yy_clk_en               ),
  .local_en                     (ifdp_pcode_clk_en           ),
  .module_en                    (randclk_ifdp_pcode_mod_en_w5),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        )
);









assign ifdp_pcode_clk_en = pcode_init || ifdp_pcode_upd_en;
















always @( ibusif_xx_data[31:16]
       or ibuf_ifdp_inst[31:16]
       or ifctrl_ifdp_power_related_bypass_vld
       or ibuf_xx_empty)
begin
  if(ibuf_xx_empty && ifctrl_ifdp_power_related_bypass_vld)
    inst_internal[31:16] = ibusif_xx_data[31:16];
  else                           
    inst_internal[31:16] = ibuf_ifdp_inst[31:16];

end


always @( ibuf_xx_pop0_vld
       or ifctrl_ifdp_power_related_bypass_vld
       or ibuf_ifdp_inst[15:0]
       or ibusif_xx_data[31:0]
       or ibuf_xx_pop1_vld)
begin
  casez({ifctrl_ifdp_power_related_bypass_vld, ibuf_xx_pop0_vld, ibuf_xx_pop1_vld})
    3'b0??  : inst_internal[15:0] = ibuf_ifdp_inst[15:0];
    3'b10?  : inst_internal[15:0] = ibusif_xx_data[15:0];
    3'b110  : inst_internal[15:0] = ibusif_xx_data[31:16];
    3'b111  : inst_internal[15:0] = ibuf_ifdp_inst[15:0];
    default : inst_internal[15:0] = 16'bx;
  endcase

end



always @( ibuf_xx_pop0_vld
       or ibuf_ifdp_acc_err
       or ibuf_xx_pop1_vld
       or expt_when_ibuf_one_entry_vld
       or ibusif_xx_acc_err)
begin
  casez({ibuf_xx_pop0_vld, ibuf_xx_pop1_vld})
    2'b0?   : expt_vld_pre = ibusif_xx_acc_err; 
    2'b10   : expt_vld_pre = expt_when_ibuf_one_entry_vld;
    2'b11   : expt_vld_pre = ibuf_ifdp_acc_err;
    default : expt_vld_pre = 1'bx;
  endcase

end

assign expt_when_ibuf_one_entry_vld = (ibuf_ifdp_inst[31:30] == 2'b11) 
                                        ? (ibuf_ifdp_pop0_acc_err ||
                                           ibusif_xx_acc_err)
                                        : ibuf_ifdp_pop0_acc_err;


assign expt_vld = expt_vld_pre && !had_core_dbg_mode_req;








assign if_inst_post[31:0] = inst_internal[31:0];




assign if_bkpt_vld = had_core_dbg_mode_req || had_ifu_inst_bkpt_dbq_req
                  || had_ifu_inst_bkpt_dbqexp_req && cp0_ifu_ee
                  || iu_ifu_kill_inst && had_yy_xx_dp_index_mbee;

assign if_inst_32_bit = if_inst_post[31] && if_inst_post[30] && !if_bkpt_vld;
assign if_inst_32[31:0] = if_inst_32_bit ? if_inst_post[31:0] : 32'b0;
assign if_inst_16[31:0] = (if_bkpt_vld || if_inst_32_bit) ? 32'b0 : 
                                                           {if_inst_post[31:16],16'b0};




















assign predec_grs_vld=({if_inst_32[31:26],if_inst_32[20:18]}==9'b110011011);








assign major_op_aft_random_inst[5:0] = ifctrl_xx_random_inst_vld 
                                               ? seu_xx_random_inst[31:26]
                                               : if_inst_post[31:26];
assign major_op[5:0] = if_bkpt_vld? 6'b0 : 
                                    major_op_aft_random_inst[5:0];





assign sub_op_32[5:0] = predec_grs_vld?{3'b0,if_inst_32[20:18]}:(({if_inst_32[29], if_inst_32[27:26]} == 3'b110) 
                          ? if_inst_32[25:20]
                          : if_inst_32[15:10]);


always @( if_inst_32[31:26])
begin
  casez(if_inst_32[31:26])

  6'b11000? ,       //special arth_reg
  6'b1101?? ,       //ldi ldm sti stm
  6'b111001 ,       //imm_2op
  6'b111?10 : begin //imm_1op and SAT when prgsign
    sub_op_update_32 = 1'b1;
  end  
  default   : begin
    sub_op_update_32 = 1'b0;
  end 
  endcase

end


assign sub_op_16[5:0] = (if_inst_16[31:30]==2'b00)
                          ? {if_inst_16[23:21], if_inst_16[17:16], 1'b0}
                          : {if_inst_16[17:16], 4'b0};


always @( if_inst_16[31:26])
begin
  casez(if_inst_16[31:26])

  6'b000101 ,       //stack
  6'b00111? ,       //arith_imm
  6'b01011? ,       //arith_3op
  6'b011??? : begin //arith_reg
    sub_op_update_16 = 1'b1;
  end
  default   : begin
    sub_op_update_16 = 1'b0;
  end
  endcase

end
assign sub_op_update_32_aft=sub_op_update_32||predec_grs_vld;

assign sub_op_update = if_inst_32_bit ? sub_op_update_32_aft : sub_op_update_16;
assign sub_op[5:0]   = if_inst_32_bit ? sub_op_32[5:0]   : sub_op_16[5:0];








assign ifdp_pcode_vld = if_inst_32_bit  &&
                        !if_inst_32[29] &&
                        !if_inst_32[27]; 
assign pcode[4:0] = if_inst_32[9:5];







always @( if_inst_16[31:24]
       or src0_for_stack[4:0]
       or src0_for_arith_reg[3:0])
begin
  casez(if_inst_16[31:26])

    6'b000101 : begin //STACK
      src0_update_16 = 1'b1;
      src0_16[4:0] = src0_for_stack[4:0];
end 
    6'b00011? ,       //ADDI SP
    6'b10011? ,       //LD16 SP
    6'b10111? : begin //ST16 SP
      src0_update_16 = 1'b1;
      src0_16[4:0] = 5'b01110;
end           
    6'b001??? ,       //ARITH_IMM8
    6'b010??? ,       //ARTH_IMM5
    6'b1000?? ,       //
    6'b10010? ,       //LD16
    6'b1010?? ,       //
    6'b10110? : begin //ST16
      src0_update_16 = 1'b1;
      src0_16[4:0] = {2'b0, if_inst_16[26:24]};
      end
    6'b011??? : begin //ARITH REG
      src0_update_16 = 1'b1;
      src0_16[4:0] = {1'b0, src0_for_arith_reg[3:0]};
      end
    default : begin
      src0_update_16 = 1'b0;
      src0_16[4:0] = 5'b0;
      end
  endcase

end


assign src0_for_stack[4:0] = 5'b01110;


assign predec_tstnbz_or_mov = ({if_inst_16[28:27],if_inst_16[17:16]}
                                == 4'b0111);
assign predec_ext           = (if_inst_16[28:26] == 3'b101);
assign predec_arith_misc    = (if_inst_16[28:26] == 3'b110);
assign predec_cmp_reg       = (if_inst_16[28:26] == 3'b001);
assign predec_src0_special  = predec_tstnbz_or_mov ||
                              predec_ext ||
                              predec_arith_misc ||
                              predec_cmp_reg;

assign src0_for_arith_reg[3:0] = predec_src0_special ? if_inst_16[21:18]
                                                     : if_inst_16[25:22];



assign src0_update_32 = !(if_inst_32[31:26] == 6'b111000||predec_grs_vld);
assign src0_32[4:0]   = if_inst_32[20:16];

assign src0_update = if_inst_32_bit ? src0_update_32 : src0_update_16;
assign src0[4:0]   = if_inst_32_bit ? src0_32[4:0] : src0_16[4:0];






always @( if_inst_16[20:18]
       or if_inst_16[31:18])
begin
  casez(if_inst_16[31:26])



    6'b01011? : begin //ARITH 3OP 
      src1_16[4:0] = {2'b0, if_inst_16[20:18]};
      end
    6'b011001 : begin //CMP_REG  mvc
      src1_16[4:0] = {1'b0, if_inst_16[25:22]};
      end
    6'b011000 ,       //ADD_REG
    6'b01101? ,       //LOGIC_OR  LOGIC_AND
    6'b011100 ,       //SHIFT_REG
    6'b011111 : begin //MUL
      src1_16[4:0] = {1'b0, if_inst_16[21:18]};
      end
    6'b101??? : begin //ST16
      src1_16[4:0] = {2'b0, if_inst_16[23:21]};
      end
    default : begin 
      src1_16[4:0] = 5'b0;
      end
    endcase

end


always @( src1_vld_for_stack
       or src1_vld_for_logic
       or if_inst_16[31:26])
begin
  casez(if_inst_16[31:26])

    6'b000101 : begin //STACK
      src1_update_16 = src1_vld_for_stack;
      end
    6'b01011? : begin //ARITH 3OP
      src1_update_16 = 1'b1;
      end
    6'b011001 : begin //CMP_REG  mvc
      src1_update_16 = 1'b1;
      end
    6'b01101? : begin //LOGIC_OR  LOGIC_AND
      src1_update_16 = src1_vld_for_logic;
      end
    6'b011000 ,       //ADD_REG
    6'b011100 ,       //SHIFT_REG
    6'b011111 : begin //MUL
      src1_update_16 = 1'b1;
      end
    6'b101??? : begin //ST16
      src1_update_16 = 1'b1;
      end
    default : begin
      src1_update_16 = 1'b0;
      end
    endcase

end



assign src1_vld_for_stack = if_inst_16[22];


assign src1_vld_for_logic = (if_inst_16[17:16] != 2'b11);



always @( if_inst_32[31:21]
       or src1_for_arith_reg[4:0])
begin
  casez(if_inst_32[31:26])

    6'b110001 : begin //arithmatic_reg
      src1_update_32 = 1'b1;
      src1_32[4:0] = src1_for_arith_reg[4:0];
      end
    6'b110101 ,       //STR
    6'b110111 : begin //STI
      src1_update_32 = 1'b1;
      src1_32[4:0] = if_inst_32[25:21];
      end
    default : begin
      src1_update_32 = 1'b0;
      src1_32[4:0] = 5'b0;
      end
  endcase

end


assign predec_ff1 = (if_inst_32[15:10] == 6'b011111);
assign src1_for_arith_reg[4:0] = predec_ff1 ? if_inst_32[20:16]
                                            : if_inst_32[25:21];

assign src1_update = if_inst_32_bit ? src1_update_32 : src1_update_16;
assign src1[4:0]   = if_inst_32_bit ? src1_32[4:0]   : src1_16[4:0];






always @( if_inst_16[31:21]
       or dest_for_arith_misc[4:0]
       or dest_for_stack[4:0])
begin
  casez(if_inst_16[31:26])

    6'b000000 ,       //LRW16
    6'b000100 ,       //LRW16
    6'b010??? ,       //ARITH IMM5
    6'b100??? : begin //LD16 
      dest_update_16 = 1'b1;
      dest_16[4:0] = {2'b0, if_inst_16[23:21]};
      end
    6'b000101 : begin //STACK
      dest_update_16 = 1'b1;
      dest_16[4:0] = dest_for_stack[4:0];
      end
    6'b00011? ,       //ADDI SP
    6'b001??? : begin //ARITH IMM8
      dest_update_16 = 1'b1;
      dest_16[4:0] = {2'b0, if_inst_16[26:24]};
      end
    6'b011110 : begin //ARITH_MISC
      dest_update_16 = 1'b1;
      dest_16[4:0] = dest_for_arith_misc[4:0];
      end
    6'b0110?? ,
    6'b01110? ,
    6'b011111 : begin //ARITH REG
      dest_update_16 = 1'b1;
      dest_16[4:0] = {1'b0, if_inst_16[25:22]};
      end
    default : begin
      dest_update_16 = 1'b0;
      dest_16[4:0] = 5'b0;
      end
  endcase

end

assign dest_for_stack[4:0] = 5'b01110;


assign dest_for_arith_misc[4:0] = if_inst_16[17] ? {1'b0, if_inst_16[25:22]}
                                                 : 5'b01111; 



always @( if_inst_32[4:0]
       or if_inst_32[31:21]
       or dest_for_imm_1op[4:0]
       or dest_for_arith_reg[4:0])
begin
  casez(if_inst_32[31:26])
    6'b110000 ,       // special inst
    6'b110100 : begin //LDR
      dest_update_32 = 1'b1;
      dest_32[4:0] = if_inst_32[4:0];
      end
    6'b110001 : begin //arithmatic_reg
      dest_update_32 = 1'b1;
      dest_32[4:0] = dest_for_arith_reg[4:0];
      end
    6'b111000 : begin //bsr32
      dest_update_32 = 1'b1;
      dest_32[4:0] = 5'b01111;
      end
    6'b110110 , //LDI
    6'b110011 , //grs
    6'b1110?1 : begin //ORI IMM 2OP
      dest_update_32 = 1'b1;
      dest_32[4:0] = if_inst_32[25:21];
      end
    6'b111010 : begin //IMM 1OP
      dest_update_32 = 1'b1;
      dest_32[4:0] = dest_for_imm_1op[4:0];
      end
    default : begin
      dest_update_32 = 1'b0;
      dest_32[4:0] = 5'b0;
    end
  endcase

end


assign predec_inc_cond_sop = (if_inst_32[15:10] == 6'b000011);

assign dest_for_arith_reg[4:0] = predec_inc_cond_sop ? if_inst_32[25:21]
                                                     : if_inst_32[4:0];




assign dest_for_imm_1op[4:0] = if_inst_32[25] ? if_inst_32[20:16]
                                              : 5'b01111;

assign dest_update = if_inst_32_bit ? dest_update_32 : dest_update_16;
assign dest[4:0]   = if_inst_32_bit ? dest_32[4:0]   : dest_16[4:0];





assign predec_op_arith_reg = if_inst_32[31:26] == 6'b110001;
assign predec_inc_cond = predec_op_arith_reg && predec_inc_cond_sop;


assign imm8_inv_16bit = (if_inst_16[31:26] == 6'b0 && !if_inst_32_bit); //lrw

assign imm7_16bit = (if_inst_16[31:27] == 5'b00010); //lrw addi subi

assign imm8_16bit = (if_inst_16[31:27] == 5'b00011) || //addi16.sp
                    (if_inst_16[31:28] == 4'b0010)  || //arith 1reg 16bit
                    (if_inst_16[31:27] == 5'b00110);   //arith 1reg 16bit

assign imm8_16bit_ldst_sp = (if_inst_16[31:27] == 5'b10011) || //ld16 sp
                            (if_inst_16[31:27] == 5'b10111);   //st16 sp

assign imm5_16bit        = (if_inst_16[31:27] == 5'b00111) || //arith 1reg 16
                           (if_inst_16[31:28] == 4'b0100)  || //arith 1reg 16
                           (if_inst_16[31:27] == 5'b01010) || //arith 1reg 16
                           (if_inst_16[31:28] == 4'b1000)  || //ld16
                           (if_inst_16[31:27] == 5'b10010) || //ld16
                           (if_inst_16[31:28] == 4'b1010)  || //st16
                           (if_inst_16[31:27] == 5'b10110);   //st16

assign imm3_16bit        = (if_inst_16[31:27] == 5'b01011); //arith 3op



assign imm16_32bit       = ({if_inst_32[31:29], if_inst_32[27]}
                                              == 4'b1111); //imm 1op ori sat.x

assign imm12_32bit       = (if_inst_32[31:28] == 4'b1101) || //ldi sti ldm stm push pop
                           (if_inst_32[31:26] == 6'b111001); //imm 2op

assign imm5_low_32bit    = predec_inc_cond; //incf inct

assign imm5_mtcr_32bit   = (if_inst_32[31:26] == 6'b110000) &&   
                           (if_inst_32[15:10] == 6'b011001); //mtcr

assign imm5_mfcr_32bit   = (if_inst_32[31:26] == 6'b110000) &&
                           (if_inst_32[15:10] == 6'b011000); //mfcr

assign imm5_normal_32bit = ((if_inst_32[31:26] == 6'b110000) &&
                             (   (if_inst_32[15:11] == 5'b01110) //psrset psrclr
                              || (if_inst_32[15:13] == 3'b000)   //idly
                             )
                           ) ||
                           predec_op_arith_reg &&
                           !predec_inc_cond_sop;  //arithmatic reg
assign imm18_grs_32bit = predec_grs_vld;

always @( imm8_inv_16bit
       or imm8_16bit
       or if_inst_16[26:16]
       or imm7_16bit
       or imm8_16bit_ldst_sp
       or imm3_16bit
       or imm5_16bit)
begin
  case({imm3_16bit,
        imm5_16bit,
        imm7_16bit,
        imm8_16bit,
        imm8_16bit_ldst_sp,
        imm8_inv_16bit})
    6'b100000 : imm16_16[15:0] = {13'b0, if_inst_16[20:18]};
    6'b010000 : imm16_16[15:0] = {11'b0, if_inst_16[20:16]};
    6'b001000 : imm16_16[15:0] = {9'b0, if_inst_16[25:24], if_inst_16[20:16]};
    6'b000100 : imm16_16[15:0] = {8'b0, if_inst_16[23:16]};
    6'b000010 : imm16_16[15:0] = {8'b0, if_inst_16[26:24], if_inst_16[20:16]};
    6'b000001 : imm16_16[15:0] = {8'b0, 1'b1, ~if_inst_16[25:24], ~if_inst_16[20:16]};
    default   : imm16_16[15:0] = 16'bx;
  endcase

end


always @( imm12_32bit
       or imm5_mtcr_32bit
       or imm5_mfcr_32bit
       or imm18_grs_32bit
       or imm5_low_32bit
       or imm16_32bit
       or imm5_normal_32bit
       or if_inst_32[25:0])
begin
  case({imm5_normal_32bit,
        imm5_low_32bit,
        imm5_mtcr_32bit,
        imm5_mfcr_32bit,
        imm12_32bit,
        (imm16_32bit||imm18_grs_32bit)})
    6'b100000 : imm16_32[15:0] = {11'b0, if_inst_32[25:21]};
    6'b010000 : imm16_32[15:0] = {11'b0, if_inst_32[4:0]};
    6'b001000 : imm16_32[15:0] = {6'b0, if_inst_32[25:21], if_inst_32[4:0]};
    6'b000100 : imm16_32[15:0] = {6'b0, if_inst_32[25:21], if_inst_32[20:16]};
    6'b000010 : imm16_32[15:0] = {4'b0, if_inst_32[11:0]};
    6'b000001 : imm16_32[15:0] = if_inst_32[15:0];
    default   : imm16_32[15:0] = 16'bx;
  endcase

end

assign imm16[15:0] = if_inst_32_bit ? imm16_32[15:0] : imm16_16[15:0];















assign imm_update = (imm3_16bit ||
                     imm5_16bit ||
                     imm7_16bit ||
                     imm8_16bit ||
                     imm8_16bit_ldst_sp ||
                     imm8_inv_16bit ||

                     imm5_normal_32bit ||
                     imm5_low_32bit ||
                     imm5_mtcr_32bit ||
                     imm5_mfcr_32bit ||
                     imm18_grs_32bit ||
                     imm12_32bit ||
                     imm16_32bit
                    ) && !split_ifdp_mult_vld;




assign inst_bkpt = (if_inst_post[31:16] == 16'b0) || if_bkpt_vld;









assign major_op_post[5:0] = split_ifdp_op_sop_sel ? split_ifdp_op[5:0]
                                                  : major_op[5:0];
assign ifdp_op_upd_en = ifctrl_ifdp_pipe_down || ifctrl_ifdp_pipe_down_for_hs;
always @(posedge ifdp_reg_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_op[5:0] <= 6'b0;
  else if(ifdp_op_upd_en)
    ifu_iu_ex_op[5:0] <= major_op_post[5:0];
end






assign ifdp_sop_upd_en = ifctrl_ifdp_pipe_down && sub_op_update
                      || ifctrl_ifdp_pipe_down_for_hs && split_ifdp_hs_inst;


assign sub_op_post[5:0] = split_ifdp_op_sop_sel ? split_ifdp_sop[5:0]
                                                : sub_op[5:0];
always @(posedge ifdp_sop_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_sop[5:0] <= 6'b0;
  else if(ifdp_sop_upd_en)
    ifu_iu_ex_sop[5:0] <= sub_op_post[5:0];
end






assign ifdp_pcode_upd_en = ifctrl_ifdp_pipe_down && 
                           (ifdp_pcode_vld || split_ifdp_pcode_sel)
                        || split_ifdp_int_acc_sel
                           && ifdp_op_upd_en;



assign pcode_post_pre[4:0] = split_ifdp_pcode_sel ? split_ifdp_pcode[4:0]
                                                  : pcode[4:0];
assign pcode_post[4:0]     = split_ifdp_int_acc_sel
                           ? split_ifdp_int_acc_imm[4:0]
                           : pcode_post_pre[4:0];
assign pcode_init          = (ifu_iu_ex_pcode[4] 
                            ||ifu_iu_ex_pcode[3])
                          && ifdp_op_upd_en;          

always @(posedge ifdp_pcode_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_pcode[4:0] <= 5'b0;
  else if(ifdp_pcode_upd_en)
    ifu_iu_ex_pcode[4:0] <= pcode_post[4:0];
  else if(pcode_init)
    ifu_iu_ex_pcode[4:0] <= 5'b0;
end






assign ifdp_src0_upd_en = ifctrl_ifdp_pipe_down && src0_update
                       || ifctrl_ifdp_pipe_down_for_hs && split_ifdp_hs_inst;



assign src0_post[4:0] = split_ifdp_src0_sel ? split_ifdp_src0[4:0]
                                            : src0[4:0];
always @(posedge ifdp_reg_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_src0_reg[4:0] <= 5'b0;
  else if(ifdp_src0_upd_en)
    ifu_iu_ex_src0_reg[4:0] <= src0_post[4:0];
end













assign ifdp_src1_upd_en = ifctrl_ifdp_pipe_down && src1_update 
                       || ifctrl_ifdp_pipe_down_for_hs && split_ifdp_hs_src1;


assign src1_post[4:0] = split_ifdp_src1_sel ? split_ifdp_gpr_index[4:0]
                                            : src1[4:0];

always @(posedge ifdp_src1_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_src1_reg[4:0] <= 5'b0;
  else if(ifdp_src1_upd_en)
    ifu_iu_ex_src1_reg[4:0] <= src1_post[4:0];
end






assign ifdp_dest_upd_en = ifctrl_ifdp_pipe_down && dest_update
                       || ifctrl_ifdp_pipe_down_for_hs && split_ifdp_hs_dest;




assign dest_post[4:0] = split_ifdp_dest_sel ? split_ifdp_gpr_index[4:0]
                                            : dest[4:0];
always @(posedge ifdp_reg_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_dst_reg[4:0] <= 5'b0;
  else if(ifdp_dest_upd_en)
    ifu_iu_ex_dst_reg[4:0] <= dest_post[4:0];
end


















assign bstack_inst_vld = 1'b0;
assign bstack_imm[15:0] = 16'b0;

assign imm_common_vld = !(bstack_inst_vld || addrgen_ifdp_br_vld);

assign imm16_post_pre[15:0] = {16{bstack_inst_vld}}     & bstack_imm[15:0]               |
                              {16{addrgen_ifdp_br_vld}} & addrgen_ifdp_brchgflw_pc[15:0] |
                              {16{imm_common_vld}}      & imm16[15:0];
assign imm16_post[15:0]     = split_ifdp_imm_sel
                            ? {11'b0, split_ifdp_imm[4:0]}
                            : imm16_post_pre[15:0];

assign predecode_info_for_ex_stage[8:0] = {major_op_post[5:0],
                                            sub_op_post[5:3]};

always @( predecode_info_for_ex_stage[8:0])
begin
  casez(predecode_info_for_ex_stage[8:0])

    9'b000000???,       //lrw16 
    9'b000100???,       //lrw16 
    9'b111010101,       //lrw32
    9'b00010101?,       //nie nir ipush ipop
    9'b0001011??,       //pop push bpush bpop
    9'b10???????,       //ld16 st16
    9'b1101?????:begin  //ld32 st32 ld, stm
    predecd_main_lsu_sel = 1'b1;
    end        
    default:begin
    predecd_main_lsu_sel = 1'b0;
    end
  endcase

end









assign ifu_iu_ex_imm_post[15:0] = ({16{iu_ifu_imm_write_en}}  & iu_ifu_imm_data[15:0]) |
                                  ({16{!iu_ifu_imm_write_en}} & imm16_post[15:0]);

assign ifdp_imm_upd_en = ifctrl_ifdp_pipe_down && (imm_update || addrgen_ifdp_br_vld)
                      || ifctrl_ifdp_pipe_down_for_hs && split_ifdp_hs_inst;

assign ifdp_imm_15_0_upd_en     = iu_ifu_imm_write_en || ifdp_imm_upd_en;

always @(posedge ifdp_imm_15_0_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_imm[15:0] <= 16'b0;
  else if(ifdp_imm_15_0_upd_en)
    ifu_iu_ex_imm[15:0] <= ifu_iu_ex_imm_post[15:0];
end














gated_clk_cell  x_ifdp_imm_high_upd_clkhdr (
  .clk_in                       (forever_cpuclk              ),
  .clk_out                      (ifdp_imm_31_16_upd_clk      ),
  .external_en                  (1'b0                        ),
  .global_en                    (cp0_yy_clk_en               ),
  .local_en                     (ifdp_imm_31_16_upd_en       ),
  .module_en                    (randclk_ifdp_immh_mod_en_w16),
  .pad_yy_gate_clk_en_b         (pad_yy_gate_clk_en_b        )
);









assign ifu_iu_ex_imm_post_31_16[15:0] = ({16{iu_ifu_imm_write_en}}
                                          & iu_ifu_imm_data[31:16])
                                      | ({16{addrgen_ifdp_br_vld}}
                                          & addrgen_ifdp_brchgflw_pc[31:16])
                                      | ({16{predec_grs_vld}}& {{14{if_inst_32[17]}},if_inst_32[17:16]}) ;

assign ifdp_imm_31_16_upd_en = iu_ifu_imm_write_en
                            || (ifctrl_ifdp_pipe_down && (predec_grs_vld || addrgen_ifdp_br_vld));

always @(posedge ifdp_imm_31_16_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_imm[31:16] <= 16'b0;
  else if(ifdp_imm_31_16_upd_en)
    ifu_iu_ex_imm[31:16] <= ifu_iu_ex_imm_post_31_16[15:0];
end














assign ifdp_other_info_upd_en = ((ifu_iu_ex_rand_vld         ^ ifctrl_xx_random_inst_vld)  ||
                                 (ifu_iu_ex_split_on         ^ split_xx_stall)             ||
                                 (ifu_iu_ex_ni               ^ split_ifdp_int_mask)        ||
                                 (ifu_iu_ex_sp_oper          ^ split_ifdp_sp_oper)         ||
                                 (ifu_iu_ex_cr_oper          ^ split_ifdp_cr_oper)         ||
                                 (ifu_iu_ex_prvlg_expt_vld   ^ split_ifdp_prvlg_expt_vld)  ||
                                 (ifu_iu_ex_int_spcu_mask    ^ split_ifdp_int_spcu_mask)   ||
                                 (ifu_iu_ex_int_spcu_vld     ^ split_ifdp_int_spcu_vld)    ||
                                 (ifu_iu_ex_expt_vld         ^ expt_vld_aft_hs)            ||
                                 (ifu_iu_ex_inst_dbg_disable ^ inst_dbg_disable)           ||
                                 (ifu_iu_ex_fix_mult         ^ seu_xx_fix_mult)            ||
                                 (ifu_iu_ex_inst_bkpt        ^ inst_bkpt_aft_hs)           
                                ) && ifctrl_ifdp_pipe_down
                                || ifctrl_ifdp_pipe_down_for_hs;








always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_rand_vld <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_rand_vld <= ifctrl_xx_random_inst_vld;
end



always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_split_on <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_split_on <= split_xx_stall;
end



always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_int_spcu_vld <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_int_spcu_vld <= split_ifdp_int_spcu_vld;
end



always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_int_spcu_mask <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_int_spcu_mask <= split_ifdp_int_spcu_mask;
end



always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_ni <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_ni <= split_ifdp_int_mask;
end



always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_sp_oper <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_sp_oper <= split_ifdp_sp_oper;
end



always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_cr_oper <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_cr_oper <= split_ifdp_cr_oper;
end




always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_prvlg_expt_vld <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_prvlg_expt_vld <= split_ifdp_prvlg_expt_vld;
end




assign expt_vld_aft_hs = expt_vld && !split_ifdp_hs_inst;
always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_expt_vld <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_expt_vld <= expt_vld_aft_hs;
end


assign ifu_iu_ex_inst_dbg_disable  = 1'b0;
assign inst_dbg_disable = 1'b0;


assign ifu_iu_ex_fix_mult = 1'b0;
assign seu_xx_fix_mult    = 1'b0;


assign inst_bkpt_aft_hs = inst_bkpt && !split_ifdp_hs_inst;
always @(posedge ifdp_other_info_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_ex_inst_bkpt <= 1'b0;
  else if(ifdp_other_info_upd_en)
    ifu_iu_ex_inst_bkpt <= inst_bkpt_aft_hs;
end


























assign ifdp_split_inst[31:0] = ibuf_ifdp_inst[31:0];
assign ifdp_split_inst32 = (ibuf_ifdp_inst[31:30] == 2'b11);

assign ifdp_ibusif_32bit = if_inst_32_bit; 








assign predecode_info_for_ex_stage_dupalu[16:0] = {if_inst_post[31:26],
                                                   sub_op[5:0], if_inst_post[9:5]};


always @( predecode_info_for_ex_stage_dupalu[16:0])
begin
  casez(predecode_info_for_ex_stage_dupalu[16:0])

    17'b01100001?????????,
    17'b110001000000?0?1?,       //addc16/32
    17'b01100011?????????,
    17'b110001000000?1?0?,       //subc16/32
    17'b00111?000????????,
    17'b11101011000??????,       //cmphsi16/32
    17'b00111?001????????,
    17'b11101011001??????,       //cmplti16/32
    17'b01100100?????????,       //cmphs16
    17'b01100101?????????,       //cmplt16

    17'b00111?010????????,     
    17'b11101011010??????,       //cmpnei16/32
    17'b01100110?????????,       //cmpne16
    17'b01101010?????????,       //tst16
    17'b00111?110????????,     
    17'b110001001010??1??,       //btsti32/16

    17'b110001010011?????,       //lslc32/lsrc32/asrc32/xsr32

    17'b01101011?????????,       //tstnbz16
    17'b110001011100?????      //xtrb0/1/2/3 
    :begin  
    predecd_main_dupalu_sel = 1'b1;
    end
    default:begin
    predecd_main_dupalu_sel = 1'b0;
    end
  endcase

end



always @( predecode_info_for_ex_stage[8:0])
begin
  casez(predecode_info_for_ex_stage[8:0])
    9'b000000???,       //lrw16 
    9'b000100???,       //lrw16 
    9'b111010101:begin  //lrw32
    predecd_src1_imm_vld  = 1'b1;
    end
    default:begin
    predecd_src1_imm_vld  = 1'b0;
    end
  endcase

end

assign predecd_main_dupalu_sel_aft_hs = predecd_main_dupalu_sel && !split_ifdp_hs_inst;
assign predecd_main_unit_sel[1:0]= {predecd_main_lsu_sel, predecd_main_dupalu_sel_aft_hs};

always @(posedge ifdp_reg_upd_clk)
begin
  if(ifctrl_ifdp_pipe_down || ifctrl_ifdp_pipe_down_for_hs)
  begin
    ifu_iu_ex_main_unit_sel[1:0]   <= predecd_main_unit_sel[1:0];
    ifu_iu_ex_predec_imm_vld       <= predecd_src1_imm_vld;
  end
end


assign ifu_had_match_pc[31:0] = {ibusif_ifdp_ifpc[30:0], 1'b0};
assign ifu_had_fetch_expt_vld = expt_vld_pre;
assign ifu_had_split_first    = split_ifdp_split_first;
assign ifu_had_chg_flw_inst   = addrgen_ifdp_br_vld 
                             || split_ifdp_pop_vld
                             || ifdp_jmp_jsr_inst
                             || ifdp_jmpix;
assign ifu_had_inst_dbg_disable = 1'b0;


assign ifdp_jmp_jsr_inst = (if_inst_post[31:26] == 6'b011110)
                           && !if_inst_post[17];

assign ifdp_jmpix = 1'b0;


















always @(posedge ifdp_reg_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ifu_iu_inst_bkpt_dbg_occur_vld <= 1'b0;
  else if(ifctrl_ifdp_pipe_down)
    ifu_iu_inst_bkpt_dbg_occur_vld <= had_ifu_inst_bkpt_dbq_req;
end

assign ifu_iu_inst_bkpt_dbgexp_occur_vld = 1'b0;





endmodule


























module nm_ifu_randclk(
  randclk_ibuf_entry_data_mod_en_w16,
  randclk_ibuf_pop_mod_en_w3,
  randclk_ibuf_push_mod_en_w3,
  randclk_ifdp_immh_mod_en_w16,
  randclk_ifdp_imml_mod_en_w8,
  randclk_ifdp_other_info_mod_en_w8,
  randclk_ifdp_pcode_mod_en_w5,
  randclk_ifdp_reg_mod_en_w48,
  randclk_ifdp_src1_mod_en_w5,
  randclk_split_cnt_mod_en_w9,
  randclk_split_sm_mod_en_w6
);


output  [3:0]  randclk_ibuf_entry_data_mod_en_w16; 
output         randclk_ibuf_pop_mod_en_w3;        
output         randclk_ibuf_push_mod_en_w3;       
output         randclk_ifdp_immh_mod_en_w16;      
output         randclk_ifdp_imml_mod_en_w8;       
output         randclk_ifdp_other_info_mod_en_w8; 
output         randclk_ifdp_pcode_mod_en_w5;      
output         randclk_ifdp_reg_mod_en_w48;       
output         randclk_ifdp_src1_mod_en_w5;       
output         randclk_split_cnt_mod_en_w9;       
output         randclk_split_sm_mod_en_w6;        




wire    [3:0]  randclk_ibuf_entry_data_mod_en_w16; 
wire           randclk_ibuf_pop_mod_en_w3;        
wire           randclk_ibuf_push_mod_en_w3;       
wire           randclk_ifdp_immh_mod_en_w16;      
wire           randclk_ifdp_imml_mod_en_w8;       
wire           randclk_ifdp_other_info_mod_en_w8; 
wire           randclk_ifdp_pcode_mod_en_w5;      
wire           randclk_ifdp_reg_mod_en_w48;       
wire           randclk_ifdp_src1_mod_en_w5;       
wire           randclk_split_cnt_mod_en_w9;       
wire           randclk_split_sm_mod_en_w6;        




assign randclk_ibuf_push_mod_en_w3             = 1'b0;
assign randclk_ibuf_pop_mod_en_w3              = 1'b0;
assign randclk_ibuf_entry_data_mod_en_w16[3:0] = 4'b0;

assign randclk_ifdp_reg_mod_en_w48             = 1'b0;
assign randclk_ifdp_other_info_mod_en_w8       = 1'b0;
assign randclk_ifdp_src1_mod_en_w5             = 1'b0;


assign randclk_ifdp_imml_mod_en_w8             = 1'b0;

assign randclk_ifdp_pcode_mod_en_w5            = 1'b0;
assign randclk_ifdp_immh_mod_en_w16            = 1'b0;
assign randclk_split_cnt_mod_en_w9             = 1'b0;
assign randclk_split_sm_mod_en_w6              = 1'b0;



endmodule

























module nm_ifu_split(
  addrgen_xx_ibus_idle,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  forever_cpuclk,
  ifctrl_split_inst_vld_no_cancel,
  ifctrl_xx_ifcancel,
  ifdp_split_inst,
  ifdp_split_inst32,
  ifu_iu_hs_retire_mask,
  ifu_iu_hs_stack_on,
  ifu_iu_hs_stall_vector,
  ifu_iu_hs_switch_se,
  ifu_iu_nsinst_gpr_rst_b,
  ifu_iu_spcu_retire_mask,
  ifu_iu_unstack_chgflw,
  iu_ifu_cnt,
  iu_ifu_cnt_write_en,
  iu_ifu_ex_stall,
  iu_ifu_inst_fetch,
  iu_ifu_r15_vld,
  iu_ifu_spcu_error,
  iu_ifu_spcu_error_without_misalign,
  iu_ifu_spcu_int_en,
  iu_yy_xx_flush,
  pad_yy_gate_clk_en_b,
  randclk_split_cnt_mod_en_w9,
  randclk_split_sm_mod_en_w6,
  split_addrgen_jmpr15,
  split_ifctrl_hs_inst_vld,
  split_ifctrl_hs_stall,
  split_ifctrl_hs_stall_part,
  split_ifctrl_int_acc_stall,
  split_ifctrl_mult_stall,
  split_ifctrl_push_pop_stall,
  split_ifdp_cr_oper,
  split_ifdp_dest_sel,
  split_ifdp_gpr_index,
  split_ifdp_hs_dest,
  split_ifdp_hs_inst,
  split_ifdp_hs_src1,
  split_ifdp_imm,
  split_ifdp_imm_sel,
  split_ifdp_int_acc_imm,
  split_ifdp_int_acc_sel,
  split_ifdp_int_mask,
  split_ifdp_int_spcu_mask,
  split_ifdp_int_spcu_vld,
  split_ifdp_mult_vld,
  split_ifdp_op,
  split_ifdp_op_sop_sel,
  split_ifdp_pcode,
  split_ifdp_pcode_sel,
  split_ifdp_pop_vld,
  split_ifdp_prvlg_expt_vld,
  split_ifdp_sop,
  split_ifdp_sp_oper,
  split_ifdp_split_first,
  split_ifdp_src0,
  split_ifdp_src0_sel,
  split_ifdp_src1_sel,
  split_xx_on,
  split_xx_stall
);


input           addrgen_xx_ibus_idle;              
input           cp0_yy_clk_en;                     
input           cp0_yy_supv_mode_aft_dbg;          
input           cpurst_b;                          
input           forever_cpuclk;                    
input           ifctrl_split_inst_vld_no_cancel;   
input           ifctrl_xx_ifcancel;                
input   [31:0]  ifdp_split_inst;                   
input           ifdp_split_inst32;                 
input   [4 :0]  iu_ifu_cnt;                        
input           iu_ifu_cnt_write_en;               
input           iu_ifu_ex_stall;                   
input           iu_ifu_inst_fetch;                 
input           iu_ifu_r15_vld;                    
input           iu_ifu_spcu_error;                 
input           iu_ifu_spcu_error_without_misalign; 
input           iu_ifu_spcu_int_en;                
input           iu_yy_xx_flush;                    
input           pad_yy_gate_clk_en_b;              
input           randclk_split_cnt_mod_en_w9;       
input           randclk_split_sm_mod_en_w6;        
output          ifu_iu_hs_retire_mask;             
output          ifu_iu_hs_stack_on;                
output          ifu_iu_hs_stall_vector;            
output          ifu_iu_hs_switch_se;               
output          ifu_iu_nsinst_gpr_rst_b;           
output          ifu_iu_spcu_retire_mask;           
output          ifu_iu_unstack_chgflw;             
output          split_addrgen_jmpr15;              
output          split_ifctrl_hs_inst_vld;          
output          split_ifctrl_hs_stall;             
output          split_ifctrl_hs_stall_part;        
output          split_ifctrl_int_acc_stall;        
output          split_ifctrl_mult_stall;           
output          split_ifctrl_push_pop_stall;       
output          split_ifdp_cr_oper;                
output          split_ifdp_dest_sel;               
output  [4 :0]  split_ifdp_gpr_index;              
output          split_ifdp_hs_dest;                
output          split_ifdp_hs_inst;                
output          split_ifdp_hs_src1;                
output  [4 :0]  split_ifdp_imm;                    
output          split_ifdp_imm_sel;                
output  [4 :0]  split_ifdp_int_acc_imm;            
output          split_ifdp_int_acc_sel;            
output          split_ifdp_int_mask;               
output          split_ifdp_int_spcu_mask;          
output          split_ifdp_int_spcu_vld;           
output          split_ifdp_mult_vld;               
output  [5 :0]  split_ifdp_op;                     
output          split_ifdp_op_sop_sel;             
output  [4 :0]  split_ifdp_pcode;                  
output          split_ifdp_pcode_sel;              
output          split_ifdp_pop_vld;                
output          split_ifdp_prvlg_expt_vld;         
output  [5 :0]  split_ifdp_sop;                    
output          split_ifdp_sp_oper;                
output          split_ifdp_split_first;            
output  [4 :0]  split_ifdp_src0;                   
output          split_ifdp_src0_sel;               
output          split_ifdp_src1_sel;               
output          split_xx_on;                       
output          split_xx_stall;                    


reg     [1 :0]  cur_st;                            
reg     [3 :0]  int_spcu_cur_st;                   
reg     [3 :0]  int_spcu_nxt_st;                   
reg     [2 :0]  ipop_cur_st;                       
reg     [2 :0]  ipop_nxt_st;                       
reg     [2 :0]  ipush_cur_st;                      
reg     [2 :0]  ipush_nxt_st;                      
reg     [1 :0]  nie_cur_st;                        
reg     [1 :0]  nie_nxt_st;                        
reg     [1 :0]  nir_cur_st;                        
reg     [1 :0]  nir_nxt_st;                        
reg     [1 :0]  nxt_st;                            
reg     [1 :0]  pop_cur_st;                        
reg     [1 :0]  pop_nxt_st;                        
reg     [1 :0]  push_cur_st;                       
reg     [1 :0]  push_nxt_st;                       
reg     [4 :0]  split_cnt;                         
reg     [4 :0]  split_gpr_index_pre;               
reg     [5 :0]  split_op_pre;                      
reg     [5 :0]  split_sop_pre;                     
reg     [3 :0]  stack_cnt;                         


wire            addrgen_xx_ibus_idle;              
wire            cnt_en;                            
wire            cp0_ifu_hw_stack;                  
wire            cp0_ifu_hw_unstack;                
wire            cp0_yy_clk_en;                     
wire            cp0_yy_supv_mode_aft_dbg;          
wire            cpurst_b;                          
wire            forever_cpuclk;                    
wire            gr0_sel;                           
wire            gr12_sel;                          
wire            gr13_sel;                          
wire            gr16_sel;                          
wire            gr17_sel;                          
wire            gr1_sel;                           
wire            gr2_sel;                           
wire            gr3_sel;                           
wire            hs_add_sp;                         
wire            hs_cnt_add;                        
wire            hs_cnt_rst;                        
wire            hs_cr_operate;                     
wire            hs_ld_inst;                        
wire            hs_split_on;                       
wire            hs_st_inst;                        
wire            hs_stack_cnt_add;                  
wire            hs_stack_cnt_reset;                
wire            hs_stack_cnt_set;                  
wire            hs_stack_cnt_set13;                
wire            hs_stack_cnt_sub;                  
wire            hs_stack_inst_vld;                 
wire            hs_stack_ldst;                     
wire            hs_stack_pc;                       
wire            hs_stack_psr;                      
wire            hs_sub_sp;                         
wire            ifctrl_split_inst_vld_no_cancel;   
wire            ifctrl_xx_ifcancel;                
wire    [31:0]  ifdp_split_inst;                   
wire            ifdp_split_inst32;                 
wire    [4 :0]  ifdp_split_inst_25_21;             
wire    [4 :0]  ifdp_split_inst_25_21_post;        
wire            ifu_iu_hs_retire_mask;             
wire            ifu_iu_hs_stack_on;                
wire            ifu_iu_hs_stall_vector;            
wire            ifu_iu_hs_switch_se;               
wire            ifu_iu_nsinst_gpr_rst_b;           
wire            ifu_iu_spcu_retire_mask;           
wire            ifu_iu_unstack_chgflw;             
wire            inst_add_sp;                       
wire            inst_ipush_check_fail;             
wire            inst_jmpr15;                       
wire            inst_ld;                           
wire            inst_nie_check_fail;               
wire            inst_psrset;                       
wire            inst_psrset_rte;                   
wire            inst_rte;                          
wire            inst_st;                           
wire            inst_sub_sp;                       
wire    [4 :0]  int_acc_imm_data;                  
wire    [4 :0]  int_acc_imm_data_pre;              
wire            int_acc_imm_sel;                   
wire            int_spcu_check_fail;               
wire            int_spcu_cnt_en;                   
wire            int_spcu_flush;                    
wire    [4 :0]  int_spcu_imm_data;                 
wire            int_spcu_inst_vld;                 
wire            int_spcu_inst_vld_for_ex;          
wire            int_spcu_retire_mask;              
wire            int_spcu_retire_mask_for_ex;       
wire            int_spcu_sm_not_idle;              
wire            int_spcu_split_cnt_rst;            
wire            int_spcu_split_last;               
wire            int_spcu_split_on;                 
wire            int_spcu_st_epc;                   
wire            int_spcu_st_epsr;                  
wire            int_spcu_st_gr0;                   
wire            int_spcu_st_gr1;                   
wire            int_spcu_st_gr12;                  
wire            int_spcu_st_gr13;                  
wire            int_spcu_st_gr2;                   
wire            int_spcu_st_gr3;                   
wire            int_spcu_stall;                    
wire            ipop_add_sp;                       
wire            ipop_cnt_en;                       
wire            ipop_ld_gpr;                       
wire            ipop_ld_gr0;                       
wire            ipop_ld_gr1;                       
wire            ipop_ld_gr12;                      
wire            ipop_ld_gr13;                      
wire            ipop_ld_gr2;                       
wire            ipop_ld_gr3;                       
wire            ipop_split_last;                   
wire            ipop_split_on;                     
wire            ipop_vld_no_cancel;                
wire            ipush_cnt_en;                      
wire            ipush_split_last;                  
wire            ipush_split_on;                    
wire            ipush_st_gpr;                      
wire            ipush_st_gr0;                      
wire            ipush_st_gr1;                      
wire            ipush_st_gr12;                     
wire            ipush_st_gr13;                     
wire            ipush_st_gr2;                      
wire            ipush_st_gr3;                      
wire            ipush_sub_sp;                      
wire            ipush_vld_no_cancel;               
wire    [4 :0]  iu_ifu_cnt;                        
wire            iu_ifu_cnt_write_en;               
wire            iu_ifu_ex_stall;                   
wire            iu_ifu_inst_fetch;                 
wire            iu_ifu_r15_vld;                    
wire            iu_ifu_spcu_error;                 
wire            iu_ifu_spcu_error_without_misalign; 
wire            iu_ifu_spcu_int_en;                
wire            iu_yy_xx_flush;                    
wire            ldm_32;                            
wire            ldm_vld_no_cancel;                 
wire            mls_cmplt;                         
wire            mls_vld_no_cancel;                 
wire            mult_cmplt;                        
wire            mult_stall;                        
wire            mult_vld_no_cancel;                
wire            nest_int_inst_vld;                 
wire            nie_cnt_en;                        
wire            nie_psrset;                        
wire            nie_split_last;                    
wire            nie_split_on;                      
wire            nie_st_cr;                         
wire            nie_st_epc;                        
wire            nie_st_epsr;                       
wire            nie_sub_sp;                        
wire            nie_vld_no_cancel;                 
wire            nir_add_sp;                        
wire            nir_cnt_en;                        
wire            nir_ld_cr;                         
wire            nir_ld_epc;                        
wire            nir_ld_epsr;                       
wire            nir_rte;                           
wire            nir_split_last;                    
wire            nir_split_on;                      
wire            nir_vld_no_cancel;                 
wire            normal_imm_for_other;              
wire            opcode_ipop;                       
wire            opcode_ipush;                      
wire            opcode_nest_int;                   
wire            opcode_nie;                        
wire            opcode_nir;                        
wire            opcode_pop_16;                     
wire            opcode_push_16;                    
wire            pad_yy_gate_clk_en_b;              
wire            pop_16_vld_no_cancel;              
wire            pop_add_sp;                        
wire            pop_cnt_en;                        
wire            pop_jmp_r15;                       
wire            pop_ld_gpr;                        
wire            pop_ld_gr15;                       
wire            pop_ld_gr_4_to_7;                  
wire            pop_reg15_vld;                     
wire            pop_reg4_to_reg11_vld;             
wire            pop_regcnt_en;                     
wire            pop_regcnt_rst;                    
wire            pop_split_last;                    
wire            pop_split_on;                      
wire            pop_stack_cnt_cmplt;               
wire            pop_stall;                         
wire            pop_vld_no_cancel;                 
wire            privilege_expt_vld;                
wire            psrset_imm_for_nie;                
wire            push_16_vld_no_cancel;             
wire            push_cnt_en;                       
wire            push_reg11_to_reg4_vld;            
wire            push_reg15_vld;                    
wire            push_regcnt_en;                    
wire            push_regcnt_init;                  
wire            push_regcnt_rst;                   
wire            push_split_last;                   
wire            push_split_on;                     
wire            push_st_gpr;                       
wire            push_st_gr15;                      
wire            push_st_gr_4_to_7;                 
wire            push_stack_cnt_cmplt;              
wire            push_stall;                        
wire            push_sub_sp;                       
wire            push_vld_no_cancel;                
wire            randclk_split_cnt_mod_en_w9;       
wire            randclk_split_sm_mod_en_w6;        
wire            reg11_to_reg4_vld_16bit;           
wire            reg14_sel;                         
wire            reg15_sel;                         
wire            reg15_vld_16bit;                   
wire            reg16_sel_for_epsr;                
wire            reg17_sel_for_epc;                 
wire            reg18_sel_for_psr;                 
wire            reg19_sel_for_pc;                  
wire            reg_sel_for_int_acclrt;            
wire            regcnt_sel_for_pop;                
wire            regcnt_sel_for_push;               
wire            seu_xx_fix_mult;                   
wire            sm_upd_clk;                        
wire            sm_upd_en;                         
wire            split_addrgen_jmpr15;              
wire            split_cnt_en;                      
wire    [4 :0]  split_cnt_inc;                     
wire            split_cnt_offset;                  
wire            split_cnt_rst;                     
wire            split_cnt_set_5;                   
wire            split_cnt_upd_clk;                 
wire            split_cnt_upd_en;                  
wire            split_cnt_write_en;                
wire            split_cr_operate;                  
wire            split_dest_sel;                    
wire    [4 :0]  split_gpr_index;                   
wire    [4 :0]  split_gpr_index_for_int_acclrt;    
wire    [4 :0]  split_gpr_index_for_mls;           
wire            split_ifctrl_hs_inst_vld;          
wire            split_ifctrl_hs_stall;             
wire            split_ifctrl_hs_stall_part;        
wire            split_ifctrl_int_acc_stall;        
wire            split_ifctrl_mult_stall;           
wire            split_ifctrl_push_pop_stall;       
wire            split_ifdp_cr_oper;                
wire            split_ifdp_dest_sel;               
wire    [4 :0]  split_ifdp_gpr_index;              
wire            split_ifdp_hs_dest;                
wire            split_ifdp_hs_inst;                
wire            split_ifdp_hs_src1;                
wire    [4 :0]  split_ifdp_imm;                    
wire            split_ifdp_imm_sel;                
wire    [4 :0]  split_ifdp_int_acc_imm;            
wire            split_ifdp_int_acc_sel;            
wire            split_ifdp_int_mask;               
wire            split_ifdp_int_spcu_mask;          
wire            split_ifdp_int_spcu_vld;           
wire            split_ifdp_mult_vld;               
wire    [5 :0]  split_ifdp_op;                     
wire            split_ifdp_op_sop_sel;             
wire    [4 :0]  split_ifdp_pcode;                  
wire            split_ifdp_pcode_sel;              
wire            split_ifdp_pop_vld;                
wire            split_ifdp_prvlg_expt_vld;         
wire    [5 :0]  split_ifdp_sop;                    
wire            split_ifdp_sp_oper;                
wire            split_ifdp_split_first;            
wire    [4 :0]  split_ifdp_src0;                   
wire            split_ifdp_src0_sel;               
wire            split_ifdp_src1_sel;               
wire    [4 :0]  split_imm;                         
wire            split_imm_sel;                     
wire            split_int_mask;                    
wire            split_last;                        
wire            split_on;                          
wire    [5 :0]  split_op;                          
wire            split_op_sop_sel;                  
wire    [4 :0]  split_pcode;                       
wire            split_pcode_sel;                   
wire    [5 :0]  split_sop;                         
wire            split_sp_oper;                     
wire    [4 :0]  split_src0;                        
wire    [4 :0]  split_src0_pre;                    
wire            split_src0_sel;                    
wire            split_src1_sel;                    
wire            split_xx_on;                       
wire            split_xx_stall;                    
wire            st_imm_for_push;                   
wire    [3 :0]  stack_cnt_dec;                     
wire            stack_cnt_en;                      
wire    [3 :0]  stack_cnt_inc;                     
wire            stack_cnt_init;                    
wire            stack_cnt_rst;                     
wire            stack_cnt_set;                     
wire            stack_cnt_sub;                     
wire            stm_32;                            
wire            stm_vld_no_cancel;                 





assign seu_xx_fix_mult = 1'b0;







gated_clk_cell  x_split_cnt_upd_clkhdr (
  .clk_in                      (forever_cpuclk             ),
  .clk_out                     (split_cnt_upd_clk          ),
  .external_en                 (1'b0                       ),
  .global_en                   (cp0_yy_clk_en              ),
  .local_en                    (split_cnt_upd_en           ),
  .module_en                   (randclk_split_cnt_mod_en_w9),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       )
);








assign split_cnt_upd_en = split_cnt_rst  || split_cnt_en       || split_cnt_write_en 
                       || stack_cnt_set  || hs_stack_cnt_set13 || stack_cnt_rst
                       || stack_cnt_init || stack_cnt_en       || stack_cnt_sub;


gated_clk_cell  x_sm_upd_clkhdr (
  .clk_in                     (forever_cpuclk            ),
  .clk_out                    (sm_upd_clk                ),
  .external_en                (1'b0                      ),
  .global_en                  (cp0_yy_clk_en             ),
  .local_en                   (sm_upd_en                 ),
  .module_en                  (randclk_split_sm_mod_en_w6),
  .pad_yy_gate_clk_en_b       (pad_yy_gate_clk_en_b      )
);








assign sm_upd_en = ifctrl_xx_ifcancel  ||
                   mls_vld_no_cancel   || mult_vld_no_cancel ||
                   iu_ifu_cnt_write_en ||
                   push_vld_no_cancel  || pop_vld_no_cancel  ||
                   nie_vld_no_cancel   || nir_vld_no_cancel  ||
                   ipush_vld_no_cancel || ipop_vld_no_cancel ||
                   cp0_ifu_hw_stack    || cp0_ifu_hw_unstack ||
                   hs_split_on         || int_spcu_split_on;









assign split_cnt_write_en = iu_ifu_cnt_write_en;


always @(posedge split_cnt_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    split_cnt[4:0] <= 5'b0;
  else if(split_cnt_rst)
    split_cnt[4:0] <= 5'b0;
  else if(split_cnt_set_5)
    split_cnt[4:0] <= 5'b0101;
  else if(split_cnt_write_en)
    split_cnt[4:0] <= iu_ifu_cnt[4:0];
  else if(split_cnt_en)
    split_cnt[4:0] <= split_cnt_inc[4:0];
end

assign split_cnt_inc[4:0] = split_cnt[4:0] + split_cnt_offset;

assign split_cnt_offset = 1'b1; 







always @(posedge split_cnt_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    stack_cnt[3:0] <= 4'b0;
  else if(stack_cnt_rst)
    stack_cnt[3:0] <= 4'b0;
  else if(stack_cnt_set)
    stack_cnt[3:0] <= 4'b1111;
  else if(hs_stack_cnt_set13)
    stack_cnt[3:0] <= 4'b1101;
  else if(stack_cnt_init)
    stack_cnt[3:0] <= ~ifdp_split_inst[19:16];
  else if(stack_cnt_en)
    stack_cnt[3:0] <= stack_cnt_inc[3:0];
  else if(stack_cnt_sub)
    stack_cnt[3:0] <= stack_cnt_dec[3:0];
end

assign stack_cnt_inc[3:0] = stack_cnt[3:0] + 1'b1;
assign stack_cnt_dec[3:0] = stack_cnt[3:0] - 1'b1;
  










assign inst_sub_sp = push_sub_sp || nie_sub_sp || ipush_sub_sp || hs_sub_sp;
assign inst_add_sp = pop_add_sp  || nir_add_sp || ipop_add_sp  || hs_add_sp;
assign inst_jmpr15 = pop_jmp_r15;
assign inst_psrset = nie_psrset;
assign inst_rte    = nir_rte;
assign inst_st     = hs_st_inst; 
assign inst_ld     = hs_ld_inst;


always @( inst_ld
       or inst_sub_sp
       or inst_st
       or inst_add_sp
       or inst_jmpr15
       or inst_psrset
       or inst_rte)
begin
  case({inst_sub_sp, inst_add_sp, inst_jmpr15, inst_psrset, inst_rte, inst_st, inst_ld}
      )
     7'b1000000 : split_op_pre[5:0] = 6'b000101;
     7'b0100000 : split_op_pre[5:0] = 6'b000101;
     7'b0010000 : split_op_pre[5:0] = 6'b011110;
     7'b0001000 : split_op_pre[5:0] = 6'b110000;
     7'b0000100 : split_op_pre[5:0] = 6'b110000;
     7'b0000010 : split_op_pre[5:0] = 6'b000101;
     7'b0000001 : split_op_pre[5:0] = 6'b000101;
     default    : split_op_pre[5:0] = 6'bx;
  endcase

end

assign split_op[5:0] = int_spcu_split_on
                     ? 6'b000101 : split_op_pre[5:0]; 






always @( inst_ld
       or inst_sub_sp
       or inst_st
       or inst_add_sp
       or inst_jmpr15
       or inst_psrset
       or inst_rte)
begin
  case({inst_sub_sp, inst_add_sp, inst_jmpr15, inst_psrset, inst_rte, inst_st, inst_ld}
      )
     7'b1000000 : split_sop_pre[5:0] = 6'b001000;
     7'b0100000 : split_sop_pre[5:0] = 6'b000000;
     7'b0010000 : split_sop_pre[5:0] = 6'b000000;
     7'b0001000 : split_sop_pre[5:0] = 6'b011101;
     7'b0000100 : split_sop_pre[5:0] = 6'b010000;
     7'b0000010 : split_sop_pre[5:0] = 6'b110000;
     7'b0000001 : split_sop_pre[5:0] = 6'b100000;
     default    : split_sop_pre[5:0] = 6'bx;
  endcase

end

assign split_sop[5:0] = int_spcu_split_on
                      ? 6'b110000: split_sop_pre[5:0];

assign split_op_sop_sel = inst_sub_sp ||
                          inst_add_sp ||
                          inst_jmpr15 ||
                          inst_psrset ||
                          inst_rte    ||
                          inst_st     ||
                          inst_ld     ||
                          int_spcu_split_on;
                          




assign inst_psrset_rte = nie_psrset || nir_rte; 
assign split_pcode[4:0] = inst_psrset_rte ? 5'b00001
                                          : split_cnt[4:0];

assign split_pcode_sel = inst_psrset_rte || mult_vld_no_cancel; 







assign split_src0_pre[4:0] = pop_jmp_r15 ? 5'b01111 : 5'b01110;
assign split_src0[4:0]     = int_spcu_split_on ? 5'b01110: split_src0_pre[4:0];

assign split_src0_sel = push_vld_no_cancel || pop_vld_no_cancel
                     || nie_vld_no_cancel  || nir_vld_no_cancel
                     || ipush_vld_no_cancel|| ipop_vld_no_cancel
                     || hs_stack_inst_vld  || int_spcu_split_on;






assign ifdp_split_inst_25_21_post[4:0] = ifdp_split_inst[25:21];
assign ifdp_split_inst_25_21[4:0] = {5{split_on}} & ifdp_split_inst_25_21_post[4:0];
assign split_gpr_index_for_mls[4:0] = ifdp_split_inst_25_21[4:0] + split_cnt[4:0];




assign regcnt_sel_for_push    = push_st_gr_4_to_7;
assign regcnt_sel_for_pop     = pop_ld_gr_4_to_7;
assign reg_sel_for_int_acclrt = ipush_st_gpr || ipop_ld_gpr
                             || reg16_sel_for_epsr || reg17_sel_for_epc;
assign reg15_sel = push_st_gr15 || pop_ld_gr15;
assign reg14_sel = inst_sub_sp  || inst_add_sp;





assign reg16_sel_for_epsr = nie_st_epsr || nir_ld_epsr;
assign reg17_sel_for_epc  = nie_st_epc  || nir_ld_epc;
assign reg18_sel_for_psr  = hs_stack_psr;
assign reg19_sel_for_pc   = hs_stack_pc;




always @( stack_cnt[3:0]
       or reg18_sel_for_psr
       or regcnt_sel_for_pop
       or regcnt_sel_for_push
       or reg15_sel
       or reg19_sel_for_pc
       or reg_sel_for_int_acclrt
       or reg14_sel
       or split_gpr_index_for_int_acclrt[4:0]
       or split_gpr_index_for_mls[4:0]
       or hs_stack_ldst)
begin
  case({regcnt_sel_for_push,  regcnt_sel_for_pop, reg_sel_for_int_acclrt,
        reg15_sel, reg14_sel, 
        reg18_sel_for_psr, reg19_sel_for_pc, hs_stack_ldst})
    8'b10000000 : split_gpr_index_pre[4:0] = 5'b10010 - stack_cnt[3:0];
    8'b01000000 : split_gpr_index_pre[4:0] = 5'b00100 + stack_cnt[3:0];
    8'b00100000 : split_gpr_index_pre[4:0] = split_gpr_index_for_int_acclrt[4:0];
    8'b00010000 : split_gpr_index_pre[4:0] = 5'b01111;
    8'b00001000 : split_gpr_index_pre[4:0] = 5'b01110;
    8'b00000100 : split_gpr_index_pre[4:0] = 5'b10010;
    8'b00000010 : split_gpr_index_pre[4:0] = 5'b10011;
    8'b00000001 : split_gpr_index_pre[4:0] = {1'b0, stack_cnt[3:0]};
    default        : split_gpr_index_pre[4:0] = split_gpr_index_for_mls[4:0];
  endcase

end

assign split_gpr_index[4:0] = int_spcu_split_on
                            ? split_gpr_index_for_int_acclrt[4:0]
                            : split_gpr_index_pre[4:0]; 

assign split_src1_sel = stm_vld_no_cancel ||
                        push_st_gpr       ||
                        nie_st_cr         ||
                        ipush_st_gpr      || 
                        hs_st_inst        ||
                        int_spcu_split_on;

assign split_dest_sel = ldm_vld_no_cancel ||
                        pop_ld_gpr        ||
                        nir_ld_cr         ||
                        ipop_ld_gpr       ||
                        inst_sub_sp       ||
                        inst_add_sp       ||
                        hs_ld_inst;








assign st_imm_for_push = push_st_gpr ||
                         nie_st_cr   ||
                         ipush_st_gpr||
                         hs_st_inst  ||
                         int_spcu_split_on;


assign psrset_imm_for_nie   = nie_psrset;
assign normal_imm_for_other = !st_imm_for_push && !psrset_imm_for_nie;

assign split_imm[3:0] = {4{st_imm_for_push}}      & split_cnt_inc[3:0]
                      | {4{psrset_imm_for_nie}}   & 4'b1100
                      | {4{normal_imm_for_other}} & split_cnt[3:0];
assign split_imm[4] = 1'b0;

assign split_imm_sel = mls_vld_no_cancel  ||
                       push_vld_no_cancel ||
                       pop_vld_no_cancel  ||
                       nie_vld_no_cancel  ||
                       nir_vld_no_cancel  ||
                       ipush_vld_no_cancel||
                       ipop_vld_no_cancel ||
                       hs_stack_inst_vld  ||
                       int_spcu_split_on;
                        











assign ldm_32 = (ifdp_split_inst[31:26]
                  == 6'b110100);
assign ldm_vld_no_cancel = ldm_32 && ifctrl_split_inst_vld_no_cancel;

assign stm_32 = (ifdp_split_inst[31:26]
                  == 6'b110101);
assign stm_vld_no_cancel = stm_32 && ifctrl_split_inst_vld_no_cancel;

assign mls_vld_no_cancel = ldm_vld_no_cancel || stm_vld_no_cancel;

assign mls_cmplt = ifdp_split_inst32  &&
                   (ifdp_split_inst[4:0] == split_cnt[4:0]);




assign mult_vld_no_cancel = 1'b0;
assign mult_cmplt = 1'b0;




assign opcode_push_16 = ({ifdp_split_inst[31:26],
                          ifdp_split_inst[23:21]} == 9'b000101110
                        );

assign push_16_vld_no_cancel = opcode_push_16 && ifctrl_split_inst_vld_no_cancel;



assign push_vld_no_cancel = push_16_vld_no_cancel;

assign opcode_pop_16 = ({ifdp_split_inst[31:26], 
                          ifdp_split_inst[23:21]} == 9'b000101100
                       );

assign pop_16_vld_no_cancel = opcode_pop_16 && ifctrl_split_inst_vld_no_cancel;



assign pop_vld_no_cancel = pop_16_vld_no_cancel;

assign reg15_vld_16bit = ifdp_split_inst[20];
assign reg11_to_reg4_vld_16bit  = (ifdp_split_inst[19:16] != 4'b0000);
assign push_stack_cnt_cmplt = push_vld_no_cancel && (stack_cnt_inc[3:0] == 4'b1111);
assign pop_stack_cnt_cmplt  = pop_vld_no_cancel  && (stack_cnt_inc[3:0] == ifdp_split_inst[19:16]);






assign opcode_nest_int = ({ifdp_split_inst[31:26],
                           ifdp_split_inst[23:21]} == 9'b000101011);
assign opcode_nie   = opcode_nest_int && (ifdp_split_inst[17:16] == 2'b00);
assign opcode_nir   = opcode_nest_int && (ifdp_split_inst[17:16] == 2'b01);
assign opcode_ipush = opcode_nest_int && (ifdp_split_inst[17:16] == 2'b10);
assign opcode_ipop  = opcode_nest_int && (ifdp_split_inst[17:16] == 2'b11);

assign nest_int_inst_vld = ifctrl_split_inst_vld_no_cancel
                           && cp0_yy_supv_mode_aft_dbg;


assign nie_vld_no_cancel   = opcode_nie   && nest_int_inst_vld 
                          && !int_spcu_split_on;
assign nir_vld_no_cancel   = opcode_nir   && nest_int_inst_vld;
assign ipush_vld_no_cancel = opcode_ipush && ifctrl_split_inst_vld_no_cancel
                          && !int_spcu_split_on;
assign ipop_vld_no_cancel  = opcode_ipop  && ifctrl_split_inst_vld_no_cancel;



assign privilege_expt_vld = (opcode_nie || opcode_nir)
                            && ifctrl_split_inst_vld_no_cancel
                            && !cp0_yy_supv_mode_aft_dbg; 









parameter IDLE  = 2'b00,
          WFI   = 2'b01,
          SPLIT = 2'b10;




always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_st[1:0] <= IDLE;
  else if(ifctrl_xx_ifcancel)
    cur_st[1:0] <= IDLE;
  else
    cur_st[1:0] <= nxt_st[1:0];
end


always @( mult_vld_no_cancel
       or iu_ifu_cnt_write_en
       or iu_ifu_ex_stall
       or seu_xx_fix_mult
       or mult_cmplt
       or cur_st
       or mls_vld_no_cancel
       or mls_cmplt)
begin
case(cur_st)
IDLE:
begin
  nxt_st = IDLE;
  if(iu_ifu_ex_stall)
    nxt_st = IDLE;
  else
  begin      
    case({mls_vld_no_cancel, mult_vld_no_cancel})
      2'b10:
      begin
        if(!mls_cmplt)
           nxt_st = SPLIT;
      end
      2'b01:
      begin
        if(!seu_xx_fix_mult)
          nxt_st = WFI;
        else
          nxt_st = SPLIT;
      end
      default;
    endcase
  end
end
WFI:
begin
  nxt_st = WFI;
  if(iu_ifu_cnt_write_en)
  begin
    nxt_st = SPLIT;
  end
end
SPLIT:
begin
  nxt_st = SPLIT;
  if(iu_ifu_ex_stall)
  begin
    nxt_st = SPLIT;
  end
  else
  begin
    case({mls_vld_no_cancel, mult_vld_no_cancel})
      2'b10:
      begin
        if(mls_cmplt)
          nxt_st = IDLE;
      end
      2'b01:
      begin
        if(mult_cmplt)
          nxt_st = IDLE;
      end
      default;
    endcase
  end
end
default:
  nxt_st = IDLE;
endcase

end


assign split_on = (cur_st != IDLE)
                  || mls_vld_no_cancel || mult_vld_no_cancel;


assign cnt_en = (cur_st == IDLE)
                    && !iu_ifu_ex_stall
                    && ((mls_vld_no_cancel && !mls_cmplt) || mult_vld_no_cancel)
             || (cur_st == SPLIT)
                    && !iu_ifu_ex_stall
                    && ((mls_vld_no_cancel  && !mls_cmplt) ||
                        (mult_vld_no_cancel && !mult_cmplt)
                       );


assign split_last = (cur_st == IDLE)
                        && !iu_ifu_ex_stall
                        && mls_vld_no_cancel && mls_cmplt
                 || (cur_st == SPLIT)
                        && !iu_ifu_ex_stall
                        && ((mls_vld_no_cancel  && mls_cmplt) ||
                            (mult_vld_no_cancel && mult_cmplt)
                           );

assign mult_stall = (cur_st == WFI);








parameter SM_PUSH_IDLE        = 2'b00,
          SM_PUSH_REG11TOREG4 = 2'b01,
          SM_PUSH_SUBSP       = 2'b10;




always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    push_cur_st[1:0] <= SM_PUSH_IDLE;
  else if(ifctrl_xx_ifcancel)
    push_cur_st[1:0] <= SM_PUSH_IDLE;
  else
    push_cur_st[1:0] <= push_nxt_st[1:0];
end

assign push_reg15_vld         = push_vld_no_cancel && reg15_vld_16bit;
assign push_reg11_to_reg4_vld = push_vld_no_cancel && reg11_to_reg4_vld_16bit;


always @( push_reg11_to_reg4_vld
       or iu_ifu_ex_stall
       or push_vld_no_cancel
       or push_stack_cnt_cmplt
       or push_cur_st)
begin
case(push_cur_st)
SM_PUSH_IDLE:
begin
  push_nxt_st = SM_PUSH_IDLE;
  if(iu_ifu_ex_stall)
    push_nxt_st = SM_PUSH_IDLE;
  else if(push_vld_no_cancel)
  begin
    if(push_reg11_to_reg4_vld)
    begin
      push_nxt_st = SM_PUSH_REG11TOREG4;
    end
    else
    begin
      push_nxt_st = SM_PUSH_SUBSP;
    end
  end
end
SM_PUSH_REG11TOREG4:
begin
  push_nxt_st = SM_PUSH_REG11TOREG4;
  if(iu_ifu_ex_stall)
    push_nxt_st = SM_PUSH_REG11TOREG4;
  else if(push_vld_no_cancel)
  begin
    if(push_stack_cnt_cmplt)
    begin
      push_nxt_st = SM_PUSH_SUBSP;
    end
    else
    begin
      push_nxt_st = SM_PUSH_REG11TOREG4;
    end
  end
end
SM_PUSH_SUBSP:
begin
  push_nxt_st = SM_PUSH_SUBSP;
  if(iu_ifu_ex_stall)
    push_nxt_st = SM_PUSH_SUBSP;
  else if(push_vld_no_cancel)
  begin
    push_nxt_st = SM_PUSH_IDLE;
  end
end
default:
  push_nxt_st = SM_PUSH_IDLE;
endcase

end

assign push_split_on = (push_cur_st != SM_PUSH_IDLE) || push_vld_no_cancel;

assign push_split_last = (push_cur_st == SM_PUSH_SUBSP)
                             && push_vld_no_cancel
                             && !iu_ifu_ex_stall; 

assign push_cnt_en = (push_cur_st == SM_PUSH_IDLE)
                         && push_vld_no_cancel
                         && !iu_ifu_ex_stall && push_reg15_vld
                  || (push_cur_st == SM_PUSH_REG11TOREG4)
                         && push_vld_no_cancel
                         && !iu_ifu_ex_stall;
 
assign push_regcnt_en = (push_cur_st == SM_PUSH_REG11TOREG4)
                            && push_vld_no_cancel
                            && !iu_ifu_ex_stall && !push_stack_cnt_cmplt;

assign push_regcnt_rst = (push_cur_st == SM_PUSH_REG11TOREG4)
                            && push_vld_no_cancel
                            && !iu_ifu_ex_stall && push_stack_cnt_cmplt;

assign push_regcnt_init = (push_cur_st == SM_PUSH_IDLE)
                              && push_vld_no_cancel
                              && !iu_ifu_ex_stall && push_reg11_to_reg4_vld;

assign push_stall = (push_cur_st == SM_PUSH_IDLE)
                        && push_vld_no_cancel && !push_reg15_vld;

assign push_st_gpr = (push_cur_st == SM_PUSH_IDLE)
                         && push_vld_no_cancel
                  || (push_cur_st == SM_PUSH_REG11TOREG4);

assign push_sub_sp = (push_cur_st == SM_PUSH_SUBSP);

assign push_st_gr15 = (push_cur_st == SM_PUSH_IDLE)
                          && push_vld_no_cancel;

assign push_st_gr_4_to_7 = (push_cur_st == SM_PUSH_REG11TOREG4);








parameter SM_POP_IDLE        = 2'b00,
          SM_POP_REG15       = 2'b01,
          SM_POP_ADDSP       = 2'b10,
          SM_POP_JMPR15      = 2'b11;




always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pop_cur_st[1:0] <= SM_POP_IDLE;
  else if(ifctrl_xx_ifcancel)
    pop_cur_st[1:0] <= SM_POP_IDLE;
  else
    pop_cur_st[1:0] <= pop_nxt_st[1:0];
end

assign pop_reg4_to_reg11_vld = pop_vld_no_cancel && reg11_to_reg4_vld_16bit;
assign pop_reg15_vld         = pop_vld_no_cancel && reg15_vld_16bit;


always @( iu_ifu_ex_stall
       or pop_reg4_to_reg11_vld
       or pop_vld_no_cancel
       or iu_ifu_r15_vld
       or pop_stack_cnt_cmplt
       or addrgen_xx_ibus_idle
       or pop_reg15_vld
       or pop_cur_st)
begin
case(pop_cur_st)
SM_POP_IDLE:
begin
  pop_nxt_st = SM_POP_IDLE;
  if(iu_ifu_ex_stall)
    pop_nxt_st = SM_POP_IDLE;
  else if(pop_vld_no_cancel)
  begin
    if(pop_stack_cnt_cmplt || !pop_reg4_to_reg11_vld)
    begin
      if(pop_reg15_vld)
      begin
        pop_nxt_st = SM_POP_REG15;
      end
      else
      begin
        pop_nxt_st = SM_POP_ADDSP;
      end
    end
    else
    begin
      pop_nxt_st = SM_POP_IDLE;
    end
  end
end
SM_POP_REG15:
begin
  pop_nxt_st = SM_POP_REG15;
  if(iu_ifu_ex_stall)
    pop_nxt_st = SM_POP_REG15;
  else if(pop_vld_no_cancel)
  begin
    pop_nxt_st = SM_POP_ADDSP;
  end
end
SM_POP_ADDSP:
begin
  pop_nxt_st = SM_POP_ADDSP;
  if(iu_ifu_ex_stall)
    pop_nxt_st = SM_POP_ADDSP;
  else if(pop_vld_no_cancel)
  begin
    pop_nxt_st = SM_POP_JMPR15;
  end 
end
SM_POP_JMPR15:
begin
  pop_nxt_st = SM_POP_JMPR15;
  if(iu_ifu_ex_stall)
    pop_nxt_st = SM_POP_JMPR15;
  else if(pop_vld_no_cancel)
  begin
    if(addrgen_xx_ibus_idle && iu_ifu_r15_vld)
      pop_nxt_st = SM_POP_IDLE;
  end
end
default:
  pop_nxt_st = SM_POP_IDLE;
endcase

end

assign pop_split_on = (pop_cur_st != SM_POP_IDLE) || pop_vld_no_cancel; 

assign pop_split_last = (pop_cur_st == SM_POP_JMPR15)
                            && pop_vld_no_cancel
                            && !iu_ifu_ex_stall
                            && addrgen_xx_ibus_idle 
                            && iu_ifu_r15_vld; 

assign pop_cnt_en = (pop_cur_st == SM_POP_IDLE)
                        && !iu_ifu_ex_stall && pop_reg4_to_reg11_vld
                 || (pop_cur_st == SM_POP_REG15)
                        && pop_vld_no_cancel
                        && !iu_ifu_ex_stall;

assign pop_regcnt_en = (pop_cur_st == SM_POP_IDLE)
                           && !iu_ifu_ex_stall
                           && pop_reg4_to_reg11_vld && !pop_stack_cnt_cmplt;

assign pop_regcnt_rst = (pop_cur_st == SM_POP_IDLE)
                            && !iu_ifu_ex_stall
                            && pop_reg4_to_reg11_vld && pop_stack_cnt_cmplt;

assign pop_stall = (pop_cur_st == SM_POP_IDLE)
                       && pop_vld_no_cancel && !pop_reg4_to_reg11_vld;

assign pop_ld_gpr = (pop_cur_st == SM_POP_IDLE)
                        && pop_vld_no_cancel
                 || (pop_cur_st == SM_POP_REG15);

assign pop_add_sp = (pop_cur_st == SM_POP_ADDSP);

assign pop_jmp_r15 = (pop_cur_st == SM_POP_JMPR15);

assign pop_ld_gr_4_to_7 = (pop_cur_st == SM_POP_IDLE)
                             && pop_vld_no_cancel;

assign pop_ld_gr15 = (pop_cur_st == SM_POP_REG15); 








parameter SM_NIE_IDLE   = 2'b00,
          SM_NIE_ST_CR  = 2'b01,
          SM_NIE_SUB_SP = 2'b11;





always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    nie_cur_st[1:0] <= SM_NIE_IDLE;
  else if(ifctrl_xx_ifcancel)
    nie_cur_st[1:0] <= SM_NIE_IDLE;
  else
    nie_cur_st[1:0] <= nie_nxt_st[1:0];
end



always @( nie_vld_no_cancel
       or iu_ifu_ex_stall
       or nie_cur_st)
begin
case(nie_cur_st)
SM_NIE_IDLE:
begin
  nie_nxt_st = SM_NIE_IDLE;
  if(iu_ifu_ex_stall)
    nie_nxt_st = SM_NIE_IDLE;
  else if(nie_vld_no_cancel)
    nie_nxt_st = SM_NIE_ST_CR;
end
SM_NIE_ST_CR:
begin
  nie_nxt_st = SM_NIE_ST_CR;
  if(iu_ifu_ex_stall)
    nie_nxt_st = SM_NIE_ST_CR;
  else if(nie_vld_no_cancel)
    nie_nxt_st = SM_NIE_SUB_SP;
end
SM_NIE_SUB_SP:
begin
  nie_nxt_st = SM_NIE_SUB_SP;
  if(iu_ifu_ex_stall)
    nie_nxt_st = SM_NIE_SUB_SP;
  else if(nie_vld_no_cancel)
    nie_nxt_st = SM_NIE_IDLE;
end








default:
  nie_nxt_st = SM_NIE_IDLE;
endcase

end

assign nie_split_on = (nie_cur_st != SM_NIE_IDLE) || nie_vld_no_cancel;

assign nie_split_last = (nie_cur_st == SM_NIE_SUB_SP)
                            && nie_vld_no_cancel
                            && !iu_ifu_ex_stall;

assign nie_cnt_en = (nie_cur_st == SM_NIE_IDLE) 
                        && nie_vld_no_cancel
                        && !iu_ifu_ex_stall
                 || (nie_cur_st == SM_NIE_ST_CR)
                        && nie_vld_no_cancel
                        && !iu_ifu_ex_stall;

assign nie_st_epc  = (nie_cur_st == SM_NIE_IDLE)
                         && nie_vld_no_cancel;

assign nie_st_epsr = (nie_cur_st == SM_NIE_ST_CR);

assign nie_sub_sp  = (nie_cur_st == SM_NIE_SUB_SP);

assign nie_psrset  = 1'b0;

assign nie_st_cr   = nie_st_epc || nie_st_epsr;








parameter SM_NIR_IDLE   = 2'b00,
          SM_NIR_LD_CR  = 2'b01,
          SM_NIR_ADD_SP = 2'b11,
          SM_NIR_RTE    = 2'b10;




always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    nir_cur_st[1:0] <= SM_NIR_IDLE;
  else if(ifctrl_xx_ifcancel)
    nir_cur_st[1:0] <= SM_NIR_IDLE;
  else
    nir_cur_st[1:0] <= nir_nxt_st[1:0];
end



always @( iu_ifu_ex_stall
       or nir_vld_no_cancel
       or nir_cur_st)
begin
case(nir_cur_st)
SM_NIR_IDLE:
begin
  nir_nxt_st = SM_NIR_IDLE;
  if(iu_ifu_ex_stall)
    nir_nxt_st = SM_NIR_IDLE;
  else if(nir_vld_no_cancel)
    nir_nxt_st = SM_NIR_LD_CR;
end
SM_NIR_LD_CR:
begin
  nir_nxt_st = SM_NIR_LD_CR;
  if(iu_ifu_ex_stall)
    nir_nxt_st = SM_NIR_LD_CR;
  else if(nir_vld_no_cancel)
 //   nir_nxt_st = SM_NIR_ADD_SP;
    nir_nxt_st = SM_NIR_RTE;
end








SM_NIR_RTE:
begin
  nir_nxt_st = SM_NIR_RTE;
  if(iu_ifu_ex_stall)
    nir_nxt_st = SM_NIR_RTE;
  else if(nir_vld_no_cancel)
    nir_nxt_st = SM_NIR_IDLE;
end
default:
  nir_nxt_st = SM_NIR_IDLE;
endcase

end

assign nir_split_on = (nir_cur_st != SM_NIR_IDLE) || nir_vld_no_cancel;

assign nir_split_last = (nir_cur_st == SM_NIR_RTE)
                            && nir_vld_no_cancel
                            && !iu_ifu_ex_stall;

assign nir_cnt_en = (nir_cur_st == SM_NIR_IDLE)
                        && nir_vld_no_cancel
                        && !iu_ifu_ex_stall
                 || (nir_cur_st == SM_NIR_LD_CR)
                        && nir_vld_no_cancel
                        && !iu_ifu_ex_stall;

assign nir_ld_epsr = (nir_cur_st == SM_NIR_IDLE)
                         && nir_vld_no_cancel;

assign nir_ld_epc  = (nir_cur_st == SM_NIR_LD_CR);

assign nir_add_sp  = 1'b0; 

assign nir_rte     = (nir_cur_st == SM_NIR_RTE);

assign nir_ld_cr   = nir_ld_epsr || nir_ld_epc;








parameter SM_IPUSH_IDLE    = 3'b000,
          SM_IPUSH_ST_GR12 = 3'b001,
          SM_IPUSH_ST_GR3  = 3'b011,
          SM_IPUSH_ST_GR2  = 3'b010,
          SM_IPUSH_ST_GR1  = 3'b110,
          SM_IPUSH_ST_GR0  = 3'b111,
          SM_IPUSH_SUB_SP  = 3'b101;




always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ipush_cur_st[2:0] <= SM_IPUSH_IDLE;
  else if(ifctrl_xx_ifcancel)
    ipush_cur_st[2:0] <= SM_IPUSH_IDLE;
  else
    ipush_cur_st[2:0] <= ipush_nxt_st[2:0];
end


always @( ipush_vld_no_cancel
       or iu_ifu_ex_stall
       or ipush_cur_st)
begin
case(ipush_cur_st)
SM_IPUSH_IDLE:
begin
  ipush_nxt_st = SM_IPUSH_IDLE;
  if(iu_ifu_ex_stall)
    ipush_nxt_st = SM_IPUSH_IDLE;
  else if(ipush_vld_no_cancel)
    ipush_nxt_st = SM_IPUSH_ST_GR12;
end
SM_IPUSH_ST_GR12:
begin
  ipush_nxt_st = SM_IPUSH_ST_GR12;
  if(iu_ifu_ex_stall)
    ipush_nxt_st = SM_IPUSH_ST_GR12;
  else if(ipush_vld_no_cancel)
    ipush_nxt_st = SM_IPUSH_ST_GR3;
end
SM_IPUSH_ST_GR3:
begin
  ipush_nxt_st = SM_IPUSH_ST_GR3;
  if(iu_ifu_ex_stall)
    ipush_nxt_st = SM_IPUSH_ST_GR3;
  else if(ipush_vld_no_cancel)
    ipush_nxt_st = SM_IPUSH_ST_GR2;
end
SM_IPUSH_ST_GR2:
begin
  ipush_nxt_st = SM_IPUSH_ST_GR2;
  if(iu_ifu_ex_stall)
    ipush_nxt_st = SM_IPUSH_ST_GR2;
  else if(ipush_vld_no_cancel)
    ipush_nxt_st = SM_IPUSH_ST_GR1;
end
SM_IPUSH_ST_GR1:
begin
  ipush_nxt_st = SM_IPUSH_ST_GR1;
  if(iu_ifu_ex_stall)
    ipush_nxt_st = SM_IPUSH_ST_GR1;
  else if(ipush_vld_no_cancel)
    ipush_nxt_st = SM_IPUSH_ST_GR0;
end
SM_IPUSH_ST_GR0:
begin
  ipush_nxt_st = SM_IPUSH_ST_GR0;
  if(iu_ifu_ex_stall)
    ipush_nxt_st = SM_IPUSH_ST_GR0;
  else if(ipush_vld_no_cancel)

    ipush_nxt_st = SM_IPUSH_IDLE;
end








default:
  ipush_nxt_st = SM_IPUSH_IDLE;
endcase

end

assign ipush_split_on = (ipush_cur_st != SM_IPUSH_IDLE) || ipush_vld_no_cancel;

assign ipush_split_last = (ipush_cur_st == SM_IPUSH_ST_GR0)
                              && ipush_vld_no_cancel
                              && !iu_ifu_ex_stall;

assign ipush_cnt_en = ipush_vld_no_cancel
                        && !iu_ifu_ex_stall;

assign ipush_st_gr13 = (ipush_cur_st == SM_IPUSH_IDLE)
                           && ipush_vld_no_cancel;
assign ipush_st_gr12 = (ipush_cur_st == SM_IPUSH_ST_GR12);
assign ipush_st_gr3  = (ipush_cur_st == SM_IPUSH_ST_GR3);
assign ipush_st_gr2  = (ipush_cur_st == SM_IPUSH_ST_GR2);
assign ipush_st_gr1  = (ipush_cur_st == SM_IPUSH_ST_GR1);
assign ipush_st_gr0  = (ipush_cur_st == SM_IPUSH_ST_GR0);


assign ipush_sub_sp  = 1'b0; 

assign ipush_st_gpr  = ipush_st_gr13 
                    || (ipush_cur_st != SM_IPUSH_IDLE);








parameter SM_IPOP_IDLE    = 3'b000,
          SM_IPOP_LD_GR1  = 3'b001,
          SM_IPOP_LD_GR2  = 3'b011,
          SM_IPOP_LD_GR3  = 3'b010,
          SM_IPOP_LD_GR12 = 3'b110,
          SM_IPOP_LD_GR13 = 3'b111,
          SM_IPOP_ADD_SP  = 3'b101;




always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ipop_cur_st[2:0] <= SM_IPOP_IDLE;
  else if(ifctrl_xx_ifcancel)
    ipop_cur_st[2:0] <= SM_IPOP_IDLE;
  else
    ipop_cur_st[2:0] <= ipop_nxt_st[2:0];
end


always @( iu_ifu_ex_stall
       or ipop_cur_st
       or ipop_vld_no_cancel)
begin
case(ipop_cur_st)
SM_IPOP_IDLE:
begin
  ipop_nxt_st = SM_IPOP_IDLE;
  if(iu_ifu_ex_stall)
    ipop_nxt_st = SM_IPOP_IDLE;
  else if(ipop_vld_no_cancel)
    ipop_nxt_st = SM_IPOP_LD_GR1;
end
SM_IPOP_LD_GR1:
begin
  ipop_nxt_st = SM_IPOP_LD_GR1;
  if(iu_ifu_ex_stall)
    ipop_nxt_st = SM_IPOP_LD_GR1;
  else if(ipop_vld_no_cancel)
    ipop_nxt_st = SM_IPOP_LD_GR2;
end
SM_IPOP_LD_GR2:
begin
  ipop_nxt_st = SM_IPOP_LD_GR2;
  if(iu_ifu_ex_stall)
    ipop_nxt_st = SM_IPOP_LD_GR2;
  else if(ipop_vld_no_cancel)
    ipop_nxt_st = SM_IPOP_LD_GR3;
end
SM_IPOP_LD_GR3:
begin
  ipop_nxt_st = SM_IPOP_LD_GR3;
  if(iu_ifu_ex_stall)
    ipop_nxt_st = SM_IPOP_LD_GR3;
  else if(ipop_vld_no_cancel)
    ipop_nxt_st = SM_IPOP_LD_GR12;
end
SM_IPOP_LD_GR12:
begin
  ipop_nxt_st = SM_IPOP_LD_GR12;
  if(iu_ifu_ex_stall)
    ipop_nxt_st = SM_IPOP_LD_GR12;
  else if(ipop_vld_no_cancel)
    ipop_nxt_st = SM_IPOP_LD_GR13;
end
SM_IPOP_LD_GR13:
begin
  ipop_nxt_st = SM_IPOP_LD_GR13;
  if(iu_ifu_ex_stall)
    ipop_nxt_st = SM_IPOP_LD_GR13;
  else if(ipop_vld_no_cancel)

    ipop_nxt_st = SM_IPOP_IDLE;
end








default:
  ipop_nxt_st = SM_IPOP_IDLE;
endcase

end

assign ipop_split_on = (ipop_cur_st != SM_IPOP_IDLE) || ipop_vld_no_cancel;

assign ipop_split_last = (ipop_cur_st == SM_IPOP_LD_GR13)
                              && ipop_vld_no_cancel
                              && !iu_ifu_ex_stall;

assign ipop_cnt_en = ipop_vld_no_cancel
                       && !iu_ifu_ex_stall;

assign ipop_ld_gr0   = (ipop_cur_st == SM_IPOP_IDLE)
                           && ipop_vld_no_cancel;
assign ipop_ld_gr1  = (ipop_cur_st == SM_IPOP_LD_GR1);
assign ipop_ld_gr2  = (ipop_cur_st == SM_IPOP_LD_GR2);
assign ipop_ld_gr3  = (ipop_cur_st == SM_IPOP_LD_GR3);
assign ipop_ld_gr12 = (ipop_cur_st == SM_IPOP_LD_GR12);
assign ipop_ld_gr13 = (ipop_cur_st == SM_IPOP_LD_GR13);


assign ipop_add_sp  = 1'b0; 

assign ipop_ld_gpr  = ipop_ld_gr0
                   || (ipop_cur_st != SM_IPOP_IDLE); 





parameter SM_INT_SPCU_IDLE    = 4'b1000,
          SM_INT_SPCU_ST_EPC  = 4'b1001, 
          SM_INT_SPCU_ST_EPSR = 4'b0001, 
          SM_INT_SPCU_ST_GR13 = 4'b0011, 
          SM_INT_SPCU_ST_GR12 = 4'b0010, 
          SM_INT_SPCU_ST_GR3  = 4'b0110, 
          SM_INT_SPCU_ST_GR2  = 4'b0111, 
          SM_INT_SPCU_ST_GR1  = 4'b0101, 
          SM_INT_SPCU_ST_GR0  = 4'b1101;





assign int_spcu_flush = (iu_yy_xx_flush ||iu_ifu_spcu_error)
                        &&(int_spcu_cur_st != SM_INT_SPCU_IDLE)
                     || inst_nie_check_fail 
                     || inst_ipush_check_fail; 

assign inst_nie_check_fail   = ifctrl_split_inst_vld_no_cancel && !opcode_nie
                            && (int_spcu_cur_st == SM_INT_SPCU_ST_GR1);
assign inst_ipush_check_fail = ifctrl_split_inst_vld_no_cancel && !opcode_ipush
                            && (int_spcu_cur_st == SM_INT_SPCU_ST_GR0);

assign int_spcu_check_fail   = (int_spcu_cur_st == SM_INT_SPCU_ST_GR1) && !opcode_nie
                            || (int_spcu_cur_st == SM_INT_SPCU_ST_GR0) && !opcode_ipush;

always @(posedge sm_upd_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_spcu_cur_st[3:0] <= SM_INT_SPCU_IDLE;
  else if(int_spcu_flush)
    int_spcu_cur_st[3:0] <= SM_INT_SPCU_IDLE;
  else
    int_spcu_cur_st[3:0] <= int_spcu_nxt_st[3:0];
end


always @( ifctrl_split_inst_vld_no_cancel
       or iu_ifu_ex_stall
       or int_spcu_cur_st
       or iu_ifu_spcu_int_en)
begin
case(int_spcu_cur_st)
SM_INT_SPCU_IDLE:
begin
  if(iu_ifu_spcu_int_en)
    int_spcu_nxt_st = SM_INT_SPCU_ST_EPC;
  else
    int_spcu_nxt_st = SM_INT_SPCU_IDLE;
end
SM_INT_SPCU_ST_EPC:
begin
  if(iu_ifu_ex_stall)
    int_spcu_nxt_st = SM_INT_SPCU_ST_EPC;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_EPSR;
end
SM_INT_SPCU_ST_EPSR:
begin
  if(iu_ifu_ex_stall)
    int_spcu_nxt_st = SM_INT_SPCU_ST_EPSR;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR13;
end
SM_INT_SPCU_ST_GR13:
begin
  if(iu_ifu_ex_stall)
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR13;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR12;
end
SM_INT_SPCU_ST_GR12:
begin
  if(iu_ifu_ex_stall)
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR12;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR3;
end
SM_INT_SPCU_ST_GR3:
begin
  if(iu_ifu_ex_stall)
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR3;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR2;
end
SM_INT_SPCU_ST_GR2:
begin
  if(iu_ifu_ex_stall) 
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR2;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR1;
end
SM_INT_SPCU_ST_GR1:
begin
  if(iu_ifu_ex_stall || !ifctrl_split_inst_vld_no_cancel) 
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR1;
  else
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR0;
end
SM_INT_SPCU_ST_GR0:
begin
  if(iu_ifu_ex_stall || !ifctrl_split_inst_vld_no_cancel)
    int_spcu_nxt_st = SM_INT_SPCU_ST_GR0;
  else
    int_spcu_nxt_st = SM_INT_SPCU_IDLE;
end
default:
  int_spcu_nxt_st   = SM_INT_SPCU_IDLE;
endcase

end




assign int_spcu_split_on = int_spcu_sm_not_idle;


assign int_spcu_cnt_en = (int_spcu_cur_st != SM_INT_SPCU_IDLE)
                      && !iu_ifu_ex_stall
                      && !( ((int_spcu_cur_st == SM_INT_SPCU_ST_GR1)
                            ||(int_spcu_cur_st == SM_INT_SPCU_ST_GR0))
                         && !ifctrl_split_inst_vld_no_cancel);

assign int_spcu_st_epc  = int_spcu_cur_st == SM_INT_SPCU_ST_EPC; 
assign int_spcu_st_epsr = int_spcu_cur_st == SM_INT_SPCU_ST_EPSR;
assign int_spcu_st_gr13 = int_spcu_cur_st == SM_INT_SPCU_ST_GR13;
assign int_spcu_st_gr12 = int_spcu_cur_st == SM_INT_SPCU_ST_GR12;
assign int_spcu_st_gr3  = int_spcu_cur_st == SM_INT_SPCU_ST_GR3;
assign int_spcu_st_gr2  = int_spcu_cur_st == SM_INT_SPCU_ST_GR2;
assign int_spcu_st_gr1  = int_spcu_cur_st == SM_INT_SPCU_ST_GR1;
assign int_spcu_st_gr0  = int_spcu_cur_st == SM_INT_SPCU_ST_GR0;


assign gr0_sel  = ipush_st_gr0  || ipop_ld_gr0  || int_spcu_st_gr0;
assign gr1_sel  = ipush_st_gr1  || ipop_ld_gr1  || int_spcu_st_gr1;
assign gr2_sel  = ipush_st_gr2  || ipop_ld_gr2  || int_spcu_st_gr2;
assign gr3_sel  = ipush_st_gr3  || ipop_ld_gr3  || int_spcu_st_gr3;
assign gr12_sel = ipush_st_gr12 || ipop_ld_gr12 || int_spcu_st_gr12;
assign gr13_sel = ipush_st_gr13 || ipop_ld_gr13 || int_spcu_st_gr13;
assign gr16_sel = nie_st_epsr   || nir_ld_epsr  || int_spcu_st_epsr;
assign gr17_sel = nie_st_epc    || nir_ld_epc   || int_spcu_st_epc;

assign split_gpr_index_for_int_acclrt[4:0] = {5{gr0_sel}}  & 5'b00000
                                           | {5{gr1_sel}}  & 5'b00001
                                           | {5{gr2_sel}}  & 5'b00010
                                           | {5{gr3_sel}}  & 5'b00011
                                           | {5{gr12_sel}} & 5'b01100
                                           | {5{gr13_sel}} & 5'b01101
                                           | {5{gr16_sel}} & 5'b10000
                                           | {5{gr17_sel}} & 5'b10001;
assign split_cnt_set_5 = int_spcu_st_gr1 &&
                         (int_spcu_nxt_st == SM_INT_SPCU_ST_GR0);




assign split_cr_operate = nie_split_on || nir_split_on || int_spcu_split_on;



assign int_spcu_stall = int_spcu_split_on && 
                        !int_spcu_st_gr1  && !int_spcu_st_gr0; 


assign int_spcu_inst_vld = int_spcu_split_on 
                        && !inst_nie_check_fail
                        && !inst_ipush_check_fail
                        && !( (int_spcu_st_gr1 || int_spcu_st_gr0)
                            && !ifctrl_split_inst_vld_no_cancel)
                        && !iu_ifu_spcu_error; 




assign int_acc_imm_data_pre[4:0] = {5{ipush_st_gr0}} & 5'b01110
                                 | {5{ipop_ld_gr13}} & 5'b10110
                                 | {5{nir_ld_epc}}   & 5'b10010;
assign int_spcu_imm_data[4:0]    = {5{int_spcu_st_gr1}} & 5'b01010
                                 | {5{int_spcu_st_gr0}} & 5'b01110;
assign int_acc_imm_data[4:0]     = int_spcu_split_on
                                 ? int_spcu_imm_data[4:0]
                                 : int_acc_imm_data_pre[4:0];

assign int_acc_imm_sel = ipush_st_gr0 || ipop_ld_gr13 || nir_ld_epc
                      || int_spcu_st_gr1 || int_spcu_st_gr0;
 
assign int_spcu_retire_mask_for_ex = int_spcu_sm_not_idle; 



assign int_spcu_split_last    = (int_spcu_nxt_st == SM_INT_SPCU_IDLE)
                             && (int_spcu_cur_st != SM_INT_SPCU_IDLE);

assign int_spcu_split_cnt_rst = int_spcu_split_last 
                             || int_spcu_flush;   
assign int_spcu_sm_not_idle  = int_spcu_cur_st != SM_INT_SPCU_IDLE;

assign int_spcu_retire_mask = int_spcu_stall;


assign int_spcu_inst_vld_for_ex = int_spcu_split_on && !int_spcu_st_gr0; 






assign hs_st_inst = 1'b0; 
assign hs_ld_inst = 1'b0; 
assign hs_sub_sp  = 1'b0; 
assign hs_add_sp  = 1'b0; 
assign hs_cnt_add = 1'b0; 
assign hs_cnt_rst = 1'b0;
assign hs_stack_cnt_set   = 1'b0; 
assign hs_stack_cnt_reset = 1'b0;
assign hs_stack_cnt_add   = 1'b0; 
assign hs_stack_cnt_sub   = 1'b0; 
assign hs_stack_cnt_set13 = 1'b0; 
assign hs_stack_inst_vld  = 1'b0; 
assign hs_stack_ldst = 1'b0;
assign hs_stack_pc   = 1'b0;
assign hs_stack_psr  = 1'b0;
assign hs_split_on   = 1'b0; 
assign hs_cr_operate = 1'b0;
assign ifu_iu_nsinst_gpr_rst_b = 1'b1; 
assign ifu_iu_hs_retire_mask   = 1'b0; 
assign ifu_iu_unstack_chgflw   = 1'b0;
assign ifu_iu_hs_stall_vector  = 1'b0;
assign ifu_iu_hs_switch_se     = 1'b0;
assign ifu_iu_hs_stack_on      = 1'b0;
assign cp0_ifu_hw_stack   = 1'b0;
assign cp0_ifu_hw_unstack = 1'b0;






assign split_cnt_rst = split_last       ||
                       push_split_last  ||
                       pop_split_last   ||
                       nie_split_last   ||
                       nir_split_last   ||
                       ipush_split_last ||
                       ipop_split_last  || 
                       hs_cnt_rst       ||
                       iu_ifu_inst_fetch && !hs_split_on && !int_spcu_split_on ||
                       int_spcu_split_cnt_rst ||
                       iu_yy_xx_flush;

assign split_cnt_en = cnt_en       || push_cnt_en || pop_cnt_en ||
                      nie_cnt_en   || nir_cnt_en  || int_spcu_cnt_en ||
                      ipush_cnt_en || ipop_cnt_en || hs_cnt_add;

assign stack_cnt_set = hs_stack_cnt_set;
assign stack_cnt_rst = push_regcnt_rst || pop_regcnt_rst || iu_ifu_inst_fetch && !hs_split_on
                    || hs_stack_cnt_reset
                    || iu_yy_xx_flush;

assign stack_cnt_en  = push_regcnt_en || pop_regcnt_en || hs_stack_cnt_add;
assign stack_cnt_sub = hs_stack_cnt_sub; 

assign stack_cnt_init = push_regcnt_init;




assign split_int_mask = pop_add_sp ||
                        nie_split_on ||
                        (nir_split_on && !nir_rte);
                        
assign split_sp_oper = pop_add_sp || nie_sub_sp || nir_ld_epc || int_spcu_st_gr1;







assign split_xx_stall = (split_on       && !split_last)       ||
                        (push_split_on  && !push_split_last)  ||
                        (pop_split_on   && !pop_split_last)   ||
                        (nie_split_on   && !nie_split_last)   ||
                        (nir_split_on   && !nir_split_last)   ||
                        (ipush_split_on && !ipush_split_last) ||
                        (ipop_split_on  && !ipop_split_last)  ||
                        int_spcu_stall;

assign split_xx_on = split_on       ||
                     push_split_on  ||
                     pop_split_on   ||
                     nie_split_on   ||
                     nir_split_on   ||
                     ipush_split_on ||
                     ipop_split_on  ||
                     int_spcu_split_on;   // random inst not valid




assign split_ifctrl_push_pop_stall = push_stall || pop_stall;
assign split_ifctrl_mult_stall = mult_stall;
assign split_ifctrl_hs_stall_part = hs_split_on || int_spcu_sm_not_idle;
assign split_ifctrl_hs_stall = hs_split_on || int_spcu_stall;
assign split_ifctrl_hs_inst_vld = hs_stack_inst_vld || int_spcu_inst_vld;


assign split_ifctrl_int_acc_stall = int_spcu_check_fail 
                                 || iu_ifu_spcu_error_without_misalign 
                                    && int_spcu_sm_not_idle; 





assign split_ifdp_op[5:0]        = split_op[5:0];
assign split_ifdp_sop[5:0]       = split_sop[5:0];
assign split_ifdp_pcode[4:0]     = split_pcode[4:0];
assign split_ifdp_src0[4:0]      = split_src0[4:0];
assign split_ifdp_gpr_index[4:0] = split_gpr_index[4:0];
assign split_ifdp_imm[4:0]       = split_imm[4:0];
assign split_ifdp_int_acc_imm[4:0] = int_acc_imm_data[4:0];
assign split_ifdp_int_acc_sel      = int_acc_imm_sel;
assign split_ifdp_int_mask       = split_int_mask;
assign split_ifdp_sp_oper        = split_sp_oper;
assign split_ifdp_cr_oper        = split_cr_operate || hs_cr_operate;

assign split_ifdp_prvlg_expt_vld = privilege_expt_vld;

assign split_ifdp_mult_vld   = mult_vld_no_cancel;
assign split_ifdp_op_sop_sel = split_op_sop_sel;
assign split_ifdp_pcode_sel  = split_pcode_sel;
assign split_ifdp_src0_sel   = split_src0_sel;
assign split_ifdp_src1_sel   = split_src1_sel;
assign split_ifdp_dest_sel   = split_dest_sel;
assign split_ifdp_imm_sel    = split_imm_sel;

assign split_ifdp_hs_src1    = hs_st_inst || int_spcu_split_on;
assign split_ifdp_hs_dest    = hs_ld_inst || hs_sub_sp || hs_add_sp;
assign split_ifdp_hs_inst    = hs_stack_inst_vld || int_spcu_split_on;

assign split_ifdp_split_first = (split_cnt[4:0] == 5'b0) && (cur_st == IDLE); 
assign split_ifdp_pop_vld     = pop_vld_no_cancel; 
assign split_ifdp_int_spcu_mask = int_spcu_retire_mask;
assign split_ifdp_int_spcu_vld  = int_spcu_inst_vld_for_ex;




assign split_addrgen_jmpr15 = pop_jmp_r15;




assign ifu_iu_spcu_retire_mask = int_spcu_retire_mask_for_ex;

endmodule


























module nm_ifu_top(
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cp0_ifu_c,
  cp0_ifu_ee,
  cp0_ifu_in_lpmd,
  cp0_ifu_lpmd_req,
  cp0_yy_be,
  cp0_yy_be_v2,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  forever_cpuclk,
  had_core_dbg_mode_req,
  had_ifu_inst_bkpt_dbq_req,
  had_ifu_inst_bkpt_dbqexp_req,
  had_ifu_ir,
  had_ifu_ir_vld,
  had_yy_xx_dp_index_mbee,
  ifu_bmu_addr,
  ifu_bmu_idle,
  ifu_bmu_prot,
  ifu_bmu_req,
  ifu_bmu_wfd1,
  ifu_cp0_lpmd_ack,
  ifu_had_chg_flw_inst,
  ifu_had_fetch_expt_vld,
  ifu_had_inst_dbg_disable,
  ifu_had_match_pc,
  ifu_had_split_first,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_dst_reg,
  ifu_iu_ex_expt_vld,
  ifu_iu_ex_imm,
  ifu_iu_ex_inst_bkpt,
  ifu_iu_ex_inst_dbg_disable,
  ifu_iu_ex_inst_vld,
  ifu_iu_ex_int_spcu_mask,
  ifu_iu_ex_int_spcu_vld,
  ifu_iu_ex_main_unit_sel,
  ifu_iu_ex_ni,
  ifu_iu_ex_op,
  ifu_iu_ex_pcode,
  ifu_iu_ex_predec_imm_vld,
  ifu_iu_ex_prvlg_expt_vld,
  ifu_iu_ex_rand_vld,
  ifu_iu_ex_sop,
  ifu_iu_ex_sp_oper,
  ifu_iu_ex_split_on,
  ifu_iu_ex_src0_reg,
  ifu_iu_ex_src1_reg,
  ifu_iu_hs_retire_mask,
  ifu_iu_hs_stack_on,
  ifu_iu_hs_stall_vector,
  ifu_iu_hs_switch_se,
  ifu_iu_ibus_idle,
  ifu_iu_inst_bkpt_dbg_occur_vld,
  ifu_iu_inst_bkpt_dbgexp_occur_vld,
  ifu_iu_inst_buf_inst_dbg_disable,
  ifu_iu_inst_buf_inst_vld,
  ifu_iu_nsinst_gpr_rst_b,
  ifu_iu_spcu_retire_mask,
  ifu_iu_unstack_chgflw,
  ifu_iu_vector_ibus_in_idle,
  ifu_iu_xx_ibus_data,
  iu_ifu_addr,
  iu_ifu_c_write_back,
  iu_ifu_cnt,
  iu_ifu_cnt_write_en,
  iu_ifu_data_fetch,
  iu_ifu_data_fetch_for_data,
  iu_ifu_ex_stall,
  iu_ifu_imm_data,
  iu_ifu_imm_write_en,
  iu_ifu_inst_fetch,
  iu_ifu_inst_fetch_for_data,
  iu_ifu_inst_fetch_mask,
  iu_ifu_inst_fetch_without_dbg_disable,
  iu_ifu_kill_inst,
  iu_ifu_not_wait_for_dbg_disable,
  iu_ifu_r15,
  iu_ifu_r15_vld,
  iu_ifu_security_violation,
  iu_ifu_spcu_error,
  iu_ifu_spcu_error_without_misalign,
  iu_ifu_spcu_int_en,
  iu_yy_xx_dbgon,
  iu_yy_xx_flush,
  mpu_ifu_acc_scu,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_avrg_power_inst_issue,
  pwrm_cpu_inst_peak_power_limit_en,
  pwrm_cpu_peak_power_limit_en
);


input           bmu_xx_ibus_acc_err;                  
input   [31:0]  bmu_xx_ibus_data;                     
input           bmu_xx_ibus_grnt;                     
input           bmu_xx_ibus_trans_cmplt;              
input           cp0_ifu_c;                            
input           cp0_ifu_ee;                           
input           cp0_ifu_in_lpmd;                      
input           cp0_ifu_lpmd_req;                     
input           cp0_yy_be;                            
input           cp0_yy_be_v2;                         
input           cp0_yy_clk_en;                        
input           cp0_yy_supv_mode_aft_dbg;             
input           cpurst_b;                             
input           forever_cpuclk;                       
input           had_core_dbg_mode_req;                
input           had_ifu_inst_bkpt_dbq_req;            
input           had_ifu_inst_bkpt_dbqexp_req;         
input   [31:0]  had_ifu_ir;                           
input           had_ifu_ir_vld;                       
input           had_yy_xx_dp_index_mbee;              
input   [30:0]  iu_ifu_addr;                          
input           iu_ifu_c_write_back;                  
input   [4 :0]  iu_ifu_cnt;                           
input           iu_ifu_cnt_write_en;                  
input           iu_ifu_data_fetch;                    
input           iu_ifu_data_fetch_for_data;           
input           iu_ifu_ex_stall;                      
input   [31:0]  iu_ifu_imm_data;                      
input           iu_ifu_imm_write_en;                  
input           iu_ifu_inst_fetch;                    
input           iu_ifu_inst_fetch_for_data;           
input           iu_ifu_inst_fetch_mask;               
input           iu_ifu_inst_fetch_without_dbg_disable; 
input           iu_ifu_kill_inst;                     
input           iu_ifu_not_wait_for_dbg_disable;      
input   [30:0]  iu_ifu_r15;                           
input           iu_ifu_r15_vld;                       
input           iu_ifu_security_violation;            
input           iu_ifu_spcu_error;                    
input           iu_ifu_spcu_error_without_misalign;   
input           iu_ifu_spcu_int_en;                   
input           iu_yy_xx_dbgon;                       
input           iu_yy_xx_flush;                       
input           mpu_ifu_acc_scu;                      
input           pad_yy_gate_clk_en_b;                 
input           pwrm_cpu_avrg_power_inst_issue;       
input           pwrm_cpu_inst_peak_power_limit_en;    
input           pwrm_cpu_peak_power_limit_en;         
output  [31:0]  ifu_bmu_addr;                         
output          ifu_bmu_idle;                         
output  [3 :0]  ifu_bmu_prot;                         
output          ifu_bmu_req;                          
output          ifu_bmu_wfd1;                         
output          ifu_cp0_lpmd_ack;                     
output          ifu_had_chg_flw_inst;                 
output          ifu_had_fetch_expt_vld;               
output          ifu_had_inst_dbg_disable;             
output  [31:0]  ifu_had_match_pc;                     
output          ifu_had_split_first;                  
output          ifu_iu_ex_cr_oper;                    
output  [4 :0]  ifu_iu_ex_dst_reg;                    
output          ifu_iu_ex_expt_vld;                   
output  [31:0]  ifu_iu_ex_imm;                        
output          ifu_iu_ex_inst_bkpt;                  
output          ifu_iu_ex_inst_dbg_disable;           
output          ifu_iu_ex_inst_vld;                   
output          ifu_iu_ex_int_spcu_mask;              
output          ifu_iu_ex_int_spcu_vld;               
output  [1 :0]  ifu_iu_ex_main_unit_sel;              
output          ifu_iu_ex_ni;                         
output  [5 :0]  ifu_iu_ex_op;                         
output  [4 :0]  ifu_iu_ex_pcode;                      
output          ifu_iu_ex_predec_imm_vld;             
output          ifu_iu_ex_prvlg_expt_vld;             
output          ifu_iu_ex_rand_vld;                   
output  [5 :0]  ifu_iu_ex_sop;                        
output          ifu_iu_ex_sp_oper;                    
output          ifu_iu_ex_split_on;                   
output  [4 :0]  ifu_iu_ex_src0_reg;                   
output  [4 :0]  ifu_iu_ex_src1_reg;                   
output          ifu_iu_hs_retire_mask;                
output          ifu_iu_hs_stack_on;                   
output          ifu_iu_hs_stall_vector;               
output          ifu_iu_hs_switch_se;                  
output          ifu_iu_ibus_idle;                     
output          ifu_iu_inst_bkpt_dbg_occur_vld;       
output          ifu_iu_inst_bkpt_dbgexp_occur_vld;    
output          ifu_iu_inst_buf_inst_dbg_disable;     
output          ifu_iu_inst_buf_inst_vld;             
output          ifu_iu_nsinst_gpr_rst_b;              
output          ifu_iu_spcu_retire_mask;              
output          ifu_iu_unstack_chgflw;                
output          ifu_iu_vector_ibus_in_idle;           
output  [31:0]  ifu_iu_xx_ibus_data;                  




wire            addrgen_ibuf_chgflw_no_pipe_down;     
wire    [30:0]  addrgen_ibusif_chgflw_addr;           
wire            addrgen_ibusif_chgflw_vld;            
wire            addrgen_ibusif_chgflw_vld_for_data;   
wire            addrgen_ibusif_ifpc_updt;             
wire            addrgen_ifctrl_inst_br_taken;         
wire            addrgen_ifctrl_inst_jmp_r15;          
wire            addrgen_ifdp_br_vld;                  
wire    [31:0]  addrgen_ifdp_brchgflw_pc;             
wire            addrgen_top_clk_en;                   
wire            addrgen_xx_ibus_idle;                 
wire            bmu_xx_ibus_acc_err;                  
wire    [31:0]  bmu_xx_ibus_data;                     
wire            bmu_xx_ibus_grnt;                     
wire            bmu_xx_ibus_trans_cmplt;              
wire            cp0_ifu_c;                            
wire            cp0_ifu_ee;                           
wire            cp0_ifu_in_lpmd;                      
wire            cp0_ifu_lpmd_req;                     
wire            cp0_yy_be;                            
wire            cp0_yy_be_v2;                         
wire            cp0_yy_clk_en;                        
wire            cp0_yy_supv_mode_aft_dbg;             
wire            cpurst_b;                             
wire            forever_cpuclk;                       
wire            forever_cpuclk_gated_ifu;             
wire            had_core_dbg_mode_req;                
wire            had_ifu_inst_bkpt_dbq_req;            
wire            had_ifu_inst_bkpt_dbqexp_req;         
wire    [31:0]  had_ifu_ir;                           
wire            had_ifu_ir_vld;                       
wire            had_yy_xx_dp_index_mbee;              
wire    [31:0]  ibuf_addrgen_inst;                    
wire            ibuf_addrgen_inst_branch;             
wire            ibuf_ibusif_inst_fetch;               
wire            ibuf_ibusif_inst_fetch_mask;          
wire            ibuf_ifctrl_inst16_vld;               
wire            ibuf_ifctrl_inst32_vld;               
wire            ibuf_ifctrl_peak_power_mask;          
wire            ibuf_ifctrl_pop0_branch32;            
wire            ibuf_ifctrl_pop0_mls32;               
wire            ibuf_ifctrl_pop0_mult32_high;         
wire            ibuf_ifdp_acc_err;                    
wire    [31:0]  ibuf_ifdp_inst;                       
wire            ibuf_ifdp_inst_dbg_disable;           
wire            ibuf_ifdp_pop0_acc_err;               
wire            ibuf_top_clk_en;                      
wire            ibuf_xx_empty;                        
wire            ibuf_xx_pop0_vld;                     
wire            ibuf_xx_pop1_vld;                     
wire            ibusif_ibuf_high_predecode_info;      
wire            ibusif_ibuf_low_predecode_info;       
wire            ibusif_ibuf_no_trans;                 
wire            ibusif_ifctrl_inst_mult32_low;        
wire            ibusif_ifctrl_inst_no_bypass;         
wire    [30:0]  ibusif_ifdp_ifpc;                     
wire            ibusif_top_clk_en;                    
wire            ibusif_xx_16bit_inst;                 
wire            ibusif_xx_acc_err;                    
wire    [31:0]  ibusif_xx_data;                       
wire            ibusif_xx_ibus_idle;                  
wire            ibusif_xx_trans_cmplt;                
wire            ibusif_xx_unalign_fetch;              
wire            ifctrl_addrgen_inst_vld_no_cancel;    
wire            ifctrl_ibuf_bypass_vld;               
wire            ifctrl_ibuf_inst_pipe_down;           
wire            ifctrl_ibuf_pop_en;                   
wire            ifctrl_ifdp_pipe_down;                
wire            ifctrl_ifdp_pipe_down_for_hs;         
wire            ifctrl_ifdp_power_related_bypass_vld; 
wire            ifctrl_split_inst_vld_no_cancel;      
wire            ifctrl_xx_ex_inst_vld_for_peak_power; 
wire            ifctrl_xx_ifcancel;                   
wire            ifctrl_xx_random_inst_vld;            
wire            ifdp_ibusif_32bit;                    
wire    [31:0]  ifdp_split_inst;                      
wire            ifdp_split_inst32;                    
wire    [31:0]  ifu_bmu_addr;                         
wire            ifu_bmu_idle;                         
wire    [3 :0]  ifu_bmu_prot;                         
wire            ifu_bmu_req;                          
wire            ifu_bmu_wfd1;                         
wire            ifu_cp0_lpmd_ack;                     
wire            ifu_had_chg_flw_inst;                 
wire            ifu_had_fetch_expt_vld;               
wire            ifu_had_inst_dbg_disable;             
wire    [31:0]  ifu_had_match_pc;                     
wire            ifu_had_split_first;                  
wire            ifu_iu_ex_cr_oper;                    
wire    [4 :0]  ifu_iu_ex_dst_reg;                    
wire            ifu_iu_ex_expt_vld;                   
wire    [31:0]  ifu_iu_ex_imm;                        
wire            ifu_iu_ex_inst_bkpt;                  
wire            ifu_iu_ex_inst_dbg_disable;           
wire            ifu_iu_ex_inst_vld;                   
wire            ifu_iu_ex_int_spcu_mask;              
wire            ifu_iu_ex_int_spcu_vld;               
wire    [1 :0]  ifu_iu_ex_main_unit_sel;              
wire            ifu_iu_ex_ni;                         
wire    [5 :0]  ifu_iu_ex_op;                         
wire    [4 :0]  ifu_iu_ex_pcode;                      
wire            ifu_iu_ex_predec_imm_vld;             
wire            ifu_iu_ex_prvlg_expt_vld;             
wire            ifu_iu_ex_rand_vld;                   
wire    [5 :0]  ifu_iu_ex_sop;                        
wire            ifu_iu_ex_sp_oper;                    
wire            ifu_iu_ex_split_on;                   
wire    [4 :0]  ifu_iu_ex_src0_reg;                   
wire    [4 :0]  ifu_iu_ex_src1_reg;                   
wire            ifu_iu_hs_retire_mask;                
wire            ifu_iu_hs_stack_on;                   
wire            ifu_iu_hs_stall_vector;               
wire            ifu_iu_hs_switch_se;                  
wire            ifu_iu_ibus_idle;                     
wire            ifu_iu_inst_bkpt_dbg_occur_vld;       
wire            ifu_iu_inst_bkpt_dbgexp_occur_vld;    
wire            ifu_iu_inst_buf_inst_dbg_disable;     
wire            ifu_iu_inst_buf_inst_vld;             
wire            ifu_iu_nsinst_gpr_rst_b;              
wire            ifu_iu_spcu_retire_mask;              
wire            ifu_iu_unstack_chgflw;                
wire            ifu_iu_vector_ibus_in_idle;           
wire    [31:0]  ifu_iu_xx_ibus_data;                  
wire            ifu_misc_clk;                         
wire            ifu_misc_upd_en;                      
wire    [30:0]  iu_ifu_addr;                          
wire            iu_ifu_c_write_back;                  
wire    [4 :0]  iu_ifu_cnt;                           
wire            iu_ifu_cnt_write_en;                  
wire            iu_ifu_data_fetch;                    
wire            iu_ifu_data_fetch_for_data;           
wire            iu_ifu_ex_stall;                      
wire    [31:0]  iu_ifu_imm_data;                      
wire            iu_ifu_imm_write_en;                  
wire            iu_ifu_inst_fetch;                    
wire            iu_ifu_inst_fetch_for_data;           
wire            iu_ifu_inst_fetch_mask;               
wire            iu_ifu_inst_fetch_without_dbg_disable; 
wire            iu_ifu_kill_inst;                     
wire            iu_ifu_not_wait_for_dbg_disable;      
wire    [30:0]  iu_ifu_r15;                           
wire            iu_ifu_r15_vld;                       
wire            iu_ifu_security_violation;            
wire            iu_ifu_spcu_error;                    
wire            iu_ifu_spcu_error_without_misalign;   
wire            iu_ifu_spcu_int_en;                   
wire            iu_yy_xx_dbgon;                       
wire            iu_yy_xx_flush;                       
wire            mpu_ifu_acc_scu;                      
wire            pad_yy_gate_clk_en_b;                 
wire            pwrm_cpu_avrg_power_inst_issue;       
wire            pwrm_cpu_inst_peak_power_limit_en;    
wire            pwrm_cpu_peak_power_limit_en;         
wire    [3 :0]  randclk_ibuf_entry_data_mod_en_w16;   
wire            randclk_ibuf_pop_mod_en_w3;           
wire            randclk_ibuf_push_mod_en_w3;          
wire            randclk_ifdp_immh_mod_en_w16;         
wire            randclk_ifdp_imml_mod_en_w8;          
wire            randclk_ifdp_other_info_mod_en_w8;    
wire            randclk_ifdp_pcode_mod_en_w5;         
wire            randclk_ifdp_reg_mod_en_w48;          
wire            randclk_ifdp_src1_mod_en_w5;          
wire            randclk_split_cnt_mod_en_w9;          
wire            randclk_split_sm_mod_en_w6;           
wire            split_addrgen_jmpr15;                 
wire            split_ifctrl_hs_inst_vld;             
wire            split_ifctrl_hs_stall;                
wire            split_ifctrl_hs_stall_part;           
wire            split_ifctrl_int_acc_stall;           
wire            split_ifctrl_mult_stall;              
wire            split_ifctrl_push_pop_stall;          
wire            split_ifdp_cr_oper;                   
wire            split_ifdp_dest_sel;                  
wire    [4 :0]  split_ifdp_gpr_index;                 
wire            split_ifdp_hs_dest;                   
wire            split_ifdp_hs_inst;                   
wire            split_ifdp_hs_src1;                   
wire    [4 :0]  split_ifdp_imm;                       
wire            split_ifdp_imm_sel;                   
wire    [4 :0]  split_ifdp_int_acc_imm;               
wire            split_ifdp_int_acc_sel;               
wire            split_ifdp_int_mask;                  
wire            split_ifdp_int_spcu_mask;             
wire            split_ifdp_int_spcu_vld;              
wire            split_ifdp_mult_vld;                  
wire    [5 :0]  split_ifdp_op;                        
wire            split_ifdp_op_sop_sel;                
wire    [4 :0]  split_ifdp_pcode;                     
wire            split_ifdp_pcode_sel;                 
wire            split_ifdp_pop_vld;                   
wire            split_ifdp_prvlg_expt_vld;            
wire    [5 :0]  split_ifdp_sop;                       
wire            split_ifdp_sp_oper;                   
wire            split_ifdp_split_first;               
wire    [4 :0]  split_ifdp_src0;                      
wire            split_ifdp_src0_sel;                  
wire            split_ifdp_src1_sel;                  
wire            split_xx_on;                          
wire            split_xx_stall;                       







gated_clk_cell  x_gated_cpuclk_cell_ifu (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (forever_cpuclk_gated_ifu),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (1'b1                    ),
  .module_en                (1'b1                    ),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);











gated_clk_cell  x_entry_ifu_misc_clkhdr (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ifu_misc_clk        ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (ifu_misc_upd_en     ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









assign ifu_misc_upd_en = ibuf_top_clk_en
                      || addrgen_top_clk_en
                      || ibusif_top_clk_en;





nm_ifu_ibusif  x_ibusif (
  .addrgen_ibusif_chgflw_addr           (addrgen_ibusif_chgflw_addr          ),
  .addrgen_ibusif_chgflw_vld            (addrgen_ibusif_chgflw_vld           ),
  .addrgen_ibusif_chgflw_vld_for_data   (addrgen_ibusif_chgflw_vld_for_data  ),
  .addrgen_ibusif_ifpc_updt             (addrgen_ibusif_ifpc_updt            ),
  .bmu_xx_ibus_acc_err                  (bmu_xx_ibus_acc_err                 ),
  .bmu_xx_ibus_data                     (bmu_xx_ibus_data                    ),
  .bmu_xx_ibus_grnt                     (bmu_xx_ibus_grnt                    ),
  .bmu_xx_ibus_trans_cmplt              (bmu_xx_ibus_trans_cmplt             ),
  .cp0_ifu_in_lpmd                      (cp0_ifu_in_lpmd                     ),
  .cp0_ifu_lpmd_req                     (cp0_ifu_lpmd_req                    ),
  .cp0_yy_be                            (cp0_yy_be                           ),
  .cp0_yy_be_v2                         (cp0_yy_be_v2                        ),
  .cp0_yy_clk_en                        (cp0_yy_clk_en                       ),
  .cp0_yy_supv_mode_aft_dbg             (cp0_yy_supv_mode_aft_dbg            ),
  .cpurst_b                             (cpurst_b                            ),
  .cru_ifu_acc_ca                       (1'b0                                ),
  .forever_cpuclk                       (forever_cpuclk                      ),
  .ibuf_ibusif_inst_fetch               (ibuf_ibusif_inst_fetch              ),
  .ibuf_ibusif_inst_fetch_mask          (ibuf_ibusif_inst_fetch_mask         ),
  .ibusif_ibuf_high_predecode_info      (ibusif_ibuf_high_predecode_info     ),
  .ibusif_ibuf_low_predecode_info       (ibusif_ibuf_low_predecode_info      ),
  .ibusif_ibuf_no_trans                 (ibusif_ibuf_no_trans                ),
  .ibusif_ifctrl_inst_mult32_low        (ibusif_ifctrl_inst_mult32_low       ),
  .ibusif_ifctrl_inst_no_bypass         (ibusif_ifctrl_inst_no_bypass        ),
  .ibusif_ifdp_ifpc                     (ibusif_ifdp_ifpc                    ),
  .ibusif_top_clk_en                    (ibusif_top_clk_en                   ),
  .ibusif_xx_16bit_inst                 (ibusif_xx_16bit_inst                ),
  .ibusif_xx_acc_err                    (ibusif_xx_acc_err                   ),
  .ibusif_xx_data                       (ibusif_xx_data                      ),
  .ibusif_xx_ibus_idle                  (ibusif_xx_ibus_idle                 ),
  .ibusif_xx_trans_cmplt                (ibusif_xx_trans_cmplt               ),
  .ibusif_xx_unalign_fetch              (ibusif_xx_unalign_fetch             ),
  .ifctrl_ibuf_pop_en                   (ifctrl_ibuf_pop_en                  ),
  .ifctrl_xx_ex_inst_vld_for_peak_power (ifctrl_xx_ex_inst_vld_for_peak_power),
  .ifdp_ibusif_32bit                    (ifdp_ibusif_32bit                   ),
  .ifu_bmu_addr                         (ifu_bmu_addr                        ),
  .ifu_bmu_idle                         (ifu_bmu_idle                        ),
  .ifu_bmu_prot                         (ifu_bmu_prot                        ),
  .ifu_bmu_req                          (ifu_bmu_req                         ),
  .ifu_bmu_wfd1                         (ifu_bmu_wfd1                        ),
  .ifu_cp0_lpmd_ack                     (ifu_cp0_lpmd_ack                    ),
  .ifu_iu_ibus_idle                     (ifu_iu_ibus_idle                    ),
  .ifu_iu_vector_ibus_in_idle           (ifu_iu_vector_ibus_in_idle          ),
  .ifu_iu_xx_ibus_data                  (ifu_iu_xx_ibus_data                 ),
  .ifu_misc_clk                         (ifu_misc_clk                        ),
  .iu_ifu_addr                          (iu_ifu_addr                         ),
  .iu_ifu_data_fetch                    (iu_ifu_data_fetch                   ),
  .iu_ifu_data_fetch_for_data           (iu_ifu_data_fetch_for_data          ),
  .iu_ifu_inst_fetch                    (iu_ifu_inst_fetch                   ),
  .iu_ifu_inst_fetch_for_data           (iu_ifu_inst_fetch_for_data          ),
  .iu_ifu_inst_fetch_mask               (iu_ifu_inst_fetch_mask              ),
  .iu_ifu_security_violation            (iu_ifu_security_violation           ),
  .iu_yy_xx_dbgon                       (iu_yy_xx_dbgon                      ),
  .mpu_ifu_acc_scu                      (mpu_ifu_acc_scu                     ),
  .pad_yy_gate_clk_en_b                 (pad_yy_gate_clk_en_b                ),
  .pwrm_cpu_peak_power_limit_en         (pwrm_cpu_peak_power_limit_en        )
);








nm_ifu_ibuf  x_ibuf (
  .addrgen_ibuf_chgflw_no_pipe_down   (addrgen_ibuf_chgflw_no_pipe_down  ),
  .addrgen_ibusif_chgflw_vld          (addrgen_ibusif_chgflw_vld         ),
  .cp0_yy_clk_en                      (cp0_yy_clk_en                     ),
  .cpuclk                             (forever_cpuclk_gated_ifu          ),
  .cpurst_b                           (cpurst_b                          ),
  .forever_cpuclk                     (forever_cpuclk                    ),
  .had_ifu_ir                         (had_ifu_ir                        ),
  .had_ifu_ir_vld                     (had_ifu_ir_vld                    ),
  .ibuf_addrgen_inst                  (ibuf_addrgen_inst                 ),
  .ibuf_addrgen_inst_branch           (ibuf_addrgen_inst_branch          ),
  .ibuf_ibusif_inst_fetch             (ibuf_ibusif_inst_fetch            ),
  .ibuf_ibusif_inst_fetch_mask        (ibuf_ibusif_inst_fetch_mask       ),
  .ibuf_ifctrl_inst16_vld             (ibuf_ifctrl_inst16_vld            ),
  .ibuf_ifctrl_inst32_vld             (ibuf_ifctrl_inst32_vld            ),
  .ibuf_ifctrl_peak_power_mask        (ibuf_ifctrl_peak_power_mask       ),
  .ibuf_ifctrl_pop0_branch32          (ibuf_ifctrl_pop0_branch32         ),
  .ibuf_ifctrl_pop0_mls32             (ibuf_ifctrl_pop0_mls32            ),
  .ibuf_ifctrl_pop0_mult32_high       (ibuf_ifctrl_pop0_mult32_high      ),
  .ibuf_ifdp_acc_err                  (ibuf_ifdp_acc_err                 ),
  .ibuf_ifdp_inst                     (ibuf_ifdp_inst                    ),
  .ibuf_ifdp_inst_dbg_disable         (ibuf_ifdp_inst_dbg_disable        ),
  .ibuf_ifdp_pop0_acc_err             (ibuf_ifdp_pop0_acc_err            ),
  .ibuf_top_clk_en                    (ibuf_top_clk_en                   ),
  .ibuf_xx_empty                      (ibuf_xx_empty                     ),
  .ibuf_xx_pop0_vld                   (ibuf_xx_pop0_vld                  ),
  .ibuf_xx_pop1_vld                   (ibuf_xx_pop1_vld                  ),
  .ibusif_ibuf_high_predecode_info    (ibusif_ibuf_high_predecode_info   ),
  .ibusif_ibuf_low_predecode_info     (ibusif_ibuf_low_predecode_info    ),
  .ibusif_ibuf_no_trans               (ibusif_ibuf_no_trans              ),
  .ibusif_xx_16bit_inst               (ibusif_xx_16bit_inst              ),
  .ibusif_xx_acc_err                  (ibusif_xx_acc_err                 ),
  .ibusif_xx_data                     (ibusif_xx_data                    ),
  .ibusif_xx_trans_cmplt              (ibusif_xx_trans_cmplt             ),
  .ibusif_xx_unalign_fetch            (ibusif_xx_unalign_fetch           ),
  .ifctrl_ibuf_bypass_vld             (ifctrl_ibuf_bypass_vld            ),
  .ifctrl_ibuf_inst_pipe_down         (ifctrl_ibuf_inst_pipe_down        ),
  .ifctrl_ibuf_pop_en                 (ifctrl_ibuf_pop_en                ),
  .ifctrl_xx_ifcancel                 (ifctrl_xx_ifcancel                ),
  .ifu_misc_clk                       (ifu_misc_clk                      ),
  .iu_yy_xx_dbgon                     (iu_yy_xx_dbgon                    ),
  .pad_yy_gate_clk_en_b               (pad_yy_gate_clk_en_b              ),
  .pwrm_cpu_avrg_power_inst_issue     (pwrm_cpu_avrg_power_inst_issue    ),
  .pwrm_cpu_inst_peak_power_limit_en  (pwrm_cpu_inst_peak_power_limit_en ),
  .pwrm_cpu_peak_power_limit_en       (pwrm_cpu_peak_power_limit_en      ),
  .randclk_ibuf_entry_data_mod_en_w16 (randclk_ibuf_entry_data_mod_en_w16),
  .randclk_ibuf_pop_mod_en_w3         (randclk_ibuf_pop_mod_en_w3        ),
  .randclk_ibuf_push_mod_en_w3        (randclk_ibuf_push_mod_en_w3       )
);




nm_ifu_addrgen  x_addrgen (
  .addrgen_ibuf_chgflw_no_pipe_down   (addrgen_ibuf_chgflw_no_pipe_down  ),
  .addrgen_ibusif_chgflw_addr         (addrgen_ibusif_chgflw_addr        ),
  .addrgen_ibusif_chgflw_vld          (addrgen_ibusif_chgflw_vld         ),
  .addrgen_ibusif_chgflw_vld_for_data (addrgen_ibusif_chgflw_vld_for_data),
  .addrgen_ibusif_ifpc_updt           (addrgen_ibusif_ifpc_updt          ),
  .addrgen_ifctrl_inst_br_taken       (addrgen_ifctrl_inst_br_taken      ),
  .addrgen_ifctrl_inst_jmp_r15        (addrgen_ifctrl_inst_jmp_r15       ),
  .addrgen_ifdp_br_vld                (addrgen_ifdp_br_vld               ),
  .addrgen_ifdp_brchgflw_pc           (addrgen_ifdp_brchgflw_pc          ),
  .addrgen_top_clk_en                 (addrgen_top_clk_en                ),
  .addrgen_xx_ibus_idle               (addrgen_xx_ibus_idle              ),
  .cp0_ifu_c                          (cp0_ifu_c                         ),
  .cpurst_b                           (cpurst_b                          ),
  .ibuf_addrgen_inst                  (ibuf_addrgen_inst                 ),
  .ibuf_addrgen_inst_branch           (ibuf_addrgen_inst_branch          ),
  .ibusif_ifdp_ifpc                   (ibusif_ifdp_ifpc                  ),
  .ibusif_xx_ibus_idle                (ibusif_xx_ibus_idle               ),
  .ifctrl_addrgen_inst_vld_no_cancel  (ifctrl_addrgen_inst_vld_no_cancel ),
  .ifctrl_ibuf_pop_en                 (ifctrl_ibuf_pop_en                ),
  .ifctrl_xx_ifcancel                 (ifctrl_xx_ifcancel                ),
  .ifctrl_xx_random_inst_vld          (ifctrl_xx_random_inst_vld         ),
  .ifu_misc_clk                       (ifu_misc_clk                      ),
  .iu_ifu_c_write_back                (iu_ifu_c_write_back               ),
  .iu_ifu_ex_stall                    (iu_ifu_ex_stall                   ),
  .iu_ifu_r15                         (iu_ifu_r15                        ),
  .iu_ifu_r15_vld                     (iu_ifu_r15_vld                    ),
  .split_addrgen_jmpr15               (split_addrgen_jmpr15              )
);




nm_ifu_split  x_split (
  .addrgen_xx_ibus_idle               (addrgen_xx_ibus_idle              ),
  .cp0_yy_clk_en                      (cp0_yy_clk_en                     ),
  .cp0_yy_supv_mode_aft_dbg           (cp0_yy_supv_mode_aft_dbg          ),
  .cpurst_b                           (cpurst_b                          ),
  .forever_cpuclk                     (forever_cpuclk                    ),
  .ifctrl_split_inst_vld_no_cancel    (ifctrl_split_inst_vld_no_cancel   ),
  .ifctrl_xx_ifcancel                 (ifctrl_xx_ifcancel                ),
  .ifdp_split_inst                    (ifdp_split_inst                   ),
  .ifdp_split_inst32                  (ifdp_split_inst32                 ),
  .ifu_iu_hs_retire_mask              (ifu_iu_hs_retire_mask             ),
  .ifu_iu_hs_stack_on                 (ifu_iu_hs_stack_on                ),
  .ifu_iu_hs_stall_vector             (ifu_iu_hs_stall_vector            ),
  .ifu_iu_hs_switch_se                (ifu_iu_hs_switch_se               ),
  .ifu_iu_nsinst_gpr_rst_b            (ifu_iu_nsinst_gpr_rst_b           ),
  .ifu_iu_spcu_retire_mask            (ifu_iu_spcu_retire_mask           ),
  .ifu_iu_unstack_chgflw              (ifu_iu_unstack_chgflw             ),
  .iu_ifu_cnt                         (iu_ifu_cnt                        ),
  .iu_ifu_cnt_write_en                (iu_ifu_cnt_write_en               ),
  .iu_ifu_ex_stall                    (iu_ifu_ex_stall                   ),
  .iu_ifu_inst_fetch                  (iu_ifu_inst_fetch                 ),
  .iu_ifu_r15_vld                     (iu_ifu_r15_vld                    ),
  .iu_ifu_spcu_error                  (iu_ifu_spcu_error                 ),
  .iu_ifu_spcu_error_without_misalign (iu_ifu_spcu_error_without_misalign),
  .iu_ifu_spcu_int_en                 (iu_ifu_spcu_int_en                ),
  .iu_yy_xx_flush                     (iu_yy_xx_flush                    ),
  .pad_yy_gate_clk_en_b               (pad_yy_gate_clk_en_b              ),
  .randclk_split_cnt_mod_en_w9        (randclk_split_cnt_mod_en_w9       ),
  .randclk_split_sm_mod_en_w6         (randclk_split_sm_mod_en_w6        ),
  .split_addrgen_jmpr15               (split_addrgen_jmpr15              ),
  .split_ifctrl_hs_inst_vld           (split_ifctrl_hs_inst_vld          ),
  .split_ifctrl_hs_stall              (split_ifctrl_hs_stall             ),
  .split_ifctrl_hs_stall_part         (split_ifctrl_hs_stall_part        ),
  .split_ifctrl_int_acc_stall         (split_ifctrl_int_acc_stall        ),
  .split_ifctrl_mult_stall            (split_ifctrl_mult_stall           ),
  .split_ifctrl_push_pop_stall        (split_ifctrl_push_pop_stall       ),
  .split_ifdp_cr_oper                 (split_ifdp_cr_oper                ),
  .split_ifdp_dest_sel                (split_ifdp_dest_sel               ),
  .split_ifdp_gpr_index               (split_ifdp_gpr_index              ),
  .split_ifdp_hs_dest                 (split_ifdp_hs_dest                ),
  .split_ifdp_hs_inst                 (split_ifdp_hs_inst                ),
  .split_ifdp_hs_src1                 (split_ifdp_hs_src1                ),
  .split_ifdp_imm                     (split_ifdp_imm                    ),
  .split_ifdp_imm_sel                 (split_ifdp_imm_sel                ),
  .split_ifdp_int_acc_imm             (split_ifdp_int_acc_imm            ),
  .split_ifdp_int_acc_sel             (split_ifdp_int_acc_sel            ),
  .split_ifdp_int_mask                (split_ifdp_int_mask               ),
  .split_ifdp_int_spcu_mask           (split_ifdp_int_spcu_mask          ),
  .split_ifdp_int_spcu_vld            (split_ifdp_int_spcu_vld           ),
  .split_ifdp_mult_vld                (split_ifdp_mult_vld               ),
  .split_ifdp_op                      (split_ifdp_op                     ),
  .split_ifdp_op_sop_sel              (split_ifdp_op_sop_sel             ),
  .split_ifdp_pcode                   (split_ifdp_pcode                  ),
  .split_ifdp_pcode_sel               (split_ifdp_pcode_sel              ),
  .split_ifdp_pop_vld                 (split_ifdp_pop_vld                ),
  .split_ifdp_prvlg_expt_vld          (split_ifdp_prvlg_expt_vld         ),
  .split_ifdp_sop                     (split_ifdp_sop                    ),
  .split_ifdp_sp_oper                 (split_ifdp_sp_oper                ),
  .split_ifdp_split_first             (split_ifdp_split_first            ),
  .split_ifdp_src0                    (split_ifdp_src0                   ),
  .split_ifdp_src0_sel                (split_ifdp_src0_sel               ),
  .split_ifdp_src1_sel                (split_ifdp_src1_sel               ),
  .split_xx_on                        (split_xx_on                       ),
  .split_xx_stall                     (split_xx_stall                    )
);



nm_ifu_ifdp  x_ifdp (
  .addrgen_ifdp_br_vld                  (addrgen_ifdp_br_vld                 ),
  .addrgen_ifdp_brchgflw_pc             (addrgen_ifdp_brchgflw_pc            ),
  .cp0_ifu_ee                           (cp0_ifu_ee                          ),
  .cp0_yy_clk_en                        (cp0_yy_clk_en                       ),
  .cpurst_b                             (cpurst_b                            ),
  .forever_cpuclk                       (forever_cpuclk                      ),
  .had_core_dbg_mode_req                (had_core_dbg_mode_req               ),
  .had_ifu_inst_bkpt_dbq_req            (had_ifu_inst_bkpt_dbq_req           ),
  .had_ifu_inst_bkpt_dbqexp_req         (had_ifu_inst_bkpt_dbqexp_req        ),
  .had_yy_xx_dp_index_mbee              (had_yy_xx_dp_index_mbee             ),
  .ibuf_ifdp_acc_err                    (ibuf_ifdp_acc_err                   ),
  .ibuf_ifdp_inst                       (ibuf_ifdp_inst                      ),
  .ibuf_ifdp_pop0_acc_err               (ibuf_ifdp_pop0_acc_err              ),
  .ibuf_xx_empty                        (ibuf_xx_empty                       ),
  .ibuf_xx_pop0_vld                     (ibuf_xx_pop0_vld                    ),
  .ibuf_xx_pop1_vld                     (ibuf_xx_pop1_vld                    ),
  .ibusif_ifdp_ifpc                     (ibusif_ifdp_ifpc                    ),
  .ibusif_xx_acc_err                    (ibusif_xx_acc_err                   ),
  .ibusif_xx_data                       (ibusif_xx_data                      ),
  .ifctrl_ifdp_pipe_down                (ifctrl_ifdp_pipe_down               ),
  .ifctrl_ifdp_pipe_down_for_hs         (ifctrl_ifdp_pipe_down_for_hs        ),
  .ifctrl_ifdp_power_related_bypass_vld (ifctrl_ifdp_power_related_bypass_vld),
  .ifctrl_xx_random_inst_vld            (ifctrl_xx_random_inst_vld           ),
  .ifdp_ibusif_32bit                    (ifdp_ibusif_32bit                   ),
  .ifdp_split_inst                      (ifdp_split_inst                     ),
  .ifdp_split_inst32                    (ifdp_split_inst32                   ),
  .ifu_had_chg_flw_inst                 (ifu_had_chg_flw_inst                ),
  .ifu_had_fetch_expt_vld               (ifu_had_fetch_expt_vld              ),
  .ifu_had_inst_dbg_disable             (ifu_had_inst_dbg_disable            ),
  .ifu_had_match_pc                     (ifu_had_match_pc                    ),
  .ifu_had_split_first                  (ifu_had_split_first                 ),
  .ifu_iu_ex_cr_oper                    (ifu_iu_ex_cr_oper                   ),
  .ifu_iu_ex_dst_reg                    (ifu_iu_ex_dst_reg                   ),
  .ifu_iu_ex_expt_vld                   (ifu_iu_ex_expt_vld                  ),
  .ifu_iu_ex_imm                        (ifu_iu_ex_imm                       ),
  .ifu_iu_ex_inst_bkpt                  (ifu_iu_ex_inst_bkpt                 ),
  .ifu_iu_ex_inst_dbg_disable           (ifu_iu_ex_inst_dbg_disable          ),
  .ifu_iu_ex_int_spcu_mask              (ifu_iu_ex_int_spcu_mask             ),
  .ifu_iu_ex_int_spcu_vld               (ifu_iu_ex_int_spcu_vld              ),
  .ifu_iu_ex_main_unit_sel              (ifu_iu_ex_main_unit_sel             ),
  .ifu_iu_ex_ni                         (ifu_iu_ex_ni                        ),
  .ifu_iu_ex_op                         (ifu_iu_ex_op                        ),
  .ifu_iu_ex_pcode                      (ifu_iu_ex_pcode                     ),
  .ifu_iu_ex_predec_imm_vld             (ifu_iu_ex_predec_imm_vld            ),
  .ifu_iu_ex_prvlg_expt_vld             (ifu_iu_ex_prvlg_expt_vld            ),
  .ifu_iu_ex_rand_vld                   (ifu_iu_ex_rand_vld                  ),
  .ifu_iu_ex_sop                        (ifu_iu_ex_sop                       ),
  .ifu_iu_ex_sp_oper                    (ifu_iu_ex_sp_oper                   ),
  .ifu_iu_ex_split_on                   (ifu_iu_ex_split_on                  ),
  .ifu_iu_ex_src0_reg                   (ifu_iu_ex_src0_reg                  ),
  .ifu_iu_ex_src1_reg                   (ifu_iu_ex_src1_reg                  ),
  .ifu_iu_inst_bkpt_dbg_occur_vld       (ifu_iu_inst_bkpt_dbg_occur_vld      ),
  .ifu_iu_inst_bkpt_dbgexp_occur_vld    (ifu_iu_inst_bkpt_dbgexp_occur_vld   ),
  .iu_ifu_imm_data                      (iu_ifu_imm_data                     ),
  .iu_ifu_imm_write_en                  (iu_ifu_imm_write_en                 ),
  .iu_ifu_kill_inst                     (iu_ifu_kill_inst                    ),
  .pad_yy_gate_clk_en_b                 (pad_yy_gate_clk_en_b                ),
  .randclk_ifdp_immh_mod_en_w16         (randclk_ifdp_immh_mod_en_w16        ),
  .randclk_ifdp_imml_mod_en_w8          (randclk_ifdp_imml_mod_en_w8         ),
  .randclk_ifdp_other_info_mod_en_w8    (randclk_ifdp_other_info_mod_en_w8   ),
  .randclk_ifdp_pcode_mod_en_w5         (randclk_ifdp_pcode_mod_en_w5        ),
  .randclk_ifdp_reg_mod_en_w48          (randclk_ifdp_reg_mod_en_w48         ),
  .randclk_ifdp_src1_mod_en_w5          (randclk_ifdp_src1_mod_en_w5         ),
  .split_ifdp_cr_oper                   (split_ifdp_cr_oper                  ),
  .split_ifdp_dest_sel                  (split_ifdp_dest_sel                 ),
  .split_ifdp_gpr_index                 (split_ifdp_gpr_index                ),
  .split_ifdp_hs_dest                   (split_ifdp_hs_dest                  ),
  .split_ifdp_hs_inst                   (split_ifdp_hs_inst                  ),
  .split_ifdp_hs_src1                   (split_ifdp_hs_src1                  ),
  .split_ifdp_imm                       (split_ifdp_imm                      ),
  .split_ifdp_imm_sel                   (split_ifdp_imm_sel                  ),
  .split_ifdp_int_acc_imm               (split_ifdp_int_acc_imm              ),
  .split_ifdp_int_acc_sel               (split_ifdp_int_acc_sel              ),
  .split_ifdp_int_mask                  (split_ifdp_int_mask                 ),
  .split_ifdp_int_spcu_mask             (split_ifdp_int_spcu_mask            ),
  .split_ifdp_int_spcu_vld              (split_ifdp_int_spcu_vld             ),
  .split_ifdp_mult_vld                  (split_ifdp_mult_vld                 ),
  .split_ifdp_op                        (split_ifdp_op                       ),
  .split_ifdp_op_sop_sel                (split_ifdp_op_sop_sel               ),
  .split_ifdp_pcode                     (split_ifdp_pcode                    ),
  .split_ifdp_pcode_sel                 (split_ifdp_pcode_sel                ),
  .split_ifdp_pop_vld                   (split_ifdp_pop_vld                  ),
  .split_ifdp_prvlg_expt_vld            (split_ifdp_prvlg_expt_vld           ),
  .split_ifdp_sop                       (split_ifdp_sop                      ),
  .split_ifdp_sp_oper                   (split_ifdp_sp_oper                  ),
  .split_ifdp_split_first               (split_ifdp_split_first              ),
  .split_ifdp_src0                      (split_ifdp_src0                     ),
  .split_ifdp_src0_sel                  (split_ifdp_src0_sel                 ),
  .split_ifdp_src1_sel                  (split_ifdp_src1_sel                 ),
  .split_xx_stall                       (split_xx_stall                      )
);



nm_ifu_ifctrl  x_ifctrl (
  .addrgen_ifctrl_inst_br_taken          (addrgen_ifctrl_inst_br_taken         ),
  .addrgen_ifctrl_inst_jmp_r15           (addrgen_ifctrl_inst_jmp_r15          ),
  .addrgen_xx_ibus_idle                  (addrgen_xx_ibus_idle                 ),
  .cpuclk                                (forever_cpuclk_gated_ifu             ),
  .cpurst_b                              (cpurst_b                             ),
  .had_core_dbg_mode_req                 (had_core_dbg_mode_req                ),
  .ibuf_ifctrl_inst16_vld                (ibuf_ifctrl_inst16_vld               ),
  .ibuf_ifctrl_inst32_vld                (ibuf_ifctrl_inst32_vld               ),
  .ibuf_ifctrl_peak_power_mask           (ibuf_ifctrl_peak_power_mask          ),
  .ibuf_ifctrl_pop0_branch32             (ibuf_ifctrl_pop0_branch32            ),
  .ibuf_ifctrl_pop0_mls32                (ibuf_ifctrl_pop0_mls32               ),
  .ibuf_ifctrl_pop0_mult32_high          (ibuf_ifctrl_pop0_mult32_high         ),
  .ibuf_ifdp_inst_dbg_disable            (ibuf_ifdp_inst_dbg_disable           ),
  .ibuf_xx_empty                         (ibuf_xx_empty                        ),
  .ibuf_xx_pop0_vld                      (ibuf_xx_pop0_vld                     ),
  .ibuf_xx_pop1_vld                      (ibuf_xx_pop1_vld                     ),
  .ibusif_ifctrl_inst_mult32_low         (ibusif_ifctrl_inst_mult32_low        ),
  .ibusif_ifctrl_inst_no_bypass          (ibusif_ifctrl_inst_no_bypass         ),
  .ibusif_xx_16bit_inst                  (ibusif_xx_16bit_inst                 ),
  .ibusif_xx_trans_cmplt                 (ibusif_xx_trans_cmplt                ),
  .ibusif_xx_unalign_fetch               (ibusif_xx_unalign_fetch              ),
  .ifctrl_addrgen_inst_vld_no_cancel     (ifctrl_addrgen_inst_vld_no_cancel    ),
  .ifctrl_ibuf_bypass_vld                (ifctrl_ibuf_bypass_vld               ),
  .ifctrl_ibuf_inst_pipe_down            (ifctrl_ibuf_inst_pipe_down           ),
  .ifctrl_ibuf_pop_en                    (ifctrl_ibuf_pop_en                   ),
  .ifctrl_ifdp_pipe_down                 (ifctrl_ifdp_pipe_down                ),
  .ifctrl_ifdp_pipe_down_for_hs          (ifctrl_ifdp_pipe_down_for_hs         ),
  .ifctrl_ifdp_power_related_bypass_vld  (ifctrl_ifdp_power_related_bypass_vld ),
  .ifctrl_split_inst_vld_no_cancel       (ifctrl_split_inst_vld_no_cancel      ),
  .ifctrl_xx_ex_inst_vld_for_peak_power  (ifctrl_xx_ex_inst_vld_for_peak_power ),
  .ifctrl_xx_ifcancel                    (ifctrl_xx_ifcancel                   ),
  .ifctrl_xx_random_inst_vld             (ifctrl_xx_random_inst_vld            ),
  .ifu_iu_ex_inst_vld                    (ifu_iu_ex_inst_vld                   ),
  .ifu_iu_inst_buf_inst_dbg_disable      (ifu_iu_inst_buf_inst_dbg_disable     ),
  .ifu_iu_inst_buf_inst_vld              (ifu_iu_inst_buf_inst_vld             ),
  .iu_ifu_ex_stall                       (iu_ifu_ex_stall                      ),
  .iu_ifu_inst_fetch                     (iu_ifu_inst_fetch                    ),
  .iu_ifu_inst_fetch_without_dbg_disable (iu_ifu_inst_fetch_without_dbg_disable),
  .iu_ifu_not_wait_for_dbg_disable       (iu_ifu_not_wait_for_dbg_disable      ),
  .iu_ifu_r15_vld                        (iu_ifu_r15_vld                       ),
  .iu_yy_xx_dbgon                        (iu_yy_xx_dbgon                       ),
  .iu_yy_xx_flush                        (iu_yy_xx_flush                       ),
  .pwrm_cpu_avrg_power_inst_issue        (pwrm_cpu_avrg_power_inst_issue       ),
  .split_ifctrl_hs_inst_vld              (split_ifctrl_hs_inst_vld             ),
  .split_ifctrl_hs_stall                 (split_ifctrl_hs_stall                ),
  .split_ifctrl_hs_stall_part            (split_ifctrl_hs_stall_part           ),
  .split_ifctrl_int_acc_stall            (split_ifctrl_int_acc_stall           ),
  .split_ifctrl_mult_stall               (split_ifctrl_mult_stall              ),
  .split_ifctrl_push_pop_stall           (split_ifctrl_push_pop_stall          ),
  .split_xx_on                           (split_xx_on                          ),
  .split_xx_stall                        (split_xx_stall                       )
);




nm_ifu_randclk  x_randclk (
  .randclk_ibuf_entry_data_mod_en_w16 (randclk_ibuf_entry_data_mod_en_w16),
  .randclk_ibuf_pop_mod_en_w3         (randclk_ibuf_pop_mod_en_w3        ),
  .randclk_ibuf_push_mod_en_w3        (randclk_ibuf_push_mod_en_w3       ),
  .randclk_ifdp_immh_mod_en_w16       (randclk_ifdp_immh_mod_en_w16      ),
  .randclk_ifdp_imml_mod_en_w8        (randclk_ifdp_imml_mod_en_w8       ),
  .randclk_ifdp_other_info_mod_en_w8  (randclk_ifdp_other_info_mod_en_w8 ),
  .randclk_ifdp_pcode_mod_en_w5       (randclk_ifdp_pcode_mod_en_w5      ),
  .randclk_ifdp_reg_mod_en_w48        (randclk_ifdp_reg_mod_en_w48       ),
  .randclk_ifdp_src1_mod_en_w5        (randclk_ifdp_src1_mod_en_w5       ),
  .randclk_split_cnt_mod_en_w9        (randclk_split_cnt_mod_en_w9       ),
  .randclk_split_sm_mod_en_w6         (randclk_split_sm_mod_en_w6        )
);



endmodule


























module nm_intc_arb_32(
  active_cpuclk,
  active_en,
  arb_awake,
  arb_cpuclk,
  arb_regs_awake_en0,
  arb_regs_int_active0,
  arb_regs_int_en0,
  arb_regs_int_pend0,
  arb_regs_int_pri_0,
  arb_regs_int_pri_1,
  arb_regs_int_pri_10,
  arb_regs_int_pri_11,
  arb_regs_int_pri_12,
  arb_regs_int_pri_13,
  arb_regs_int_pri_14,
  arb_regs_int_pri_15,
  arb_regs_int_pri_16,
  arb_regs_int_pri_17,
  arb_regs_int_pri_18,
  arb_regs_int_pri_19,
  arb_regs_int_pri_2,
  arb_regs_int_pri_20,
  arb_regs_int_pri_21,
  arb_regs_int_pri_22,
  arb_regs_int_pri_23,
  arb_regs_int_pri_24,
  arb_regs_int_pri_25,
  arb_regs_int_pri_26,
  arb_regs_int_pri_27,
  arb_regs_int_pri_28,
  arb_regs_int_pri_29,
  arb_regs_int_pri_3,
  arb_regs_int_pri_30,
  arb_regs_int_pri_31,
  arb_regs_int_pri_4,
  arb_regs_int_pri_5,
  arb_regs_int_pri_6,
  arb_regs_int_pri_7,
  arb_regs_int_pri_8,
  arb_regs_int_pri_9,
  arb_regs_int_pri_ts,
  arb_regs_iptr_clr,
  arb_regs_isr,
  arb_regs_tspend_active,
  arb_regs_tspend_pend,
  cpurst_b,
  ctl_xx_awake_disable,
  ctl_xx_awake_enable,
  ctl_xx_clear_enable,
  ctl_xx_clear_pending,
  ctl_xx_clr_tspend,
  ctl_xx_iabr_write,
  ctl_xx_pri_value_0,
  ctl_xx_pri_value_1,
  ctl_xx_pri_value_2,
  ctl_xx_pri_value_3,
  ctl_xx_pri_value_ts,
  ctl_xx_set_enable,
  ctl_xx_set_pending,
  ctl_xx_set_tspend,
  ctl_xx_tsabr_write,
  ctl_xx_wr_priority,
  ctl_xx_wr_priority_ts,
  int_active_en,
  int_pending_en,
  pad_vic_ack_vec,
  pad_vic_int_ack,
  pad_vic_int_cfg,
  pad_vic_int_exit,
  pad_vic_int_vec,
  pad_vic_int_vld,
  pending_cpuclk,
  pending_en,
  pri_cpuclk,
  regs_arb_iptr_en,
  regs_arb_iptr_thres_prio,
  regs_arb_iptr_thres_vect,
  regs_cpuclk,
  sample_cpuclk,
  sample_en,
  tcipif_vic_wdata,
  tspclk,
  vic_pad_int_b,
  vic_pad_int_vec_b,
  vic_pad_intraw_b
);


input           active_cpuclk;           
input           arb_cpuclk;              
input           cpurst_b;                
input   [31:0]  ctl_xx_awake_disable;    
input   [31:0]  ctl_xx_awake_enable;     
input   [31:0]  ctl_xx_clear_enable;     
input   [31:0]  ctl_xx_clear_pending;    
input           ctl_xx_clr_tspend;       
input           ctl_xx_iabr_write;       
input   [1 :0]  ctl_xx_pri_value_0;      
input   [1 :0]  ctl_xx_pri_value_1;      
input   [1 :0]  ctl_xx_pri_value_2;      
input   [1 :0]  ctl_xx_pri_value_3;      
input   [1 :0]  ctl_xx_pri_value_ts;     
input   [31:0]  ctl_xx_set_enable;       
input   [31:0]  ctl_xx_set_pending;      
input           ctl_xx_set_tspend;       
input           ctl_xx_tsabr_write;      
input   [31:0]  ctl_xx_wr_priority;      
input           ctl_xx_wr_priority_ts;   
input   [7 :0]  pad_vic_ack_vec;         
input           pad_vic_int_ack;         
input   [31:0]  pad_vic_int_cfg;         
input           pad_vic_int_exit;        
input   [7 :0]  pad_vic_int_vec;         
input   [31:0]  pad_vic_int_vld;         
input           pending_cpuclk;          
input           pri_cpuclk;              
input           regs_arb_iptr_en;        
input   [1 :0]  regs_arb_iptr_thres_prio; 
input   [7 :0]  regs_arb_iptr_thres_vect; 
input           regs_cpuclk;             
input           sample_cpuclk;           
input   [31:0]  tcipif_vic_wdata;        
input           tspclk;                  
output          active_en;               
output          arb_awake;               
output  [31:0]  arb_regs_awake_en0;      
output  [31:0]  arb_regs_int_active0;    
output  [31:0]  arb_regs_int_en0;        
output  [31:0]  arb_regs_int_pend0;      
output  [7 :0]  arb_regs_int_pri_0;      
output  [7 :0]  arb_regs_int_pri_1;      
output  [7 :0]  arb_regs_int_pri_10;     
output  [7 :0]  arb_regs_int_pri_11;     
output  [7 :0]  arb_regs_int_pri_12;     
output  [7 :0]  arb_regs_int_pri_13;     
output  [7 :0]  arb_regs_int_pri_14;     
output  [7 :0]  arb_regs_int_pri_15;     
output  [7 :0]  arb_regs_int_pri_16;     
output  [7 :0]  arb_regs_int_pri_17;     
output  [7 :0]  arb_regs_int_pri_18;     
output  [7 :0]  arb_regs_int_pri_19;     
output  [7 :0]  arb_regs_int_pri_2;      
output  [7 :0]  arb_regs_int_pri_20;     
output  [7 :0]  arb_regs_int_pri_21;     
output  [7 :0]  arb_regs_int_pri_22;     
output  [7 :0]  arb_regs_int_pri_23;     
output  [7 :0]  arb_regs_int_pri_24;     
output  [7 :0]  arb_regs_int_pri_25;     
output  [7 :0]  arb_regs_int_pri_26;     
output  [7 :0]  arb_regs_int_pri_27;     
output  [7 :0]  arb_regs_int_pri_28;     
output  [7 :0]  arb_regs_int_pri_29;     
output  [7 :0]  arb_regs_int_pri_3;      
output  [7 :0]  arb_regs_int_pri_30;     
output  [7 :0]  arb_regs_int_pri_31;     
output  [7 :0]  arb_regs_int_pri_4;      
output  [7 :0]  arb_regs_int_pri_5;      
output  [7 :0]  arb_regs_int_pri_6;      
output  [7 :0]  arb_regs_int_pri_7;      
output  [7 :0]  arb_regs_int_pri_8;      
output  [7 :0]  arb_regs_int_pri_9;      
output  [7 :0]  arb_regs_int_pri_ts;     
output          arb_regs_iptr_clr;       
output  [31:0]  arb_regs_isr;            
output          arb_regs_tspend_active;  
output          arb_regs_tspend_pend;    
output          int_active_en;           
output          int_pending_en;          
output          pending_en;              
output          sample_en;               
output          vic_pad_int_b;           
output  [7 :0]  vic_pad_int_vec_b;       
output          vic_pad_intraw_b;        


reg             arb1_int_active;         
reg     [1 :0]  arb1_int_pri;            
reg     [5 :0]  arb1_int_vec;            
reg     [3 :0]  arb1_prio_req;           
reg     [1 :0]  arb2_int_pri;            
reg     [3 :0]  arb2_prio_mask;          
reg     [32:0]  arb_int_ack;             
reg     [32:0]  arb_int_exit;            
reg     [5 :0]  int_vec_b;               
reg     [32:0]  post_arb_int_req;        
reg     [3 :0]  thres_prio_mask;         
reg             vic_pad_int_b;           


wire            active_cpuclk;           
wire            active_en;               
wire            arb1_int_req;            
wire            arb1_int_tspend;         
wire    [5 :0]  arb1_int_vec_final;      
wire    [3 :0]  arb2_mask;               
wire            arb_awake;               
wire            arb_cpuclk;              
wire    [32:0]  arb_kid_int_ack;         
wire    [32:0]  arb_kid_int_exit;        
wire    [31:0]  arb_regs_awake_en0;      
wire    [31:0]  arb_regs_int_active0;    
wire    [31:0]  arb_regs_int_en0;        
wire    [31:0]  arb_regs_int_pend0;      
wire    [7 :0]  arb_regs_int_pri_0;      
wire    [7 :0]  arb_regs_int_pri_1;      
wire    [7 :0]  arb_regs_int_pri_10;     
wire    [7 :0]  arb_regs_int_pri_11;     
wire    [7 :0]  arb_regs_int_pri_12;     
wire    [7 :0]  arb_regs_int_pri_13;     
wire    [7 :0]  arb_regs_int_pri_14;     
wire    [7 :0]  arb_regs_int_pri_15;     
wire    [7 :0]  arb_regs_int_pri_16;     
wire    [7 :0]  arb_regs_int_pri_17;     
wire    [7 :0]  arb_regs_int_pri_18;     
wire    [7 :0]  arb_regs_int_pri_19;     
wire    [7 :0]  arb_regs_int_pri_2;      
wire    [7 :0]  arb_regs_int_pri_20;     
wire    [7 :0]  arb_regs_int_pri_21;     
wire    [7 :0]  arb_regs_int_pri_22;     
wire    [7 :0]  arb_regs_int_pri_23;     
wire    [7 :0]  arb_regs_int_pri_24;     
wire    [7 :0]  arb_regs_int_pri_25;     
wire    [7 :0]  arb_regs_int_pri_26;     
wire    [7 :0]  arb_regs_int_pri_27;     
wire    [7 :0]  arb_regs_int_pri_28;     
wire    [7 :0]  arb_regs_int_pri_29;     
wire    [7 :0]  arb_regs_int_pri_3;      
wire    [7 :0]  arb_regs_int_pri_30;     
wire    [7 :0]  arb_regs_int_pri_31;     
wire    [7 :0]  arb_regs_int_pri_4;      
wire    [7 :0]  arb_regs_int_pri_5;      
wire    [7 :0]  arb_regs_int_pri_6;      
wire    [7 :0]  arb_regs_int_pri_7;      
wire    [7 :0]  arb_regs_int_pri_8;      
wire    [7 :0]  arb_regs_int_pri_9;      
wire    [7 :0]  arb_regs_int_pri_ts;     
wire            arb_regs_iptr_clr;       
wire    [31:0]  arb_regs_isr;            
wire            arb_regs_tspend_active;  
wire            arb_regs_tspend_pend;    
wire            cpu_int_exit;            
wire            cpurst_b;                
wire    [31:0]  ctl_xx_awake_disable;    
wire    [31:0]  ctl_xx_awake_enable;     
wire    [31:0]  ctl_xx_clear_enable;     
wire    [31:0]  ctl_xx_clear_pending;    
wire            ctl_xx_clr_tspend;       
wire            ctl_xx_iabr_write;       
wire    [1 :0]  ctl_xx_pri_value_0;      
wire    [1 :0]  ctl_xx_pri_value_1;      
wire    [1 :0]  ctl_xx_pri_value_2;      
wire    [1 :0]  ctl_xx_pri_value_3;      
wire    [1 :0]  ctl_xx_pri_value_ts;     
wire    [31:0]  ctl_xx_set_enable;       
wire    [31:0]  ctl_xx_set_pending;      
wire            ctl_xx_set_tspend;       
wire            ctl_xx_tsabr_write;      
wire    [31:0]  ctl_xx_wr_priority;      
wire            ctl_xx_wr_priority_ts;   
wire            get_int_pri0_req;        
wire            get_int_pri1_req;        
wire            get_int_pri2_req;        
wire            int_ack_tspend;          
wire    [4 :0]  int_ack_vec;             
wire    [32:0]  int_active;              
wire            int_active_en;           
wire            int_exit_mask;           
wire            int_exit_tspend;         
wire    [4 :0]  int_exit_vec;            
wire            int_pending_en;          
wire    [32:0]  int_pri0_msk;            
wire    [32:0]  int_pri0_req;            
wire    [32:0]  int_pri1_msk;            
wire    [32:0]  int_pri1_req;            
wire    [32:0]  int_pri2_msk;            
wire    [32:0]  int_pri2_req;            
wire    [32:0]  int_pri3_msk;            
wire    [32:0]  int_pri3_req;            
wire    [1 :0]  int_priority_0;          
wire    [1 :0]  int_priority_1;          
wire    [1 :0]  int_priority_10;         
wire    [1 :0]  int_priority_11;         
wire    [1 :0]  int_priority_12;         
wire    [1 :0]  int_priority_13;         
wire    [1 :0]  int_priority_14;         
wire    [1 :0]  int_priority_15;         
wire    [1 :0]  int_priority_16;         
wire    [1 :0]  int_priority_17;         
wire    [1 :0]  int_priority_18;         
wire    [1 :0]  int_priority_19;         
wire    [1 :0]  int_priority_2;          
wire    [1 :0]  int_priority_20;         
wire    [1 :0]  int_priority_21;         
wire    [1 :0]  int_priority_22;         
wire    [1 :0]  int_priority_23;         
wire    [1 :0]  int_priority_24;         
wire    [1 :0]  int_priority_25;         
wire    [1 :0]  int_priority_26;         
wire    [1 :0]  int_priority_27;         
wire    [1 :0]  int_priority_28;         
wire    [1 :0]  int_priority_29;         
wire    [1 :0]  int_priority_3;          
wire    [1 :0]  int_priority_30;         
wire    [1 :0]  int_priority_31;         
wire    [1 :0]  int_priority_32;         
wire    [1 :0]  int_priority_4;          
wire    [1 :0]  int_priority_5;          
wire    [1 :0]  int_priority_6;          
wire    [1 :0]  int_priority_7;          
wire    [1 :0]  int_priority_8;          
wire    [1 :0]  int_priority_9;          
wire    [32:0]  int_req;                 
wire    [31:0]  intraw_req;              
wire            intraw_vld;              
wire    [31:0]  kid_arb_active_en;       
wire    [31:0]  kid_arb_pending_en;      
wire    [31:0]  kid_arb_sample_en;       
wire    [32:0]  kid_xx_int_active;       
wire    [31:0]  kid_xx_int_awake_en;     
wire    [31:0]  kid_xx_int_en;           
wire    [32:0]  kid_xx_int_pend;         
wire    [1 :0]  kid_xx_int_priority_0;   
wire    [1 :0]  kid_xx_int_priority_1;   
wire    [1 :0]  kid_xx_int_priority_10;  
wire    [1 :0]  kid_xx_int_priority_11;  
wire    [1 :0]  kid_xx_int_priority_12;  
wire    [1 :0]  kid_xx_int_priority_13;  
wire    [1 :0]  kid_xx_int_priority_14;  
wire    [1 :0]  kid_xx_int_priority_15;  
wire    [1 :0]  kid_xx_int_priority_16;  
wire    [1 :0]  kid_xx_int_priority_17;  
wire    [1 :0]  kid_xx_int_priority_18;  
wire    [1 :0]  kid_xx_int_priority_19;  
wire    [1 :0]  kid_xx_int_priority_2;   
wire    [1 :0]  kid_xx_int_priority_20;  
wire    [1 :0]  kid_xx_int_priority_21;  
wire    [1 :0]  kid_xx_int_priority_22;  
wire    [1 :0]  kid_xx_int_priority_23;  
wire    [1 :0]  kid_xx_int_priority_24;  
wire    [1 :0]  kid_xx_int_priority_25;  
wire    [1 :0]  kid_xx_int_priority_26;  
wire    [1 :0]  kid_xx_int_priority_27;  
wire    [1 :0]  kid_xx_int_priority_28;  
wire    [1 :0]  kid_xx_int_priority_29;  
wire    [1 :0]  kid_xx_int_priority_3;   
wire    [1 :0]  kid_xx_int_priority_30;  
wire    [1 :0]  kid_xx_int_priority_31;  
wire    [1 :0]  kid_xx_int_priority_32;  
wire    [1 :0]  kid_xx_int_priority_4;   
wire    [1 :0]  kid_xx_int_priority_5;   
wire    [1 :0]  kid_xx_int_priority_6;   
wire    [1 :0]  kid_xx_int_priority_7;   
wire    [1 :0]  kid_xx_int_priority_8;   
wire    [1 :0]  kid_xx_int_priority_9;   
wire    [7 :0]  pad_vic_ack_vec;         
wire            pad_vic_int_ack;         
wire    [31:0]  pad_vic_int_cfg;         
wire            pad_vic_int_exit;        
wire    [7 :0]  pad_vic_int_vec;         
wire    [31:0]  pad_vic_int_vld;         
wire            pending_cpuclk;          
wire            pending_en;              
wire            pre_emption;             
wire            pre_emption_gate;        
wire            pre_int_expt;            
wire            pre_int_tspend;          
wire    [7 :0]  pre_int_vec;             
wire            pri_cpuclk;              
wire            regs_arb_iptr_en;        
wire            regs_arb_iptr_expt;      
wire    [1 :0]  regs_arb_iptr_thres_prio; 
wire    [7 :0]  regs_arb_iptr_thres_vect; 
wire            regs_cpuclk;             
wire            sample_cpuclk;           
wire            sample_en;               
wire    [31:0]  tcipif_vic_wdata;        
wire    [3 :0]  thres_mask;              
wire    [3 :0]  total_mask;              
wire            tspclk;                  
wire    [7 :0]  vectactive;              
wire    [7 :0]  vectpending;             
wire    [7 :0]  vic_pad_int_vec_b;       
wire            vic_pad_intraw_b;        


parameter INT_NUM = 33;







nm_intc_primsk_encode  x_nm_intc_primsk_encode_0 (
  .int_p0_msk      (int_pri0_msk[0]),
  .int_p1_msk      (int_pri1_msk[0]),
  .int_p2_msk      (int_pri2_msk[0]),
  .int_p3_msk      (int_pri3_msk[0]),
  .int_priority    (int_priority_0 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_1 (
  .int_p0_msk      (int_pri0_msk[1]),
  .int_p1_msk      (int_pri1_msk[1]),
  .int_p2_msk      (int_pri2_msk[1]),
  .int_p3_msk      (int_pri3_msk[1]),
  .int_priority    (int_priority_1 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_2 (
  .int_p0_msk      (int_pri0_msk[2]),
  .int_p1_msk      (int_pri1_msk[2]),
  .int_p2_msk      (int_pri2_msk[2]),
  .int_p3_msk      (int_pri3_msk[2]),
  .int_priority    (int_priority_2 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_3 (
  .int_p0_msk      (int_pri0_msk[3]),
  .int_p1_msk      (int_pri1_msk[3]),
  .int_p2_msk      (int_pri2_msk[3]),
  .int_p3_msk      (int_pri3_msk[3]),
  .int_priority    (int_priority_3 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_4 (
  .int_p0_msk      (int_pri0_msk[4]),
  .int_p1_msk      (int_pri1_msk[4]),
  .int_p2_msk      (int_pri2_msk[4]),
  .int_p3_msk      (int_pri3_msk[4]),
  .int_priority    (int_priority_4 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_5 (
  .int_p0_msk      (int_pri0_msk[5]),
  .int_p1_msk      (int_pri1_msk[5]),
  .int_p2_msk      (int_pri2_msk[5]),
  .int_p3_msk      (int_pri3_msk[5]),
  .int_priority    (int_priority_5 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_6 (
  .int_p0_msk      (int_pri0_msk[6]),
  .int_p1_msk      (int_pri1_msk[6]),
  .int_p2_msk      (int_pri2_msk[6]),
  .int_p3_msk      (int_pri3_msk[6]),
  .int_priority    (int_priority_6 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_7 (
  .int_p0_msk      (int_pri0_msk[7]),
  .int_p1_msk      (int_pri1_msk[7]),
  .int_p2_msk      (int_pri2_msk[7]),
  .int_p3_msk      (int_pri3_msk[7]),
  .int_priority    (int_priority_7 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_8 (
  .int_p0_msk      (int_pri0_msk[8]),
  .int_p1_msk      (int_pri1_msk[8]),
  .int_p2_msk      (int_pri2_msk[8]),
  .int_p3_msk      (int_pri3_msk[8]),
  .int_priority    (int_priority_8 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_9 (
  .int_p0_msk      (int_pri0_msk[9]),
  .int_p1_msk      (int_pri1_msk[9]),
  .int_p2_msk      (int_pri2_msk[9]),
  .int_p3_msk      (int_pri3_msk[9]),
  .int_priority    (int_priority_9 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_10 (
  .int_p0_msk       (int_pri0_msk[10]),
  .int_p1_msk       (int_pri1_msk[10]),
  .int_p2_msk       (int_pri2_msk[10]),
  .int_p3_msk       (int_pri3_msk[10]),
  .int_priority     (int_priority_10 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_11 (
  .int_p0_msk       (int_pri0_msk[11]),
  .int_p1_msk       (int_pri1_msk[11]),
  .int_p2_msk       (int_pri2_msk[11]),
  .int_p3_msk       (int_pri3_msk[11]),
  .int_priority     (int_priority_11 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_12 (
  .int_p0_msk       (int_pri0_msk[12]),
  .int_p1_msk       (int_pri1_msk[12]),
  .int_p2_msk       (int_pri2_msk[12]),
  .int_p3_msk       (int_pri3_msk[12]),
  .int_priority     (int_priority_12 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_13 (
  .int_p0_msk       (int_pri0_msk[13]),
  .int_p1_msk       (int_pri1_msk[13]),
  .int_p2_msk       (int_pri2_msk[13]),
  .int_p3_msk       (int_pri3_msk[13]),
  .int_priority     (int_priority_13 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_14 (
  .int_p0_msk       (int_pri0_msk[14]),
  .int_p1_msk       (int_pri1_msk[14]),
  .int_p2_msk       (int_pri2_msk[14]),
  .int_p3_msk       (int_pri3_msk[14]),
  .int_priority     (int_priority_14 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_15 (
  .int_p0_msk       (int_pri0_msk[15]),
  .int_p1_msk       (int_pri1_msk[15]),
  .int_p2_msk       (int_pri2_msk[15]),
  .int_p3_msk       (int_pri3_msk[15]),
  .int_priority     (int_priority_15 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_16 (
  .int_p0_msk       (int_pri0_msk[16]),
  .int_p1_msk       (int_pri1_msk[16]),
  .int_p2_msk       (int_pri2_msk[16]),
  .int_p3_msk       (int_pri3_msk[16]),
  .int_priority     (int_priority_16 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_17 (
  .int_p0_msk       (int_pri0_msk[17]),
  .int_p1_msk       (int_pri1_msk[17]),
  .int_p2_msk       (int_pri2_msk[17]),
  .int_p3_msk       (int_pri3_msk[17]),
  .int_priority     (int_priority_17 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_18 (
  .int_p0_msk       (int_pri0_msk[18]),
  .int_p1_msk       (int_pri1_msk[18]),
  .int_p2_msk       (int_pri2_msk[18]),
  .int_p3_msk       (int_pri3_msk[18]),
  .int_priority     (int_priority_18 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_19 (
  .int_p0_msk       (int_pri0_msk[19]),
  .int_p1_msk       (int_pri1_msk[19]),
  .int_p2_msk       (int_pri2_msk[19]),
  .int_p3_msk       (int_pri3_msk[19]),
  .int_priority     (int_priority_19 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_20 (
  .int_p0_msk       (int_pri0_msk[20]),
  .int_p1_msk       (int_pri1_msk[20]),
  .int_p2_msk       (int_pri2_msk[20]),
  .int_p3_msk       (int_pri3_msk[20]),
  .int_priority     (int_priority_20 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_21 (
  .int_p0_msk       (int_pri0_msk[21]),
  .int_p1_msk       (int_pri1_msk[21]),
  .int_p2_msk       (int_pri2_msk[21]),
  .int_p3_msk       (int_pri3_msk[21]),
  .int_priority     (int_priority_21 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_22 (
  .int_p0_msk       (int_pri0_msk[22]),
  .int_p1_msk       (int_pri1_msk[22]),
  .int_p2_msk       (int_pri2_msk[22]),
  .int_p3_msk       (int_pri3_msk[22]),
  .int_priority     (int_priority_22 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_23 (
  .int_p0_msk       (int_pri0_msk[23]),
  .int_p1_msk       (int_pri1_msk[23]),
  .int_p2_msk       (int_pri2_msk[23]),
  .int_p3_msk       (int_pri3_msk[23]),
  .int_priority     (int_priority_23 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_24 (
  .int_p0_msk       (int_pri0_msk[24]),
  .int_p1_msk       (int_pri1_msk[24]),
  .int_p2_msk       (int_pri2_msk[24]),
  .int_p3_msk       (int_pri3_msk[24]),
  .int_priority     (int_priority_24 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_25 (
  .int_p0_msk       (int_pri0_msk[25]),
  .int_p1_msk       (int_pri1_msk[25]),
  .int_p2_msk       (int_pri2_msk[25]),
  .int_p3_msk       (int_pri3_msk[25]),
  .int_priority     (int_priority_25 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_26 (
  .int_p0_msk       (int_pri0_msk[26]),
  .int_p1_msk       (int_pri1_msk[26]),
  .int_p2_msk       (int_pri2_msk[26]),
  .int_p3_msk       (int_pri3_msk[26]),
  .int_priority     (int_priority_26 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_27 (
  .int_p0_msk       (int_pri0_msk[27]),
  .int_p1_msk       (int_pri1_msk[27]),
  .int_p2_msk       (int_pri2_msk[27]),
  .int_p3_msk       (int_pri3_msk[27]),
  .int_priority     (int_priority_27 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_28 (
  .int_p0_msk       (int_pri0_msk[28]),
  .int_p1_msk       (int_pri1_msk[28]),
  .int_p2_msk       (int_pri2_msk[28]),
  .int_p3_msk       (int_pri3_msk[28]),
  .int_priority     (int_priority_28 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_29 (
  .int_p0_msk       (int_pri0_msk[29]),
  .int_p1_msk       (int_pri1_msk[29]),
  .int_p2_msk       (int_pri2_msk[29]),
  .int_p3_msk       (int_pri3_msk[29]),
  .int_priority     (int_priority_29 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_30 (
  .int_p0_msk       (int_pri0_msk[30]),
  .int_p1_msk       (int_pri1_msk[30]),
  .int_p2_msk       (int_pri2_msk[30]),
  .int_p3_msk       (int_pri3_msk[30]),
  .int_priority     (int_priority_30 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_31 (
  .int_p0_msk       (int_pri0_msk[31]),
  .int_p1_msk       (int_pri1_msk[31]),
  .int_p2_msk       (int_pri2_msk[31]),
  .int_p3_msk       (int_pri3_msk[31]),
  .int_priority     (int_priority_31 )
);













nm_intc_primsk_encode  x_nm_intc_primsk_encode_tspend (
  .int_p0_msk       (int_pri0_msk[32]),
  .int_p1_msk       (int_pri1_msk[32]),
  .int_p2_msk       (int_pri2_msk[32]),
  .int_p3_msk       (int_pri3_msk[32]),
  .int_priority     (int_priority_32 )
);
















nm_intc_kid  x_nm_intc_kid_0 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[0]    ),
  .awake_disable           (ctl_xx_awake_disable[0]),
  .awake_enable            (ctl_xx_awake_enable[0] ),
  .clear_enable            (ctl_xx_clear_enable[0] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[0]     ),
  .int_exit                (arb_kid_int_exit[0]    ),
  .kid_arb_active_en       (kid_arb_active_en[0]   ),
  .kid_arb_int_active      (int_active[0]          ),
  .kid_arb_int_pri         (int_priority_0         ),
  .kid_arb_int_req         (int_req[0]             ),
  .kid_arb_intraw_req      (intraw_req[0]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[0]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[0]   ),
  .kid_xx_int_active       (kid_xx_int_active[0]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[0] ),
  .kid_xx_int_en           (kid_xx_int_en[0]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[0]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_0  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[0]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[0]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_0     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[0]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[0]),
  .sw_set_pending          (ctl_xx_set_pending[0]  ),
  .wr_priority             (ctl_xx_wr_priority[0]  )
);


























































nm_intc_kid  x_nm_intc_kid_1 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[1]    ),
  .awake_disable           (ctl_xx_awake_disable[1]),
  .awake_enable            (ctl_xx_awake_enable[1] ),
  .clear_enable            (ctl_xx_clear_enable[1] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[1]     ),
  .int_exit                (arb_kid_int_exit[1]    ),
  .kid_arb_active_en       (kid_arb_active_en[1]   ),
  .kid_arb_int_active      (int_active[1]          ),
  .kid_arb_int_pri         (int_priority_1         ),
  .kid_arb_int_req         (int_req[1]             ),
  .kid_arb_intraw_req      (intraw_req[1]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[1]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[1]   ),
  .kid_xx_int_active       (kid_xx_int_active[1]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[1] ),
  .kid_xx_int_en           (kid_xx_int_en[1]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[1]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_1  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[1]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[1]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_1     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[1]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[1]),
  .sw_set_pending          (ctl_xx_set_pending[1]  ),
  .wr_priority             (ctl_xx_wr_priority[1]  )
);


























































nm_intc_kid  x_nm_intc_kid_2 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[2]    ),
  .awake_disable           (ctl_xx_awake_disable[2]),
  .awake_enable            (ctl_xx_awake_enable[2] ),
  .clear_enable            (ctl_xx_clear_enable[2] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[2]     ),
  .int_exit                (arb_kid_int_exit[2]    ),
  .kid_arb_active_en       (kid_arb_active_en[2]   ),
  .kid_arb_int_active      (int_active[2]          ),
  .kid_arb_int_pri         (int_priority_2         ),
  .kid_arb_int_req         (int_req[2]             ),
  .kid_arb_intraw_req      (intraw_req[2]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[2]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[2]   ),
  .kid_xx_int_active       (kid_xx_int_active[2]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[2] ),
  .kid_xx_int_en           (kid_xx_int_en[2]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[2]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_2  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[2]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[2]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_2     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[2]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[2]),
  .sw_set_pending          (ctl_xx_set_pending[2]  ),
  .wr_priority             (ctl_xx_wr_priority[2]  )
);


























































nm_intc_kid  x_nm_intc_kid_3 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[3]    ),
  .awake_disable           (ctl_xx_awake_disable[3]),
  .awake_enable            (ctl_xx_awake_enable[3] ),
  .clear_enable            (ctl_xx_clear_enable[3] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[3]     ),
  .int_exit                (arb_kid_int_exit[3]    ),
  .kid_arb_active_en       (kid_arb_active_en[3]   ),
  .kid_arb_int_active      (int_active[3]          ),
  .kid_arb_int_pri         (int_priority_3         ),
  .kid_arb_int_req         (int_req[3]             ),
  .kid_arb_intraw_req      (intraw_req[3]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[3]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[3]   ),
  .kid_xx_int_active       (kid_xx_int_active[3]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[3] ),
  .kid_xx_int_en           (kid_xx_int_en[3]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[3]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_3  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[3]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[3]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_3     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[3]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[3]),
  .sw_set_pending          (ctl_xx_set_pending[3]  ),
  .wr_priority             (ctl_xx_wr_priority[3]  )
);


























































nm_intc_kid  x_nm_intc_kid_4 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[4]    ),
  .awake_disable           (ctl_xx_awake_disable[4]),
  .awake_enable            (ctl_xx_awake_enable[4] ),
  .clear_enable            (ctl_xx_clear_enable[4] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[4]     ),
  .int_exit                (arb_kid_int_exit[4]    ),
  .kid_arb_active_en       (kid_arb_active_en[4]   ),
  .kid_arb_int_active      (int_active[4]          ),
  .kid_arb_int_pri         (int_priority_4         ),
  .kid_arb_int_req         (int_req[4]             ),
  .kid_arb_intraw_req      (intraw_req[4]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[4]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[4]   ),
  .kid_xx_int_active       (kid_xx_int_active[4]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[4] ),
  .kid_xx_int_en           (kid_xx_int_en[4]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[4]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_4  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[4]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[4]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_0     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[4]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[4]),
  .sw_set_pending          (ctl_xx_set_pending[4]  ),
  .wr_priority             (ctl_xx_wr_priority[4]  )
);


























































nm_intc_kid  x_nm_intc_kid_5 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[5]    ),
  .awake_disable           (ctl_xx_awake_disable[5]),
  .awake_enable            (ctl_xx_awake_enable[5] ),
  .clear_enable            (ctl_xx_clear_enable[5] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[5]     ),
  .int_exit                (arb_kid_int_exit[5]    ),
  .kid_arb_active_en       (kid_arb_active_en[5]   ),
  .kid_arb_int_active      (int_active[5]          ),
  .kid_arb_int_pri         (int_priority_5         ),
  .kid_arb_int_req         (int_req[5]             ),
  .kid_arb_intraw_req      (intraw_req[5]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[5]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[5]   ),
  .kid_xx_int_active       (kid_xx_int_active[5]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[5] ),
  .kid_xx_int_en           (kid_xx_int_en[5]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[5]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_5  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[5]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[5]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_1     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[5]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[5]),
  .sw_set_pending          (ctl_xx_set_pending[5]  ),
  .wr_priority             (ctl_xx_wr_priority[5]  )
);


























































nm_intc_kid  x_nm_intc_kid_6 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[6]    ),
  .awake_disable           (ctl_xx_awake_disable[6]),
  .awake_enable            (ctl_xx_awake_enable[6] ),
  .clear_enable            (ctl_xx_clear_enable[6] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[6]     ),
  .int_exit                (arb_kid_int_exit[6]    ),
  .kid_arb_active_en       (kid_arb_active_en[6]   ),
  .kid_arb_int_active      (int_active[6]          ),
  .kid_arb_int_pri         (int_priority_6         ),
  .kid_arb_int_req         (int_req[6]             ),
  .kid_arb_intraw_req      (intraw_req[6]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[6]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[6]   ),
  .kid_xx_int_active       (kid_xx_int_active[6]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[6] ),
  .kid_xx_int_en           (kid_xx_int_en[6]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[6]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_6  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[6]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[6]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_2     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[6]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[6]),
  .sw_set_pending          (ctl_xx_set_pending[6]  ),
  .wr_priority             (ctl_xx_wr_priority[6]  )
);


























































nm_intc_kid  x_nm_intc_kid_7 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[7]    ),
  .awake_disable           (ctl_xx_awake_disable[7]),
  .awake_enable            (ctl_xx_awake_enable[7] ),
  .clear_enable            (ctl_xx_clear_enable[7] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[7]     ),
  .int_exit                (arb_kid_int_exit[7]    ),
  .kid_arb_active_en       (kid_arb_active_en[7]   ),
  .kid_arb_int_active      (int_active[7]          ),
  .kid_arb_int_pri         (int_priority_7         ),
  .kid_arb_int_req         (int_req[7]             ),
  .kid_arb_intraw_req      (intraw_req[7]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[7]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[7]   ),
  .kid_xx_int_active       (kid_xx_int_active[7]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[7] ),
  .kid_xx_int_en           (kid_xx_int_en[7]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[7]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_7  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[7]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[7]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_3     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[7]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[7]),
  .sw_set_pending          (ctl_xx_set_pending[7]  ),
  .wr_priority             (ctl_xx_wr_priority[7]  )
);


























































nm_intc_kid  x_nm_intc_kid_8 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[8]    ),
  .awake_disable           (ctl_xx_awake_disable[8]),
  .awake_enable            (ctl_xx_awake_enable[8] ),
  .clear_enable            (ctl_xx_clear_enable[8] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[8]     ),
  .int_exit                (arb_kid_int_exit[8]    ),
  .kid_arb_active_en       (kid_arb_active_en[8]   ),
  .kid_arb_int_active      (int_active[8]          ),
  .kid_arb_int_pri         (int_priority_8         ),
  .kid_arb_int_req         (int_req[8]             ),
  .kid_arb_intraw_req      (intraw_req[8]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[8]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[8]   ),
  .kid_xx_int_active       (kid_xx_int_active[8]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[8] ),
  .kid_xx_int_en           (kid_xx_int_en[8]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[8]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_8  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[8]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[8]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_0     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[8]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[8]),
  .sw_set_pending          (ctl_xx_set_pending[8]  ),
  .wr_priority             (ctl_xx_wr_priority[8]  )
);


























































nm_intc_kid  x_nm_intc_kid_9 (
  .active_cpuclk           (active_cpuclk          ),
  .active_wdata            (tcipif_vic_wdata[9]    ),
  .awake_disable           (ctl_xx_awake_disable[9]),
  .awake_enable            (ctl_xx_awake_enable[9] ),
  .clear_enable            (ctl_xx_clear_enable[9] ),
  .cpurst_b                (cpurst_b               ),
  .ctl_xx_iabr_write       (ctl_xx_iabr_write      ),
  .int_ack                 (arb_kid_int_ack[9]     ),
  .int_exit                (arb_kid_int_exit[9]    ),
  .kid_arb_active_en       (kid_arb_active_en[9]   ),
  .kid_arb_int_active      (int_active[9]          ),
  .kid_arb_int_pri         (int_priority_9         ),
  .kid_arb_int_req         (int_req[9]             ),
  .kid_arb_intraw_req      (intraw_req[9]          ),
  .kid_arb_pending_en      (kid_arb_pending_en[9]  ),
  .kid_arb_sample_en       (kid_arb_sample_en[9]   ),
  .kid_xx_int_active       (kid_xx_int_active[9]   ),
  .kid_xx_int_awake_en     (kid_xx_int_awake_en[9] ),
  .kid_xx_int_en           (kid_xx_int_en[9]       ),
  .kid_xx_int_pend         (kid_xx_int_pend[9]     ),
  .kid_xx_int_pri          (kid_xx_int_priority_9  ),
  .pad_vic_int_cfg         (pad_vic_int_cfg[9]     ),
  .pad_vic_int_vld         (pad_vic_int_vld[9]     ),
  .pending_cpuclk          (pending_cpuclk         ),
  .pri_cpuclk              (pri_cpuclk             ),
  .pri_value               (ctl_xx_pri_value_1     ),
  .regs_cpuclk             (regs_cpuclk            ),
  .sample_cpuclk           (sample_cpuclk          ),
  .set_enable              (ctl_xx_set_enable[9]   ),
  .sw_clear_pending        (ctl_xx_clear_pending[9]),
  .sw_set_pending          (ctl_xx_set_pending[9]  ),
  .wr_priority             (ctl_xx_wr_priority[9]  )
);


























































nm_intc_kid  x_nm_intc_kid_10 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[10]    ),
  .awake_disable            (ctl_xx_awake_disable[10]),
  .awake_enable             (ctl_xx_awake_enable[10] ),
  .clear_enable             (ctl_xx_clear_enable[10] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[10]     ),
  .int_exit                 (arb_kid_int_exit[10]    ),
  .kid_arb_active_en        (kid_arb_active_en[10]   ),
  .kid_arb_int_active       (int_active[10]          ),
  .kid_arb_int_pri          (int_priority_10         ),
  .kid_arb_int_req          (int_req[10]             ),
  .kid_arb_intraw_req       (intraw_req[10]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[10]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[10]   ),
  .kid_xx_int_active        (kid_xx_int_active[10]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[10] ),
  .kid_xx_int_en            (kid_xx_int_en[10]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[10]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_10  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[10]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[10]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_2      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[10]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[10]),
  .sw_set_pending           (ctl_xx_set_pending[10]  ),
  .wr_priority              (ctl_xx_wr_priority[10]  )
);


























































nm_intc_kid  x_nm_intc_kid_11 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[11]    ),
  .awake_disable            (ctl_xx_awake_disable[11]),
  .awake_enable             (ctl_xx_awake_enable[11] ),
  .clear_enable             (ctl_xx_clear_enable[11] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[11]     ),
  .int_exit                 (arb_kid_int_exit[11]    ),
  .kid_arb_active_en        (kid_arb_active_en[11]   ),
  .kid_arb_int_active       (int_active[11]          ),
  .kid_arb_int_pri          (int_priority_11         ),
  .kid_arb_int_req          (int_req[11]             ),
  .kid_arb_intraw_req       (intraw_req[11]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[11]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[11]   ),
  .kid_xx_int_active        (kid_xx_int_active[11]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[11] ),
  .kid_xx_int_en            (kid_xx_int_en[11]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[11]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_11  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[11]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[11]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_3      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[11]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[11]),
  .sw_set_pending           (ctl_xx_set_pending[11]  ),
  .wr_priority              (ctl_xx_wr_priority[11]  )
);


























































nm_intc_kid  x_nm_intc_kid_12 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[12]    ),
  .awake_disable            (ctl_xx_awake_disable[12]),
  .awake_enable             (ctl_xx_awake_enable[12] ),
  .clear_enable             (ctl_xx_clear_enable[12] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[12]     ),
  .int_exit                 (arb_kid_int_exit[12]    ),
  .kid_arb_active_en        (kid_arb_active_en[12]   ),
  .kid_arb_int_active       (int_active[12]          ),
  .kid_arb_int_pri          (int_priority_12         ),
  .kid_arb_int_req          (int_req[12]             ),
  .kid_arb_intraw_req       (intraw_req[12]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[12]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[12]   ),
  .kid_xx_int_active        (kid_xx_int_active[12]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[12] ),
  .kid_xx_int_en            (kid_xx_int_en[12]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[12]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_12  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[12]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[12]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_0      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[12]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[12]),
  .sw_set_pending           (ctl_xx_set_pending[12]  ),
  .wr_priority              (ctl_xx_wr_priority[12]  )
);


























































nm_intc_kid  x_nm_intc_kid_13 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[13]    ),
  .awake_disable            (ctl_xx_awake_disable[13]),
  .awake_enable             (ctl_xx_awake_enable[13] ),
  .clear_enable             (ctl_xx_clear_enable[13] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[13]     ),
  .int_exit                 (arb_kid_int_exit[13]    ),
  .kid_arb_active_en        (kid_arb_active_en[13]   ),
  .kid_arb_int_active       (int_active[13]          ),
  .kid_arb_int_pri          (int_priority_13         ),
  .kid_arb_int_req          (int_req[13]             ),
  .kid_arb_intraw_req       (intraw_req[13]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[13]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[13]   ),
  .kid_xx_int_active        (kid_xx_int_active[13]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[13] ),
  .kid_xx_int_en            (kid_xx_int_en[13]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[13]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_13  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[13]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[13]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_1      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[13]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[13]),
  .sw_set_pending           (ctl_xx_set_pending[13]  ),
  .wr_priority              (ctl_xx_wr_priority[13]  )
);


























































nm_intc_kid  x_nm_intc_kid_14 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[14]    ),
  .awake_disable            (ctl_xx_awake_disable[14]),
  .awake_enable             (ctl_xx_awake_enable[14] ),
  .clear_enable             (ctl_xx_clear_enable[14] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[14]     ),
  .int_exit                 (arb_kid_int_exit[14]    ),
  .kid_arb_active_en        (kid_arb_active_en[14]   ),
  .kid_arb_int_active       (int_active[14]          ),
  .kid_arb_int_pri          (int_priority_14         ),
  .kid_arb_int_req          (int_req[14]             ),
  .kid_arb_intraw_req       (intraw_req[14]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[14]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[14]   ),
  .kid_xx_int_active        (kid_xx_int_active[14]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[14] ),
  .kid_xx_int_en            (kid_xx_int_en[14]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[14]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_14  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[14]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[14]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_2      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[14]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[14]),
  .sw_set_pending           (ctl_xx_set_pending[14]  ),
  .wr_priority              (ctl_xx_wr_priority[14]  )
);


























































nm_intc_kid  x_nm_intc_kid_15 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[15]    ),
  .awake_disable            (ctl_xx_awake_disable[15]),
  .awake_enable             (ctl_xx_awake_enable[15] ),
  .clear_enable             (ctl_xx_clear_enable[15] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[15]     ),
  .int_exit                 (arb_kid_int_exit[15]    ),
  .kid_arb_active_en        (kid_arb_active_en[15]   ),
  .kid_arb_int_active       (int_active[15]          ),
  .kid_arb_int_pri          (int_priority_15         ),
  .kid_arb_int_req          (int_req[15]             ),
  .kid_arb_intraw_req       (intraw_req[15]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[15]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[15]   ),
  .kid_xx_int_active        (kid_xx_int_active[15]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[15] ),
  .kid_xx_int_en            (kid_xx_int_en[15]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[15]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_15  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[15]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[15]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_3      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[15]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[15]),
  .sw_set_pending           (ctl_xx_set_pending[15]  ),
  .wr_priority              (ctl_xx_wr_priority[15]  )
);


























































nm_intc_kid  x_nm_intc_kid_16 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[16]    ),
  .awake_disable            (ctl_xx_awake_disable[16]),
  .awake_enable             (ctl_xx_awake_enable[16] ),
  .clear_enable             (ctl_xx_clear_enable[16] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[16]     ),
  .int_exit                 (arb_kid_int_exit[16]    ),
  .kid_arb_active_en        (kid_arb_active_en[16]   ),
  .kid_arb_int_active       (int_active[16]          ),
  .kid_arb_int_pri          (int_priority_16         ),
  .kid_arb_int_req          (int_req[16]             ),
  .kid_arb_intraw_req       (intraw_req[16]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[16]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[16]   ),
  .kid_xx_int_active        (kid_xx_int_active[16]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[16] ),
  .kid_xx_int_en            (kid_xx_int_en[16]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[16]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_16  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[16]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[16]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_0      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[16]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[16]),
  .sw_set_pending           (ctl_xx_set_pending[16]  ),
  .wr_priority              (ctl_xx_wr_priority[16]  )
);


























































nm_intc_kid  x_nm_intc_kid_17 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[17]    ),
  .awake_disable            (ctl_xx_awake_disable[17]),
  .awake_enable             (ctl_xx_awake_enable[17] ),
  .clear_enable             (ctl_xx_clear_enable[17] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[17]     ),
  .int_exit                 (arb_kid_int_exit[17]    ),
  .kid_arb_active_en        (kid_arb_active_en[17]   ),
  .kid_arb_int_active       (int_active[17]          ),
  .kid_arb_int_pri          (int_priority_17         ),
  .kid_arb_int_req          (int_req[17]             ),
  .kid_arb_intraw_req       (intraw_req[17]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[17]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[17]   ),
  .kid_xx_int_active        (kid_xx_int_active[17]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[17] ),
  .kid_xx_int_en            (kid_xx_int_en[17]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[17]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_17  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[17]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[17]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_1      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[17]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[17]),
  .sw_set_pending           (ctl_xx_set_pending[17]  ),
  .wr_priority              (ctl_xx_wr_priority[17]  )
);


























































nm_intc_kid  x_nm_intc_kid_18 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[18]    ),
  .awake_disable            (ctl_xx_awake_disable[18]),
  .awake_enable             (ctl_xx_awake_enable[18] ),
  .clear_enable             (ctl_xx_clear_enable[18] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[18]     ),
  .int_exit                 (arb_kid_int_exit[18]    ),
  .kid_arb_active_en        (kid_arb_active_en[18]   ),
  .kid_arb_int_active       (int_active[18]          ),
  .kid_arb_int_pri          (int_priority_18         ),
  .kid_arb_int_req          (int_req[18]             ),
  .kid_arb_intraw_req       (intraw_req[18]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[18]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[18]   ),
  .kid_xx_int_active        (kid_xx_int_active[18]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[18] ),
  .kid_xx_int_en            (kid_xx_int_en[18]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[18]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_18  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[18]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[18]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_2      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[18]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[18]),
  .sw_set_pending           (ctl_xx_set_pending[18]  ),
  .wr_priority              (ctl_xx_wr_priority[18]  )
);


























































nm_intc_kid  x_nm_intc_kid_19 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[19]    ),
  .awake_disable            (ctl_xx_awake_disable[19]),
  .awake_enable             (ctl_xx_awake_enable[19] ),
  .clear_enable             (ctl_xx_clear_enable[19] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[19]     ),
  .int_exit                 (arb_kid_int_exit[19]    ),
  .kid_arb_active_en        (kid_arb_active_en[19]   ),
  .kid_arb_int_active       (int_active[19]          ),
  .kid_arb_int_pri          (int_priority_19         ),
  .kid_arb_int_req          (int_req[19]             ),
  .kid_arb_intraw_req       (intraw_req[19]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[19]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[19]   ),
  .kid_xx_int_active        (kid_xx_int_active[19]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[19] ),
  .kid_xx_int_en            (kid_xx_int_en[19]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[19]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_19  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[19]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[19]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_3      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[19]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[19]),
  .sw_set_pending           (ctl_xx_set_pending[19]  ),
  .wr_priority              (ctl_xx_wr_priority[19]  )
);


























































nm_intc_kid  x_nm_intc_kid_20 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[20]    ),
  .awake_disable            (ctl_xx_awake_disable[20]),
  .awake_enable             (ctl_xx_awake_enable[20] ),
  .clear_enable             (ctl_xx_clear_enable[20] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[20]     ),
  .int_exit                 (arb_kid_int_exit[20]    ),
  .kid_arb_active_en        (kid_arb_active_en[20]   ),
  .kid_arb_int_active       (int_active[20]          ),
  .kid_arb_int_pri          (int_priority_20         ),
  .kid_arb_int_req          (int_req[20]             ),
  .kid_arb_intraw_req       (intraw_req[20]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[20]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[20]   ),
  .kid_xx_int_active        (kid_xx_int_active[20]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[20] ),
  .kid_xx_int_en            (kid_xx_int_en[20]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[20]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_20  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[20]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[20]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_0      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[20]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[20]),
  .sw_set_pending           (ctl_xx_set_pending[20]  ),
  .wr_priority              (ctl_xx_wr_priority[20]  )
);


























































nm_intc_kid  x_nm_intc_kid_21 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[21]    ),
  .awake_disable            (ctl_xx_awake_disable[21]),
  .awake_enable             (ctl_xx_awake_enable[21] ),
  .clear_enable             (ctl_xx_clear_enable[21] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[21]     ),
  .int_exit                 (arb_kid_int_exit[21]    ),
  .kid_arb_active_en        (kid_arb_active_en[21]   ),
  .kid_arb_int_active       (int_active[21]          ),
  .kid_arb_int_pri          (int_priority_21         ),
  .kid_arb_int_req          (int_req[21]             ),
  .kid_arb_intraw_req       (intraw_req[21]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[21]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[21]   ),
  .kid_xx_int_active        (kid_xx_int_active[21]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[21] ),
  .kid_xx_int_en            (kid_xx_int_en[21]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[21]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_21  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[21]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[21]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_1      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[21]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[21]),
  .sw_set_pending           (ctl_xx_set_pending[21]  ),
  .wr_priority              (ctl_xx_wr_priority[21]  )
);


























































nm_intc_kid  x_nm_intc_kid_22 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[22]    ),
  .awake_disable            (ctl_xx_awake_disable[22]),
  .awake_enable             (ctl_xx_awake_enable[22] ),
  .clear_enable             (ctl_xx_clear_enable[22] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[22]     ),
  .int_exit                 (arb_kid_int_exit[22]    ),
  .kid_arb_active_en        (kid_arb_active_en[22]   ),
  .kid_arb_int_active       (int_active[22]          ),
  .kid_arb_int_pri          (int_priority_22         ),
  .kid_arb_int_req          (int_req[22]             ),
  .kid_arb_intraw_req       (intraw_req[22]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[22]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[22]   ),
  .kid_xx_int_active        (kid_xx_int_active[22]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[22] ),
  .kid_xx_int_en            (kid_xx_int_en[22]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[22]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_22  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[22]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[22]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_2      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[22]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[22]),
  .sw_set_pending           (ctl_xx_set_pending[22]  ),
  .wr_priority              (ctl_xx_wr_priority[22]  )
);


























































nm_intc_kid  x_nm_intc_kid_23 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[23]    ),
  .awake_disable            (ctl_xx_awake_disable[23]),
  .awake_enable             (ctl_xx_awake_enable[23] ),
  .clear_enable             (ctl_xx_clear_enable[23] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[23]     ),
  .int_exit                 (arb_kid_int_exit[23]    ),
  .kid_arb_active_en        (kid_arb_active_en[23]   ),
  .kid_arb_int_active       (int_active[23]          ),
  .kid_arb_int_pri          (int_priority_23         ),
  .kid_arb_int_req          (int_req[23]             ),
  .kid_arb_intraw_req       (intraw_req[23]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[23]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[23]   ),
  .kid_xx_int_active        (kid_xx_int_active[23]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[23] ),
  .kid_xx_int_en            (kid_xx_int_en[23]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[23]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_23  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[23]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[23]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_3      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[23]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[23]),
  .sw_set_pending           (ctl_xx_set_pending[23]  ),
  .wr_priority              (ctl_xx_wr_priority[23]  )
);


























































nm_intc_kid  x_nm_intc_kid_24 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[24]    ),
  .awake_disable            (ctl_xx_awake_disable[24]),
  .awake_enable             (ctl_xx_awake_enable[24] ),
  .clear_enable             (ctl_xx_clear_enable[24] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[24]     ),
  .int_exit                 (arb_kid_int_exit[24]    ),
  .kid_arb_active_en        (kid_arb_active_en[24]   ),
  .kid_arb_int_active       (int_active[24]          ),
  .kid_arb_int_pri          (int_priority_24         ),
  .kid_arb_int_req          (int_req[24]             ),
  .kid_arb_intraw_req       (intraw_req[24]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[24]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[24]   ),
  .kid_xx_int_active        (kid_xx_int_active[24]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[24] ),
  .kid_xx_int_en            (kid_xx_int_en[24]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[24]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_24  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[24]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[24]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_0      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[24]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[24]),
  .sw_set_pending           (ctl_xx_set_pending[24]  ),
  .wr_priority              (ctl_xx_wr_priority[24]  )
);


























































nm_intc_kid  x_nm_intc_kid_25 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[25]    ),
  .awake_disable            (ctl_xx_awake_disable[25]),
  .awake_enable             (ctl_xx_awake_enable[25] ),
  .clear_enable             (ctl_xx_clear_enable[25] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[25]     ),
  .int_exit                 (arb_kid_int_exit[25]    ),
  .kid_arb_active_en        (kid_arb_active_en[25]   ),
  .kid_arb_int_active       (int_active[25]          ),
  .kid_arb_int_pri          (int_priority_25         ),
  .kid_arb_int_req          (int_req[25]             ),
  .kid_arb_intraw_req       (intraw_req[25]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[25]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[25]   ),
  .kid_xx_int_active        (kid_xx_int_active[25]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[25] ),
  .kid_xx_int_en            (kid_xx_int_en[25]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[25]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_25  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[25]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[25]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_1      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[25]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[25]),
  .sw_set_pending           (ctl_xx_set_pending[25]  ),
  .wr_priority              (ctl_xx_wr_priority[25]  )
);


























































nm_intc_kid  x_nm_intc_kid_26 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[26]    ),
  .awake_disable            (ctl_xx_awake_disable[26]),
  .awake_enable             (ctl_xx_awake_enable[26] ),
  .clear_enable             (ctl_xx_clear_enable[26] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[26]     ),
  .int_exit                 (arb_kid_int_exit[26]    ),
  .kid_arb_active_en        (kid_arb_active_en[26]   ),
  .kid_arb_int_active       (int_active[26]          ),
  .kid_arb_int_pri          (int_priority_26         ),
  .kid_arb_int_req          (int_req[26]             ),
  .kid_arb_intraw_req       (intraw_req[26]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[26]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[26]   ),
  .kid_xx_int_active        (kid_xx_int_active[26]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[26] ),
  .kid_xx_int_en            (kid_xx_int_en[26]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[26]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_26  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[26]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[26]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_2      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[26]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[26]),
  .sw_set_pending           (ctl_xx_set_pending[26]  ),
  .wr_priority              (ctl_xx_wr_priority[26]  )
);


























































nm_intc_kid  x_nm_intc_kid_27 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[27]    ),
  .awake_disable            (ctl_xx_awake_disable[27]),
  .awake_enable             (ctl_xx_awake_enable[27] ),
  .clear_enable             (ctl_xx_clear_enable[27] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[27]     ),
  .int_exit                 (arb_kid_int_exit[27]    ),
  .kid_arb_active_en        (kid_arb_active_en[27]   ),
  .kid_arb_int_active       (int_active[27]          ),
  .kid_arb_int_pri          (int_priority_27         ),
  .kid_arb_int_req          (int_req[27]             ),
  .kid_arb_intraw_req       (intraw_req[27]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[27]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[27]   ),
  .kid_xx_int_active        (kid_xx_int_active[27]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[27] ),
  .kid_xx_int_en            (kid_xx_int_en[27]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[27]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_27  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[27]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[27]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_3      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[27]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[27]),
  .sw_set_pending           (ctl_xx_set_pending[27]  ),
  .wr_priority              (ctl_xx_wr_priority[27]  )
);


























































nm_intc_kid  x_nm_intc_kid_28 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[28]    ),
  .awake_disable            (ctl_xx_awake_disable[28]),
  .awake_enable             (ctl_xx_awake_enable[28] ),
  .clear_enable             (ctl_xx_clear_enable[28] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[28]     ),
  .int_exit                 (arb_kid_int_exit[28]    ),
  .kid_arb_active_en        (kid_arb_active_en[28]   ),
  .kid_arb_int_active       (int_active[28]          ),
  .kid_arb_int_pri          (int_priority_28         ),
  .kid_arb_int_req          (int_req[28]             ),
  .kid_arb_intraw_req       (intraw_req[28]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[28]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[28]   ),
  .kid_xx_int_active        (kid_xx_int_active[28]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[28] ),
  .kid_xx_int_en            (kid_xx_int_en[28]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[28]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_28  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[28]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[28]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_0      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[28]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[28]),
  .sw_set_pending           (ctl_xx_set_pending[28]  ),
  .wr_priority              (ctl_xx_wr_priority[28]  )
);


























































nm_intc_kid  x_nm_intc_kid_29 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[29]    ),
  .awake_disable            (ctl_xx_awake_disable[29]),
  .awake_enable             (ctl_xx_awake_enable[29] ),
  .clear_enable             (ctl_xx_clear_enable[29] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[29]     ),
  .int_exit                 (arb_kid_int_exit[29]    ),
  .kid_arb_active_en        (kid_arb_active_en[29]   ),
  .kid_arb_int_active       (int_active[29]          ),
  .kid_arb_int_pri          (int_priority_29         ),
  .kid_arb_int_req          (int_req[29]             ),
  .kid_arb_intraw_req       (intraw_req[29]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[29]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[29]   ),
  .kid_xx_int_active        (kid_xx_int_active[29]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[29] ),
  .kid_xx_int_en            (kid_xx_int_en[29]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[29]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_29  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[29]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[29]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_1      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[29]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[29]),
  .sw_set_pending           (ctl_xx_set_pending[29]  ),
  .wr_priority              (ctl_xx_wr_priority[29]  )
);


























































nm_intc_kid  x_nm_intc_kid_30 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[30]    ),
  .awake_disable            (ctl_xx_awake_disable[30]),
  .awake_enable             (ctl_xx_awake_enable[30] ),
  .clear_enable             (ctl_xx_clear_enable[30] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[30]     ),
  .int_exit                 (arb_kid_int_exit[30]    ),
  .kid_arb_active_en        (kid_arb_active_en[30]   ),
  .kid_arb_int_active       (int_active[30]          ),
  .kid_arb_int_pri          (int_priority_30         ),
  .kid_arb_int_req          (int_req[30]             ),
  .kid_arb_intraw_req       (intraw_req[30]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[30]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[30]   ),
  .kid_xx_int_active        (kid_xx_int_active[30]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[30] ),
  .kid_xx_int_en            (kid_xx_int_en[30]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[30]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_30  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[30]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[30]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_2      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[30]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[30]),
  .sw_set_pending           (ctl_xx_set_pending[30]  ),
  .wr_priority              (ctl_xx_wr_priority[30]  )
);


























































nm_intc_kid  x_nm_intc_kid_31 (
  .active_cpuclk            (active_cpuclk           ),
  .active_wdata             (tcipif_vic_wdata[31]    ),
  .awake_disable            (ctl_xx_awake_disable[31]),
  .awake_enable             (ctl_xx_awake_enable[31] ),
  .clear_enable             (ctl_xx_clear_enable[31] ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .int_ack                  (arb_kid_int_ack[31]     ),
  .int_exit                 (arb_kid_int_exit[31]    ),
  .kid_arb_active_en        (kid_arb_active_en[31]   ),
  .kid_arb_int_active       (int_active[31]          ),
  .kid_arb_int_pri          (int_priority_31         ),
  .kid_arb_int_req          (int_req[31]             ),
  .kid_arb_intraw_req       (intraw_req[31]          ),
  .kid_arb_pending_en       (kid_arb_pending_en[31]  ),
  .kid_arb_sample_en        (kid_arb_sample_en[31]   ),
  .kid_xx_int_active        (kid_xx_int_active[31]   ),
  .kid_xx_int_awake_en      (kid_xx_int_awake_en[31] ),
  .kid_xx_int_en            (kid_xx_int_en[31]       ),
  .kid_xx_int_pend          (kid_xx_int_pend[31]     ),
  .kid_xx_int_pri           (kid_xx_int_priority_31  ),
  .pad_vic_int_cfg          (pad_vic_int_cfg[31]     ),
  .pad_vic_int_vld          (pad_vic_int_vld[31]     ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pri_cpuclk               (pri_cpuclk              ),
  .pri_value                (ctl_xx_pri_value_3      ),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .set_enable               (ctl_xx_set_enable[31]   ),
  .sw_clear_pending         (ctl_xx_clear_pending[31]),
  .sw_set_pending           (ctl_xx_set_pending[31]  ),
  .wr_priority              (ctl_xx_wr_priority[31]  )
);


























































nm_intc_tspend  x_nm_intc_kid_tspend (
  .active_value           (tcipif_vic_wdata[0]   ),
  .active_write           (ctl_xx_tsabr_write    ),
  .cpurst_b               (cpurst_b              ),
  .int_ack                (arb_kid_int_ack[32]   ),
  .int_active_en          (int_active_en         ),
  .int_exit               (arb_kid_int_exit[32]  ),
  .int_pending_en         (int_pending_en        ),
  .kid_arb_int_active     (int_active[32]        ),
  .kid_arb_int_pri        (int_priority_32       ),
  .kid_arb_int_req        (int_req[32]           ),
  .kid_xx_int_active      (kid_xx_int_active[32] ),
  .kid_xx_int_pend        (kid_xx_int_pend[32]   ),
  .kid_xx_int_pri         (kid_xx_int_priority_32),
  .pri_cpuclk             (pri_cpuclk            ),
  .pri_value              (ctl_xx_pri_value_ts   ),
  .sw_clear_pending       (ctl_xx_clr_tspend     ),
  .sw_set_pending         (ctl_xx_set_tspend     ),
  .tspclk                 (tspclk                ),
  .wr_priority            (ctl_xx_wr_priority_ts )
);























assign arb_regs_int_pri_0[7:0]  = {kid_xx_int_priority_0[1:0],6'b0};
assign arb_regs_int_pri_1[7:0]  = {kid_xx_int_priority_1[1:0],6'b0};
assign arb_regs_int_pri_2[7:0]  = {kid_xx_int_priority_2[1:0],6'b0};
assign arb_regs_int_pri_3[7:0]  = {kid_xx_int_priority_3[1:0],6'b0};
assign arb_regs_int_pri_4[7:0]  = {kid_xx_int_priority_4[1:0],6'b0};
assign arb_regs_int_pri_5[7:0]  = {kid_xx_int_priority_5[1:0],6'b0};
assign arb_regs_int_pri_6[7:0]  = {kid_xx_int_priority_6[1:0],6'b0};
assign arb_regs_int_pri_7[7:0]  = {kid_xx_int_priority_7[1:0],6'b0};
assign arb_regs_int_pri_8[7:0]  = {kid_xx_int_priority_8[1:0],6'b0};
assign arb_regs_int_pri_9[7:0]  = {kid_xx_int_priority_9[1:0],6'b0};
assign arb_regs_int_pri_10[7:0] = {kid_xx_int_priority_10[1:0],6'b0};
assign arb_regs_int_pri_11[7:0] = {kid_xx_int_priority_11[1:0],6'b0};
assign arb_regs_int_pri_12[7:0] = {kid_xx_int_priority_12[1:0],6'b0};
assign arb_regs_int_pri_13[7:0] = {kid_xx_int_priority_13[1:0],6'b0};
assign arb_regs_int_pri_14[7:0] = {kid_xx_int_priority_14[1:0],6'b0};
assign arb_regs_int_pri_15[7:0] = {kid_xx_int_priority_15[1:0],6'b0};
assign arb_regs_int_pri_16[7:0] = {kid_xx_int_priority_16[1:0],6'b0};
assign arb_regs_int_pri_17[7:0] = {kid_xx_int_priority_17[1:0],6'b0};
assign arb_regs_int_pri_18[7:0] = {kid_xx_int_priority_18[1:0],6'b0};
assign arb_regs_int_pri_19[7:0] = {kid_xx_int_priority_19[1:0],6'b0};
assign arb_regs_int_pri_20[7:0] = {kid_xx_int_priority_20[1:0],6'b0};
assign arb_regs_int_pri_21[7:0] = {kid_xx_int_priority_21[1:0],6'b0};
assign arb_regs_int_pri_22[7:0] = {kid_xx_int_priority_22[1:0],6'b0};
assign arb_regs_int_pri_23[7:0] = {kid_xx_int_priority_23[1:0],6'b0};
assign arb_regs_int_pri_24[7:0] = {kid_xx_int_priority_24[1:0],6'b0};
assign arb_regs_int_pri_25[7:0] = {kid_xx_int_priority_25[1:0],6'b0};
assign arb_regs_int_pri_26[7:0] = {kid_xx_int_priority_26[1:0],6'b0};
assign arb_regs_int_pri_27[7:0] = {kid_xx_int_priority_27[1:0],6'b0};
assign arb_regs_int_pri_28[7:0] = {kid_xx_int_priority_28[1:0],6'b0};
assign arb_regs_int_pri_29[7:0] = {kid_xx_int_priority_29[1:0],6'b0};
assign arb_regs_int_pri_30[7:0] = {kid_xx_int_priority_30[1:0],6'b0};
assign arb_regs_int_pri_31[7:0] = {kid_xx_int_priority_31[1:0],6'b0};
assign arb_regs_int_pri_ts[7:0] = {kid_xx_int_priority_32[1:0],6'b0};


assign sample_en  = | kid_arb_sample_en[31:0];
assign pending_en = | kid_arb_pending_en[31:0];
assign active_en  = | kid_arb_active_en[31:0];

assign int_pri0_req[INT_NUM-1:0] = int_req[INT_NUM-1:0] & int_pri0_msk[INT_NUM-1:0];
assign int_pri1_req[INT_NUM-1:0] = int_req[INT_NUM-1:0] & int_pri1_msk[INT_NUM-1:0];
assign int_pri2_req[INT_NUM-1:0] = int_req[INT_NUM-1:0] & int_pri2_msk[INT_NUM-1:0];
assign int_pri3_req[INT_NUM-1:0] = int_req[INT_NUM-1:0] & int_pri3_msk[INT_NUM-1:0];




assign get_int_pri0_req = (|int_pri0_req[INT_NUM-1:0]);
assign get_int_pri1_req = (|int_pri1_req[INT_NUM-1:0]);
assign get_int_pri2_req = (|int_pri2_req[INT_NUM-1:0]);




always @( get_int_pri1_req
       or int_pri1_req[32:0]
       or int_pri0_req[32:0]
       or int_pri3_req[32:0]
       or int_pri2_req[32:0]
       or get_int_pri0_req
       or get_int_pri2_req)
begin
  if(get_int_pri0_req)
    post_arb_int_req[INT_NUM-1:0] = int_pri0_req[INT_NUM-1:0];
  else if(get_int_pri1_req)
    post_arb_int_req[INT_NUM-1:0] = int_pri1_req[INT_NUM-1:0];
  else if(get_int_pri2_req)
    post_arb_int_req[INT_NUM-1:0] = int_pri2_req[INT_NUM-1:0];
  else
    post_arb_int_req[INT_NUM-1:0] = int_pri3_req[INT_NUM-1:0];

end







always @( int_priority_14[1:0]
       or int_priority_19[1:0]
       or int_priority_10[1:0]
       or int_priority_7[1:0]
       or int_priority_13[1:0]
       or int_priority_15[1:0]
       or int_active[1:0]
       or int_priority_2[1:0]
       or int_priority_21[1:0]
       or int_priority_3[1:0]
       or int_priority_5[1:0]
       or int_priority_22[1:0]
       or post_arb_int_req
       or int_priority_32[1:0]
       or int_priority_11[1:0]
       or int_priority_28[1:0]
       or int_priority_6[1:0]
       or int_priority_16[1:0]
       or int_priority_18[1:0]
       or int_priority_17[1:0]
       or int_priority_27[1:0]
       or int_priority_12[1:0]
       or int_priority_25[1:0]
       or int_priority_4[1:0]
       or int_priority_0[1:0]
       or int_priority_8[1:0]
       or int_priority_31[1:0]
       or int_priority_24[1:0]
       or int_priority_26[1:0]
       or int_active[32:1]
       or int_priority_23[1:0]
       or int_priority_29[1:0]
       or int_priority_20[1:0]
       or int_priority_30[1:0]
       or int_priority_9[1:0]
       or int_priority_1[1:0])
begin
  casez(post_arb_int_req)
    33'b????????????????????????????????1: begin arb1_int_vec[5:0] = 6'd0;  arb1_int_pri[1:0] = int_priority_0[1:0];  arb1_int_active = int_active[0]; end
    33'b???????????????????????????????10: begin arb1_int_vec[5:0] = 6'd1;  arb1_int_pri[1:0] = int_priority_1[1:0];  arb1_int_active = int_active[1]; end
    33'b??????????????????????????????100: begin arb1_int_vec[5:0] = 6'd2;  arb1_int_pri[1:0] = int_priority_2[1:0];  arb1_int_active = int_active[2]; end
    33'b?????????????????????????????1000: begin arb1_int_vec[5:0] = 6'd3;  arb1_int_pri[1:0] = int_priority_3[1:0];  arb1_int_active = int_active[3]; end
    33'b????????????????????????????10000: begin arb1_int_vec[5:0] = 6'd4;  arb1_int_pri[1:0] = int_priority_4[1:0];  arb1_int_active = int_active[4]; end
    33'b???????????????????????????100000: begin arb1_int_vec[5:0] = 6'd5;  arb1_int_pri[1:0] = int_priority_5[1:0];  arb1_int_active = int_active[5]; end
    33'b??????????????????????????1000000: begin arb1_int_vec[5:0] = 6'd6;  arb1_int_pri[1:0] = int_priority_6[1:0];  arb1_int_active = int_active[6]; end
    33'b?????????????????????????10000000: begin arb1_int_vec[5:0] = 6'd7;  arb1_int_pri[1:0] = int_priority_7[1:0];  arb1_int_active = int_active[7]; end
    33'b????????????????????????100000000: begin arb1_int_vec[5:0] = 6'd8;  arb1_int_pri[1:0] = int_priority_8[1:0];  arb1_int_active = int_active[8]; end
    33'b???????????????????????1000000000: begin arb1_int_vec[5:0] = 6'd9;  arb1_int_pri[1:0] = int_priority_9[1:0];  arb1_int_active = int_active[9]; end
    33'b??????????????????????10000000000: begin arb1_int_vec[5:0] = 6'd10; arb1_int_pri[1:0] = int_priority_10[1:0]; arb1_int_active = int_active[10]; end
    33'b?????????????????????100000000000: begin arb1_int_vec[5:0] = 6'd11; arb1_int_pri[1:0] = int_priority_11[1:0]; arb1_int_active = int_active[11]; end
    33'b????????????????????1000000000000: begin arb1_int_vec[5:0] = 6'd12; arb1_int_pri[1:0] = int_priority_12[1:0]; arb1_int_active = int_active[12]; end
    33'b???????????????????10000000000000: begin arb1_int_vec[5:0] = 6'd13; arb1_int_pri[1:0] = int_priority_13[1:0]; arb1_int_active = int_active[13]; end
    33'b??????????????????100000000000000: begin arb1_int_vec[5:0] = 6'd14; arb1_int_pri[1:0] = int_priority_14[1:0]; arb1_int_active = int_active[14]; end
    33'b?????????????????1000000000000000: begin arb1_int_vec[5:0] = 6'd15; arb1_int_pri[1:0] = int_priority_15[1:0]; arb1_int_active = int_active[15]; end
    33'b????????????????10000000000000000: begin arb1_int_vec[5:0] = 6'd16; arb1_int_pri[1:0] = int_priority_16[1:0]; arb1_int_active = int_active[16]; end
    33'b???????????????100000000000000000: begin arb1_int_vec[5:0] = 6'd17; arb1_int_pri[1:0] = int_priority_17[1:0]; arb1_int_active = int_active[17]; end
    33'b??????????????1000000000000000000: begin arb1_int_vec[5:0] = 6'd18; arb1_int_pri[1:0] = int_priority_18[1:0]; arb1_int_active = int_active[18]; end
    33'b?????????????10000000000000000000: begin arb1_int_vec[5:0] = 6'd19; arb1_int_pri[1:0] = int_priority_19[1:0]; arb1_int_active = int_active[19]; end
    33'b????????????100000000000000000000: begin arb1_int_vec[5:0] = 6'd20; arb1_int_pri[1:0] = int_priority_20[1:0]; arb1_int_active = int_active[20]; end
    33'b???????????1000000000000000000000: begin arb1_int_vec[5:0] = 6'd21; arb1_int_pri[1:0] = int_priority_21[1:0]; arb1_int_active = int_active[21]; end
    33'b??????????10000000000000000000000: begin arb1_int_vec[5:0] = 6'd22; arb1_int_pri[1:0] = int_priority_22[1:0]; arb1_int_active = int_active[22]; end
    33'b?????????100000000000000000000000: begin arb1_int_vec[5:0] = 6'd23; arb1_int_pri[1:0] = int_priority_23[1:0]; arb1_int_active = int_active[23]; end
    33'b????????1000000000000000000000000: begin arb1_int_vec[5:0] = 6'd24; arb1_int_pri[1:0] = int_priority_24[1:0]; arb1_int_active = int_active[24]; end
    33'b???????10000000000000000000000000: begin arb1_int_vec[5:0] = 6'd25; arb1_int_pri[1:0] = int_priority_25[1:0]; arb1_int_active = int_active[25]; end
    33'b??????100000000000000000000000000: begin arb1_int_vec[5:0] = 6'd26; arb1_int_pri[1:0] = int_priority_26[1:0]; arb1_int_active = int_active[26]; end
    33'b?????1000000000000000000000000000: begin arb1_int_vec[5:0] = 6'd27; arb1_int_pri[1:0] = int_priority_27[1:0]; arb1_int_active = int_active[27]; end
    33'b????10000000000000000000000000000: begin arb1_int_vec[5:0] = 6'd28; arb1_int_pri[1:0] = int_priority_28[1:0]; arb1_int_active = int_active[28]; end
    33'b???100000000000000000000000000000: begin arb1_int_vec[5:0] = 6'd29; arb1_int_pri[1:0] = int_priority_29[1:0]; arb1_int_active = int_active[29]; end
    33'b??1000000000000000000000000000000: begin arb1_int_vec[5:0] = 6'd30; arb1_int_pri[1:0] = int_priority_30[1:0]; arb1_int_active = int_active[30]; end
    33'b?10000000000000000000000000000000: begin arb1_int_vec[5:0] = 6'd31; arb1_int_pri[1:0] = int_priority_31[1:0]; arb1_int_active = int_active[31]; end
    33'b100000000000000000000000000000000: begin arb1_int_vec[5:0] = 6'd32; arb1_int_pri[1:0] = int_priority_32[1:0]; arb1_int_active = int_active[32]; end
    default:                               begin arb1_int_vec[5:0] = 6'bx;  arb1_int_pri[1:0] = 2'bx; arb1_int_active = 1'bx; end
  endcase

end

assign arb1_int_req = |int_req[INT_NUM-1:0];





assign pre_int_vec[7:0] = pad_vic_int_vec[7:0];
assign pre_int_tspend = pad_vic_int_vec[7:0] == 8'b10110;




always @( int_priority_14[1:0]
       or int_priority_19[1:0]
       or int_priority_10[1:0]
       or int_priority_7[1:0]
       or int_priority_13[1:0]
       or int_priority_15[1:0]
       or int_priority_21[1:0]
       or int_priority_2[1:0]
       or int_priority_3[1:0]
       or int_priority_5[1:0]
       or int_priority_22[1:0]
       or int_priority_32[1:0]
       or int_priority_11[1:0]
       or int_priority_28[1:0]
       or int_priority_6[1:0]
       or int_priority_16[1:0]
       or int_priority_18[1:0]
       or pre_int_vec[4:0]
       or int_priority_17[1:0]
       or int_priority_27[1:0]
       or int_priority_12[1:0]
       or pre_int_tspend
       or int_priority_25[1:0]
       or int_priority_4[1:0]
       or int_priority_0[1:0]
       or int_priority_8[1:0]
       or int_priority_31[1:0]
       or int_priority_24[1:0]
       or int_priority_26[1:0]
       or int_priority_23[1:0]
       or int_priority_20[1:0]
       or int_priority_29[1:0]
       or int_priority_30[1:0]
       or int_priority_9[1:0]
       or int_priority_1[1:0])
begin
casez({pre_int_tspend, pre_int_vec[4:0]})
  6'b000000 : arb2_int_pri[1:0] = int_priority_0[1:0]; 
  6'b000001 : arb2_int_pri[1:0] = int_priority_1[1:0]; 
  6'b000010 : arb2_int_pri[1:0] = int_priority_2[1:0]; 
  6'b000011 : arb2_int_pri[1:0] = int_priority_3[1:0]; 
  6'b000100 : arb2_int_pri[1:0] = int_priority_4[1:0]; 
  6'b000101 : arb2_int_pri[1:0] = int_priority_5[1:0]; 
  6'b000110 : arb2_int_pri[1:0] = int_priority_6[1:0]; 
  6'b000111 : arb2_int_pri[1:0] = int_priority_7[1:0]; 
  6'b001000 : arb2_int_pri[1:0] = int_priority_8[1:0]; 
  6'b001001 : arb2_int_pri[1:0] = int_priority_9[1:0]; 
  6'b001010 : arb2_int_pri[1:0] = int_priority_10[1:0];
  6'b001011 : arb2_int_pri[1:0] = int_priority_11[1:0];
  6'b001100 : arb2_int_pri[1:0] = int_priority_12[1:0];
  6'b001101 : arb2_int_pri[1:0] = int_priority_13[1:0];
  6'b001110 : arb2_int_pri[1:0] = int_priority_14[1:0];
  6'b001111 : arb2_int_pri[1:0] = int_priority_15[1:0];
  6'b010000 : arb2_int_pri[1:0] = int_priority_16[1:0];
  6'b010001 : arb2_int_pri[1:0] = int_priority_17[1:0];
  6'b010010 : arb2_int_pri[1:0] = int_priority_18[1:0];
  6'b010011 : arb2_int_pri[1:0] = int_priority_19[1:0];
  6'b010100 : arb2_int_pri[1:0] = int_priority_20[1:0];
  6'b010101 : arb2_int_pri[1:0] = int_priority_21[1:0];
  6'b010110 : arb2_int_pri[1:0] = int_priority_22[1:0];
  6'b010111 : arb2_int_pri[1:0] = int_priority_23[1:0];
  6'b011000 : arb2_int_pri[1:0] = int_priority_24[1:0];
  6'b011001 : arb2_int_pri[1:0] = int_priority_25[1:0];
  6'b011010 : arb2_int_pri[1:0] = int_priority_26[1:0];
  6'b011011 : arb2_int_pri[1:0] = int_priority_27[1:0];
  6'b011100 : arb2_int_pri[1:0] = int_priority_28[1:0];
  6'b011101 : arb2_int_pri[1:0] = int_priority_29[1:0];
  6'b011110 : arb2_int_pri[1:0] = int_priority_30[1:0];
  6'b011111 : arb2_int_pri[1:0] = int_priority_31[1:0];
  6'b1????? : arb2_int_pri[1:0] = int_priority_32[1:0];
  default  : arb2_int_pri[1:0] = 2'bx; 
endcase

end





always @( regs_arb_iptr_thres_prio[1:0])
begin
case (regs_arb_iptr_thres_prio[1:0])
  2'b00  : thres_prio_mask[3:0] = 4'b0000;
  2'b01  : thres_prio_mask[3:0] = 4'b1000;
  2'b10  : thres_prio_mask[3:0] = 4'b1100;
  2'b11  : thres_prio_mask[3:0] = 4'b1110;
  default :thres_prio_mask[3:0] = 4'bx;
endcase

end

assign regs_arb_iptr_expt = (regs_arb_iptr_thres_vect[7:5] == 3'b000) &&
                            (!(regs_arb_iptr_thres_vect[4:0] == 5'b10110));
assign thres_mask[3:0] = (!regs_arb_iptr_en || regs_arb_iptr_expt)
                       ? 4'b1111 : thres_prio_mask[3:0];




always @( arb2_int_pri[1:0])
begin
case (arb2_int_pri[1:0])
  2'b00 : arb2_prio_mask[3:0] = 4'b0000;
  2'b01 : arb2_prio_mask[3:0] = 4'b1000;
  2'b10 : arb2_prio_mask[3:0] = 4'b1100;
  2'b11 : arb2_prio_mask[3:0] = 4'b1110;
  default : arb2_prio_mask[3:0] = 4'bx;
endcase

end

assign pre_int_expt = (pre_int_vec[7:5] == 3'b000) && (!(pre_int_vec[4:0] == 5'b10110));
assign arb2_mask[3:0] = pre_int_expt
                      ? 4'b1111 : arb2_prio_mask[3:0];

assign total_mask[3:0] = thres_mask[3:0] & arb2_mask[3:0];





always @( arb1_int_pri[1:0])
begin
case (arb1_int_pri[1:0])
  2'b00 : arb1_prio_req[3:0] = 4'b1111;   
  2'b01 : arb1_prio_req[3:0] = 4'b0111;
  2'b10 : arb1_prio_req[3:0] = 4'b0011;
  2'b11 : arb1_prio_req[3:0] = 4'b0001;
  default : arb1_prio_req[3:0] = 4'bx;
endcase

end

assign pre_emption = pre_emption_gate &&
                   (|(arb1_prio_req[3:0] & total_mask[3:0]));

assign pre_emption_gate = !arb1_int_active && arb1_int_req;

assign arb_regs_int_en0[31:0]     = kid_xx_int_en[31:0];
assign arb_regs_awake_en0[31:0]   = kid_xx_int_awake_en[31:0];
assign arb_regs_int_pend0[31:0]   = kid_xx_int_pend[31:0];
assign arb_regs_int_active0[31:0] = kid_xx_int_active[31:0];
assign arb_regs_tspend_pend       = kid_xx_int_pend[32];
assign arb_regs_tspend_active     = kid_xx_int_active[32];



assign arb1_int_tspend = arb1_int_vec[5];
assign arb1_int_vec_final[5:0]    = arb1_int_tspend ? 6'b010110 : {1'b1,arb1_int_vec[4:0]};

assign vectpending[7:0]           = arb1_int_req ? {2'b00,arb1_int_vec_final[5:0]} : 8'b0;
assign vectactive[7:0]            = pad_vic_int_vec[7:0];
assign arb_regs_isr[31:0]         = {11'b0,1'b0,vectpending[7:0], 3'b0,1'b0,vectactive[7:0]};






assign arb_awake = ~vic_pad_int_b || pre_emption_gate;

always@(posedge arb_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    vic_pad_int_b  <= 1'b1;
  else 
    vic_pad_int_b  <= ~pre_emption;
end

always@(posedge arb_cpuclk)
begin
  if (pre_emption)
    int_vec_b[5:0] <= ~arb1_int_vec_final[5:0];
end

assign vic_pad_int_vec_b[7:0] = {2'b11,int_vec_b[5:0]};


assign intraw_vld = |intraw_req[31:0];
assign vic_pad_intraw_b = ~intraw_vld;







assign int_ack_tspend   = pad_vic_ack_vec[5:0] == 6'b010110; 
assign int_ack_vec[4:0] = pad_vic_ack_vec[4:0];

always @( int_ack_vec[4:0]
       or int_ack_tspend)
begin
  casez({int_ack_tspend, int_ack_vec[4:0]})
    6'b000000 : arb_int_ack[32:0] = 33'b000000000000000000000000000000001;
    6'b000001 : arb_int_ack[32:0] = 33'b000000000000000000000000000000010;
    6'b000010 : arb_int_ack[32:0] = 33'b000000000000000000000000000000100;
    6'b000011 : arb_int_ack[32:0] = 33'b000000000000000000000000000001000;
    6'b000100 : arb_int_ack[32:0] = 33'b000000000000000000000000000010000;
    6'b000101 : arb_int_ack[32:0] = 33'b000000000000000000000000000100000;
    6'b000110 : arb_int_ack[32:0] = 33'b000000000000000000000000001000000;
    6'b000111 : arb_int_ack[32:0] = 33'b000000000000000000000000010000000;
    6'b001000 : arb_int_ack[32:0] = 33'b000000000000000000000000100000000;
    6'b001001 : arb_int_ack[32:0] = 33'b000000000000000000000001000000000;
    6'b001010 : arb_int_ack[32:0] = 33'b000000000000000000000010000000000;
    6'b001011 : arb_int_ack[32:0] = 33'b000000000000000000000100000000000;
    6'b001100 : arb_int_ack[32:0] = 33'b000000000000000000001000000000000;
    6'b001101 : arb_int_ack[32:0] = 33'b000000000000000000010000000000000;
    6'b001110 : arb_int_ack[32:0] = 33'b000000000000000000100000000000000;
    6'b001111 : arb_int_ack[32:0] = 33'b000000000000000001000000000000000;
    6'b010000 : arb_int_ack[32:0] = 33'b000000000000000010000000000000000;
    6'b010001 : arb_int_ack[32:0] = 33'b000000000000000100000000000000000;
    6'b010010 : arb_int_ack[32:0] = 33'b000000000000001000000000000000000;
    6'b010011 : arb_int_ack[32:0] = 33'b000000000000010000000000000000000;
    6'b010100 : arb_int_ack[32:0] = 33'b000000000000100000000000000000000;
    6'b010101 : arb_int_ack[32:0] = 33'b000000000001000000000000000000000;
    6'b010110 : arb_int_ack[32:0] = 33'b000000000010000000000000000000000;
    6'b010111 : arb_int_ack[32:0] = 33'b000000000100000000000000000000000;
    6'b011000 : arb_int_ack[32:0] = 33'b000000001000000000000000000000000;
    6'b011001 : arb_int_ack[32:0] = 33'b000000010000000000000000000000000;
    6'b011010 : arb_int_ack[32:0] = 33'b000000100000000000000000000000000;
    6'b011011 : arb_int_ack[32:0] = 33'b000001000000000000000000000000000;
    6'b011100 : arb_int_ack[32:0] = 33'b000010000000000000000000000000000;
    6'b011101 : arb_int_ack[32:0] = 33'b000100000000000000000000000000000;
    6'b011110 : arb_int_ack[32:0] = 33'b001000000000000000000000000000000;
    6'b011111 : arb_int_ack[32:0] = 33'b010000000000000000000000000000000;
    6'b1????? : arb_int_ack[32:0] = 33'b100000000000000000000000000000000;
    default   : arb_int_ack[32:0] = 33'bx;
  endcase

end

assign arb_kid_int_ack[32:0] = {33{pad_vic_int_ack}} & arb_int_ack[32:0];




assign int_exit_tspend = pad_vic_int_vec[5:0] == 6'b010110;
assign int_exit_vec[4:0] = pad_vic_int_vec[4:0];

always @( int_exit_tspend
       or int_exit_vec[4:0])
begin
  casez({int_exit_tspend, int_exit_vec[4:0]})
    6'b000000 : arb_int_exit[32:0] = 33'b000000000000000000000000000000001;
    6'b000001 : arb_int_exit[32:0] = 33'b000000000000000000000000000000010;
    6'b000010 : arb_int_exit[32:0] = 33'b000000000000000000000000000000100;
    6'b000011 : arb_int_exit[32:0] = 33'b000000000000000000000000000001000;
    6'b000100 : arb_int_exit[32:0] = 33'b000000000000000000000000000010000;
    6'b000101 : arb_int_exit[32:0] = 33'b000000000000000000000000000100000;
    6'b000110 : arb_int_exit[32:0] = 33'b000000000000000000000000001000000;
    6'b000111 : arb_int_exit[32:0] = 33'b000000000000000000000000010000000;
    6'b001000 : arb_int_exit[32:0] = 33'b000000000000000000000000100000000;
    6'b001001 : arb_int_exit[32:0] = 33'b000000000000000000000001000000000;
    6'b001010 : arb_int_exit[32:0] = 33'b000000000000000000000010000000000;
    6'b001011 : arb_int_exit[32:0] = 33'b000000000000000000000100000000000;
    6'b001100 : arb_int_exit[32:0] = 33'b000000000000000000001000000000000;
    6'b001101 : arb_int_exit[32:0] = 33'b000000000000000000010000000000000;
    6'b001110 : arb_int_exit[32:0] = 33'b000000000000000000100000000000000;
    6'b001111 : arb_int_exit[32:0] = 33'b000000000000000001000000000000000;
    6'b010000 : arb_int_exit[32:0] = 33'b000000000000000010000000000000000;
    6'b010001 : arb_int_exit[32:0] = 33'b000000000000000100000000000000000;
    6'b010010 : arb_int_exit[32:0] = 33'b000000000000001000000000000000000;
    6'b010011 : arb_int_exit[32:0] = 33'b000000000000010000000000000000000;
    6'b010100 : arb_int_exit[32:0] = 33'b000000000000100000000000000000000;
    6'b010101 : arb_int_exit[32:0] = 33'b000000000001000000000000000000000;
    6'b010110 : arb_int_exit[32:0] = 33'b000000000010000000000000000000000;
    6'b010111 : arb_int_exit[32:0] = 33'b000000000100000000000000000000000;
    6'b011000 : arb_int_exit[32:0] = 33'b000000001000000000000000000000000;
    6'b011001 : arb_int_exit[32:0] = 33'b000000010000000000000000000000000;
    6'b011010 : arb_int_exit[32:0] = 33'b000000100000000000000000000000000;
    6'b011011 : arb_int_exit[32:0] = 33'b000001000000000000000000000000000;
    6'b011100 : arb_int_exit[32:0] = 33'b000010000000000000000000000000000;
    6'b011101 : arb_int_exit[32:0] = 33'b000100000000000000000000000000000;
    6'b011110 : arb_int_exit[32:0] = 33'b001000000000000000000000000000000;
    6'b011111 : arb_int_exit[32:0] = 33'b010000000000000000000000000000000;
    6'b1????? : arb_int_exit[32:0] = 33'b100000000000000000000000000000000;
    default: arb_int_exit[32:0] = 33'bx;
  endcase

end
assign int_exit_mask = 1'b0;

assign cpu_int_exit = pad_vic_int_exit && ((pad_vic_int_vec[7:5] == 3'b001) || int_exit_tspend) && !int_exit_mask;

assign arb_kid_int_exit[32:0] = {33{cpu_int_exit}} & arb_int_exit[32:0];

assign arb_regs_iptr_clr = regs_arb_iptr_en && pad_vic_int_exit && !int_exit_mask &&
                          (pad_vic_int_vec[7:0] == regs_arb_iptr_thres_vect[7:0]);



endmodule
























module nm_intc_kid(
  active_cpuclk,
  active_wdata,
  awake_disable,
  awake_enable,
  clear_enable,
  cpurst_b,
  ctl_xx_iabr_write,
  int_ack,
  int_exit,
  kid_arb_active_en,
  kid_arb_int_active,
  kid_arb_int_pri,
  kid_arb_int_req,
  kid_arb_intraw_req,
  kid_arb_pending_en,
  kid_arb_sample_en,
  kid_xx_int_active,
  kid_xx_int_awake_en,
  kid_xx_int_en,
  kid_xx_int_pend,
  kid_xx_int_pri,
  pad_vic_int_cfg,
  pad_vic_int_vld,
  pending_cpuclk,
  pri_cpuclk,
  pri_value,
  regs_cpuclk,
  sample_cpuclk,
  set_enable,
  sw_clear_pending,
  sw_set_pending,
  wr_priority
);


input          active_cpuclk;       
input          active_wdata;        
input          awake_disable;       
input          awake_enable;        
input          clear_enable;        
input          cpurst_b;            
input          ctl_xx_iabr_write;   
input          int_ack;             
input          int_exit;            
input          pad_vic_int_cfg;     
input          pad_vic_int_vld;     
input          pending_cpuclk;      
input          pri_cpuclk;          
input   [1:0]  pri_value;           
input          regs_cpuclk;         
input          sample_cpuclk;       
input          set_enable;          
input          sw_clear_pending;    
input          sw_set_pending;      
input          wr_priority;         
output         kid_arb_active_en;   
output         kid_arb_int_active;  
output  [1:0]  kid_arb_int_pri;     
output         kid_arb_int_req;     
output         kid_arb_intraw_req;  
output         kid_arb_pending_en;  
output         kid_arb_sample_en;   
output         kid_xx_int_active;   
output         kid_xx_int_awake_en; 
output         kid_xx_int_en;       
output         kid_xx_int_pend;     
output  [1:0]  kid_xx_int_pri;      


reg            int_active;          
reg            int_awake_en;        
reg            int_awake_updt_val;  
reg            int_enable;          
reg            int_enable_updt_val; 
reg            int_pending;         
reg            int_pending_updt_val; 
reg     [1:0]  int_priority;        
reg            int_vld_ff;          


wire           active_clear;        
wire           active_cpuclk;       
wire           active_set;          
wire           active_wdata;        
wire           awake_disable;       
wire           awake_enable;        
wire           clear_enable;        
wire           cpurst_b;            
wire           ctl_xx_iabr_write;   
wire           int_ack;             
wire           int_awake_updt_vld;  
wire           int_cfg;             
wire           int_enable_updt_vld; 
wire           int_exit;            
wire           int_level;           
wire           int_pending_updt_vld; 
wire           int_pulse;           
wire           int_vld;             
wire           kid_arb_active_en;   
wire           kid_arb_int_active;  
wire    [1:0]  kid_arb_int_pri;     
wire           kid_arb_int_req;     
wire           kid_arb_intraw_req;  
wire           kid_arb_pending_en;  
wire           kid_arb_sample_en;   
wire           kid_xx_int_active;   
wire           kid_xx_int_awake_en; 
wire           kid_xx_int_en;       
wire           kid_xx_int_pend;     
wire    [1:0]  kid_xx_int_pri;      
wire           op_en;               
wire           pad_vic_int_cfg;     
wire           pad_vic_int_vld;     
wire           pending_clear;       
wire           pending_cpuclk;      
wire           pending_set;         
wire           pri_cpuclk;          
wire    [1:0]  pri_value;           
wire           regs_cpuclk;         
wire           sample_cpuclk;       
wire           set_enable;          
wire           sw_clear_pending;    
wire           sw_set_pending;      
wire           wr_priority;         





assign int_vld = pad_vic_int_vld;
assign int_cfg = pad_vic_int_cfg;




assign int_level = int_vld && !int_cfg && 
                  !int_ack && (!int_active || int_exit); 





assign kid_arb_sample_en = int_cfg & (int_vld ^ int_vld_ff);


always@(posedge sample_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_vld_ff <= 1'b0;
  else 
    int_vld_ff <= int_vld;
end

assign int_pulse = int_cfg && int_vld && !int_vld_ff;











assign op_en = 1'b1;





assign int_enable_updt_vld = op_en && (set_enable || clear_enable);


always @( op_en
       or set_enable
       or clear_enable
       or int_enable)
begin
if (set_enable && op_en)
  int_enable_updt_val = 1'b1;
else if (clear_enable && op_en)
  int_enable_updt_val = 1'b0;
else
  int_enable_updt_val = int_enable;

end

always@(posedge regs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_enable <= 1'b0;
  else if(int_enable_updt_vld)
    int_enable <= int_enable_updt_val;
  else
    int_enable <= int_enable;
end 




assign int_awake_updt_vld = awake_enable || awake_disable;


always @( awake_disable
       or int_awake_en
       or awake_enable)
begin
if(awake_enable)
  int_awake_updt_val = 1'b1;
else if (awake_disable)
  int_awake_updt_val = 1'b0;
else
  int_awake_updt_val = int_awake_en;

end

always@(posedge regs_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_awake_en <= 1'b0;
  else if(int_awake_updt_vld)
    int_awake_en <= int_awake_updt_val;
  else
    int_awake_en <= int_awake_en;
end




assign pending_set = op_en && sw_set_pending ||
                     int_level ||
                     int_pulse;


assign pending_clear = op_en && sw_clear_pending ||
                       int_ack;

assign kid_arb_pending_en = !int_pending & pending_set || 
                             int_pending & pending_clear & !pending_set;

assign int_pending_updt_vld = pending_set || pending_clear;


always @( pending_set
       or pending_clear
       or int_pending)
begin
if (pending_set)
  int_pending_updt_val = 1'b1;
else if (pending_clear)
  int_pending_updt_val = 1'b0;
else
  int_pending_updt_val = int_pending;

end

always@(posedge pending_cpuclk or negedge cpurst_b)
begin
  if (!cpurst_b)
    int_pending <= 1'b0;
  else if (int_pending_updt_vld)
    int_pending <= int_pending_updt_val;
  else 
    int_pending <= int_pending;
end





assign active_set = int_ack || ctl_xx_iabr_write && active_wdata && op_en;
assign active_clear = int_exit || ctl_xx_iabr_write && !active_wdata && op_en;

assign kid_arb_active_en = !int_active & active_set || 
                            int_active & active_clear;

always@(posedge active_cpuclk or negedge cpurst_b)
begin
  if (!cpurst_b)
    int_active <= 1'b0;
  else if (active_set)
    int_active <= 1'b1;
  else if (active_clear)
    int_active <= 1'b0;
end




always@(posedge pri_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_priority[1:0] <= 2'b00;
  else if(wr_priority && op_en)
    int_priority[1:0] <= pri_value[1:0];
end






assign kid_arb_int_req    = int_enable & int_pending;
assign kid_arb_intraw_req = int_awake_en & int_pending;
assign kid_arb_int_active = int_active;
assign kid_arb_int_pri[1:0] = int_priority[1:0];



assign kid_xx_int_en       = int_enable && op_en;
assign kid_xx_int_awake_en = int_awake_en && op_en;
assign kid_xx_int_pend     = int_pending && op_en;
assign kid_xx_int_active   = int_active && op_en;
assign kid_xx_int_pri[1:0] = int_priority[1:0] & {2{op_en}};







endmodule
























module nm_intc_primsk_encode(
  int_p0_msk,
  int_p1_msk,
  int_p2_msk,
  int_p3_msk,
  int_priority
);


input   [1:0]  int_priority; 
output         int_p0_msk;  
output         int_p1_msk;  
output         int_p2_msk;  
output         int_p3_msk;  


reg     [3:0]  primsk;      


wire           int_p0_msk;  
wire           int_p1_msk;  
wire           int_p2_msk;  
wire           int_p3_msk;  
wire    [1:0]  int_priority; 





always @( int_priority[1:0])
begin
case(int_priority[1:0])
  2'b00  : primsk[3:0] = 4'b0001;
  2'b01  : primsk[3:0] = 4'b0010;
  2'b10  : primsk[3:0] = 4'b0100;
  2'b11  : primsk[3:0] = 4'b1000;
  default: primsk[3:0] = 4'bxxxx;
endcase

end

assign int_p0_msk = primsk[0];
assign int_p1_msk = primsk[1];
assign int_p2_msk = primsk[2];
assign int_p3_msk = primsk[3];


endmodule
























module nm_intc_regs_if(
  arb_regs_awake_en0,
  arb_regs_int_active0,
  arb_regs_int_en0,
  arb_regs_int_pend0,
  arb_regs_int_pri_0,
  arb_regs_int_pri_1,
  arb_regs_int_pri_10,
  arb_regs_int_pri_11,
  arb_regs_int_pri_12,
  arb_regs_int_pri_13,
  arb_regs_int_pri_14,
  arb_regs_int_pri_15,
  arb_regs_int_pri_16,
  arb_regs_int_pri_17,
  arb_regs_int_pri_18,
  arb_regs_int_pri_19,
  arb_regs_int_pri_2,
  arb_regs_int_pri_20,
  arb_regs_int_pri_21,
  arb_regs_int_pri_22,
  arb_regs_int_pri_23,
  arb_regs_int_pri_24,
  arb_regs_int_pri_25,
  arb_regs_int_pri_26,
  arb_regs_int_pri_27,
  arb_regs_int_pri_28,
  arb_regs_int_pri_29,
  arb_regs_int_pri_3,
  arb_regs_int_pri_30,
  arb_regs_int_pri_31,
  arb_regs_int_pri_4,
  arb_regs_int_pri_5,
  arb_regs_int_pri_6,
  arb_regs_int_pri_7,
  arb_regs_int_pri_8,
  arb_regs_int_pri_9,
  arb_regs_int_pri_ts,
  arb_regs_iptr_clr,
  arb_regs_isr,
  arb_regs_tspend_active,
  arb_regs_tspend_pend,
  cpurst_b,
  ctl_gate_awake_dis,
  ctl_gate_awake_en,
  ctl_gate_clr_enable,
  ctl_gate_clr_sec,
  ctl_gate_set_enable,
  ctl_gate_set_sec,
  ctl_gate_wrt_ipr0,
  ctl_gate_wrt_ipr1,
  ctl_gate_wrt_ipr2,
  ctl_gate_wrt_ipr3,
  ctl_gate_wrt_ipr4,
  ctl_gate_wrt_ipr5,
  ctl_gate_wrt_ipr6,
  ctl_gate_wrt_ipr7,
  ctl_gate_wrt_tspr,
  ctl_xx_awake_disable,
  ctl_xx_awake_enable,
  ctl_xx_clear_enable,
  ctl_xx_clear_pending,
  ctl_xx_clr_tspend,
  ctl_xx_iabr_write,
  ctl_xx_pri_value_0,
  ctl_xx_pri_value_1,
  ctl_xx_pri_value_2,
  ctl_xx_pri_value_3,
  ctl_xx_pri_value_ts,
  ctl_xx_set_enable,
  ctl_xx_set_pending,
  ctl_xx_set_tspend,
  ctl_xx_tsabr_write,
  ctl_xx_wr_priority,
  ctl_xx_wr_priority_ts,
  iptr_clk_en,
  iptr_cpuclk,
  regs_arb_iptr_en,
  regs_arb_iptr_thres_prio,
  regs_arb_iptr_thres_vect,
  tcipif_vic_addr,
  tcipif_vic_sel,
  tcipif_vic_wdata,
  tcipif_vic_write,
  vic_tcipif_cmplt,
  vic_tcipif_rdata
);


input   [31:0]  arb_regs_awake_en0;      
input   [31:0]  arb_regs_int_active0;    
input   [31:0]  arb_regs_int_en0;        
input   [31:0]  arb_regs_int_pend0;      
input   [7 :0]  arb_regs_int_pri_0;      
input   [7 :0]  arb_regs_int_pri_1;      
input   [7 :0]  arb_regs_int_pri_10;     
input   [7 :0]  arb_regs_int_pri_11;     
input   [7 :0]  arb_regs_int_pri_12;     
input   [7 :0]  arb_regs_int_pri_13;     
input   [7 :0]  arb_regs_int_pri_14;     
input   [7 :0]  arb_regs_int_pri_15;     
input   [7 :0]  arb_regs_int_pri_16;     
input   [7 :0]  arb_regs_int_pri_17;     
input   [7 :0]  arb_regs_int_pri_18;     
input   [7 :0]  arb_regs_int_pri_19;     
input   [7 :0]  arb_regs_int_pri_2;      
input   [7 :0]  arb_regs_int_pri_20;     
input   [7 :0]  arb_regs_int_pri_21;     
input   [7 :0]  arb_regs_int_pri_22;     
input   [7 :0]  arb_regs_int_pri_23;     
input   [7 :0]  arb_regs_int_pri_24;     
input   [7 :0]  arb_regs_int_pri_25;     
input   [7 :0]  arb_regs_int_pri_26;     
input   [7 :0]  arb_regs_int_pri_27;     
input   [7 :0]  arb_regs_int_pri_28;     
input   [7 :0]  arb_regs_int_pri_29;     
input   [7 :0]  arb_regs_int_pri_3;      
input   [7 :0]  arb_regs_int_pri_30;     
input   [7 :0]  arb_regs_int_pri_31;     
input   [7 :0]  arb_regs_int_pri_4;      
input   [7 :0]  arb_regs_int_pri_5;      
input   [7 :0]  arb_regs_int_pri_6;      
input   [7 :0]  arb_regs_int_pri_7;      
input   [7 :0]  arb_regs_int_pri_8;      
input   [7 :0]  arb_regs_int_pri_9;      
input   [7 :0]  arb_regs_int_pri_ts;     
input           arb_regs_iptr_clr;       
input   [31:0]  arb_regs_isr;            
input           arb_regs_tspend_active;  
input           arb_regs_tspend_pend;    
input           cpurst_b;                
input           iptr_cpuclk;             
input   [15:0]  tcipif_vic_addr;         
input           tcipif_vic_sel;          
input   [31:0]  tcipif_vic_wdata;        
input           tcipif_vic_write;        
output          ctl_gate_awake_dis;      
output          ctl_gate_awake_en;       
output          ctl_gate_clr_enable;     
output          ctl_gate_clr_sec;        
output          ctl_gate_set_enable;     
output          ctl_gate_set_sec;        
output          ctl_gate_wrt_ipr0;       
output          ctl_gate_wrt_ipr1;       
output          ctl_gate_wrt_ipr2;       
output          ctl_gate_wrt_ipr3;       
output          ctl_gate_wrt_ipr4;       
output          ctl_gate_wrt_ipr5;       
output          ctl_gate_wrt_ipr6;       
output          ctl_gate_wrt_ipr7;       
output          ctl_gate_wrt_tspr;       
output  [31:0]  ctl_xx_awake_disable;    
output  [31:0]  ctl_xx_awake_enable;     
output  [31:0]  ctl_xx_clear_enable;     
output  [31:0]  ctl_xx_clear_pending;    
output          ctl_xx_clr_tspend;       
output          ctl_xx_iabr_write;       
output  [1 :0]  ctl_xx_pri_value_0;      
output  [1 :0]  ctl_xx_pri_value_1;      
output  [1 :0]  ctl_xx_pri_value_2;      
output  [1 :0]  ctl_xx_pri_value_3;      
output  [1 :0]  ctl_xx_pri_value_ts;     
output  [31:0]  ctl_xx_set_enable;       
output  [31:0]  ctl_xx_set_pending;      
output          ctl_xx_set_tspend;       
output          ctl_xx_tsabr_write;      
output  [31:0]  ctl_xx_wr_priority;      
output          ctl_xx_wr_priority_ts;   
output          iptr_clk_en;             
output          regs_arb_iptr_en;        
output  [1 :0]  regs_arb_iptr_thres_prio; 
output  [7 :0]  regs_arb_iptr_thres_vect; 
output          vic_tcipif_cmplt;        
output  [31:0]  vic_tcipif_rdata;        


reg     [31:0]  ctrl_value;              
reg             iptr_en;                 
reg     [1 :0]  iptr_thres_prio;         
reg     [7 :0]  iptr_thres_vect;         


wire    [31:0]  arb_regs_awake_en0;      
wire    [31:0]  arb_regs_int_active0;    
wire    [31:0]  arb_regs_int_en0;        
wire    [31:0]  arb_regs_int_pend0;      
wire    [7 :0]  arb_regs_int_pri_0;      
wire    [7 :0]  arb_regs_int_pri_1;      
wire    [7 :0]  arb_regs_int_pri_10;     
wire    [7 :0]  arb_regs_int_pri_11;     
wire    [7 :0]  arb_regs_int_pri_12;     
wire    [7 :0]  arb_regs_int_pri_13;     
wire    [7 :0]  arb_regs_int_pri_14;     
wire    [7 :0]  arb_regs_int_pri_15;     
wire    [7 :0]  arb_regs_int_pri_16;     
wire    [7 :0]  arb_regs_int_pri_17;     
wire    [7 :0]  arb_regs_int_pri_18;     
wire    [7 :0]  arb_regs_int_pri_19;     
wire    [7 :0]  arb_regs_int_pri_2;      
wire    [7 :0]  arb_regs_int_pri_20;     
wire    [7 :0]  arb_regs_int_pri_21;     
wire    [7 :0]  arb_regs_int_pri_22;     
wire    [7 :0]  arb_regs_int_pri_23;     
wire    [7 :0]  arb_regs_int_pri_24;     
wire    [7 :0]  arb_regs_int_pri_25;     
wire    [7 :0]  arb_regs_int_pri_26;     
wire    [7 :0]  arb_regs_int_pri_27;     
wire    [7 :0]  arb_regs_int_pri_28;     
wire    [7 :0]  arb_regs_int_pri_29;     
wire    [7 :0]  arb_regs_int_pri_3;      
wire    [7 :0]  arb_regs_int_pri_30;     
wire    [7 :0]  arb_regs_int_pri_31;     
wire    [7 :0]  arb_regs_int_pri_4;      
wire    [7 :0]  arb_regs_int_pri_5;      
wire    [7 :0]  arb_regs_int_pri_6;      
wire    [7 :0]  arb_regs_int_pri_7;      
wire    [7 :0]  arb_regs_int_pri_8;      
wire    [7 :0]  arb_regs_int_pri_9;      
wire    [7 :0]  arb_regs_int_pri_ts;     
wire            arb_regs_iptr_clr;       
wire    [31:0]  arb_regs_isr;            
wire            arb_regs_tspend_active;  
wire            arb_regs_tspend_pend;    
wire            cpurst_b;                
wire            ctl_gate_awake_dis;      
wire            ctl_gate_awake_en;       
wire            ctl_gate_clr_enable;     
wire            ctl_gate_clr_sec;        
wire            ctl_gate_set_enable;     
wire            ctl_gate_set_sec;        
wire            ctl_gate_wrt_ipr0;       
wire            ctl_gate_wrt_ipr1;       
wire            ctl_gate_wrt_ipr2;       
wire            ctl_gate_wrt_ipr3;       
wire            ctl_gate_wrt_ipr4;       
wire            ctl_gate_wrt_ipr5;       
wire            ctl_gate_wrt_ipr6;       
wire            ctl_gate_wrt_ipr7;       
wire            ctl_gate_wrt_tspr;       
wire    [31:0]  ctl_xx_awake_disable;    
wire    [31:0]  ctl_xx_awake_enable;     
wire    [31:0]  ctl_xx_clear_enable;     
wire    [31:0]  ctl_xx_clear_pending;    
wire            ctl_xx_clr_tspend;       
wire            ctl_xx_iabr_write;       
wire    [1 :0]  ctl_xx_pri_value_0;      
wire    [1 :0]  ctl_xx_pri_value_1;      
wire    [1 :0]  ctl_xx_pri_value_2;      
wire    [1 :0]  ctl_xx_pri_value_3;      
wire    [1 :0]  ctl_xx_pri_value_ts;     
wire    [31:0]  ctl_xx_set_enable;       
wire    [31:0]  ctl_xx_set_pending;      
wire            ctl_xx_set_tspend;       
wire            ctl_xx_tsabr_write;      
wire    [31:0]  ctl_xx_wr_priority;      
wire            ctl_xx_wr_priority_ts;   
wire    [11:0]  ctrl_reg_addr;           
wire            iptr_clk_en;             
wire            iptr_cpuclk;             
wire    [31:0]  iptr_value;              
wire            iptr_wen;                
wire            regs_arb_iptr_en;        
wire    [1 :0]  regs_arb_iptr_thres_prio; 
wire    [7 :0]  regs_arb_iptr_thres_vect; 
wire    [15:0]  tcipif_vic_addr;         
wire            tcipif_vic_sel;          
wire    [31:0]  tcipif_vic_wdata;        
wire            tcipif_vic_write;        
wire            vic_tcipif_cmplt;        
wire    [31:0]  vic_tcipif_rdata;        
wire            write_iabr0;             
wire            write_icer0;             
wire            write_icpr0;             
wire            write_ipr0;              
wire            write_ipr1;              
wire            write_ipr2;              
wire            write_ipr3;              
wire            write_ipr4;              
wire            write_ipr5;              
wire            write_ipr6;              
wire            write_ipr7;              
wire            write_iptr;              
wire            write_iser0;             
wire            write_ispr0;             
wire            write_iwdr0;             
wire            write_iwer0;             
wire            write_tspr;              





parameter ISER0 = 12'h100;
parameter IWER0 = 12'h140;
parameter ICER0 = 12'h180;
parameter IWDR0 = 12'h1c0;
parameter ISPR0 = 12'h200;
parameter ISSR0 = 12'h240;
parameter ICPR0 = 12'h280;
parameter ICSR0 = 12'h2c0;
parameter IABR0 = 12'h300;
parameter IPR0  = 12'h400;
parameter IPR1  = 12'h404;
parameter IPR2  = 12'h408;
parameter IPR3  = 12'h40c;
parameter IPR4  = 12'h410;
parameter IPR5  = 12'h414;
parameter IPR6  = 12'h418;
parameter IPR7  = 12'h41c;
parameter ISR   = 12'hc00;
parameter IPTR  = 12'hc04;
parameter TSPEND= 12'hc08;
parameter TSABR = 12'hc0c;
parameter TSPR  = 12'hc10;




assign vic_tcipif_cmplt       = tcipif_vic_sel;
assign vic_tcipif_rdata[31:0] = ctrl_value[31:0];






assign ctrl_reg_addr[11:0] = {12{tcipif_vic_sel}} & tcipif_vic_addr[11:0];




always @( arb_regs_int_pri_14[7:0]
       or arb_regs_int_pri_26[7:0]
       or arb_regs_tspend_pend
       or arb_regs_int_pri_10[7:0]
       or arb_regs_int_pri_ts[7:0]
       or arb_regs_int_pri_3[7:0]
       or arb_regs_int_pri_31[7:0]
       or arb_regs_awake_en0[31:0]
       or arb_regs_int_pri_13[7:0]
       or arb_regs_int_pri_24[7:0]
       or arb_regs_int_pri_11[7:0]
       or arb_regs_int_pri_8[7:0]
       or arb_regs_int_pri_15[7:0]
       or arb_regs_tspend_active
       or arb_regs_int_pri_4[7:0]
       or arb_regs_int_pri_16[7:0]
       or arb_regs_int_pri_17[7:0]
       or arb_regs_int_pri_6[7:0]
       or arb_regs_int_pri_22[7:0]
       or ctrl_reg_addr[11:0]
       or arb_regs_int_pri_1[7:0]
       or arb_regs_int_pri_23[7:0]
       or arb_regs_int_pri_7[7:0]
       or arb_regs_int_pri_29[7:0]
       or arb_regs_int_pri_2[7:0]
       or arb_regs_int_pri_5[7:0]
       or arb_regs_int_en0[31:0]
       or arb_regs_int_pri_27[7:0]
       or arb_regs_int_pri_25[7:0]
       or arb_regs_int_pend0[31:0]
       or arb_regs_int_pri_20[7:0]
       or arb_regs_int_pri_0[7:0]
       or arb_regs_int_active0[31:0]
       or arb_regs_isr[31:0]
       or arb_regs_int_pri_9[7:0]
       or arb_regs_int_pri_18[7:0]
       or arb_regs_int_pri_30[7:0]
       or iptr_value[31:0]
       or arb_regs_int_pri_28[7:0]
       or arb_regs_int_pri_21[7:0]
       or arb_regs_int_pri_12[7:0]
       or arb_regs_int_pri_19[7:0])
begin
case(ctrl_reg_addr[11:0])
  ISER0  : ctrl_value[31:0] = arb_regs_int_en0[31:0];    //enable0 register
  IWER0  : ctrl_value[31:0] = arb_regs_awake_en0[31:0];  //wakeup enable0 register
  ICER0  : ctrl_value[31:0] = arb_regs_int_en0[31:0];    //enable0 register
  IWDR0  : ctrl_value[31:0] = arb_regs_awake_en0[31:0];  //wakeup enable0 register
  ISPR0  : ctrl_value[31:0] = arb_regs_int_pend0[31:0];  //pending0 register
  ICPR0  : ctrl_value[31:0] = arb_regs_int_pend0[31:0];  //pending0 register
  IABR0  : ctrl_value[31:0] = arb_regs_int_active0[31:0];//active0 register
  IPR0   : ctrl_value[31:0] = {arb_regs_int_pri_3[7:0],
                               arb_regs_int_pri_2[7:0],
                               arb_regs_int_pri_1[7:0],
                               arb_regs_int_pri_0[7:0]}; //pri3,pri2,pri1,pri0 register
  TSPEND : ctrl_value[31:0] = {31'b0, arb_regs_tspend_pend};
  TSABR  : ctrl_value[31:0] = {31'b0, arb_regs_tspend_active};
  TSPR   : ctrl_value[31:0] = {24'b0, arb_regs_int_pri_ts[7:0]};
  IPR1   : ctrl_value[31:0] = {arb_regs_int_pri_7[7:0],
                               arb_regs_int_pri_6[7:0],
                               arb_regs_int_pri_5[7:0],
                               arb_regs_int_pri_4[7:0]}; //pri7,pri6,pri5,pri4 register
  IPR2   : ctrl_value[31:0] = {arb_regs_int_pri_11[7:0],
                               arb_regs_int_pri_10[7:0],
                               arb_regs_int_pri_9[7:0],
                               arb_regs_int_pri_8[7:0]}; //pri11,pri10,pri9,pri8 register
  IPR3   : ctrl_value[31:0] = {arb_regs_int_pri_15[7:0],
                               arb_regs_int_pri_14[7:0],
                               arb_regs_int_pri_13[7:0],
                               arb_regs_int_pri_12[7:0]};//pri15,pri14,pri13,pri12 register
  IPR4   : ctrl_value[31:0] = {arb_regs_int_pri_19[7:0],
                               arb_regs_int_pri_18[7:0],
                               arb_regs_int_pri_17[7:0],
                               arb_regs_int_pri_16[7:0]};//pri19,pri18,pri17,pri16 register
  IPR5   : ctrl_value[31:0] = {arb_regs_int_pri_23[7:0],
                               arb_regs_int_pri_22[7:0],
                               arb_regs_int_pri_21[7:0],
                               arb_regs_int_pri_20[7:0]};//pri23,pri22,pri21,pri20 register
  IPR6   : ctrl_value[31:0] = {arb_regs_int_pri_27[7:0],
                               arb_regs_int_pri_26[7:0],
                               arb_regs_int_pri_25[7:0],
                               arb_regs_int_pri_24[7:0]};//pri27,pri26,pri25,pri24 register
  IPR7   : ctrl_value[31:0] = {arb_regs_int_pri_31[7:0],
                               arb_regs_int_pri_30[7:0],
                               arb_regs_int_pri_29[7:0],
                               arb_regs_int_pri_28[7:0]};//pri31,pri30,pri29,pri28 register
  ISR    : ctrl_value[31:0] = arb_regs_isr[31:0];        //interrupt status register
  IPTR   : ctrl_value[31:0] = iptr_value[31:0];          //interrupt threshold priority register
  default: ctrl_value[31:0] = 32'b0;
endcase

end





assign write_iser0 = (ctrl_reg_addr[11:0] == ISER0) & tcipif_vic_write;
assign write_icer0 = (ctrl_reg_addr[11:0] == ICER0) & tcipif_vic_write;
assign write_iwer0 = (ctrl_reg_addr[11:0] == IWER0) & tcipif_vic_write;
assign write_iwdr0 = (ctrl_reg_addr[11:0] == IWDR0) & tcipif_vic_write;
assign write_ispr0 = (ctrl_reg_addr[11:0] == ISPR0) & tcipif_vic_write;
assign write_icpr0 = (ctrl_reg_addr[11:0] == ICPR0) & tcipif_vic_write;
assign write_iptr  = (ctrl_reg_addr[11:0] == IPTR)  & tcipif_vic_write;
assign write_iabr0 = (ctrl_reg_addr[11:0] == IABR0) & tcipif_vic_write;

assign ctl_gate_set_enable  = write_iser0;
assign ctl_gate_clr_enable  = write_icer0;

assign ctl_gate_awake_en    = write_iwer0;
assign ctl_gate_awake_dis   = write_iwdr0;

assign ctl_gate_set_sec     = 1'b0;
assign ctl_gate_clr_sec     = 1'b0;
assign ctl_xx_iabr_write   = write_iabr0;

assign ctl_xx_set_enable[31:0]    = {32{write_iser0}} & tcipif_vic_wdata[31:0];
assign ctl_xx_clear_enable[31:0]  = {32{write_icer0}} & tcipif_vic_wdata[31:0];
assign ctl_xx_awake_enable[31:0]  = {32{write_iwer0}} & tcipif_vic_wdata[31:0];
assign ctl_xx_awake_disable[31:0] = {32{write_iwdr0}} & tcipif_vic_wdata[31:0];
assign ctl_xx_set_pending[31:0]   = {32{write_ispr0}} & tcipif_vic_wdata[31:0];
assign ctl_xx_clear_pending[31:0] = {32{write_icpr0}} & tcipif_vic_wdata[31:0];


assign write_tspr               = (ctrl_reg_addr[11:0] == TSPR) & tcipif_vic_write;
assign ctl_xx_wr_priority_ts    = write_tspr;
assign ctl_xx_pri_value_ts[1:0] = tcipif_vic_wdata[7:6];
assign ctl_xx_set_tspend        = (ctrl_reg_addr[11:0] == TSPEND) & tcipif_vic_write & tcipif_vic_wdata[0];
assign ctl_xx_clr_tspend        = (ctrl_reg_addr[11:0] == TSPEND) & tcipif_vic_write & tcipif_vic_wdata[1];
assign ctl_xx_tsabr_write       = (ctrl_reg_addr[11:0] == TSABR)  & tcipif_vic_write;
assign ctl_gate_wrt_tspr = write_tspr;

assign write_ipr0        = (ctrl_reg_addr[11:0] == IPR0) & tcipif_vic_write;
assign ctl_gate_wrt_ipr0 = write_ipr0;

assign ctl_xx_wr_priority[3:0] = {4{write_ipr0}};
assign write_ipr1 = (ctrl_reg_addr[11:0] == IPR1) & tcipif_vic_write;
assign ctl_gate_wrt_ipr1       = write_ipr1;
assign ctl_xx_wr_priority[7:4] = {4{write_ipr1}};

assign ctl_xx_pri_value_0[1:0] = tcipif_vic_wdata[7:6];
assign ctl_xx_pri_value_1[1:0] = tcipif_vic_wdata[15:14];
assign ctl_xx_pri_value_2[1:0] = tcipif_vic_wdata[23:22];
assign ctl_xx_pri_value_3[1:0] = tcipif_vic_wdata[31:30];
assign write_ipr2                = (ctrl_reg_addr[11:0] == IPR2) & tcipif_vic_write;
assign ctl_gate_wrt_ipr2         = write_ipr2;
assign ctl_xx_wr_priority[11:8]  = {4{write_ipr2}};
assign write_ipr3                = (ctrl_reg_addr[11:0] == IPR3) & tcipif_vic_write;
assign ctl_gate_wrt_ipr3         = write_ipr3;
assign ctl_xx_wr_priority[15:12] = {4{write_ipr3}};
assign write_ipr4                = (ctrl_reg_addr[11:0] == IPR4) & tcipif_vic_write;
assign ctl_gate_wrt_ipr4         = write_ipr4;
assign ctl_xx_wr_priority[19:16] = {4{write_ipr4}};
assign write_ipr5                = (ctrl_reg_addr[11:0] == IPR5) & tcipif_vic_write;
assign ctl_gate_wrt_ipr5         = write_ipr5;
assign ctl_xx_wr_priority[23:20] = {4{write_ipr5}};
assign write_ipr6                = (ctrl_reg_addr[11:0] == IPR6) & tcipif_vic_write;
assign ctl_gate_wrt_ipr6         = write_ipr6;
assign ctl_xx_wr_priority[27:24] = {4{write_ipr6}};
assign write_ipr7                = (ctrl_reg_addr[11:0] == IPR7) & tcipif_vic_write;
assign ctl_gate_wrt_ipr7         = write_ipr7;
assign ctl_xx_wr_priority[31:28] = {4{write_ipr7}};

assign iptr_wen = write_iptr;

assign iptr_clk_en = iptr_wen || arb_regs_iptr_clr;

always@(posedge iptr_cpuclk or negedge cpurst_b)
begin
  if (!cpurst_b)
  begin
    iptr_en <= 1'b0;
  end
  else if (arb_regs_iptr_clr)
  begin
    iptr_en <= 1'b0;
  end
  else if (iptr_wen)
  begin
    iptr_en <= tcipif_vic_wdata[31];
  end
end

always@(posedge iptr_cpuclk or negedge cpurst_b)
begin
  if (!cpurst_b)
    iptr_thres_vect[7:0] <= 8'b0;
  else if (iptr_wen)
    iptr_thres_vect[7:0] <= tcipif_vic_wdata[15:8];
end

always@(posedge iptr_cpuclk or negedge cpurst_b)
begin
  if (!cpurst_b)
    iptr_thres_prio[1:0] <= 2'b00;
  else if (iptr_wen)
    iptr_thres_prio[1:0] <= tcipif_vic_wdata[7:6];
end

assign iptr_value[31:0] = {iptr_en,14'b0,1'b0,iptr_thres_vect[7:0],iptr_thres_prio[1:0], 6'b0};

assign regs_arb_iptr_thres_vect[7:0] = iptr_thres_vect[7:0];
assign regs_arb_iptr_thres_prio[1:0] = iptr_thres_prio[1:0];
assign regs_arb_iptr_en              = iptr_en;






















endmodule


























module nm_intc_top(
  cpurst_b,
  forever_cpuclk,
  forever_cpuclk_nogated,
  pad_vic_ack_vec,
  pad_vic_int_ack,
  pad_vic_int_cfg,
  pad_vic_int_exit,
  pad_vic_int_vec,
  pad_vic_int_vld,
  pad_yy_gate_clk_en_b,
  tcipif_vic_addr,
  tcipif_vic_sel,
  tcipif_vic_wdata,
  tcipif_vic_write,
  vic_pad_int_b,
  vic_pad_int_vec_b,
  vic_pad_intraw_b,
  vic_tcipif_cmplt,
  vic_tcipif_rdata
);


input           cpurst_b;                
input           forever_cpuclk;          
input           forever_cpuclk_nogated;  
input   [7 :0]  pad_vic_ack_vec;         
input           pad_vic_int_ack;         
input   [31:0]  pad_vic_int_cfg;         
input           pad_vic_int_exit;        
input   [7 :0]  pad_vic_int_vec;         
input   [31:0]  pad_vic_int_vld;         
input           pad_yy_gate_clk_en_b;    
input   [15:0]  tcipif_vic_addr;         
input           tcipif_vic_sel;          
input   [31:0]  tcipif_vic_wdata;        
input           tcipif_vic_write;        
output          vic_pad_int_b;           
output  [7 :0]  vic_pad_int_vec_b;       
output          vic_pad_intraw_b;        
output          vic_tcipif_cmplt;        
output  [31:0]  vic_tcipif_rdata;        




wire            active_cpuclk;           
wire            active_en;               
wire            arb_awake;               
wire            arb_cpuclk;              
wire    [31:0]  arb_regs_awake_en0;      
wire    [31:0]  arb_regs_int_active0;    
wire    [31:0]  arb_regs_int_en0;        
wire    [31:0]  arb_regs_int_pend0;      
wire    [7 :0]  arb_regs_int_pri_0;      
wire    [7 :0]  arb_regs_int_pri_1;      
wire    [7 :0]  arb_regs_int_pri_10;     
wire    [7 :0]  arb_regs_int_pri_11;     
wire    [7 :0]  arb_regs_int_pri_12;     
wire    [7 :0]  arb_regs_int_pri_13;     
wire    [7 :0]  arb_regs_int_pri_14;     
wire    [7 :0]  arb_regs_int_pri_15;     
wire    [7 :0]  arb_regs_int_pri_16;     
wire    [7 :0]  arb_regs_int_pri_17;     
wire    [7 :0]  arb_regs_int_pri_18;     
wire    [7 :0]  arb_regs_int_pri_19;     
wire    [7 :0]  arb_regs_int_pri_2;      
wire    [7 :0]  arb_regs_int_pri_20;     
wire    [7 :0]  arb_regs_int_pri_21;     
wire    [7 :0]  arb_regs_int_pri_22;     
wire    [7 :0]  arb_regs_int_pri_23;     
wire    [7 :0]  arb_regs_int_pri_24;     
wire    [7 :0]  arb_regs_int_pri_25;     
wire    [7 :0]  arb_regs_int_pri_26;     
wire    [7 :0]  arb_regs_int_pri_27;     
wire    [7 :0]  arb_regs_int_pri_28;     
wire    [7 :0]  arb_regs_int_pri_29;     
wire    [7 :0]  arb_regs_int_pri_3;      
wire    [7 :0]  arb_regs_int_pri_30;     
wire    [7 :0]  arb_regs_int_pri_31;     
wire    [7 :0]  arb_regs_int_pri_4;      
wire    [7 :0]  arb_regs_int_pri_5;      
wire    [7 :0]  arb_regs_int_pri_6;      
wire    [7 :0]  arb_regs_int_pri_7;      
wire    [7 :0]  arb_regs_int_pri_8;      
wire    [7 :0]  arb_regs_int_pri_9;      
wire    [7 :0]  arb_regs_int_pri_ts;     
wire            arb_regs_iptr_clr;       
wire    [31:0]  arb_regs_isr;            
wire            arb_regs_tspend_active;  
wire            arb_regs_tspend_pend;    
wire            cpurst_b;                
wire            ctl_gate_awake_dis;      
wire            ctl_gate_awake_en;       
wire            ctl_gate_clr_enable;     
wire            ctl_gate_clr_sec;        
wire            ctl_gate_dis;            
wire            ctl_gate_en;             
wire            ctl_gate_set_enable;     
wire            ctl_gate_set_sec;        
wire            ctl_gate_wrt_ipr;        
wire            ctl_gate_wrt_ipr0;       
wire            ctl_gate_wrt_ipr1;       
wire            ctl_gate_wrt_ipr2;       
wire            ctl_gate_wrt_ipr3;       
wire            ctl_gate_wrt_ipr4;       
wire            ctl_gate_wrt_ipr5;       
wire            ctl_gate_wrt_ipr6;       
wire            ctl_gate_wrt_ipr7;       
wire            ctl_gate_wrt_tspr;       
wire    [31:0]  ctl_xx_awake_disable;    
wire    [31:0]  ctl_xx_awake_enable;     
wire    [31:0]  ctl_xx_clear_enable;     
wire    [31:0]  ctl_xx_clear_pending;    
wire            ctl_xx_clr_tspend;       
wire            ctl_xx_iabr_write;       
wire    [1 :0]  ctl_xx_pri_value_0;      
wire    [1 :0]  ctl_xx_pri_value_1;      
wire    [1 :0]  ctl_xx_pri_value_2;      
wire    [1 :0]  ctl_xx_pri_value_3;      
wire    [1 :0]  ctl_xx_pri_value_ts;     
wire    [31:0]  ctl_xx_set_enable;       
wire    [31:0]  ctl_xx_set_pending;      
wire            ctl_xx_set_tspend;       
wire            ctl_xx_tsabr_write;      
wire    [31:0]  ctl_xx_wr_priority;      
wire            ctl_xx_wr_priority_ts;   
wire            forever_cpuclk;          
wire            forever_cpuclk_nogated;  
wire            int_active_en;           
wire            int_pending_en;          
wire            iptr_clk_en;             
wire            iptr_cpuclk;             
wire    [7 :0]  pad_vic_ack_vec;         
wire            pad_vic_int_ack;         
wire    [31:0]  pad_vic_int_cfg;         
wire            pad_vic_int_exit;        
wire    [7 :0]  pad_vic_int_vec;         
wire    [31:0]  pad_vic_int_vld;         
wire            pad_yy_gate_clk_en_b;    
wire            pending_cpuclk;          
wire            pending_en;              
wire            pri_cpuclk;              
wire            regs_arb_iptr_en;        
wire    [1 :0]  regs_arb_iptr_thres_prio; 
wire    [7 :0]  regs_arb_iptr_thres_vect; 
wire            regs_cpuclk;             
wire            sample_cpuclk;           
wire            sample_en;               
wire    [15:0]  tcipif_vic_addr;         
wire            tcipif_vic_sel;          
wire    [31:0]  tcipif_vic_wdata;        
wire            tcipif_vic_write;        
wire            tspclk;                  
wire            tspclk_en;               
wire            vic_pad_int_b;           
wire    [7 :0]  vic_pad_int_vec_b;       
wire            vic_pad_intraw_b;        
wire            vic_tcipif_cmplt;        
wire    [31:0]  vic_tcipif_rdata;        


assign ctl_gate_en  = ctl_gate_set_enable | ctl_gate_set_sec | ctl_gate_awake_en;
assign ctl_gate_dis = ctl_gate_clr_enable | ctl_gate_clr_sec | ctl_gate_awake_dis;


gated_clk_cell  x_intc_enable_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (regs_cpuclk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ctl_gate_dis        ),
  .module_en            (ctl_gate_en         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);










gated_clk_cell  x_intc_arb_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (arb_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (1'b0                ),
  .module_en            (arb_awake           ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









gated_clk_cell  x_intc_pend_gated_clk (
  .clk_in                 (forever_cpuclk_nogated),
  .clk_out                (pending_cpuclk        ),
  .external_en            (1'b0                  ),
  .global_en              (1'b1                  ),
  .local_en               (pending_en            ),
  .module_en              (1'b0                  ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  )
);









gated_clk_cell  x_intc_active_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (active_cpuclk       ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (active_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









gated_clk_cell  x_intc_sample_gated_clk (
  .clk_in                 (forever_cpuclk_nogated),
  .clk_out                (sample_cpuclk         ),
  .external_en            (1'b0                  ),
  .global_en              (1'b1                  ),
  .local_en               (sample_en             ),
  .module_en              (1'b0                  ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  )
);









gated_clk_cell  x_intc_iptr_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (iptr_cpuclk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (iptr_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









assign ctl_gate_wrt_ipr = ctl_gate_wrt_ipr0 | ctl_gate_wrt_ipr1 |
                          ctl_gate_wrt_ipr2 | ctl_gate_wrt_ipr3 |
                          ctl_gate_wrt_ipr4 | ctl_gate_wrt_ipr5 |
                          ctl_gate_wrt_ipr6 | ctl_gate_wrt_ipr7 |
                          ctl_gate_wrt_tspr;






gated_clk_cell  x_intc_pri_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (pri_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (ctl_gate_wrt_ipr    ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









assign tspclk_en = int_pending_en || int_active_en;

gated_clk_cell  x_intc_tspend_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (tspclk              ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (tspclk_en           ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);












nm_intc_regs_if  x_nm_intc_regs_if (
  .arb_regs_awake_en0       (arb_regs_awake_en0      ),
  .arb_regs_int_active0     (arb_regs_int_active0    ),
  .arb_regs_int_en0         (arb_regs_int_en0        ),
  .arb_regs_int_pend0       (arb_regs_int_pend0      ),
  .arb_regs_int_pri_0       (arb_regs_int_pri_0      ),
  .arb_regs_int_pri_1       (arb_regs_int_pri_1      ),
  .arb_regs_int_pri_10      (arb_regs_int_pri_10     ),
  .arb_regs_int_pri_11      (arb_regs_int_pri_11     ),
  .arb_regs_int_pri_12      (arb_regs_int_pri_12     ),
  .arb_regs_int_pri_13      (arb_regs_int_pri_13     ),
  .arb_regs_int_pri_14      (arb_regs_int_pri_14     ),
  .arb_regs_int_pri_15      (arb_regs_int_pri_15     ),
  .arb_regs_int_pri_16      (arb_regs_int_pri_16     ),
  .arb_regs_int_pri_17      (arb_regs_int_pri_17     ),
  .arb_regs_int_pri_18      (arb_regs_int_pri_18     ),
  .arb_regs_int_pri_19      (arb_regs_int_pri_19     ),
  .arb_regs_int_pri_2       (arb_regs_int_pri_2      ),
  .arb_regs_int_pri_20      (arb_regs_int_pri_20     ),
  .arb_regs_int_pri_21      (arb_regs_int_pri_21     ),
  .arb_regs_int_pri_22      (arb_regs_int_pri_22     ),
  .arb_regs_int_pri_23      (arb_regs_int_pri_23     ),
  .arb_regs_int_pri_24      (arb_regs_int_pri_24     ),
  .arb_regs_int_pri_25      (arb_regs_int_pri_25     ),
  .arb_regs_int_pri_26      (arb_regs_int_pri_26     ),
  .arb_regs_int_pri_27      (arb_regs_int_pri_27     ),
  .arb_regs_int_pri_28      (arb_regs_int_pri_28     ),
  .arb_regs_int_pri_29      (arb_regs_int_pri_29     ),
  .arb_regs_int_pri_3       (arb_regs_int_pri_3      ),
  .arb_regs_int_pri_30      (arb_regs_int_pri_30     ),
  .arb_regs_int_pri_31      (arb_regs_int_pri_31     ),
  .arb_regs_int_pri_4       (arb_regs_int_pri_4      ),
  .arb_regs_int_pri_5       (arb_regs_int_pri_5      ),
  .arb_regs_int_pri_6       (arb_regs_int_pri_6      ),
  .arb_regs_int_pri_7       (arb_regs_int_pri_7      ),
  .arb_regs_int_pri_8       (arb_regs_int_pri_8      ),
  .arb_regs_int_pri_9       (arb_regs_int_pri_9      ),
  .arb_regs_int_pri_ts      (arb_regs_int_pri_ts     ),
  .arb_regs_iptr_clr        (arb_regs_iptr_clr       ),
  .arb_regs_isr             (arb_regs_isr            ),
  .arb_regs_tspend_active   (arb_regs_tspend_active  ),
  .arb_regs_tspend_pend     (arb_regs_tspend_pend    ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_gate_awake_dis       (ctl_gate_awake_dis      ),
  .ctl_gate_awake_en        (ctl_gate_awake_en       ),
  .ctl_gate_clr_enable      (ctl_gate_clr_enable     ),
  .ctl_gate_clr_sec         (ctl_gate_clr_sec        ),
  .ctl_gate_set_enable      (ctl_gate_set_enable     ),
  .ctl_gate_set_sec         (ctl_gate_set_sec        ),
  .ctl_gate_wrt_ipr0        (ctl_gate_wrt_ipr0       ),
  .ctl_gate_wrt_ipr1        (ctl_gate_wrt_ipr1       ),
  .ctl_gate_wrt_ipr2        (ctl_gate_wrt_ipr2       ),
  .ctl_gate_wrt_ipr3        (ctl_gate_wrt_ipr3       ),
  .ctl_gate_wrt_ipr4        (ctl_gate_wrt_ipr4       ),
  .ctl_gate_wrt_ipr5        (ctl_gate_wrt_ipr5       ),
  .ctl_gate_wrt_ipr6        (ctl_gate_wrt_ipr6       ),
  .ctl_gate_wrt_ipr7        (ctl_gate_wrt_ipr7       ),
  .ctl_gate_wrt_tspr        (ctl_gate_wrt_tspr       ),
  .ctl_xx_awake_disable     (ctl_xx_awake_disable    ),
  .ctl_xx_awake_enable      (ctl_xx_awake_enable     ),
  .ctl_xx_clear_enable      (ctl_xx_clear_enable     ),
  .ctl_xx_clear_pending     (ctl_xx_clear_pending    ),
  .ctl_xx_clr_tspend        (ctl_xx_clr_tspend       ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .ctl_xx_pri_value_0       (ctl_xx_pri_value_0      ),
  .ctl_xx_pri_value_1       (ctl_xx_pri_value_1      ),
  .ctl_xx_pri_value_2       (ctl_xx_pri_value_2      ),
  .ctl_xx_pri_value_3       (ctl_xx_pri_value_3      ),
  .ctl_xx_pri_value_ts      (ctl_xx_pri_value_ts     ),
  .ctl_xx_set_enable        (ctl_xx_set_enable       ),
  .ctl_xx_set_pending       (ctl_xx_set_pending      ),
  .ctl_xx_set_tspend        (ctl_xx_set_tspend       ),
  .ctl_xx_tsabr_write       (ctl_xx_tsabr_write      ),
  .ctl_xx_wr_priority       (ctl_xx_wr_priority      ),
  .ctl_xx_wr_priority_ts    (ctl_xx_wr_priority_ts   ),
  .iptr_clk_en              (iptr_clk_en             ),
  .iptr_cpuclk              (iptr_cpuclk             ),
  .regs_arb_iptr_en         (regs_arb_iptr_en        ),
  .regs_arb_iptr_thres_prio (regs_arb_iptr_thres_prio),
  .regs_arb_iptr_thres_vect (regs_arb_iptr_thres_vect),
  .tcipif_vic_addr          (tcipif_vic_addr         ),
  .tcipif_vic_sel           (tcipif_vic_sel          ),
  .tcipif_vic_wdata         (tcipif_vic_wdata        ),
  .tcipif_vic_write         (tcipif_vic_write        ),
  .vic_tcipif_cmplt         (vic_tcipif_cmplt        ),
  .vic_tcipif_rdata         (vic_tcipif_rdata        )
);










nm_intc_arb_32  x_nm_intc_arb (
  .active_cpuclk            (active_cpuclk           ),
  .active_en                (active_en               ),
  .arb_awake                (arb_awake               ),
  .arb_cpuclk               (arb_cpuclk              ),
  .arb_regs_awake_en0       (arb_regs_awake_en0      ),
  .arb_regs_int_active0     (arb_regs_int_active0    ),
  .arb_regs_int_en0         (arb_regs_int_en0        ),
  .arb_regs_int_pend0       (arb_regs_int_pend0      ),
  .arb_regs_int_pri_0       (arb_regs_int_pri_0      ),
  .arb_regs_int_pri_1       (arb_regs_int_pri_1      ),
  .arb_regs_int_pri_10      (arb_regs_int_pri_10     ),
  .arb_regs_int_pri_11      (arb_regs_int_pri_11     ),
  .arb_regs_int_pri_12      (arb_regs_int_pri_12     ),
  .arb_regs_int_pri_13      (arb_regs_int_pri_13     ),
  .arb_regs_int_pri_14      (arb_regs_int_pri_14     ),
  .arb_regs_int_pri_15      (arb_regs_int_pri_15     ),
  .arb_regs_int_pri_16      (arb_regs_int_pri_16     ),
  .arb_regs_int_pri_17      (arb_regs_int_pri_17     ),
  .arb_regs_int_pri_18      (arb_regs_int_pri_18     ),
  .arb_regs_int_pri_19      (arb_regs_int_pri_19     ),
  .arb_regs_int_pri_2       (arb_regs_int_pri_2      ),
  .arb_regs_int_pri_20      (arb_regs_int_pri_20     ),
  .arb_regs_int_pri_21      (arb_regs_int_pri_21     ),
  .arb_regs_int_pri_22      (arb_regs_int_pri_22     ),
  .arb_regs_int_pri_23      (arb_regs_int_pri_23     ),
  .arb_regs_int_pri_24      (arb_regs_int_pri_24     ),
  .arb_regs_int_pri_25      (arb_regs_int_pri_25     ),
  .arb_regs_int_pri_26      (arb_regs_int_pri_26     ),
  .arb_regs_int_pri_27      (arb_regs_int_pri_27     ),
  .arb_regs_int_pri_28      (arb_regs_int_pri_28     ),
  .arb_regs_int_pri_29      (arb_regs_int_pri_29     ),
  .arb_regs_int_pri_3       (arb_regs_int_pri_3      ),
  .arb_regs_int_pri_30      (arb_regs_int_pri_30     ),
  .arb_regs_int_pri_31      (arb_regs_int_pri_31     ),
  .arb_regs_int_pri_4       (arb_regs_int_pri_4      ),
  .arb_regs_int_pri_5       (arb_regs_int_pri_5      ),
  .arb_regs_int_pri_6       (arb_regs_int_pri_6      ),
  .arb_regs_int_pri_7       (arb_regs_int_pri_7      ),
  .arb_regs_int_pri_8       (arb_regs_int_pri_8      ),
  .arb_regs_int_pri_9       (arb_regs_int_pri_9      ),
  .arb_regs_int_pri_ts      (arb_regs_int_pri_ts     ),
  .arb_regs_iptr_clr        (arb_regs_iptr_clr       ),
  .arb_regs_isr             (arb_regs_isr            ),
  .arb_regs_tspend_active   (arb_regs_tspend_active  ),
  .arb_regs_tspend_pend     (arb_regs_tspend_pend    ),
  .cpurst_b                 (cpurst_b                ),
  .ctl_xx_awake_disable     (ctl_xx_awake_disable    ),
  .ctl_xx_awake_enable      (ctl_xx_awake_enable     ),
  .ctl_xx_clear_enable      (ctl_xx_clear_enable     ),
  .ctl_xx_clear_pending     (ctl_xx_clear_pending    ),
  .ctl_xx_clr_tspend        (ctl_xx_clr_tspend       ),
  .ctl_xx_iabr_write        (ctl_xx_iabr_write       ),
  .ctl_xx_pri_value_0       (ctl_xx_pri_value_0      ),
  .ctl_xx_pri_value_1       (ctl_xx_pri_value_1      ),
  .ctl_xx_pri_value_2       (ctl_xx_pri_value_2      ),
  .ctl_xx_pri_value_3       (ctl_xx_pri_value_3      ),
  .ctl_xx_pri_value_ts      (ctl_xx_pri_value_ts     ),
  .ctl_xx_set_enable        (ctl_xx_set_enable       ),
  .ctl_xx_set_pending       (ctl_xx_set_pending      ),
  .ctl_xx_set_tspend        (ctl_xx_set_tspend       ),
  .ctl_xx_tsabr_write       (ctl_xx_tsabr_write      ),
  .ctl_xx_wr_priority       (ctl_xx_wr_priority      ),
  .ctl_xx_wr_priority_ts    (ctl_xx_wr_priority_ts   ),
  .int_active_en            (int_active_en           ),
  .int_pending_en           (int_pending_en          ),
  .pad_vic_ack_vec          (pad_vic_ack_vec         ),
  .pad_vic_int_ack          (pad_vic_int_ack         ),
  .pad_vic_int_cfg          (pad_vic_int_cfg         ),
  .pad_vic_int_exit         (pad_vic_int_exit        ),
  .pad_vic_int_vec          (pad_vic_int_vec         ),
  .pad_vic_int_vld          (pad_vic_int_vld         ),
  .pending_cpuclk           (pending_cpuclk          ),
  .pending_en               (pending_en              ),
  .pri_cpuclk               (pri_cpuclk              ),
  .regs_arb_iptr_en         (regs_arb_iptr_en        ),
  .regs_arb_iptr_thres_prio (regs_arb_iptr_thres_prio),
  .regs_arb_iptr_thres_vect (regs_arb_iptr_thres_vect),
  .regs_cpuclk              (regs_cpuclk             ),
  .sample_cpuclk            (sample_cpuclk           ),
  .sample_en                (sample_en               ),
  .tcipif_vic_wdata         (tcipif_vic_wdata        ),
  .tspclk                   (tspclk                  ),
  .vic_pad_int_b            (vic_pad_int_b           ),
  .vic_pad_int_vec_b        (vic_pad_int_vec_b       ),
  .vic_pad_intraw_b         (vic_pad_intraw_b        )
);







endmodule

























module nm_intc_tspend(
  active_value,
  active_write,
  cpurst_b,
  int_ack,
  int_active_en,
  int_exit,
  int_pending_en,
  kid_arb_int_active,
  kid_arb_int_pri,
  kid_arb_int_req,
  kid_xx_int_active,
  kid_xx_int_pend,
  kid_xx_int_pri,
  pri_cpuclk,
  pri_value,
  sw_clear_pending,
  sw_set_pending,
  tspclk,
  wr_priority
);


input          active_value;        
input          active_write;        
input          cpurst_b;            
input          int_ack;             
input          int_exit;            
input          pri_cpuclk;          
input   [1:0]  pri_value;           
input          sw_clear_pending;    
input          sw_set_pending;      
input          tspclk;              
input          wr_priority;         
output         int_active_en;       
output         int_pending_en;      
output         kid_arb_int_active;  
output  [1:0]  kid_arb_int_pri;     
output         kid_arb_int_req;     
output         kid_xx_int_active;   
output         kid_xx_int_pend;     
output  [1:0]  kid_xx_int_pri;      


reg            int_active;          
reg            int_pending;         
reg            int_pending_updt_val; 
reg     [1:0]  int_priority;        


wire           active_clear;        
wire           active_set;          
wire           active_value;        
wire           active_write;        
wire           cpurst_b;            
wire           int_ack;             
wire           int_active_en;       
wire           int_exit;            
wire           int_pending_en;      
wire           int_pending_updt_vld; 
wire           kid_arb_int_active;  
wire    [1:0]  kid_arb_int_pri;     
wire           kid_arb_int_req;     
wire           kid_xx_int_active;   
wire           kid_xx_int_pend;     
wire    [1:0]  kid_xx_int_pri;      
wire           pending_clear;       
wire           pending_set;         
wire           pri_cpuclk;          
wire    [1:0]  pri_value;           
wire           sw_clear_pending;    
wire           sw_set_pending;      
wire           tspclk;              
wire           wr_priority;         








assign pending_set   = sw_set_pending;
assign pending_clear = sw_clear_pending || int_ack;

assign int_pending_en = !int_pending & pending_set || 
                         int_pending & pending_clear & !pending_set;

assign int_pending_updt_vld = pending_set || pending_clear;


always @( pending_set
       or pending_clear
       or int_pending)
begin
if (pending_set)
  int_pending_updt_val = 1'b1;
else if (pending_clear)
  int_pending_updt_val = 1'b0;
else
  int_pending_updt_val = int_pending;

end

always@(posedge tspclk or negedge cpurst_b)
begin
  if (!cpurst_b)
    int_pending <= 1'b0;
  else if (int_pending_updt_vld)
    int_pending <= int_pending_updt_val;
  else 
    int_pending <= int_pending;
end





assign active_set = int_ack || active_write && active_value;
assign active_clear = int_exit || active_write && !active_value;

assign int_active_en = !int_active & active_set || 
                        int_active & active_clear;

always@(posedge tspclk or negedge cpurst_b)
begin
  if (!cpurst_b)
    int_active <= 1'b0;
  else if (active_set)
    int_active <= 1'b1;
  else if (active_clear)
    int_active <= 1'b0;
end




always@(posedge pri_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    int_priority[1:0] <= 2'b00;
  else if(wr_priority)
    int_priority[1:0] <= pri_value[1:0];
end






assign kid_arb_int_req    = int_pending;
assign kid_arb_int_active = int_active;
assign kid_arb_int_pri[1:0] = int_priority[1:0];





assign kid_xx_int_pend     = int_pending;
assign kid_xx_int_active   = int_active;
assign kid_xx_int_pri[1:0] = int_priority[1:0];


endmodule





























module nm_iu_alu(
  alu_rbus_c,
  alu_rbus_c_vld,
  alu_rbus_data,
  alu_rbus_data_vld,
  alu_rbus_req,
  cp0_iu_src_c,
  ctrl_alu_ex_sel,
  ctrl_alu_mad_oper_mux_en,
  ctrl_alu_oper_mux_en,
  ctrl_xx_dup_alu_sel,
  ctrl_xx_sp_adjust,
  ctrl_xx_sp_sub,
  decd_alu_dst_vld_pre,
  decd_alu_src0_pre,
  decd_alu_src1_imm_vld,
  decd_alu_src1_pre,
  decd_alu_srcc_pre,
  decd_xx_dst_vld,
  decd_xx_func,
  decd_xx_sub_func,
  ifu_iu_ex_inst_vld,
  iu_ifu_c_write_back,
  mad_alu_ff1_vld,
  oper_alu_src0_reg,
  oper_alu_src1_imm,
  oper_alu_src1_reg
);


input           cp0_iu_src_c;                 
input           ctrl_alu_ex_sel;              
input           ctrl_alu_mad_oper_mux_en;     
input           ctrl_alu_oper_mux_en;         
input           ctrl_xx_dup_alu_sel;          
input           ctrl_xx_sp_adjust;            
input           ctrl_xx_sp_sub;               
input   [1 :0]  decd_alu_dst_vld_pre;         
input   [3 :0]  decd_alu_src0_pre;            
input           decd_alu_src1_imm_vld;        
input   [5 :0]  decd_alu_src1_pre;            
input   [1 :0]  decd_alu_srcc_pre;            
input           decd_xx_dst_vld;              
input   [3 :0]  decd_xx_func;                 
input   [6 :0]  decd_xx_sub_func;             
input           ifu_iu_ex_inst_vld;           
input           mad_alu_ff1_vld;              
input   [31:0]  oper_alu_src0_reg;            
input   [31:0]  oper_alu_src1_imm;            
input   [31:0]  oper_alu_src1_reg;            
output          alu_rbus_c;                   
output          alu_rbus_c_vld;               
output  [31:0]  alu_rbus_data;                
output          alu_rbus_data_vld;            
output          alu_rbus_req;                 
output          iu_ifu_c_write_back;          


reg     [31:0]  alu_adder_src1;               
reg     [31:0]  alu_logic_src1_gen_mask;      
reg     [5 :0]  alu_misc_rst_ff1;             
reg     [31:0]  alu_shifter_right_rst;        
reg             alu_shifter_right_to_c;       


wire    [1 :0]  adder_src1_shift;             
wire    [2 :0]  alu_adder_c_sel;              
wire            alu_adder_rst_c_out;          
wire            alu_adder_rst_cmp_signed_lt;  
wire            alu_adder_rst_cmp_unsigned_hs; 
wire            alu_adder_rst_cout;           
wire    [31:0]  alu_adder_rst_out;            
wire            alu_adder_sel;                
wire            alu_adder_shared_rst_c_out;   
wire    [31:0]  alu_adder_shared_rst_out;     
wire            alu_adder_shift_in;           
wire    [31:0]  alu_adder_src0;               
wire    [5 :0]  alu_adder_src1_pre;           
wire    [31:0]  alu_adder_src1_pre_val;       
wire            alu_adder_srcc;               
wire            alu_dst_vld;                  
wire    [3 :0]  alu_func;                     
wire            alu_logic_rst_c_out;          
wire    [31:0]  alu_logic_rst_out;            
wire    [31:0]  alu_logic_rst_out_and;        
wire    [31:0]  alu_logic_rst_out_or;         
wire    [31:0]  alu_logic_rst_out_xor;        
wire    [2 :0]  alu_logic_rst_sel;            
wire            alu_logic_sel;                
wire    [31:0]  alu_logic_src0;               
wire    [31:0]  alu_logic_src1;               
wire    [4 :0]  alu_logic_src1_gen_mask_sel;  
wire            alu_logic_src1_pre_gen_mask;  
wire            alu_misc_b0_a;                
wire            alu_misc_b0_b;                
wire            alu_misc_b0_c;                
wire            alu_misc_b0_d;                
wire            alu_misc_b0_f;                
wire            alu_misc_b1_a;                
wire            alu_misc_b1_as;               
wire            alu_misc_b1_b;                
wire            alu_misc_b1_c;                
wire            alu_misc_b2_b;                
wire            alu_misc_b2_d;                
wire            alu_misc_b2_s;                
wire            alu_misc_b3_a;                
wire            alu_misc_b3_c;                
wire            alu_misc_b3_s;                
wire            alu_misc_ff1;                 
wire            alu_misc_revb;                
wire            alu_misc_revh;                
wire            alu_misc_rst_c_out;           
wire    [31:0]  alu_misc_rst_out;             
wire            alu_misc_sel;                 
wire            alu_misc_sext;                
wire            alu_misc_sextb;               
wire            alu_misc_sexth;               
wire    [7 :0]  alu_misc_sign_byte;           
wire    [31:0]  alu_misc_src0;                
wire    [31:0]  alu_misc_src1;                
wire            alu_misc_tstnbz;              
wire            alu_misc_xtrb;                
wire            alu_misc_xtrb0;               
wire            alu_misc_xtrb1;               
wire            alu_misc_xtrb2;               
wire            alu_misc_xtrb3;               
wire            alu_misc_zext;                
wire            alu_misc_zexth;               
wire    [31:0]  alu_mux_src0;                 
wire    [31:0]  alu_mux_src1;                 
wire    [31:0]  alu_prepare_src0;             
wire            alu_prepare_src0_sel;         
wire    [31:0]  alu_prepare_src1;             
wire            alu_prepare_src1_sel;         
wire            alu_rbus_c;                   
wire            alu_rbus_c_vld;               
wire    [31:0]  alu_rbus_data;                
wire            alu_rbus_data_vld;            
wire            alu_rbus_req;                 
wire            alu_sel;                      
wire            alu_shared_adder_cout;        
wire    [31:0]  alu_shared_adder_rst;         
wire    [31:0]  alu_shared_adder_src0;        
wire    [31:0]  alu_shared_adder_src1;        
wire            alu_shared_adder_srcc;        
wire            alu_shifter_right_in;         
wire    [31:0]  alu_shifter_right_in_mask;    
wire    [31:0]  alu_shifter_right_in_mask_pre; 
wire            alu_shifter_rst_c_out;        
wire    [31:0]  alu_shifter_rst_left_out;     
wire    [31:0]  alu_shifter_rst_out;          
wire            alu_shifter_rst_right_c_out;  
wire    [31:0]  alu_shifter_rst_right_out;    
wire            alu_shifter_sel;              
wire            alu_shifter_shift_dr;         
wire            alu_shifter_shift_in;         
wire            alu_shifter_shift_round;      
wire            alu_shifter_shift_to_c;       
wire            alu_shifter_shift_xsr;        
wire    [31:0]  alu_shifter_src0;             
wire    [31:0]  alu_shifter_src0_pre;         
wire    [31:0]  alu_shifter_src0_reverse;     
wire    [4 :0]  alu_shifter_src1;             
wire            alu_shifter_srcc;             
wire    [31:0]  alu_src0;                     
wire    [31:0]  alu_src0_pre_add;             
wire            alu_src0_pre_cst_0;           
wire            alu_src0_pre_not;             
wire    [31:0]  alu_src1;                     
wire    [31:0]  alu_src1_0;                   
wire    [15:0]  alu_src1_0_high;              
wire    [31:0]  alu_src1_gen_mask_val;        
wire            alu_src1_genmask;             
wire            alu_src1_imm_sel;             
wire            alu_src1_movi_high;           
wire            alu_src1_normal;              
wire    [31:0]  alu_src1_pre;                 
wire            alu_src1_pre_cst_0;           
wire            alu_src1_pre_movih;           
wire            alu_src1_reverse;             
wire            alu_srcc;                     
wire            alu_srcc_cst_0;               
wire            alu_srcc_reverse;             
wire    [6 :0]  alu_sub_func;                 
wire            cp0_iu_src_c;                 
wire            ctrl_alu_ex_sel;              
wire            ctrl_alu_mad_oper_mux_en;     
wire            ctrl_alu_oper_mux_en;         
wire            ctrl_xx_dup_alu_sel;          
wire            ctrl_xx_sp_adjust;            
wire            ctrl_xx_sp_sub;               
wire    [1 :0]  decd_alu_dst_vld_pre;         
wire    [3 :0]  decd_alu_src0_pre;            
wire            decd_alu_src1_imm_vld;        
wire    [5 :0]  decd_alu_src1_pre;            
wire    [1 :0]  decd_alu_srcc_pre;            
wire            decd_xx_dst_vld;              
wire    [3 :0]  decd_xx_func;                 
wire    [6 :0]  decd_xx_sub_func;             
wire            ifu_iu_ex_inst_vld;           
wire            iu_ifu_c_write_back;          
wire            mad_alu_ff1_vld;              
wire    [31:0]  oper_alu_src0_reg;            
wire    [31:0]  oper_alu_src1_imm;            
wire    [31:0]  oper_alu_src1_reg;            










assign alu_mux_src0[31:0] = oper_alu_src0_reg[31:0];

assign alu_src1_imm_sel = (decd_alu_src1_imm_vld && !mad_alu_ff1_vld)
                          || ctrl_xx_sp_adjust;
assign alu_mux_src1[31:0] = alu_src1_imm_sel 
                            ? oper_alu_src1_imm[31:0]
                            : oper_alu_src1_reg[31:0];




assign alu_prepare_src0_sel   = ctrl_alu_oper_mux_en || ctrl_alu_mad_oper_mux_en
                                || ctrl_xx_sp_adjust;
assign alu_prepare_src1_sel   = alu_prepare_src0_sel;
assign alu_prepare_src0[31:0] = {32{alu_prepare_src0_sel}} & alu_mux_src0[31:0];
assign alu_prepare_src1[31:0] = {32{alu_prepare_src1_sel}} & alu_mux_src1[31:0];







assign alu_dst_vld = (decd_alu_dst_vld_pre[1])
                     ? decd_alu_dst_vld_pre[0] ^ cp0_iu_src_c
                     : decd_xx_dst_vld;






assign alu_srcc_reverse = decd_alu_srcc_pre[1] || ctrl_xx_sp_sub;
assign alu_srcc_cst_0   = decd_alu_srcc_pre[0] || ctrl_xx_sp_adjust;
assign alu_srcc = alu_srcc_reverse ^ (!alu_srcc_cst_0 && cp0_iu_src_c);






assign alu_src0_pre_cst_0 = decd_alu_src0_pre[1] && alu_prepare_src1[5]
                            || decd_alu_src0_pre[0];



assign alu_src0_pre_not   = decd_alu_src0_pre[3]
                               && alu_prepare_src0[31]
                               && alu_prepare_src1[5]
                            || decd_alu_src0_pre[2];

assign alu_src0_pre_add[31:0] = ({32{!alu_src0_pre_cst_0}} & alu_prepare_src0[31:0])
                               ^ {32{alu_src0_pre_not}};
assign alu_src0[31:0]     = alu_src0_pre_add[31:0];





assign alu_adder_src1_pre[5:0] = decd_alu_src1_pre[5:0];


assign alu_src1_pre_cst_0    = alu_adder_src1_pre[0];

assign alu_src1_pre_movih    = alu_adder_src1_pre[3];

assign alu_src1_0_high[15:0]   = alu_prepare_src1[15:0]
                                 & {16{alu_src1_pre_movih
                                       && !alu_src1_pre_cst_0}};
assign alu_src1_0[31:0]        = {alu_src1_0_high[15:0], 16'b0};

assign alu_src1_movi_high = alu_src1_pre_movih || alu_src1_pre_cst_0;
assign alu_src1_genmask   = alu_logic_src1_pre_gen_mask && alu_logic_src1_gen_mask[0];
assign alu_src1_gen_mask_val[31:0] = {alu_logic_src1_gen_mask[31:1], alu_src1_genmask};
assign alu_src1_normal    = !alu_src1_movi_high && !alu_logic_src1_pre_gen_mask;
assign alu_src1_pre[31:0] = {32{alu_src1_movi_high}} & alu_src1_0[31:0]
                          | alu_src1_gen_mask_val[31:0]
                          | {32{alu_src1_normal}}    & alu_prepare_src1[31:0];


assign alu_src1_reverse = alu_adder_src1_pre[2] || ctrl_xx_sp_sub;
assign alu_src1[31:0]   = {32{alu_src1_reverse}}
                           ^ alu_src1_pre[31:0];



assign alu_adder_shift_in      = alu_src1_reverse;





assign alu_func[3:0]     = decd_xx_func[3:0];
assign alu_sub_func[6:0] = decd_xx_sub_func[6:0];




assign alu_sel         = ctrl_alu_ex_sel;
assign alu_adder_sel   = (ctrl_alu_oper_mux_en || ctrl_alu_mad_oper_mux_en)
                          && alu_func[0]
                      || ctrl_xx_sp_adjust;
assign alu_logic_sel   = ctrl_alu_oper_mux_en && alu_func[1];
assign alu_shifter_sel = ctrl_alu_oper_mux_en && alu_func[2];
assign alu_misc_sel    = (ctrl_alu_oper_mux_en || ctrl_alu_mad_oper_mux_en)
                         && alu_func[3];






assign alu_adder_c_sel[2:0] = {3{alu_adder_sel}} & alu_sub_func[2:0];





assign alu_adder_src0[31:0]         = {32{alu_adder_sel}} & alu_src0[31:0];
assign alu_adder_src1_pre_val[31:0] = {32{alu_adder_sel}} & alu_src1[31:0];
assign alu_adder_srcc               = alu_adder_sel & alu_srcc;







assign adder_src1_shift[1:0] = alu_adder_src1_pre[5:4];


always @( alu_adder_src1_pre_val[31:0]
       or adder_src1_shift[1:0]
       or alu_adder_shift_in)
begin
  case(adder_src1_shift[1:0])
    2'b00: alu_adder_src1[31:0] = alu_adder_src1_pre_val[31:0];
    2'b01: alu_adder_src1[31:0] = {alu_adder_src1_pre_val[30:0],
                                   alu_adder_shift_in};
    2'b10: alu_adder_src1[31:0] = {alu_adder_src1_pre_val[29:0],
                                   {2{alu_adder_shift_in}}};
  default: alu_adder_src1[31:0] = 32'bx;
  endcase

end






assign alu_shared_adder_src0[31:0] = alu_adder_src0[31:0];
assign alu_shared_adder_src1[31:0] = alu_adder_src1[31:0];
assign alu_shared_adder_srcc       = alu_adder_srcc;


assign {alu_shared_adder_cout,alu_shared_adder_rst[31:0]} =
       alu_shared_adder_src0[31:0] + alu_shared_adder_src1[31:0] + alu_shared_adder_srcc;

assign alu_adder_rst_out[31:0]    = alu_shared_adder_rst[31:0];

assign alu_adder_rst_cout         = alu_shared_adder_cout;













assign alu_adder_rst_cmp_unsigned_hs = alu_adder_rst_cout;



assign alu_adder_rst_cmp_signed_lt = (alu_adder_src0[31] && alu_adder_src1[31])
                                 || ((alu_adder_src0[31] ^ alu_adder_src1[31])
                                        && alu_adder_rst_out[31]);


assign alu_adder_rst_c_out = alu_adder_c_sel[0] && alu_adder_rst_cout
                          || alu_adder_c_sel[1] && alu_adder_rst_cmp_unsigned_hs
                          || alu_adder_c_sel[2] && alu_adder_rst_cmp_signed_lt;





assign alu_logic_rst_sel[2:0] = {3{alu_logic_sel}} & alu_sub_func[2:0];







assign alu_logic_src0[31:0] = {32{alu_logic_sel}} & alu_src0[31:0];

assign alu_logic_src1[31:0] = {32{alu_logic_sel}} & alu_src1[31:0];
assign alu_logic_src1_gen_mask_sel[4:0] = {5{alu_logic_src1_pre_gen_mask}}
                                          & oper_alu_src1_imm[4:0];






assign alu_logic_src1_pre_gen_mask = alu_adder_src1_pre[1];



always @( alu_logic_src1_gen_mask_sel[4:0])
begin
  case(alu_logic_src1_gen_mask_sel[4:0])
  5'b00000: alu_logic_src1_gen_mask[31:0] = 32'h00000001;
  5'b00001: alu_logic_src1_gen_mask[31:0] = 32'h00000002;
  5'b00010: alu_logic_src1_gen_mask[31:0] = 32'h00000004;
  5'b00011: alu_logic_src1_gen_mask[31:0] = 32'h00000008;
  5'b00100: alu_logic_src1_gen_mask[31:0] = 32'h00000010;
  5'b00101: alu_logic_src1_gen_mask[31:0] = 32'h00000020;
  5'b00110: alu_logic_src1_gen_mask[31:0] = 32'h00000040;
  5'b00111: alu_logic_src1_gen_mask[31:0] = 32'h00000080;
  5'b01000: alu_logic_src1_gen_mask[31:0] = 32'h00000100;
  5'b01001: alu_logic_src1_gen_mask[31:0] = 32'h00000200;
  5'b01010: alu_logic_src1_gen_mask[31:0] = 32'h00000400;
  5'b01011: alu_logic_src1_gen_mask[31:0] = 32'h00000800;
  5'b01100: alu_logic_src1_gen_mask[31:0] = 32'h00001000;
  5'b01101: alu_logic_src1_gen_mask[31:0] = 32'h00002000;
  5'b01110: alu_logic_src1_gen_mask[31:0] = 32'h00004000;
  5'b01111: alu_logic_src1_gen_mask[31:0] = 32'h00008000;
  5'b10000: alu_logic_src1_gen_mask[31:0] = 32'h00010000;
  5'b10001: alu_logic_src1_gen_mask[31:0] = 32'h00020000;
  5'b10010: alu_logic_src1_gen_mask[31:0] = 32'h00040000;
  5'b10011: alu_logic_src1_gen_mask[31:0] = 32'h00080000;
  5'b10100: alu_logic_src1_gen_mask[31:0] = 32'h00100000;
  5'b10101: alu_logic_src1_gen_mask[31:0] = 32'h00200000;
  5'b10110: alu_logic_src1_gen_mask[31:0] = 32'h00400000;
  5'b10111: alu_logic_src1_gen_mask[31:0] = 32'h00800000;
  5'b11000: alu_logic_src1_gen_mask[31:0] = 32'h01000000;
  5'b11001: alu_logic_src1_gen_mask[31:0] = 32'h02000000;
  5'b11010: alu_logic_src1_gen_mask[31:0] = 32'h04000000;
  5'b11011: alu_logic_src1_gen_mask[31:0] = 32'h08000000;
  5'b11100: alu_logic_src1_gen_mask[31:0] = 32'h10000000;
  5'b11101: alu_logic_src1_gen_mask[31:0] = 32'h20000000;
  5'b11110: alu_logic_src1_gen_mask[31:0] = 32'h40000000;
  5'b11111: alu_logic_src1_gen_mask[31:0] = 32'h80000000;
  default:  alu_logic_src1_gen_mask[31:0] = 32'h0;
  endcase

end










assign alu_logic_rst_out_and[31:0] = alu_logic_src0[31:0] & alu_logic_src1[31:0];
assign alu_logic_rst_out_or[31:0]  = alu_logic_src0[31:0] | alu_logic_src1[31:0];
assign alu_logic_rst_out_xor[31:0] = alu_logic_src0[31:0] ^ alu_logic_src1[31:0];




assign alu_logic_rst_out[31:0] =
       {32{alu_logic_rst_sel[0]}} & alu_logic_rst_out_and[31:0]
     | {32{alu_logic_rst_sel[1]}} & alu_logic_rst_out_or[31:0]
     | {32{alu_logic_rst_sel[2]}} & alu_logic_rst_out_xor[31:0];







assign alu_logic_rst_c_out = |alu_logic_rst_out[31:0];









assign alu_shifter_shift_dr    = alu_shifter_sel && alu_sub_func[0];

assign alu_shifter_shift_in    = alu_shifter_sel && alu_sub_func[1];

assign alu_shifter_shift_round = alu_shifter_sel && alu_sub_func[2];

assign alu_shifter_shift_xsr   = alu_shifter_sel && alu_sub_func[3];

assign alu_shifter_shift_to_c  = alu_shifter_sel && alu_sub_func[4];


assign alu_shifter_src0_pre[31:0] = {32{alu_shifter_sel}} & alu_src0[31:0];
assign alu_shifter_src1[4:0]  =  {5{alu_shifter_sel}} & alu_src1[4:0];
assign alu_shifter_srcc       =     alu_shifter_sel   & alu_srcc;



































































































assign alu_shifter_src0[31:0] = alu_shifter_shift_dr
                                  ? alu_shifter_src0_pre[31:0]
                                  : alu_shifter_src0_reverse[31:0];

assign alu_shifter_src0_reverse[31:0] = {alu_shifter_src0_pre[0], alu_shifter_src0_pre[1],
                                         alu_shifter_src0_pre[2], alu_shifter_src0_pre[3],
                                         alu_shifter_src0_pre[4], alu_shifter_src0_pre[5],
                                         alu_shifter_src0_pre[6], alu_shifter_src0_pre[7],
                                         alu_shifter_src0_pre[8], alu_shifter_src0_pre[9],
                                         alu_shifter_src0_pre[10], alu_shifter_src0_pre[11],
                                         alu_shifter_src0_pre[12], alu_shifter_src0_pre[13],
                                         alu_shifter_src0_pre[14], alu_shifter_src0_pre[15],
                                         alu_shifter_src0_pre[16], alu_shifter_src0_pre[17],
                                         alu_shifter_src0_pre[18], alu_shifter_src0_pre[19],
                                         alu_shifter_src0_pre[20], alu_shifter_src0_pre[21],
                                         alu_shifter_src0_pre[22], alu_shifter_src0_pre[23],
                                         alu_shifter_src0_pre[24], alu_shifter_src0_pre[25],
                                         alu_shifter_src0_pre[26], alu_shifter_src0_pre[27],
                                         alu_shifter_src0_pre[28], alu_shifter_src0_pre[29],
                                         alu_shifter_src0_pre[30], alu_shifter_src0_pre[31]
                                        };






assign alu_shifter_right_in = alu_shifter_shift_in & alu_shifter_src0_pre[31];

assign alu_shifter_right_in_mask_pre[31:0] = (alu_shifter_shift_xsr)
                                             ? {alu_shifter_src0_pre[30:0], alu_shifter_srcc}
                                             : {32{alu_shifter_right_in}};

assign alu_shifter_right_in_mask[31:0] = (!alu_shifter_shift_dr && alu_shifter_shift_round)
                                          ? alu_shifter_src0_reverse[31:0] 
                                          : alu_shifter_right_in_mask_pre[31:0]; 





always @( alu_shifter_src0[31:0]
       or alu_shifter_right_in_mask[31:0]
       or alu_shifter_src1[4:0])
begin
  case(alu_shifter_src1[4:0])
  5'b00000:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[0], alu_shifter_src0[31:0]};
  5'b00001:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[1:0], alu_shifter_src0[31:1]};
  5'b00010:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[2:0], alu_shifter_src0[31:2]};
  5'b00011:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[3:0], alu_shifter_src0[31:3]};
  5'b00100:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[4:0], alu_shifter_src0[31:4]};
  5'b00101:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[5:0], alu_shifter_src0[31:5]};
  5'b00110:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[6:0], alu_shifter_src0[31:6]};
  5'b00111:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[7:0], alu_shifter_src0[31:7]};
  5'b01000:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[8:0], alu_shifter_src0[31:8]};
  5'b01001:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[9:0], alu_shifter_src0[31:9]};
  5'b01010:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[10:0], alu_shifter_src0[31:10]};
  5'b01011:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[11:0], alu_shifter_src0[31:11]};
  5'b01100:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[12:0], alu_shifter_src0[31:12]};
  5'b01101:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[13:0], alu_shifter_src0[31:13]};
  5'b01110:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[14:0], alu_shifter_src0[31:14]};
  5'b01111:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[15:0], alu_shifter_src0[31:15]};
  5'b10000:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[16:0], alu_shifter_src0[31:16]};
  5'b10001:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[17:0], alu_shifter_src0[31:17]};
  5'b10010:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[18:0], alu_shifter_src0[31:18]};
  5'b10011:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[19:0], alu_shifter_src0[31:19]};
  5'b10100:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[20:0], alu_shifter_src0[31:20]};
  5'b10101:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[21:0], alu_shifter_src0[31:21]};
  5'b10110:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[22:0], alu_shifter_src0[31:22]};
  5'b10111:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[23:0], alu_shifter_src0[31:23]};
  5'b11000:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[24:0], alu_shifter_src0[31:24]};
  5'b11001:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[25:0], alu_shifter_src0[31:25]};
  5'b11010:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[26:0], alu_shifter_src0[31:26]};
  5'b11011:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[27:0], alu_shifter_src0[31:27]};
  5'b11100:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[28:0], alu_shifter_src0[31:28]};
  5'b11101:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[29:0], alu_shifter_src0[31:29]};
  5'b11110:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[30:0], alu_shifter_src0[31:30]};
  5'b11111:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = {alu_shifter_right_in_mask[31:0], alu_shifter_src0[31]};
  default:
     {alu_shifter_right_to_c, alu_shifter_right_rst[31:0]}
                      = 33'bx;
  endcase

end





assign alu_shifter_rst_right_out[31:0] = (alu_shifter_shift_to_c) 
                                    ? {alu_shifter_right_to_c, alu_shifter_right_rst[31:1]}
                                    : alu_shifter_right_rst[31:0];

assign alu_shifter_rst_left_out[31:0] =
                                {alu_shifter_rst_right_out[0],alu_shifter_rst_right_out[1],
                                 alu_shifter_rst_right_out[2],alu_shifter_rst_right_out[3],
                                 alu_shifter_rst_right_out[4],alu_shifter_rst_right_out[5],
                                 alu_shifter_rst_right_out[6],alu_shifter_rst_right_out[7],
                                 alu_shifter_rst_right_out[8],alu_shifter_rst_right_out[9],
                                 alu_shifter_rst_right_out[10],alu_shifter_rst_right_out[11],
                                 alu_shifter_rst_right_out[12],alu_shifter_rst_right_out[13],
                                 alu_shifter_rst_right_out[14],alu_shifter_rst_right_out[15],
                                 alu_shifter_rst_right_out[16],alu_shifter_rst_right_out[17],
                                 alu_shifter_rst_right_out[18],alu_shifter_rst_right_out[19],
                                 alu_shifter_rst_right_out[20],alu_shifter_rst_right_out[21],
                                 alu_shifter_rst_right_out[22],alu_shifter_rst_right_out[23],
                                 alu_shifter_rst_right_out[24],alu_shifter_rst_right_out[25],
                                 alu_shifter_rst_right_out[26],alu_shifter_rst_right_out[27],
                                 alu_shifter_rst_right_out[28],alu_shifter_rst_right_out[29],
                                 alu_shifter_rst_right_out[30],alu_shifter_rst_right_out[31]
                                };

assign alu_shifter_rst_right_c_out = alu_shifter_right_rst[0];




assign alu_shifter_rst_out[31:0] = alu_shifter_shift_dr
                                 ? alu_shifter_rst_right_out[31:0]
                                 : alu_shifter_rst_left_out[31:0];



assign alu_shifter_rst_c_out     = alu_shifter_rst_right_c_out;










assign alu_misc_src0[31:0] = {32{alu_misc_sel}} & alu_src0[31:0];
assign alu_misc_src1[31:0] = {32{alu_misc_ff1}} & alu_src1[31:0];





always @( alu_misc_src1[31:0])
begin
  alu_misc_rst_ff1[5:0] = 6'd0;
  casez(alu_misc_src1[31:0])
  32'b1???????????????????????????????: alu_misc_rst_ff1[5:0] = 6'd0;
  32'b01??????????????????????????????: alu_misc_rst_ff1[5:0] = 6'd1;
  32'b001?????????????????????????????: alu_misc_rst_ff1[5:0] = 6'd2;
  32'b0001????????????????????????????: alu_misc_rst_ff1[5:0] = 6'd3;
  32'b00001???????????????????????????: alu_misc_rst_ff1[5:0] = 6'd4;
  32'b000001??????????????????????????: alu_misc_rst_ff1[5:0] = 6'd5;
  32'b0000001?????????????????????????: alu_misc_rst_ff1[5:0] = 6'd6;
  32'b00000001????????????????????????: alu_misc_rst_ff1[5:0] = 6'd7;
  32'b000000001???????????????????????: alu_misc_rst_ff1[5:0] = 6'd8;
  32'b0000000001??????????????????????: alu_misc_rst_ff1[5:0] = 6'd9;
  32'b00000000001?????????????????????: alu_misc_rst_ff1[5:0] = 6'd10;
  32'b000000000001????????????????????: alu_misc_rst_ff1[5:0] = 6'd11;
  32'b0000000000001???????????????????: alu_misc_rst_ff1[5:0] = 6'd12;
  32'b00000000000001??????????????????: alu_misc_rst_ff1[5:0] = 6'd13;
  32'b000000000000001?????????????????: alu_misc_rst_ff1[5:0] = 6'd14;
  32'b0000000000000001????????????????: alu_misc_rst_ff1[5:0] = 6'd15;
  32'b00000000000000001???????????????: alu_misc_rst_ff1[5:0] = 6'd16;
  32'b000000000000000001??????????????: alu_misc_rst_ff1[5:0] = 6'd17;
  32'b0000000000000000001?????????????: alu_misc_rst_ff1[5:0] = 6'd18;
  32'b00000000000000000001????????????: alu_misc_rst_ff1[5:0] = 6'd19;
  32'b000000000000000000001???????????: alu_misc_rst_ff1[5:0] = 6'd20;
  32'b0000000000000000000001??????????: alu_misc_rst_ff1[5:0] = 6'd21;
  32'b00000000000000000000001?????????: alu_misc_rst_ff1[5:0] = 6'd22;
  32'b000000000000000000000001????????: alu_misc_rst_ff1[5:0] = 6'd23;
  32'b0000000000000000000000001???????: alu_misc_rst_ff1[5:0] = 6'd24;
  32'b00000000000000000000000001??????: alu_misc_rst_ff1[5:0] = 6'd25;
  32'b000000000000000000000000001?????: alu_misc_rst_ff1[5:0] = 6'd26;
  32'b0000000000000000000000000001????: alu_misc_rst_ff1[5:0] = 6'd27;
  32'b00000000000000000000000000001???: alu_misc_rst_ff1[5:0] = 6'd28;
  32'b000000000000000000000000000001??: alu_misc_rst_ff1[5:0] = 6'd29;
  32'b0000000000000000000000000000001?: alu_misc_rst_ff1[5:0] = 6'd30;
  32'b00000000000000000000000000000001: alu_misc_rst_ff1[5:0] = 6'd31;
  32'b00000000000000000000000000000000: alu_misc_rst_ff1[5:0] = 6'd32;
  endcase

end

















assign alu_misc_revb   = alu_misc_sel && alu_sub_func[0] && !alu_sub_func[3];
assign alu_misc_revh   = alu_misc_sel && alu_sub_func[0] && alu_sub_func[3];
assign alu_misc_zext   = alu_misc_sel && alu_sub_func[1] && !alu_sub_func[2];
assign alu_misc_zexth  = alu_misc_sel && alu_misc_zext   && alu_sub_func[3];
assign alu_misc_sext   = alu_misc_sel && alu_sub_func[1] && alu_sub_func[2];
assign alu_misc_sextb  = alu_misc_sel && alu_misc_sext   && !alu_sub_func[3];
assign alu_misc_sexth  = alu_misc_sel && alu_misc_sext   && alu_sub_func[3];
assign alu_misc_xtrb   = alu_misc_sel && alu_sub_func[4];
assign alu_misc_xtrb0  = alu_misc_sel && alu_sub_func[4] && !alu_sub_func[3] && !alu_sub_func[2];
assign alu_misc_xtrb1  = alu_misc_sel && alu_sub_func[4] && !alu_sub_func[3] && alu_sub_func[2];
assign alu_misc_xtrb2  = alu_misc_sel && alu_sub_func[4] && alu_sub_func[3]  && !alu_sub_func[2];
assign alu_misc_xtrb3  = alu_misc_sel && alu_sub_func[4] && alu_sub_func[3]  && alu_sub_func[2];
assign alu_misc_tstnbz = alu_misc_sel && alu_sub_func[5];
assign alu_misc_ff1    = alu_misc_sel && alu_sub_func[6];


assign alu_misc_sign_byte[7:0] = (alu_misc_sext && alu_sub_func[3])
                                 ? {8{alu_misc_src0[15]}}
                                 : {8{alu_misc_src0[7]}};




assign alu_misc_b3_a  = alu_misc_revb;
assign alu_misc_b3_c  = alu_misc_revh;
assign alu_misc_b3_s  = alu_misc_sext;

assign alu_misc_rst_out[31:24] = {8{alu_misc_b3_a}} & alu_misc_src0[7:0]
                               | {8{alu_misc_b3_c}} & alu_misc_src0[23:16]
                               | {8{alu_misc_b3_s}} & alu_misc_sign_byte[7:0];




assign alu_misc_b2_b  = alu_misc_revb;
assign alu_misc_b2_d  = alu_misc_revh;
assign alu_misc_b2_s  = alu_misc_sext;

assign alu_misc_rst_out[23:16] = {8{alu_misc_b2_b}} & alu_misc_src0[15:8]
                               | {8{alu_misc_b2_d}} & alu_misc_src0[31:24]
                               | {8{alu_misc_b2_s}} & alu_misc_sign_byte[7:0];




assign alu_misc_b1_c  = alu_misc_revb;
assign alu_misc_b1_a  = alu_misc_revh;
assign alu_misc_b1_as = alu_misc_sextb;
assign alu_misc_b1_b  = alu_misc_zexth || alu_misc_sexth;

assign alu_misc_rst_out[15:8]  = {8{alu_misc_b1_c}}  & alu_misc_src0[23:16]
                               | {8{alu_misc_b1_a}}  & alu_misc_src0[7:0]
                               | {8{alu_misc_b1_b}}  & alu_misc_src0[15:8]
                               | {8{alu_misc_b1_as && alu_misc_src0[7]}};




assign alu_misc_b0_a = alu_misc_zext || alu_misc_sext || alu_misc_xtrb3;
assign alu_misc_b0_b = alu_misc_revh || alu_misc_xtrb2;
assign alu_misc_b0_c = alu_misc_xtrb1;
assign alu_misc_b0_d = alu_misc_revb || alu_misc_xtrb0;
assign alu_misc_b0_f = alu_misc_ff1;

assign alu_misc_rst_out[7:0]   = {8{alu_misc_b0_a}}  & alu_misc_src0[7:0]
                               | {8{alu_misc_b0_b}}  & alu_misc_src0[15:8]
                               | {8{alu_misc_b0_c}}  & alu_misc_src0[23:16]
                               | {8{alu_misc_b0_d}}  & alu_misc_src0[31:24]
                               | {8{alu_misc_b0_f}}  & {2'b0,alu_misc_rst_ff1[5:0]};







assign alu_misc_rst_c_out = alu_misc_xtrb && |alu_misc_rst_out[7:0]
                         || alu_misc_tstnbz &&
                            (   (|alu_misc_src0[31:24])
                             && (|alu_misc_src0[23:16])
                             && (|alu_misc_src0[15:8])
                             && (|alu_misc_src0[7:0]));














assign alu_adder_shared_rst_out[31:0] = alu_adder_rst_out[31:0];

assign alu_adder_shared_rst_c_out     = alu_adder_rst_c_out;





assign alu_rbus_req = alu_sel;

assign alu_rbus_data_vld = alu_dst_vld;

assign alu_rbus_data[31:0] = {32{alu_adder_sel}}   & alu_adder_shared_rst_out[31:0]
                           | {32{alu_logic_sel}}   & alu_logic_rst_out[31:0]
                           | {32{alu_shifter_sel}} & alu_shifter_rst_out[31:0]
                           | {32{alu_misc_sel}}    & alu_misc_rst_out[31:0];



assign alu_rbus_c_vld = ctrl_xx_dup_alu_sel;
assign alu_rbus_c     = (alu_misc_sel    & alu_misc_rst_c_out)
                      | (alu_shifter_sel & alu_shifter_rst_c_out)
		      | (alu_logic_sel   & alu_logic_rst_c_out)
		      | (alu_adder_sel   & alu_adder_shared_rst_c_out);

assign iu_ifu_c_write_back = alu_rbus_c_vld && ifu_iu_ex_inst_vld;






endmodule



























module nm_iu_branch(
  branch_ctrl_stall,
  branch_pcgen_add_pc,
  branch_pcgen_br_chgflw_vld,
  branch_pcgen_br_chgflw_vld_for_data,
  branch_pcgen_br_pc_chgflw_vld,
  branch_pcgen_branch_chgflw_vld_for_data,
  branch_pcgen_jmp_chgflw_vld_for_data,
  branch_pcgen_reg_pc,
  branch_rbus_data,
  branch_rbus_data_vld,
  branch_rbus_req,
  branch_wb_jmp_reg,
  cp0_iu_src_c,
  ctrl_branch_ex_data_sel,
  ctrl_branch_ex_sel,
  decd_branch_sub_func,
  ifu_iu_ex_imm,
  ifu_iu_ex_src0_reg,
  oper_branch_reg,
  pcgen_branch_inc_pc,
  pcgen_xx_ibus_idle,
  retire_branch_stall,
  wb_ctrl_stall_without_hready
);


input           cp0_iu_src_c;                           
input           ctrl_branch_ex_data_sel;                
input           ctrl_branch_ex_sel;                     
input   [6 :0]  decd_branch_sub_func;                   
input   [31:0]  ifu_iu_ex_imm;                          
input   [4 :0]  ifu_iu_ex_src0_reg;                     
input   [31:0]  oper_branch_reg;                        
input   [30:0]  pcgen_branch_inc_pc;                    
input           pcgen_xx_ibus_idle;                     
input           retire_branch_stall;                    
input           wb_ctrl_stall_without_hready;           
output          branch_ctrl_stall;                      
output  [30:0]  branch_pcgen_add_pc;                    
output          branch_pcgen_br_chgflw_vld;             
output          branch_pcgen_br_chgflw_vld_for_data;    
output          branch_pcgen_br_pc_chgflw_vld;          
output          branch_pcgen_branch_chgflw_vld_for_data; 
output          branch_pcgen_jmp_chgflw_vld_for_data;   
output  [30:0]  branch_pcgen_reg_pc;                    
output  [31:0]  branch_rbus_data;                       
output          branch_rbus_data_vld;                   
output          branch_rbus_req;                        
output          branch_wb_jmp_reg;                      




wire            branch_br_chgflw;                       
wire            branch_br_pc_chgflw;                    
wire            branch_br_taken;                        
wire            branch_condbr_actual_taken;             
wire            branch_condbr_predict_fail;             
wire            branch_ctrl_stall;                      
wire            branch_jmp_reg;                         
wire    [31:0]  branch_offset_addr;                     
wire    [30:0]  branch_pcgen_add_pc;                    
wire            branch_pcgen_br_chgflw_vld;             
wire            branch_pcgen_br_chgflw_vld_for_data;    
wire            branch_pcgen_br_pc_chgflw_vld;          
wire            branch_pcgen_branch_chgflw_vld_for_data; 
wire            branch_pcgen_jmp_chgflw_vld_for_data;   
wire    [30:0]  branch_pcgen_reg_pc;                    
wire            branch_predict_taken;                   
wire    [31:0]  branch_rbus_data;                       
wire            branch_rbus_data_vld;                   
wire            branch_rbus_req;                        
wire            branch_stall;                           
wire            branch_sub_routine;                     
wire            branch_wb_jmp_reg;                      
wire            cp0_iu_src_c;                           
wire            ctrl_branch_ex_data_sel;                
wire            ctrl_branch_ex_sel;                     
wire    [6 :0]  decd_branch_sub_func;                   
wire    [31:0]  ifu_iu_ex_imm;                          
wire    [4 :0]  ifu_iu_ex_src0_reg;                     
wire    [31:0]  oper_branch_reg;                        
wire    [30:0]  pcgen_branch_inc_pc;                    
wire            pcgen_xx_ibus_idle;                     
wire            retire_branch_stall;                    
wire            wb_ctrl_stall_without_hready;           






































assign branch_br_pc_chgflw = branch_condbr_actual_taken   //bt,bf taken
                          || !decd_branch_sub_func[1]; //br, bsr, jmp, jsr


assign branch_condbr_actual_taken  = (decd_branch_sub_func[2] ^ cp0_iu_src_c)
                                     && decd_branch_sub_func[1];
assign branch_predict_taken        = ifu_iu_ex_imm[0] && decd_branch_sub_func[1];
assign branch_condbr_predict_fail  = branch_predict_taken ^ branch_condbr_actual_taken;



assign branch_br_chgflw     = branch_jmp_reg             //jmp, jsr
                                && (branch_sub_routine   //not jmp r15
                                    || (ifu_iu_ex_src0_reg[4:0] != 5'b01111)
                                   )
                           || branch_condbr_predict_fail;



assign branch_sub_routine   = decd_branch_sub_func[0];

assign branch_jmp_reg       = decd_branch_sub_func[3];

assign branch_br_taken      = branch_condbr_actual_taken         //bt bf taken
                           || (!decd_branch_sub_func[3]
                               && !decd_branch_sub_func[1]); //br bsr























assign branch_offset_addr[31:0]    = ifu_iu_ex_imm[31:0];















































































assign branch_stall      = retire_branch_stall //for dbg disable
                        || (branch_br_chgflw && !pcgen_xx_ibus_idle);
assign branch_ctrl_stall = ctrl_branch_ex_data_sel && branch_stall;







assign branch_rbus_req = ctrl_branch_ex_sel && !branch_stall;// && branch_br







assign branch_rbus_data_vld = //ctrl_branch_ex_data_sel 

                              branch_sub_routine;











assign branch_rbus_data[31:0] = {pcgen_branch_inc_pc[30:0], 1'b0};



       





















assign branch_wb_jmp_reg = ctrl_branch_ex_data_sel && branch_jmp_reg;























assign branch_pcgen_br_chgflw_vld             = ctrl_branch_ex_data_sel && branch_br_chgflw
                                             && !wb_ctrl_stall_without_hready
                                             && pcgen_xx_ibus_idle;
assign branch_pcgen_br_chgflw_vld_for_data    = ctrl_branch_ex_data_sel && branch_br_chgflw
                                             && pcgen_xx_ibus_idle;

assign branch_pcgen_br_pc_chgflw_vld          = ctrl_branch_ex_sel && branch_br_pc_chgflw
                                             && !branch_stall;
assign branch_pcgen_branch_chgflw_vld_for_data = ctrl_branch_ex_data_sel
                                              && branch_br_taken;
assign branch_pcgen_jmp_chgflw_vld_for_data    = ctrl_branch_ex_data_sel
                                              && branch_jmp_reg; 











assign branch_pcgen_reg_pc[30:0] = oper_branch_reg[31:1];
assign branch_pcgen_add_pc[30:0] = branch_offset_addr[31:1];











endmodule



























module nm_iu_ctrl(
  branch_ctrl_stall,
  cp0_iu_stall,
  ctrl_alu_ex_data_sel,
  ctrl_alu_ex_sel,
  ctrl_alu_mad_oper_mux_en,
  ctrl_alu_oper_mux_en,
  ctrl_branch_ex_data_sel,
  ctrl_branch_ex_sel,
  ctrl_cp0_ex_data_sel,
  ctrl_lsu_ex_data_sel,
  ctrl_mad_ex_data_sel,
  ctrl_mad_ex_sel,
  ctrl_mad_oper_mux_en,
  ctrl_retire_nest_int_en,
  ctrl_retire_ni_vld,
  ctrl_special_ex_data_sel,
  ctrl_special_ex_sel,
  ctrl_special_expt_vec,
  ctrl_special_expt_vld,
  ctrl_wb_ex_inst_dst_vld,
  ctrl_wb_nie_nir_vld,
  ctrl_xx_dup_alu_sel,
  ctrl_xx_lsu_predec_sel,
  ctrl_xx_sp_adjust,
  ctrl_xx_sp_sub,
  decd_ctrl_expt_bkpt,
  decd_ctrl_expt_inv,
  decd_ctrl_expt_trap,
  decd_ctrl_expt_wsc,
  decd_xx_sub_func,
  decd_xx_unit_sel,
  decd_xx_unit_special_sel,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_expt_vld,
  ifu_iu_ex_inst_vld,
  ifu_iu_ex_main_unit_sel,
  ifu_iu_ex_ni,
  ifu_iu_ex_pcode,
  ifu_iu_ex_prvlg_expt_vld,
  ifu_iu_ex_rand_vld,
  ifu_iu_ex_sp_oper,
  ifu_iu_ex_split_on,
  iu_cp0_ex_data_sel,
  iu_cp0_ex_sel,
  iu_cp0_nest_int_en,
  iu_cp0_oper_mux_en,
  iu_ifu_ex_stall,
  iu_lsu_ex_data_sel,
  iu_lsu_ex_sel,
  iu_lsu_oper_mux_en,
  iu_lsu_split_on,
  lsu_iu_stall,
  mad_ctrl_stall,
  pcgen_ctrl_stall,
  rbus_wb_inst_cmplt,
  vector_ctrl_stall,
  wb_ctrl_stall
);


input          branch_ctrl_stall;       
input          cp0_iu_stall;            
input          decd_ctrl_expt_bkpt;     
input          decd_ctrl_expt_inv;      
input          decd_ctrl_expt_trap;     
input          decd_ctrl_expt_wsc;      
input   [6:0]  decd_xx_sub_func;        
input   [6:0]  decd_xx_unit_sel;        
input          decd_xx_unit_special_sel; 
input          ifu_iu_ex_cr_oper;       
input          ifu_iu_ex_expt_vld;      
input          ifu_iu_ex_inst_vld;      
input   [1:0]  ifu_iu_ex_main_unit_sel; 
input          ifu_iu_ex_ni;            
input   [4:0]  ifu_iu_ex_pcode;         
input          ifu_iu_ex_prvlg_expt_vld; 
input          ifu_iu_ex_rand_vld;      
input          ifu_iu_ex_sp_oper;       
input          ifu_iu_ex_split_on;      
input          lsu_iu_stall;            
input          mad_ctrl_stall;          
input          pcgen_ctrl_stall;        
input          rbus_wb_inst_cmplt;      
input          vector_ctrl_stall;       
input          wb_ctrl_stall;           
output         ctrl_alu_ex_data_sel;    
output         ctrl_alu_ex_sel;         
output         ctrl_alu_mad_oper_mux_en; 
output         ctrl_alu_oper_mux_en;    
output         ctrl_branch_ex_data_sel; 
output         ctrl_branch_ex_sel;      
output         ctrl_cp0_ex_data_sel;    
output         ctrl_lsu_ex_data_sel;    
output         ctrl_mad_ex_data_sel;    
output         ctrl_mad_ex_sel;         
output         ctrl_mad_oper_mux_en;    
output         ctrl_retire_nest_int_en; 
output         ctrl_retire_ni_vld;      
output         ctrl_special_ex_data_sel; 
output         ctrl_special_ex_sel;     
output  [4:0]  ctrl_special_expt_vec;   
output         ctrl_special_expt_vld;   
output         ctrl_wb_ex_inst_dst_vld; 
output         ctrl_wb_nie_nir_vld;     
output         ctrl_xx_dup_alu_sel;     
output         ctrl_xx_lsu_predec_sel;  
output         ctrl_xx_sp_adjust;       
output         ctrl_xx_sp_sub;          
output         iu_cp0_ex_data_sel;      
output         iu_cp0_ex_sel;           
output         iu_cp0_nest_int_en;      
output         iu_cp0_oper_mux_en;      
output         iu_ifu_ex_stall;         
output         iu_lsu_ex_data_sel;      
output         iu_lsu_ex_sel;           
output         iu_lsu_oper_mux_en;      
output         iu_lsu_split_on;         


reg     [4:0]  ctrl_special_expt_vec;   


wire           bctm_ctrl_stall;         
wire           branch_ctrl_stall;       
wire           cp0_iu_stall;            
wire           ctrl_alu_ex_data_sel;    
wire           ctrl_alu_ex_sel;         
wire           ctrl_alu_mad_oper_mux_en; 
wire           ctrl_alu_oper_mux_en;    
wire           ctrl_branch_ex_data_sel; 
wire           ctrl_branch_ex_sel;      
wire           ctrl_cp0_ex_data_sel;    
wire           ctrl_ex_inst_vld;        
wire           ctrl_internal_stall;     
wire           ctrl_lsu_ex_data_sel;    
wire           ctrl_mad_ex_data_sel;    
wire           ctrl_mad_ex_sel;         
wire           ctrl_mad_oper_mux_en;    
wire           ctrl_retire_nest_int_en; 
wire           ctrl_retire_ni_vld;      
wire           ctrl_special_ex_data_sel; 
wire           ctrl_special_ex_sel;     
wire           ctrl_special_expt_vld;   
wire           ctrl_wb_ex_inst_dst_vld; 
wire           ctrl_wb_nie_nir_vld;     
wire           ctrl_xx_dup_alu_sel;     
wire           ctrl_xx_lsu_predec_sel;  
wire           ctrl_xx_sp_adjust;       
wire           ctrl_xx_sp_sub;          
wire           decd_ctrl_expt_bkpt;     
wire           decd_ctrl_expt_inv;      
wire           decd_ctrl_expt_trap;     
wire           decd_ctrl_expt_wsc;      
wire    [6:0]  decd_xx_sub_func;        
wire    [6:0]  decd_xx_unit_sel;        
wire           decd_xx_unit_special_sel; 
wire           ifu_iu_ex_cr_oper;       
wire           ifu_iu_ex_expt_vld;      
wire           ifu_iu_ex_inst_vld;      
wire    [1:0]  ifu_iu_ex_main_unit_sel; 
wire           ifu_iu_ex_ni;            
wire    [4:0]  ifu_iu_ex_pcode;         
wire           ifu_iu_ex_prvlg_expt_vld; 
wire           ifu_iu_ex_rand_vld;      
wire           ifu_iu_ex_sp_oper;       
wire           ifu_iu_ex_split_on;      
wire           iu_cp0_ex_data_sel;      
wire           iu_cp0_ex_sel;           
wire           iu_cp0_nest_int_en;      
wire           iu_cp0_oper_mux_en;      
wire           iu_ifu_ex_stall;         
wire           iu_lsu_ex_data_sel;      
wire           iu_lsu_ex_sel;           
wire           iu_lsu_oper_mux_en;      
wire           iu_lsu_split_on;         
wire           lsu_iu_stall;            
wire           mad_ctrl_stall;          
wire           pcgen_ctrl_stall;        
wire           predec_lsu_sel;          
wire           rbus_wb_inst_cmplt;      
wire           sec_ctrl_stall;          
wire    [7:0]  seu_xx_oper_mux_en;      
wire           vector_ctrl_stall;       
wire           wb_ctrl_stall;           








assign ctrl_internal_stall  = ifu_iu_ex_inst_vld
                              && wb_ctrl_stall;




assign bctm_ctrl_stall = 1'b0;
assign sec_ctrl_stall = 1'b0;


assign iu_ifu_ex_stall = ctrl_internal_stall
                         || branch_ctrl_stall
                         || pcgen_ctrl_stall
                         || vector_ctrl_stall
                         || cp0_iu_stall
                         || lsu_iu_stall
                         || mad_ctrl_stall
                         || bctm_ctrl_stall
                         || sec_ctrl_stall;







assign ctrl_ex_inst_vld      = ifu_iu_ex_inst_vld
                               && !ifu_iu_ex_rand_vld
                               && !ctrl_internal_stall;





assign predec_lsu_sel    = ifu_iu_ex_main_unit_sel[1];
assign ctrl_xx_lsu_predec_sel = predec_lsu_sel;
assign ctrl_xx_dup_alu_sel    = ifu_iu_ex_main_unit_sel[0];


assign ctrl_xx_sp_adjust = predec_lsu_sel && (ifu_iu_ex_pcode[4] || ifu_iu_ex_pcode[3]);
assign ctrl_xx_sp_sub    = predec_lsu_sel && ifu_iu_ex_pcode[3];


assign ctrl_alu_ex_sel       = ctrl_ex_inst_vld && !decd_xx_unit_special_sel && decd_xx_unit_sel[0];
assign ctrl_mad_ex_sel       = ctrl_ex_inst_vld && !decd_xx_unit_special_sel && decd_xx_unit_sel[1];
assign iu_lsu_ex_sel         = ctrl_ex_inst_vld && !decd_xx_unit_special_sel && predec_lsu_sel;
assign ctrl_special_ex_sel   = ctrl_ex_inst_vld && (decd_xx_unit_sel[3] || decd_xx_unit_special_sel);
assign iu_cp0_ex_sel         = ctrl_ex_inst_vld && !decd_xx_unit_special_sel && decd_xx_unit_sel[4];

assign ctrl_branch_ex_sel    = ctrl_ex_inst_vld && decd_xx_unit_sel[5];




assign seu_xx_oper_mux_en[7:0] = 8'b0;
assign ctrl_alu_oper_mux_en     = (seu_xx_oper_mux_en[0]
                                   || decd_xx_unit_sel[0]
                                   || ifu_iu_ex_rand_vld);

assign ctrl_mad_oper_mux_en     = (seu_xx_oper_mux_en[1] || decd_xx_unit_sel[1]);
assign ctrl_alu_mad_oper_mux_en = 1'b0;




assign iu_cp0_oper_mux_en       = (seu_xx_oper_mux_en[4] || decd_xx_unit_sel[4]);



assign iu_lsu_oper_mux_en       = predec_lsu_sel;


assign ctrl_alu_ex_data_sel     = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && decd_xx_unit_sel[0];
assign ctrl_mad_ex_data_sel     = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && decd_xx_unit_sel[1];
assign ctrl_lsu_ex_data_sel     = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && predec_lsu_sel;
assign ctrl_special_ex_data_sel = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && decd_xx_unit_sel[3];
assign ctrl_cp0_ex_data_sel     = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && decd_xx_unit_sel[4];
assign ctrl_branch_ex_data_sel  = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && decd_xx_unit_sel[5];




assign iu_lsu_ex_data_sel       = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && predec_lsu_sel
                                  && !decd_xx_unit_special_sel;
assign iu_cp0_ex_data_sel       = ifu_iu_ex_inst_vld && !ifu_iu_ex_rand_vld && decd_xx_unit_sel[4];


assign iu_lsu_split_on = ifu_iu_ex_split_on;













assign ctrl_wb_ex_inst_dst_vld   = ifu_iu_ex_inst_vld
                                   && !ifu_iu_ex_rand_vld;
                                //   && decd_xx_dst_vld;







assign iu_cp0_nest_int_en = ctrl_ex_inst_vld
                            && ifu_iu_ex_sp_oper
                            && ifu_iu_ex_cr_oper
                            && !ifu_iu_ex_split_on
                            && rbus_wb_inst_cmplt;

assign ctrl_retire_nest_int_en = 1'b0;
assign ctrl_wb_nie_nir_vld = ifu_iu_ex_cr_oper;






assign ctrl_retire_ni_vld       = ifu_iu_ex_inst_vld && ifu_iu_ex_ni;




assign ctrl_special_expt_vld = ifu_iu_ex_expt_vld
                            || ifu_iu_ex_prvlg_expt_vld
                            || decd_ctrl_expt_inv
                            || decd_ctrl_expt_bkpt
                            || decd_ctrl_expt_trap
                            || decd_ctrl_expt_wsc;


always @( decd_ctrl_expt_inv
       or ifu_iu_ex_expt_vld
       or decd_ctrl_expt_trap
       or decd_xx_sub_func[1:0]
       or ifu_iu_ex_prvlg_expt_vld
       or decd_ctrl_expt_bkpt)
begin
  if(ifu_iu_ex_expt_vld)  //exception from IFU
  begin
    ctrl_special_expt_vec[4:0] = 5'b10;
  end
  else if(ifu_iu_ex_prvlg_expt_vld)
  begin
    ctrl_special_expt_vec[4:0] = 5'b101;
  end
  else if(decd_ctrl_expt_inv)  //invalid exception from iu_decd
  begin
    ctrl_special_expt_vec[4:0] = 5'b100;
  end
  else if(decd_ctrl_expt_bkpt) //bkpt exception from iu_decd
  begin
    ctrl_special_expt_vec[4:0] = 5'b111;
  end
  else if(decd_ctrl_expt_trap) //trap exception from iu_decd
  begin
    ctrl_special_expt_vec[4:0] = {3'b100, decd_xx_sub_func[1:0]};
  end
  else  //no exception in before execution units
  begin
    //although wsc does not use vbr vec 12 anymore, the ctrl_expt_vec
    //still takes 12 as default value, avoiding vbr vec 0, which is
    //used in software reset. by chenc
    ctrl_special_expt_vec[4:0] = 5'b01100;
  end

end


endmodule




























module nm_iu_decd(
  ctrl_xx_lsu_predec_sel,
  decd_alu_dst_vld_pre,
  decd_alu_src0_pre,
  decd_alu_src1_imm_vld,
  decd_alu_src1_pre,
  decd_alu_srcc_pre,
  decd_branch_sub_func,
  decd_ctrl_expt_bkpt,
  decd_ctrl_expt_inv,
  decd_ctrl_expt_trap,
  decd_ctrl_expt_wsc,
  decd_retire_cp0_inst,
  decd_retire_inst_rte,
  decd_special_idly,
  decd_wb_cp0_inst_cr_oper,
  decd_xx_dst_vld,
  decd_xx_func,
  decd_xx_grs_vld,
  decd_xx_inst_32bit,
  decd_xx_sub_func,
  decd_xx_unit_sel,
  decd_xx_unit_special_sel,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_expt_vld,
  ifu_iu_ex_inst_bkpt,
  ifu_iu_ex_op,
  ifu_iu_ex_pcode,
  ifu_iu_ex_prvlg_expt_vld,
  ifu_iu_ex_sop,
  iu_cp0_ex_doze,
  iu_cp0_ex_mfcr,
  iu_cp0_ex_mtcr,
  iu_cp0_ex_psrclr,
  iu_cp0_ex_psrset,
  iu_cp0_ex_rte,
  iu_cp0_ex_stop,
  iu_cp0_ex_wait,
  iu_lsu_inst_store,
  iu_lsu_offset_sub,
  iu_lsu_sign_exten,
  iu_lsu_size
);


input          ctrl_xx_lsu_predec_sel;  
input          ifu_iu_ex_cr_oper;       
input          ifu_iu_ex_expt_vld;      
input          ifu_iu_ex_inst_bkpt;     
input   [5:0]  ifu_iu_ex_op;            
input   [4:0]  ifu_iu_ex_pcode;         
input          ifu_iu_ex_prvlg_expt_vld; 
input   [5:0]  ifu_iu_ex_sop;           
output  [1:0]  decd_alu_dst_vld_pre;    
output  [3:0]  decd_alu_src0_pre;       
output         decd_alu_src1_imm_vld;   
output  [5:0]  decd_alu_src1_pre;       
output  [1:0]  decd_alu_srcc_pre;       
output  [6:0]  decd_branch_sub_func;    
output         decd_ctrl_expt_bkpt;     
output         decd_ctrl_expt_inv;      
output         decd_ctrl_expt_trap;     
output         decd_ctrl_expt_wsc;      
output         decd_retire_cp0_inst;    
output         decd_retire_inst_rte;    
output         decd_special_idly;       
output         decd_wb_cp0_inst_cr_oper; 
output         decd_xx_dst_vld;         
output  [3:0]  decd_xx_func;            
output         decd_xx_grs_vld;         
output         decd_xx_inst_32bit;      
output  [6:0]  decd_xx_sub_func;        
output  [6:0]  decd_xx_unit_sel;        
output         decd_xx_unit_special_sel; 
output         iu_cp0_ex_doze;          
output         iu_cp0_ex_mfcr;          
output         iu_cp0_ex_mtcr;          
output         iu_cp0_ex_psrclr;        
output         iu_cp0_ex_psrset;        
output         iu_cp0_ex_rte;           
output         iu_cp0_ex_stop;          
output         iu_cp0_ex_wait;          
output         iu_lsu_inst_store;       
output         iu_lsu_offset_sub;       
output         iu_lsu_sign_exten;       
output  [1:0]  iu_lsu_size;             


reg            decd_dst_vld;            
reg     [1:0]  decd_dst_vld_pre;        
reg            decd_expt_inv;           
reg            decd_expt_trap;          
reg     [3:0]  decd_func;               
reg     [3:0]  decd_func_for_lsu;       
reg            decd_inst_grs;           
reg     [3:0]  decd_src0_pre;           
reg            decd_src1_imm_vld;       
reg     [5:0]  decd_src1_pre;           
reg     [1:0]  decd_srcc_pre;           
reg     [6:0]  decd_sub_func;           
reg     [6:0]  decd_sub_func_for_branch; 
reg     [6:0]  decd_sub_func_for_lsu;   
reg     [6:0]  decd_unit_sel;           


wire           ctrl_xx_lsu_predec_sel;  
wire    [1:0]  decd_alu_dst_vld_pre;    
wire    [3:0]  decd_alu_src0_pre;       
wire           decd_alu_src1_imm_vld;   
wire    [5:0]  decd_alu_src1_pre;       
wire    [1:0]  decd_alu_srcc_pre;       
wire    [6:0]  decd_branch_sub_func;    
wire           decd_ctrl_expt_bkpt;     
wire           decd_ctrl_expt_inv;      
wire           decd_ctrl_expt_trap;     
wire           decd_ctrl_expt_wsc;      
wire           decd_expt_bkpt;          
wire           decd_expt_inv_with_mad;  
wire           decd_fin_dst_vld;        
wire    [3:0]  decd_fin_func;           
wire    [6:0]  decd_fin_sub_func;       
wire    [6:0]  decd_fin_unit_sel;       
wire           decd_inst_bkpt;          
wire           decd_inst_doze;          
wire           decd_inst_idly;          
wire           decd_inst_mfcr;          
wire           decd_inst_mtcr;          
wire           decd_inst_psrclr;        
wire           decd_inst_psrset;        
wire           decd_inst_rte;           
wire           decd_inst_stop;          
wire           decd_inst_wait;          
wire    [5:0]  decd_op;                 
wire    [5:0]  decd_op_lsu;             
wire    [4:0]  decd_pcode;              
wire           decd_retire_cp0_inst;    
wire           decd_retire_inst_rte;    
wire    [5:0]  decd_sop;                
wire           decd_special_idly;       
wire           decd_wb_cp0_inst_cr_oper; 
wire           decd_xx_dst_vld;         
wire    [3:0]  decd_xx_func;            
wire           decd_xx_grs_vld;         
wire           decd_xx_inst_32bit;      
wire    [6:0]  decd_xx_sub_func;        
wire    [6:0]  decd_xx_unit_sel;        
wire           decd_xx_unit_special_sel; 
wire           ifu_iu_ex_cr_oper;       
wire           ifu_iu_ex_expt_vld;      
wire           ifu_iu_ex_inst_bkpt;     
wire    [5:0]  ifu_iu_ex_op;            
wire    [4:0]  ifu_iu_ex_pcode;         
wire           ifu_iu_ex_prvlg_expt_vld; 
wire    [5:0]  ifu_iu_ex_sop;           
wire           iu_cp0_ex_doze;          
wire           iu_cp0_ex_mfcr;          
wire           iu_cp0_ex_mtcr;          
wire           iu_cp0_ex_psrclr;        
wire           iu_cp0_ex_psrset;        
wire           iu_cp0_ex_rte;           
wire           iu_cp0_ex_stop;          
wire           iu_cp0_ex_wait;          
wire           iu_lsu_inst_store;       
wire           iu_lsu_offset_sub;       
wire           iu_lsu_sign_exten;       
wire    [1:0]  iu_lsu_size;             








parameter SEL_WIDTH             = 7;
parameter FUNC_WIDTH            = 4;
parameter SUB_FUNC_WIDTH        = 7;
parameter DST_VLD_PRE_WIDTH     = 2;
parameter SRC0_PRE_WIDTH        = 4;
parameter SRC1_PRE_WIDTH        = 6;
parameter SRCC_PRE_WIDTH        = 2;



parameter ALU                   = 7'b0000001;
parameter MAD                   = 7'b0000010;
parameter LSU                   = 7'b0000100;
parameter SPECIAL               = 7'b0001000;
parameter CP0                   = 7'b0010000;
parameter BRANCH                = 7'b0100000;












parameter DST_VLD_UNCHG         = 2'b00;
parameter DST_VLD_C             = 2'b10;
parameter DST_VLD_C_NOT         = 2'b11;




parameter SRC0_UNCHG            = 4'b0000;
parameter SRC0_NOT              = 4'b0100;
parameter SRC0_CST_0            = 4'b0001;
parameter SRC0_CST_FFFFFFFF     = 4'b0101;
parameter SRC0_SHIFT_REG        = 4'b0010;
parameter SRC0_INST_ASR         = 4'b1010;



parameter SRC1_UNCHG            = 6'b000000;
parameter SRC1_NOT              = 6'b000100;
parameter SRC1_CST_0            = 6'b000001;
parameter SRC1_GEN_MASK         = 6'b000010;
parameter SRC1_GEN_MASK_NOT     = 6'b000110;
parameter SRC1_INST_MOVIH       = 6'b001000;
parameter SRC1_INST_IXH         = 6'b010000;
parameter SRC1_INST_IXH_NOT     = 6'b010100;
parameter SRC1_INST_IXW         = 6'b100000;
parameter SRC1_INST_IXW_NOT     = 6'b100100;


parameter SRCC_UNCHG            = 2'b00;
parameter SRCC_NOT              = 2'b10;
parameter SRCC_CST_0            = 2'b01;
parameter SRCC_CST_1            = 2'b11;




assign decd_op[5:0]    = ifu_iu_ex_op[5:0];
assign decd_sop[5:0]   = ifu_iu_ex_sop[5:0];
assign decd_pcode[4:0] = ifu_iu_ex_pcode[4:0];


assign decd_xx_inst_32bit = ifu_iu_ex_op[5] && ifu_iu_ex_op[4]
                            && !ifu_iu_ex_cr_oper;












always @( decd_sop[5:0]
       or decd_pcode[4:0]
       or decd_op[5:0])
begin
  casez({decd_op[5:0],decd_sop[5:0],decd_pcode[4:0]})
    //16-bits instructions decode logic
    17'b000000???????????,  //lrw16
    17'b000001???????????,  //br16
    17'b000010???????????,  //bt16
    17'b000011???????????,  //bf16
    17'b000100???????????,  //lrw16
    17'b000101000????????,  //addi16.sp sp
    17'b000101001????????,  //subi16.sp
    17'b00010101100??????,  //nie
    17'b00010101101??????,  //nir
    17'b00010101110??????,  //ipush
    17'b00010101111??????,  //ipop
    17'b000101100????????,  //pop16
    17'b000101110????????,  //push16
    17'b00011????????????,  //addi16.sp rz
    17'b00100????????????,  //addi16
    17'b00101????????????,  //subi16
    17'b00110????????????,  //movi16 
    17'b00111?000????????,  //cmphsi16
    17'b00111?001????????,  //cmplti16
    17'b00111?010????????,  //cmpnei16
    17'b00111?100????????,  //bclri16
    17'b00111?101????????,  //bseti16
    17'b00111?110????????,  //btsti16
    17'b01000????????????,  //lsli16
    17'b01001????????????,  //lsri16
    17'b01010????????????,  //asri16
    17'b01011?00?????????,  //addu16 333
    17'b01011?01?????????,  //subu16 333
    17'b01011?10?????????,  //addi16 333
    17'b01011?11?????????,  //subi16 333
    17'b01100000?????????,  //addu16
    17'b01100001?????????,  //addc16
    17'b01100010?????????,  //subu16
    17'b01100011?????????,  //subc16
    17'b01100100?????????,  //cmphs16
    17'b01100101?????????,  //cmplt16
    17'b01100110?????????,  //cmpne16
    17'b01100111?????????,  //mvcv16
    17'b01101000?????????,  //and16
    17'b01101001?????????,  //andn16
    17'b01101010?????????,  //tst16
    17'b01101011?????????,  //tstnbz16
    17'b01101100?????????,  //or16
    17'b01101101?????????,  //xor16
    17'b01101110?????????,  //nor16
    17'b01101111?????????,  //mov16
    17'b01110000?????????,  //lsl16
    17'b01110001?????????,  //lsr16
    17'b01110010?????????,  //asr16
    17'b01110011?????????,  //rotl16
    17'b01110100?????????,  //zextb16
    17'b01110101?????????,  //zexth16
    17'b01110110?????????,  //sextb16
    17'b01110111?????????,  //sexth16
    17'b01111000?????????,  //jmp16
    17'b01111001?????????,  //jsr16
    17'b01111010?????????,  //revb16
    17'b01111011?????????,  //revh16
    17'b01111100?????????,  //mult16
    17'b10000????????????,  //ld16.b
    17'b10001????????????,  //ld16.h
    17'b1001?????????????,  //ld16.w //ld16.w sp
    17'b10100????????????,  //st16.b
    17'b10101????????????,  //st16.h
    17'b1011?????????????,  //st16.w //st16.w sp
    17'b11000000000100001,  //sync
    17'b11000000011100001,  //idly
    17'b11000000100000001,  //trap0
    17'b11000000100100001,  //trap1
    17'b11000000101000001,  //trap2
    17'b11000000101100001,  //trap3
    17'b11000001000000001,  //rte
    17'b11000001001000001,  //stop
    17'b11000001001100001,  //wait
    17'b11000001010000001,  //doze
    17'b11000001100000001,  //mfcr
    17'b11000001100100001,  //mtcr
    17'b11000001110000001,  //psrclr
    17'b11000001110100001,  //psrset
    17'b11000100000000001,  //addu
    17'b11000100000000010,  //addc
    17'b11000100000000100,  //subu
    17'b11000100000001000,  //subc
    17'b11000100000101000,  //mvc
    17'b11000100001000001,  //ixh
    17'b11000100001000010,  //ixw
    17'b11000100001100001,  //incf
    17'b11000100001100010,  //inct 
    17'b11000100001100100,  //decf 
    17'b11000100001101000,  //dect 
    17'b11000100100000001,  //and
    17'b11000100100000010,  //andn
    17'b11000100100100001,  //or
    17'b11000100100100010,  //xor
    17'b11000100100100100,  //nor
    17'b11000100101000001,  //bclri
    17'b11000100101000010,  //bseti
    17'b11000100101000100,  //btsti
    17'b11000101000000001,  //lsl
    17'b11000101000000010,  //lsr
    17'b11000101000000100,  //asr
    17'b11000101000001000,  //rotl
    17'b11000101001000001,  //lsli
    17'b11000101001000010,  //lsri
    17'b11000101001000100,  //asri
    17'b11000101001001000,  //rotli
    17'b11000101001100001,  //lslc
    17'b11000101001100010,  //lsrc
    17'b11000101001100100,  //asrc
    17'b11000101001101000,  //xsr
    17'b11000101010000001,  //bmaski
    17'b11000101110000001,  //xtrb0
    17'b11000101110000010,  //xtrb1
    17'b11000101110000100,  //xtrb2
    17'b11000101110001000,  //xtrb3
    17'b11000101111100001,  //ff0
    17'b11000101111100010,  //ff1
    17'b11000110000100001,  //mult
    17'b11010000011100001,  //ldm
    17'b11010100011100001,  //stm
    17'b1101100000???????,  //ld.b
    17'b1101100001???????,  //ld.h
    17'b1101100010???????,  //ld.w
    17'b1101100100???????,  //ld.bs
    17'b1101100101???????,  //ld.hs
    17'b1101110000???????,  //st.b
    17'b1101110001???????,  //st.h
    17'b1101110010???????,  //st.w
    17'b111000???????????,  //bsr
    17'b1110010000???????,  //addi 
    17'b1110010001???????,  //subi
    17'b1110010010???????,  //andi
    17'b1110010011???????,  //andni
    17'b1110010100???????,  //xori
    17'b11101000000??????,  //br
    17'b11101000010??????,  //bf
    17'b11101000011??????,  //bt
    17'b11101010000??????,  //movi
    17'b11101010001??????,  //movih
    17'b11101010100??????,  //lrw
    17'b11101011000??????,  //cmphsi
    17'b11101011001??????,  //cmplti
    17'b11101011010??????,  //cmpnei
    17'b110011000011?????,  //grs
    17'b111011???????????:begin  //ori
      decd_expt_inv = 1'b0;      //initial invalid instruction exception
    end
    default:begin                //invalid instruction
      decd_expt_inv = 1'b1;      //invalid instruction exception
    end
  endcase

end







always @( decd_sop[5:0]
       or decd_pcode[4:0]
       or decd_op[5:0])
begin
  //initialize decoded information value
  //operation information: execution unit selection, main function
  //and sub functions
  //decd_unit_sel[SEL_WIDTH-1:0]      = 7'b000000;
  decd_func[FUNC_WIDTH-1:0]         = 4'bxxxx;
  decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxxxxx;

  //operand prepare information: valid, and types
  //decd_dst_vld                      = 1'b0;
  decd_src1_imm_vld                 = 1'b0;



  //ALU/ALU oper prepare information
  decd_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0] = DST_VLD_UNCHG;
  decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_UNCHG;
  decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_UNCHG;
  decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_UNCHG;
  decd_inst_grs = 1'b0;




  casez({decd_op[5:0],decd_sop[5:0],decd_pcode[4:0]})
    //16-bits instructions decode logic


















    17'b000100???????????:begin  //lrw16
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bx000000;

      //decd_dst_vld                      = 1'b1;
      end
    17'b000101000????????:begin  //addi16.sp sp
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_IXW;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b000101001????????:begin  //subi16.sp
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_IXW_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b00010101100??????:begin  //nie
      end
    17'b00010101101??????:begin  //nir
      //decd_dst_vld                      = 1'b1;
      end
    17'b00010101110??????:begin  //ipush
      end
    17'b00010101111??????:begin  //ipop
      //decd_dst_vld                      = 1'b1;
      end
    17'b000101100????????:begin  //pop16
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b000101110????????:begin  //push16
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end
    17'b00011????????????:begin  //addi16.sp rz
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_IXW;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b00100????????????:begin  //addi16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b00101????????????:begin  //subi16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b00110????????????:begin  //movi16 
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_CST_0;
      end
    17'b00111?000????????:begin  //cmphsi16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx010;
      
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b00111?001????????:begin  //cmplti16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx100;

      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b00111?010????????:begin  //cmpnei16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx100;

      decd_src1_imm_vld                 = 1'b1;
      end
    17'b00111?100????????:begin  //bclri16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_GEN_MASK_NOT;
      end
    17'b00111?101????????:begin  //bseti16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_GEN_MASK;
      end
    17'b00111?110????????:begin  //btsti16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;

      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_GEN_MASK;
      end
    17'b01000????????????:begin  //lsli16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b01001????????????:begin  //lsri16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b01010????????????:begin  //asri16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00011;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_INST_ASR;
      end
    17'b01011?00?????????:begin  //addu16 333
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b01011?01?????????:begin  //subu16 333
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b01011?10?????????:begin  //addi16 333
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b01011?11?????????:begin  //subi16 333
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b01100000?????????:begin  //addu16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b01100001?????????:begin  //addc16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01100010?????????:begin  //subu16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b01100011?????????:begin  //subc16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end
    17'b01100100?????????:begin  //cmphs16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx010;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b01100101?????????:begin  //cmplt16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx100;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b01100110?????????:begin  //cmpne16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx100;
      end
    17'b01100111?????????:begin  //mvcv16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_CST_0;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_CST_0;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_NOT;
      end
    17'b01101000?????????:begin  //and16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01101001?????????:begin  //andn16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end
    17'b01101010?????????:begin  //tst16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;
      end
    17'b01101011?????????:begin  //tstnbz16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0100000;
      end
    17'b01101100?????????:begin  //or16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01101101?????????:begin  //xor16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0100;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01101110?????????:begin  //nor16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_NOT;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end
    17'b01101111?????????:begin  //mov16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_CST_0;
      end 
    17'b01110000?????????:begin  //lsl16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b01110001?????????:begin  //lsr16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b01110010?????????:begin  //asr16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00011;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_INST_ASR;
      end
    17'b01110011?????????:begin  //rotl16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00100;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b01110100?????????:begin  //zextb16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0000010;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01110101?????????:begin  //zexth16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0001010;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01110110?????????:begin  //sextb16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0000110;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01110111?????????:begin  //sexth16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0001110;

      //decd_dst_vld                      = 1'b1;
      end










    17'b01111010?????????:begin  //revb16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0000001;

      //decd_dst_vld                      = 1'b1;
      end
    17'b01111011?????????:begin  //revh16
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0001001;

      //decd_dst_vld                      = 1'b1;
      end
    17'b011111???????????:begin  //mult16
      //decd_unit_sel[SEL_WIDTH-1:0]      = MAD;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b10000????????????:begin  //ld16.b
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b10001????????????:begin  //ld16.h
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b1001?????????????:begin  //ld16.w //ld16.w sp
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b10100????????????:begin  //st16.b
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end
    17'b10101????????????:begin  //st16.h
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end
    17'b1011?????????????:begin  //st16.w //st16.w sp
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end

    //32-bits instructions decode logic
    17'b110000000001?????:begin  //sync
      //decd_unit_sel[SEL_WIDTH-1:0]      = SPECIAL;


      end
    17'b110000001000?????:begin  //trap0
      //decd_unit_sel[SEL_WIDTH-1:0]      = SPECIAL;

      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxxx00;


      end
    17'b110000001001?????:begin  //trap1
      //decd_unit_sel[SEL_WIDTH-1:0]      = SPECIAL;

      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxxx01;


      end
    17'b110000001010?????:begin  //trap2
      //decd_unit_sel[SEL_WIDTH-1:0]      = SPECIAL;

      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxxx10;


      end
    17'b110000001011?????:begin  //trap3
      //decd_unit_sel[SEL_WIDTH-1:0]      = SPECIAL;

      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxxx11;


      end
    17'b110000011000?????:begin  //mfcr
      //decd_dst_vld                      = 1'b1;
      end
    17'b110001000000????1:begin  //addu
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b110001000000???10:begin  //addc
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001000000??100:begin  //subu
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b110001000000?1000:begin  //subc
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end





















    17'b110001000001?????:begin  //mvc
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_CST_0;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_CST_0;
      end











    17'b110001000010????1:begin  //ixh
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_IXH;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b110001000010???10:begin  //ixw
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_IXW;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b110001000011????1:begin  //incf
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0] = DST_VLD_C_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b110001000011???10:begin  //inct 
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;
    
      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0] = DST_VLD_C;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b110001000011??100:begin  //decf 
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;
    
      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0] = DST_VLD_C_NOT;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b110001000011?1000:begin  //dect 
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0] = DST_VLD_C;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b110001001000????1:begin  //and
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001001000???10:begin  //andn
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end










    17'b110001001001????1:begin  //or
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001001001???10:begin  //xor
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0100;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001001001??100:begin  //nor
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_NOT;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end
    17'b110001001010????1:begin  //bclri
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_GEN_MASK_NOT;
      end
    17'b110001001010???10:begin  //bseti
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_GEN_MASK;
      end
    17'b110001001010??100:begin  //btsti
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx001;

      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_GEN_MASK;
      end
    17'b110001010000????1:begin  //lsl
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b110001010000???10:begin  //lsr
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b110001010000??100:begin  //asr
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00011;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_INST_ASR;
      end
    17'b110001010000?1000:begin  //rotl
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00100;

      //decd_dst_vld                      = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b110001010010????1:begin  //lsli
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b110001010010???10:begin  //lsri
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b110001010010??100:begin  //asri
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00011;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_INST_ASR;
      end
    17'b110001010010?1000:begin  //rotli
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00100;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_SHIFT_REG;
      end
    17'b110001010011????1:begin  //lslc
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx10000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end
    17'b110001010011???10:begin  //lsrc
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx10001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end
    17'b110001010011??100:begin  //asrc
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx10011;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end
    17'b110001010011?1000:begin  //xsr
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx11001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end
    17'b110001010100?????:begin  //bmaski
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0100;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_CST_FFFFFFFF;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end














    17'b110001011100????1:begin  //xtrb0
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0010000;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001011100???10:begin  //xtrb1
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0010100;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001011100??100:begin  //xtrb2
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0011000;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001011100?1000:begin  //xtrb3
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b0011100;

      //decd_dst_vld                      = 1'b1;
      end
    17'b110001011111????1:begin  //ff0
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b1000000;

      //decd_dst_vld                      = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end
    17'b110001011111???10:begin  //ff1
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b1000;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'b1000000;
      
      //decd_dst_vld                      = 1'b1;
      end
    17'b1100011??????????:begin  //mult
      //decd_unit_sel[SEL_WIDTH-1:0]      = MAD;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end





































































    17'b110100???????????:begin  //ldm
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b110101???????????:begin  //stm
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end
    17'b1101100000???????:begin  //ld.b
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b1101100001???????:begin  //ld.h
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b1101100010???????:begin  //ld.w
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b1101100100???????:begin  //ld.bs
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b1101100101???????:begin  //ld.hs
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_dst_vld                      = 1'b1;
      end
    17'b1101110000???????:begin  //st.b
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end
    17'b1101110001???????:begin  //st.h
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end
    17'b1101110010???????:begin  //st.w
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      end







    17'b1110010000???????:begin  //addi 
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_1;
      end
    17'b1110010001???????:begin  //subi
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b1110010010???????:begin  //andi
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end
    17'b1110010011???????:begin  //andni
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      end
    17'b1110010100???????:begin  //xori
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0100;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end






















    17'b11101010000??????:begin  //movi
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_CST_0;
      end
    17'b11101010001??????:begin  //movih
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;

      decd_src0_pre[SRC0_PRE_WIDTH-1:0] = SRC0_CST_0;
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_MOVIH;
      end
    17'b11101010100??????:begin  //lrw
      //decd_unit_sel[SEL_WIDTH-1:0]      = LSU;
      //decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bx000000;

      //decd_dst_vld                      = 1'b1;
      end
    17'b11101011000??????:begin  //cmphsi
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx010;

      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b11101011001??????:begin  //cmplti
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx100;

      decd_src1_imm_vld                 = 1'b1;

      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_NOT;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end
    17'b11101011010??????:begin  //cmpnei
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx100;

      decd_src1_imm_vld                 = 1'b1;
      end















    17'b111011???????????:begin  //ori
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0010;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                 = 1'b1;
      end
    17'b110011000011?????:begin //grs
      //decd_unit_sel[SEL_WIDTH-1:0]      = ALU;
      decd_func[FUNC_WIDTH-1:0]         = 4'b0001;
      decd_sub_func[SUB_FUNC_WIDTH-1:0] = 7'bxxxx000;

       decd_inst_grs		        = 1'b1;

      //decd_dst_vld                      = 1'b1;
      decd_src1_imm_vld                   = 1'b1;
    
      decd_src1_pre[SRC1_PRE_WIDTH-1:0] = SRC1_INST_IXH;
      decd_srcc_pre[SRCC_PRE_WIDTH-1:0] = SRCC_CST_0;
      end





  endcase

end



always @( decd_sop[5:0]
       or decd_pcode[4:0]
       or decd_op[5:0])
begin
  casez({decd_op[5:0],decd_sop[5:0],decd_pcode[4:0]})
    17'b00??01???????????:begin  //br16
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0000;
      end
    17'b00??10???????????:begin  //bt16
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;
      end
    17'b00??11???????????:begin  //bf16
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0110;
      end
    17'b01?????0?????????:begin  //jmp16
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx1000;
      end
    17'b01?????1?????????:begin  //jsr16
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx1001;
      end
    17'b11??0????????????:begin  //bsr
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0001;
      end
    17'b11??1????00??????:begin  //br
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0000;
      end
    17'b11??1????10??????:begin  //bf
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0110;
      end
    17'b11??1????11??????:begin  //bt
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxx0010;
      end
    default:begin                //invalid instruction
      decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0] = 7'bxxxxxxx;
    end
  endcase

end


assign decd_op_lsu[5:0] = {6{ctrl_xx_lsu_predec_sel}} & decd_op[5:0];

always @( decd_sop[5:0]
       or decd_pcode[4:0]
       or decd_op_lsu[5:0])
begin
  casez({decd_op_lsu[5:0],decd_sop[5:0],decd_pcode[4:0]})
  17'b000000???????????,       //lrw16
  17'b000100???????????,       //lrw16
  17'b11101010100??????:begin  //lrw
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;    
      end
  17'b000101011?0??????:begin //nie  ipush
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx01010;
      end
  17'b000101011?1??????:begin //nir ipop
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;
      end
  17'b000101100????????:begin  //pop16
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    17'b000101110????????:begin  //push16
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx01010;

      end
    17'b10000????????????:begin  //ld16.b
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      end
    17'b10001????????????:begin  //ld16.h
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      end
    17'b1001?????????????:begin  //ld16.w //ld16.w sp
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    17'b10100????????????:begin  //st16.b
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      end
    17'b10101????????????:begin  //st16.h
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      end
    17'b1011?????????????:begin  //st16.w //st16.w sp
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    17'b110100???????????:begin  //ldm
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    17'b110101???????????:begin  //stm
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    17'b1101100000???????:begin  //ld.b
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      end
    17'b1101100001???????:begin  //ld.h
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      end
    17'b1101100010???????:begin  //ld.w
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    17'b1101100100???????:begin  //ld.bs
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00100;

      end
    17'b1101100101???????:begin  //ld.hs
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx0;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00101;

      end
    17'b1101110000???????:begin  //st.b
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00000;

      end
    17'b1101110001???????:begin  //st.h
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00001;

      end
    17'b1101110010???????:begin  //st.w
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bxxx1;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bxx00010;

      end
    default:begin   
      decd_func_for_lsu[FUNC_WIDTH-1:0]         = 4'bx;
      decd_sub_func_for_lsu[SUB_FUNC_WIDTH-1:0] = 7'bx; 
    end            
  endcase

end



always @( decd_sop[5:0]
       or decd_op[5:0])
begin
  case({decd_op[5:0],decd_sop[5:0]})
    12'b110000001000,  //trap0
    12'b110000001001,  //trap1
    12'b110000001010,  //trap2
    12'b110000001011:begin 
       decd_expt_trap = 1'b1;
    end
    default : decd_expt_trap = 1'b0;
  endcase

end

assign decd_retire_inst_rte = 1'b0;

assign decd_inst_idly   = ({decd_op[5:0],decd_sop[5:0],decd_pcode[4:0]}
                                     == 17'b11000000011100001);


assign decd_inst_rte    = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000010000);
assign decd_inst_stop   = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000010010);
assign decd_inst_wait   = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000010011);
assign decd_inst_doze   = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000010100);
assign decd_inst_mfcr   = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000011000);
assign decd_inst_mtcr   = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000011001);
assign decd_inst_psrclr = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000011100);
assign decd_inst_psrset = ({decd_op[5:0],decd_sop[5:0]} == 12'b110000011101);









































always @( decd_sop[5:0]
       or decd_pcode[4:0]
       or decd_op[5:0])
begin
  casez({decd_op[5:0],decd_sop[5:0],decd_pcode[4:0]})
    17'b000101000????????,  //addi16.sp sp
    17'b000101001????????,  //subi16.sp
    17'b00011????????????,  //addi16.sp rz
    17'b00100????????????,  //addi16
    17'b00101????????????,  //subi16
    17'b00110????????????,  //movi16 
    17'b00111?100????????,  //bclri16
    17'b00111?101????????,  //bseti16
    17'b01000????????????,  //lsli16
    17'b01001????????????,  //lsri16
    17'b01010????????????,  //asri16
    17'b01011?00?????????,  //addu16 333
    17'b01011?01?????????,  //subu16 333
    17'b01011?10?????????,  //addi16 333
    17'b01011?11?????????,  //subi16 333
    17'b01100000?????????,  //addu16
    17'b01100001?????????,  //addc16
    17'b01100010?????????,  //subu16
    17'b01100011?????????,  //subc16
    17'b01100111?????????,  //mvcv16
    17'b01101000?????????,  //and16
    17'b01101001?????????,  //andn16
    17'b01101100?????????,  //or16
    17'b01101101?????????,  //xor16
    17'b01101110?????????,  //nor16
    17'b01101111?????????,  //mov16
    17'b01110000?????????,  //lsl16
    17'b01110001?????????,  //lsr16
    17'b01110010?????????,  //asr16
    17'b01110011?????????,  //rotl16
    17'b01110100?????????,  //zextb16
    17'b01110101?????????,  //zexth16
    17'b01110110?????????,  //sextb16
    17'b01110111?????????,  //sexth16
    17'b01111010?????????,  //revb16
    17'b01111011?????????,  //revh16
    17'b110001000000????1,  //addu
    17'b110001000000???10,  //addc
    17'b110001000000??100,  //subu
    17'b110001000000?1000,  //subc
    17'b110001000001?1???,  //mvc
    17'b110001000010????1,  //ixh
    17'b110001000010???10,  //ixw
    17'b110001000011????1,  //incf
    17'b110001000011???10,  //inct 
    17'b110001000011??100,  //decf 
    17'b110001000011?1000,  //dect 
    17'b110001001000????1,  //and
    17'b110001001000???10,  //andn
    17'b110001001001????1,  //or
    17'b110001001001???10,  //xor
    17'b110001001001??100,  //nor
    17'b110001001010????1,  //bclri
    17'b110001001010???10,  //bseti
    17'b110001010000????1,  //lsl
    17'b110001010000???10,  //lsr
    17'b110001010000??100,  //asr
    17'b110001010000?1000,  //rotl
    17'b110001010010????1,  //lsli
    17'b110001010010???10,  //lsri
    17'b110001010010??100,  //asri
    17'b110001010010?1000,  //rotli
    17'b110001010011????1,  //lslc
    17'b110001010011???10,  //lsrc
    17'b110001010011??100,  //asrc
    17'b110001010011?1000,  //xsr
    17'b110001010100????1,  //bmaski
    17'b110001011100????1,  //xtrb0
    17'b110001011100???10,  //xtrb1
    17'b110001011100??100,  //xtrb2
    17'b110001011100?1000,  //xtrb3
    17'b110001011111????1,  //ff0
    17'b110001011111???10,  //ff1
    17'b1110010000???????,  //addi 
    17'b1110010001???????,  //subi
    17'b1110010010???????,  //andi
    17'b1110010011???????,  //andni
    17'b1110010100???????,  //xori
    17'b11101010000??????,  //movi
    17'b11101010001??????,  //movih
    17'b110011000011?????,  //grs
    17'b111011???????????:begin  //ori
      decd_dst_vld                      = 1'b1;
      end
    default:begin                //invalid instruction
      decd_dst_vld                      = 1'b0;
    end
  endcase

end






always @( decd_sop[5:0]
       or decd_pcode[4:0]
       or decd_op[5:0])
begin
  casez({decd_op[5:0],decd_sop[5:0],decd_pcode[4:0]})
  17'b000001???????????,       //br16
  17'b00001????????????,       //bt bf 16bit
  17'b0111100??????????,       //jmp16 jsr16
  17'b111000???????????,       //bsr32
  17'b11101000000??????,       //br32 
  17'b1110100001???????:begin  //bt32 bf32
    decd_unit_sel[SEL_WIDTH-1:0] = BRANCH;
  end









  17'b1100000000???????,       //sync
  17'b11000000011??????,       //idly
  17'b1100000010???????:begin  //trap
    decd_unit_sel[SEL_WIDTH-1:0] = SPECIAL;
  end
  17'b00010100?????????,       //addisp  subisp
  17'b00011????????????,       //addi16
  17'b00100????????????,
  17'b00101????????????,
  17'b00110????????????,
  17'b00111?0??????????,
  17'b00111?10?????????,
  17'b00111?110????????,
  17'b010??????????????,
  17'b0110?????????????,
  17'b01110????????????,
  17'b0111101??????????,
  17'b1100010??????????,
  17'b111001???????????,
  17'b111010100????????,
  17'b111010110????????,
  17'b111011???????????,
  17'b110011000011????? :begin    //grs
    decd_unit_sel[SEL_WIDTH-1:0] = ALU;
  end
  17'b01111100?????????,        //mult16
  17'b1100011??????????:begin  //mult
    decd_unit_sel[SEL_WIDTH-1:0] = MAD;
  end
  17'b11000001?????????:begin
    decd_unit_sel[SEL_WIDTH-1:0] = CP0;
  end
  default:begin
    decd_unit_sel[SEL_WIDTH-1:0] = 7'b0;
  end
  endcase

end








assign decd_expt_inv_with_mad = decd_expt_inv;// && !decd_inst_ext32;







assign decd_inst_bkpt = ifu_iu_ex_inst_bkpt;

assign decd_expt_bkpt = decd_inst_bkpt;


























































assign decd_fin_unit_sel[SEL_WIDTH-1:0]      = decd_unit_sel[SEL_WIDTH-1:0];
assign decd_fin_func[FUNC_WIDTH-1:0]         = decd_func[FUNC_WIDTH-1:0];
assign decd_fin_sub_func[SUB_FUNC_WIDTH-1:0] = decd_sub_func[SUB_FUNC_WIDTH-1:0];

assign decd_fin_dst_vld = decd_dst_vld;
assign decd_retire_cp0_inst                  = decd_unit_sel[4];




assign decd_xx_unit_special_sel = decd_expt_inv_with_mad
                               || ifu_iu_ex_expt_vld
                               || ifu_iu_ex_prvlg_expt_vld 
                               || decd_inst_bkpt;
assign decd_xx_unit_sel[SEL_WIDTH-1:0]      = decd_fin_unit_sel[SEL_WIDTH-1:0];
assign decd_xx_func[FUNC_WIDTH-1:0]         = decd_fin_func[FUNC_WIDTH-1:0];
assign decd_xx_sub_func[SUB_FUNC_WIDTH-1:0] = decd_fin_sub_func[SUB_FUNC_WIDTH-1:0];
assign decd_branch_sub_func[SUB_FUNC_WIDTH-1:0] = decd_sub_func_for_branch[SUB_FUNC_WIDTH-1:0];

assign decd_xx_dst_vld          = decd_fin_dst_vld;
assign decd_xx_grs_vld 		= decd_inst_grs;
assign decd_alu_src1_imm_vld    = decd_src1_imm_vld;
assign decd_alu_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0]
                                = decd_dst_vld_pre[DST_VLD_PRE_WIDTH-1:0];
assign decd_alu_src0_pre[SRC0_PRE_WIDTH-1:0]
                                = decd_src0_pre[SRC0_PRE_WIDTH-1:0];
assign decd_alu_src1_pre[SRC1_PRE_WIDTH-1:0]
                                = decd_src1_pre[SRC1_PRE_WIDTH-1:0];
assign decd_alu_srcc_pre[SRCC_PRE_WIDTH-1:0]
                                = decd_srcc_pre[SRCC_PRE_WIDTH-1:0];



assign decd_ctrl_expt_inv       = decd_expt_inv_with_mad;
assign decd_ctrl_expt_bkpt      = decd_expt_bkpt;
assign decd_ctrl_expt_trap      = decd_expt_trap;
assign decd_ctrl_expt_wsc       = 1'b0;

assign decd_wb_cp0_inst_cr_oper = decd_sop[3];
assign decd_special_idly        = decd_inst_idly;




 
assign iu_lsu_inst_store        = decd_func_for_lsu[0];
assign iu_lsu_sign_exten        = decd_sub_func_for_lsu[2];
assign iu_lsu_size[1:0]         = decd_sub_func_for_lsu[1:0];
assign iu_lsu_offset_sub        = decd_sub_func_for_lsu[3];






assign iu_cp0_ex_rte    = decd_inst_rte;
assign iu_cp0_ex_stop   = decd_inst_stop;
assign iu_cp0_ex_wait   = decd_inst_wait;
assign iu_cp0_ex_doze   = decd_inst_doze;
assign iu_cp0_ex_mfcr   = decd_inst_mfcr;
assign iu_cp0_ex_mtcr   = decd_inst_mtcr;
assign iu_cp0_ex_psrclr = decd_inst_psrclr;
assign iu_cp0_ex_psrset = decd_inst_psrset;


endmodule

























module nm_iu_gated_clk_reg(
  cp0_yy_clk_en,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  write_data,
  x_randclk_reg_mod_en_w32,
  x_reg_dout,
  x_write_en
);


input           cp0_yy_clk_en;           
input           forever_cpuclk;          
input           pad_yy_gate_clk_en_b;    
input   [31:0]  write_data;              
input           x_randclk_reg_mod_en_w32; 
input           x_write_en;              
output  [31:0]  x_reg_dout;              


reg     [31:0]  x_reg_dout;              


wire            cp0_yy_clk_en;           
wire            forever_cpuclk;          
wire            pad_yy_gate_clk_en_b;    
wire            reg_clk_en;              
wire            reg_cpuclk;              
wire    [31:0]  write_data;              
wire    [31:0]  write_in_data;           
wire            write_in_en;             
wire            x_randclk_reg_mod_en_w32; 
wire            x_write_en;              





assign reg_clk_en = write_in_en;

gated_clk_cell  x_reg_gated_clk (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (reg_cpuclk              ),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (reg_clk_en              ),
  .module_en                (x_randclk_reg_mod_en_w32),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);












assign write_in_en = x_write_en;
assign write_in_data[31:0] = write_data[31:0];



always @(posedge reg_cpuclk)
begin
  if(write_in_en)
    x_reg_dout[31:0] <= write_in_data[31:0];
  else
    x_reg_dout[31:0] <= x_reg_dout[31:0];
end






endmodule

























module nm_iu_gated_clk_reg_timing(
  cp0_yy_clk_en,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  write_data,
  x_randclk_reg_mod_en_w32,
  x_reg_dout,
  x_write_en
);


input           cp0_yy_clk_en;           
input           forever_cpuclk;          
input           pad_yy_gate_clk_en_b;    
input   [31:0]  write_data;              
input           x_randclk_reg_mod_en_w32; 
input           x_write_en;              
output  [31:0]  x_reg_dout;              


reg     [31:0]  x_reg_dout;              


wire            cp0_yy_clk_en;           
wire            forever_cpuclk;          
wire            pad_yy_gate_clk_en_b;    
wire            reg_clk_en;              
wire            reg_cpuclk;              
wire    [31:0]  write_data;              
wire    [31:0]  write_in_data;           
wire            write_in_en;             
wire            x_randclk_reg_mod_en_w32; 
wire            x_write_en;              





assign reg_clk_en = write_in_en;

gated_clk_cell  x_reg_gated_clk (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (reg_cpuclk              ),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (reg_clk_en              ),
  .module_en                (x_randclk_reg_mod_en_w32),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);












assign write_in_en = x_write_en;
assign write_in_data[31:0] = write_data[31:0];



always @(posedge reg_cpuclk)
begin
  if(write_in_en)
    x_reg_dout[31:0] <= write_in_data[31:0];
  else
    x_reg_dout[31:0] <= x_reg_dout[31:0];
end






endmodule



























module nm_iu_mad(
  ctrl_mad_ex_data_sel,
  ctrl_mad_ex_sel,
  ctrl_mad_oper_mux_en,
  iu_ifu_cnt,
  iu_ifu_cnt_write_en,
  iu_ifu_imm_data,
  iu_ifu_imm_write_en,
  mad_alu_data_vld,
  mad_alu_ff1_vld,
  mad_alu_rbus_data,
  mad_ctrl_stall,
  mad_rbus_req,
  oper_mad_src0,
  oper_mad_src1
);


input           ctrl_mad_ex_data_sel; 
input           ctrl_mad_ex_sel;     
input           ctrl_mad_oper_mux_en; 
input   [31:0]  oper_mad_src0;       
input   [31:0]  oper_mad_src1;       
output  [4 :0]  iu_ifu_cnt;          
output          iu_ifu_cnt_write_en; 
output  [31:0]  iu_ifu_imm_data;     
output          iu_ifu_imm_write_en; 
output          mad_alu_data_vld;    
output          mad_alu_ff1_vld;     
output  [31:0]  mad_alu_rbus_data;   
output          mad_ctrl_stall;      
output          mad_rbus_req;        




wire            ctrl_mad_ex_sel;     
wire            ctrl_mad_oper_mux_en; 
wire    [4 :0]  iu_ifu_cnt;          
wire            iu_ifu_cnt_write_en; 
wire    [31:0]  iu_ifu_imm_data;     
wire            iu_ifu_imm_write_en; 
wire            mad_alu_data_vld;    
wire            mad_alu_ff1_vld;     
wire    [31:0]  mad_alu_rbus_data;   
wire            mad_ctrl_stall;      
wire            mad_rbus_req;        
wire    [63:0]  mad_result;          
wire    [31:0]  mad_src0;            
wire    [31:0]  mad_src1;            
wire    [31:0]  oper_mad_src0;       
wire    [31:0]  oper_mad_src1;       













assign mad_src0[31:0] = {32{ctrl_mad_oper_mux_en}} & oper_mad_src0[31:0];
assign mad_src1[31:0] = {32{ctrl_mad_oper_mux_en}} & oper_mad_src1[31:0];








DW02_mult #(32,32) x_multiplier_32_32(
  .A(mad_src0[31:0]),
  .B(mad_src1[31:0]),
  .TC(1'b0),
  .PRODUCT(mad_result[63:0])
);





assign mad_ctrl_stall = 1'b0;

assign mad_rbus_req = ctrl_mad_ex_sel;

assign mad_alu_data_vld = 1'b1;


assign mad_alu_rbus_data[31:0] = mad_result[31:0];





assign mad_alu_ff1_vld = 1'b0;

assign iu_ifu_imm_write_en   = 1'b0;
assign iu_ifu_imm_data[31:0] = 32'b0;

assign iu_ifu_cnt_write_en   = 1'b0;
assign iu_ifu_cnt[4:0]       = 5'b0;
































endmodule



























module nm_iu_oper(
  cp0_iu_epc,
  cp0_iu_epsr,
  cp0_iu_intsp_we,
  cp0_iu_reg_write_data,
  cp0_iu_user_reg14_we,
  cp0_yy_clk_en,
  cp0_yy_intsp_sel_post,
  cp0_yy_supv_mode,
  ctrl_xx_lsu_predec_sel,
  ctrl_xx_sp_adjust,
  decd_xx_grs_vld,
  forever_cpuclk,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_imm,
  ifu_iu_ex_pcode,
  ifu_iu_ex_predec_imm_vld,
  ifu_iu_ex_src0_reg,
  ifu_iu_ex_src1_reg,
  ifu_iu_nsinst_gpr_rst_b,
  iu_cp0_intsp_reg14_dout,
  iu_cp0_src0,
  iu_cp0_src1,
  iu_cp0_user_reg14_dout,
  iu_lsu_base,
  iu_lsu_data,
  iu_lsu_lrw,
  iu_lsu_lrw_no_fast_retire,
  iu_lsu_offset,
  iu_lsu_sp_base,
  iu_lsu_src0_sp,
  iu_yy_xx_reg_rst_b,
  oper_alu_src0_reg,
  oper_alu_src1_imm,
  oper_alu_src1_reg,
  oper_branch_reg,
  oper_imm_for_special,
  oper_mad_src0,
  oper_mad_src1,
  oper_wb_r15,
  oper_wb_src0_equal_to_dst,
  oper_wb_src1_equal_to_dst,
  pad_yy_gate_clk_en_b,
  pcgen_xx_cur_pc,
  randclk_oper_gpr_mod_en_w32,
  wb_intsp_sel,
  wb_oper_fwd_data_no_load,
  wb_oper_fwd_en,
  wb_oper_sp_adjust,
  wb_oper_supv_mode,
  wb_oper_wbuffer_data,
  wb_oper_write_data,
  wb_oper_write_en,
  wb_oper_write_idx,
  wb_oper_write_idx_for_dep
);


input   [31:0]  cp0_iu_epc;                      
input   [31:0]  cp0_iu_epsr;                     
input           cp0_iu_intsp_we;                 
input   [31:0]  cp0_iu_reg_write_data;           
input           cp0_iu_user_reg14_we;            
input           cp0_yy_clk_en;                   
input           cp0_yy_intsp_sel_post;           
input           cp0_yy_supv_mode;                
input           ctrl_xx_lsu_predec_sel;          
input           ctrl_xx_sp_adjust;               
input           decd_xx_grs_vld;                 
input           forever_cpuclk;                  
input   [31:0]  had_idu_wbbr_data;               
input           had_idu_wbbr_vld;                
input           ifu_iu_ex_cr_oper;               
input   [31:0]  ifu_iu_ex_imm;                   
input   [4 :0]  ifu_iu_ex_pcode;                 
input           ifu_iu_ex_predec_imm_vld;        
input   [4 :0]  ifu_iu_ex_src0_reg;              
input   [4 :0]  ifu_iu_ex_src1_reg;              
input           ifu_iu_nsinst_gpr_rst_b;         
input           iu_yy_xx_reg_rst_b;              
input           pad_yy_gate_clk_en_b;            
input   [30:0]  pcgen_xx_cur_pc;                 
input   [20:0]  randclk_oper_gpr_mod_en_w32;     
input           wb_intsp_sel;                    
input   [31:0]  wb_oper_fwd_data_no_load;        
input           wb_oper_fwd_en;                  
input           wb_oper_sp_adjust;               
input           wb_oper_supv_mode;               
input   [31:0]  wb_oper_wbuffer_data;            
input   [31:0]  wb_oper_write_data;              
input           wb_oper_write_en;                
input   [4 :0]  wb_oper_write_idx;               
input   [4 :0]  wb_oper_write_idx_for_dep;       
output  [31:0]  iu_cp0_intsp_reg14_dout;         
output  [31:0]  iu_cp0_src0;                     
output  [9 :0]  iu_cp0_src1;                     
output  [31:0]  iu_cp0_user_reg14_dout;          
output  [31:0]  iu_lsu_base;                     
output  [31:0]  iu_lsu_data;                     
output          iu_lsu_lrw;                      
output          iu_lsu_lrw_no_fast_retire;       
output  [15:0]  iu_lsu_offset;                   
output  [31:0]  iu_lsu_sp_base;                  
output          iu_lsu_src0_sp;                  
output  [31:0]  oper_alu_src0_reg;               
output  [31:0]  oper_alu_src1_imm;               
output  [31:0]  oper_alu_src1_reg;               
output  [31:0]  oper_branch_reg;                 
output  [4 :0]  oper_imm_for_special;            
output  [31:0]  oper_mad_src0;                   
output  [31:0]  oper_mad_src1;                   
output  [31:0]  oper_wb_r15;                     
output          oper_wb_src0_equal_to_dst;       
output          oper_wb_src1_equal_to_dst;       




wire    [31:0]  cp0_iu_epc;                      
wire    [31:0]  cp0_iu_epsr;                     
wire            cp0_iu_intsp_we;                 
wire    [31:0]  cp0_iu_reg_write_data;           
wire            cp0_iu_user_reg14_we;            
wire    [31:0]  cp0_write_data;                  
wire            cp0_yy_clk_en;                   
wire            cp0_yy_intsp_sel_post;           
wire            cp0_yy_supv_mode;                
wire            ctrl_xx_lsu_predec_sel;          
wire            ctrl_xx_sp_adjust;               
wire            decd_xx_grs_vld;                 
wire            forever_cpuclk;                  
wire    [31:0]  had_idu_wbbr_data;               
wire            had_idu_wbbr_vld;                
wire            ifu_iu_ex_cr_oper;               
wire    [31:0]  ifu_iu_ex_imm;                   
wire    [4 :0]  ifu_iu_ex_pcode;                 
wire            ifu_iu_ex_predec_imm_vld;        
wire    [4 :0]  ifu_iu_ex_src0_reg;              
wire    [4 :0]  ifu_iu_ex_src1_reg;              
wire            ifu_iu_nsinst_gpr_rst_b;         
wire    [31:0]  iu_cp0_intsp_reg14_dout;         
wire    [31:0]  iu_cp0_src0;                     
wire    [9 :0]  iu_cp0_src1;                     
wire    [31:0]  iu_cp0_user_reg14_dout;          
wire    [31:0]  iu_lsu_base;                     
wire    [31:0]  iu_lsu_data;                     
wire            iu_lsu_lrw;                      
wire            iu_lsu_lrw_no_fast_retire;       
wire    [15:0]  iu_lsu_offset;                   
wire    [31:0]  iu_lsu_sp_base;                  
wire            iu_lsu_src0_sp;                  
wire            iu_yy_xx_reg_rst_b;              
wire    [31:0]  oper_alu_src0_reg;               
wire    [31:0]  oper_alu_src1_imm;               
wire    [31:0]  oper_alu_src1_reg;               
wire    [31:0]  oper_branch_reg;                 
wire    [31:0]  oper_imm_for_alu;                
wire    [9 :0]  oper_imm_for_cp0;                
wire    [15:0]  oper_imm_for_lsu;                
wire    [4 :0]  oper_imm_for_special;            
wire    [31:0]  oper_intsp_reg14_dout;           
wire            oper_lrw_ex_vld;                 
wire    [31:0]  oper_mad_src0;                   
wire    [31:0]  oper_mad_src1;                   
wire    [31:0]  oper_sp_gpr_reg;                 
wire    [31:0]  oper_sp_reg_no_load;             
wire    [31:0]  oper_sp_reg_no_load_before_pol;  
wire            oper_src0_bsp_dep_vld;           
wire            oper_src0_dep_vld;               
wire            oper_src0_dep_vld_aft_bsp;       
wire            oper_src0_equal_to_dst;          
wire    [31:0]  oper_src0_gpr_data;              
wire    [31:0]  oper_src0_gpr_reg;               
wire    [31:0]  oper_src0_reg;                   
wire    [31:0]  oper_src0_reg_before_pol;        
wire    [31:0]  oper_src0_reg_no_load;           
wire    [31:0]  oper_src0_reg_no_load_before_pol; 
wire            oper_src1_dep_vld;               
wire            oper_src1_equal_to_dst;          
wire    [31:0]  oper_src1_gpr_data;              
wire    [31:0]  oper_src1_gpr_reg;               
wire    [31:0]  oper_src1_reg;                   
wire    [31:0]  oper_src1_reg_before_pol;        
wire    [31:0]  oper_src1_reg_no_load;           
wire    [31:0]  oper_src1_reg_no_load_before_pol; 
wire    [31:0]  oper_user_reg14_dout;            
wire    [31:0]  oper_wb_r15;                     
wire            oper_wb_src0_equal_to_dst;       
wire            oper_wb_src1_equal_to_dst;       
wire            pad_yy_gate_clk_en_b;            
wire    [30:0]  pcgen_xx_cur_pc;                 
wire    [20:0]  randclk_oper_gpr_mod_en_w32;     
wire    [31:0]  wb_data_no_load_aft_bsp_fwd;     
wire            wb_intsp_sel;                    
wire    [31:0]  wb_oper_fwd_data_no_load;        
wire            wb_oper_fwd_en;                  
wire            wb_oper_sp_adjust;               
wire            wb_oper_supv_mode;               
wire    [31:0]  wb_oper_wbuffer_data;            
wire    [31:0]  wb_oper_write_data;              
wire            wb_oper_write_en;                
wire    [4 :0]  wb_oper_write_idx;               
wire    [4 :0]  wb_oper_write_idx_for_dep;       







nm_iu_oper_gpr  x_nm_iu_oper_gpr (
  .cp0_iu_epc                        (cp0_iu_epc                       ),
  .cp0_iu_epsr                       (cp0_iu_epsr                      ),
  .cp0_iu_intsp_we                   (cp0_iu_intsp_we                  ),
  .cp0_iu_user_reg14_we              (cp0_iu_user_reg14_we             ),
  .cp0_reg_write_data                (cp0_write_data[31:0]             ),
  .cp0_yy_clk_en                     (cp0_yy_clk_en                    ),
  .cp0_yy_intsp_sel_post             (cp0_yy_intsp_sel_post            ),
  .forever_cpuclk                    (forever_cpuclk                   ),
  .ifu_iu_ex_cr_oper                 (ifu_iu_ex_cr_oper                ),
  .ifu_iu_nsinst_gpr_rst_b           (ifu_iu_nsinst_gpr_rst_b          ),
  .inst_read_data0                   (oper_src0_gpr_data[31:0]         ),
  .inst_read_data1                   (oper_src1_gpr_data[31:0]         ),
  .inst_read_index0                  (ifu_iu_ex_src0_reg[4:0]          ),
  .inst_read_index1                  (ifu_iu_ex_src1_reg[4:0]          ),
  .inst_wen                          (wb_oper_write_en                 ),
  .inst_write_data                   (wb_oper_write_data[31:0]         ),
  .inst_write_index                  (wb_oper_write_idx[4:0]           ),
  .intsp_reg_14_dout                 (oper_intsp_reg14_dout[31:0]      ),
  .iu_yy_xx_reg_rst_b                (iu_yy_xx_reg_rst_b               ),
  .oper_sp_gpr_reg                   (oper_sp_gpr_reg                  ),
  .pad_yy_gate_clk_en_b              (pad_yy_gate_clk_en_b             ),
  .randclk_oper_gpr_mod_en_w32       (randclk_oper_gpr_mod_en_w32      ),
  .supv_mode                         (cp0_yy_supv_mode                 ),
  .user_reg_14_dout                  (oper_user_reg14_dout[31:0]       ),
  .user_reg_15_dout                  (oper_wb_r15[31:0]                ),
  .wb_intsp_sel                      (wb_intsp_sel                     ),
  .wb_oper_sp_adjust                 (wb_oper_sp_adjust                ),
  .wb_oper_wbuffer_data              (wb_oper_wbuffer_data             ),
  .wb_supv_mode                      (wb_oper_supv_mode                )
);























































assign iu_cp0_user_reg14_dout[31:0]      = oper_user_reg14_dout[31:0];


assign cp0_write_data[31:0] = cp0_iu_reg_write_data[31:0];


assign iu_cp0_intsp_reg14_dout[31:0]     = oper_intsp_reg14_dout[31:0];













assign oper_src0_gpr_reg[31:0] = (had_idu_wbbr_vld) ? had_idu_wbbr_data[31:0]
                                                    : oper_src0_gpr_data[31:0];
assign oper_src1_gpr_reg[31:0] = oper_src1_gpr_data[31:0];















assign oper_src0_equal_to_dst = (ifu_iu_ex_src0_reg[4:0] == wb_oper_write_idx_for_dep[4:0]);
assign oper_src1_equal_to_dst = (ifu_iu_ex_src1_reg[4:0] == wb_oper_write_idx_for_dep[4:0]);

assign oper_wb_src0_equal_to_dst = oper_src0_equal_to_dst;
assign oper_wb_src1_equal_to_dst = oper_src1_equal_to_dst;


assign oper_src0_dep_vld = wb_oper_fwd_en && oper_src0_equal_to_dst && !decd_xx_grs_vld ;
assign oper_src1_dep_vld = wb_oper_fwd_en && oper_src1_equal_to_dst;


assign oper_src0_bsp_dep_vld = 1'b0;











assign oper_lrw_ex_vld = ctrl_xx_lsu_predec_sel && ifu_iu_ex_predec_imm_vld;
assign wb_data_no_load_aft_bsp_fwd[31:0] = oper_lrw_ex_vld 
                                             ? {pcgen_xx_cur_pc[30:1],2'b0}
                                             : wb_oper_fwd_data_no_load[31:0];








assign oper_src0_reg_before_pol[31:0] = (oper_src0_dep_vld && !had_idu_wbbr_vld)
                                        ? wb_oper_write_data[31:0]
                                        : (decd_xx_grs_vld ? {pcgen_xx_cur_pc[30:0],1'b0} : oper_src0_gpr_reg[31:0]);

assign oper_src1_reg_before_pol[31:0] = (oper_src1_dep_vld)
                                        ? wb_oper_write_data[31:0]
                                        : oper_src1_gpr_reg[31:0];





assign oper_src0_dep_vld_aft_bsp = oper_src0_dep_vld || oper_src0_bsp_dep_vld
                                || oper_lrw_ex_vld;

assign oper_src0_reg_no_load_before_pol[31:0] = 
                                        (oper_src0_dep_vld_aft_bsp && !had_idu_wbbr_vld)
                                        ? wb_data_no_load_aft_bsp_fwd[31:0]
                                        : oper_src0_gpr_reg[31:0];

assign oper_sp_reg_no_load_before_pol[31:0] = oper_src0_dep_vld_aft_bsp
                                            ? wb_oper_fwd_data_no_load[31:0]
                                            : oper_sp_gpr_reg[31:0]; 


assign oper_src1_reg_no_load_before_pol[31:0] = 
                                        oper_src1_dep_vld
                                        ? wb_oper_fwd_data_no_load[31:0]
                                        : oper_src1_gpr_reg[31:0];










assign oper_src0_reg[31:0] = oper_src0_reg_before_pol[31:0];
assign oper_src1_reg[31:0] = oper_src1_reg_before_pol[31:0];

assign oper_src0_reg_no_load[31:0] = oper_src0_reg_no_load_before_pol[31:0];
assign oper_src1_reg_no_load[31:0] = oper_src1_reg_no_load_before_pol[31:0];

assign oper_sp_reg_no_load[31:0] = oper_sp_reg_no_load_before_pol[31:0];








assign oper_imm_for_alu[31:0] = decd_xx_grs_vld
                              ? ifu_iu_ex_imm[31:0]
                              : {16'b0, ifu_iu_ex_imm[15:0]};











assign oper_imm_for_special[4:0] = ifu_iu_ex_imm[4:0];


assign oper_imm_for_lsu[15:0] = ifu_iu_ex_imm[15:0];

assign oper_imm_for_cp0[9:0] = ifu_iu_ex_imm[9:0];








assign oper_alu_src0_reg[31:0]     = oper_src0_reg[31:0];
assign oper_alu_src1_reg[31:0]     = oper_src1_reg[31:0];

assign oper_alu_src1_imm[31:0]     = ctrl_xx_sp_adjust
                                      ? {27'b0,ifu_iu_ex_pcode[2:0], 2'b0}
                                      : oper_imm_for_alu[31:0];












assign oper_mad_src0[31:0]         = oper_src0_reg_no_load[31:0];
assign oper_mad_src1[31:0]         = oper_src1_reg_no_load[31:0];







assign oper_branch_reg[31:0]       = oper_src0_reg_no_load[31:0];







assign iu_lsu_offset[15:0]         = oper_imm_for_lsu[15:0];
assign iu_lsu_data[31:0]           = oper_src1_reg_before_pol[31:0];
assign iu_lsu_base[31:0]           = oper_src0_reg_no_load[31:0];


assign iu_lsu_lrw                  = oper_lrw_ex_vld; 

assign iu_lsu_sp_base[31:0]        = oper_sp_reg_no_load[31:0];
assign iu_lsu_src0_sp              = ifu_iu_ex_src0_reg[4:0] == 5'he;







assign iu_cp0_src0[31:0]           = oper_src0_reg_no_load[31:0];
assign iu_cp0_src1[9:0]            = oper_imm_for_cp0[9:0];






assign iu_lsu_lrw_no_fast_retire = 1'b0;




endmodule

























module nm_iu_oper_gpr(
  cp0_iu_epc,
  cp0_iu_epsr,
  cp0_iu_intsp_we,
  cp0_iu_user_reg14_we,
  cp0_reg_write_data,
  cp0_yy_clk_en,
  cp0_yy_intsp_sel_post,
  forever_cpuclk,
  ifu_iu_ex_cr_oper,
  ifu_iu_nsinst_gpr_rst_b,
  inst_read_data0,
  inst_read_data1,
  inst_read_index0,
  inst_read_index1,
  inst_wen,
  inst_write_data,
  inst_write_index,
  intsp_reg_14_dout,
  iu_yy_xx_reg_rst_b,
  oper_sp_gpr_reg,
  pad_yy_gate_clk_en_b,
  randclk_oper_gpr_mod_en_w32,
  supv_mode,
  user_reg_14_dout,
  user_reg_15_dout,
  wb_intsp_sel,
  wb_oper_sp_adjust,
  wb_oper_wbuffer_data,
  wb_supv_mode
);


input   [31:0]  cp0_iu_epc;                     
input   [31:0]  cp0_iu_epsr;                    
input           cp0_iu_intsp_we;                
input           cp0_iu_user_reg14_we;           
input   [31:0]  cp0_reg_write_data;             
input           cp0_yy_clk_en;                  
input           cp0_yy_intsp_sel_post;          
input           forever_cpuclk;                 
input           ifu_iu_ex_cr_oper;              
input           ifu_iu_nsinst_gpr_rst_b;        
input   [4 :0]  inst_read_index0;               
input   [4 :0]  inst_read_index1;               
input           inst_wen;                       
input   [31:0]  inst_write_data;                
input   [4 :0]  inst_write_index;               
input           iu_yy_xx_reg_rst_b;             
input           pad_yy_gate_clk_en_b;           
input   [20:0]  randclk_oper_gpr_mod_en_w32;    
input           supv_mode;                      
input           wb_intsp_sel;                   
input           wb_oper_sp_adjust;              
input   [31:0]  wb_oper_wbuffer_data;           
input           wb_supv_mode;                   
output  [31:0]  inst_read_data0;                
output  [31:0]  inst_read_data1;                
output  [31:0]  intsp_reg_14_dout;              
output  [31:0]  oper_sp_gpr_reg;                
output  [31:0]  user_reg_14_dout;               
output  [31:0]  user_reg_15_dout;               


reg     [31:0]  gpr_read_data0;                 
reg     [31:0]  gpr_read_data1;                 
reg     [31:0]  reg_sel;                        
reg     [31:0]  sp_read_data0;                  


wire    [31:0]  alter_0_reg_dout;               
wire    [31:0]  alter_10_reg_dout;              
wire    [31:0]  alter_11_reg_dout;              
wire    [31:0]  alter_12_reg_dout;              
wire    [31:0]  alter_13_reg_dout;              
wire    [31:0]  alter_14_reg_dout;              
wire    [31:0]  alter_15_reg_dout;              
wire    [31:0]  alter_1_reg_dout;               
wire    [31:0]  alter_2_reg_dout;               
wire    [31:0]  alter_3_reg_dout;               
wire    [31:0]  alter_4_reg_dout;               
wire    [31:0]  alter_5_reg_dout;               
wire    [31:0]  alter_6_reg_dout;               
wire    [31:0]  alter_7_reg_dout;               
wire    [31:0]  alter_8_reg_dout;               
wire    [31:0]  alter_9_reg_dout;               
wire            alter_mode;                     
wire    [31:0]  cp0_iu_epc;                     
wire    [31:0]  cp0_iu_epsr;                    
wire            cp0_iu_intsp_we;                
wire            cp0_iu_user_reg14_we;           
wire    [31:0]  cp0_reg_write_data;             
wire    [31:0]  cp0_sp_adjust_wdata;            
wire            cp0_yy_clk_en;                  
wire            cp0_yy_intsp_sel_post;          
wire            forever_cpuclk;                 
wire            gpr_sync_rst_b;                 
wire            gpr_sync_rst_for_sp_b;          
wire            ifu_iu_ex_cr_oper;              
wire            ifu_iu_nsinst_gpr_rst_b;        
wire    [31:0]  inst_read_data0;                
wire    [31:0]  inst_read_data1;                
wire    [4 :0]  inst_read_index0;               
wire    [4 :0]  inst_read_index1;               
wire            inst_wen;                       
wire    [31:0]  inst_write_data;                
wire    [4 :0]  inst_write_index;               
wire            intsp_14_randclk_reg_mod_en_w32; 
wire    [31:0]  intsp_14_reg_dout;              
wire            intsp_14_write_en;              
wire            intsp_explicit_we;              
wire    [31:0]  intsp_reg_14_dout;              
wire            intsp_write_en_14;              
wire            iu_yy_xx_reg_rst_b;             
wire    [31:0]  oper_sp_gpr_reg;                
wire            pad_cpu_gpr_rst_b;              
wire            pad_yy_gate_clk_en_b;           
wire            privl_14_randclk_reg_mod_en_w32; 
wire    [31:0]  privl_14_reg_dout;              
wire            privl_14_write_en;              
wire            privl_write_en_14;              
wire    [20:0]  randclk_oper_gpr_mod_en_w32;    
wire            reg_explicit_we;                
wire            sssp_explicit_we;               
wire            supv_mode;                      
wire            susp_explicit_we;               
wire            user_0_randclk_reg_mod_en_w32;  
wire    [31:0]  user_0_reg_dout;                
wire            user_0_write_en;                
wire            user_10_randclk_reg_mod_en_w32; 
wire    [31:0]  user_10_reg_dout;               
wire            user_10_write_en;               
wire            user_11_randclk_reg_mod_en_w32; 
wire    [31:0]  user_11_reg_dout;               
wire            user_11_write_en;               
wire            user_12_randclk_reg_mod_en_w32; 
wire    [31:0]  user_12_reg_dout;               
wire            user_12_write_en;               
wire            user_13_randclk_reg_mod_en_w32; 
wire    [31:0]  user_13_reg_dout;               
wire            user_13_write_en;               
wire            user_14_randclk_reg_mod_en_w32; 
wire    [31:0]  user_14_reg_dout;               
wire            user_14_write_en;               
wire            user_15_randclk_reg_mod_en_w32; 
wire    [31:0]  user_15_reg_dout;               
wire            user_15_write_en;               
wire            user_1_randclk_reg_mod_en_w32;  
wire    [31:0]  user_1_reg_dout;                
wire            user_1_write_en;                
wire            user_2_randclk_reg_mod_en_w32;  
wire    [31:0]  user_2_reg_dout;                
wire            user_2_write_en;                
wire            user_3_randclk_reg_mod_en_w32;  
wire    [31:0]  user_3_reg_dout;                
wire            user_3_write_en;                
wire            user_4_randclk_reg_mod_en_w32;  
wire    [31:0]  user_4_reg_dout;                
wire            user_4_write_en;                
wire            user_5_randclk_reg_mod_en_w32;  
wire    [31:0]  user_5_reg_dout;                
wire            user_5_write_en;                
wire            user_6_randclk_reg_mod_en_w32;  
wire    [31:0]  user_6_reg_dout;                
wire            user_6_write_en;                
wire            user_7_randclk_reg_mod_en_w32;  
wire    [31:0]  user_7_reg_dout;                
wire            user_7_write_en;                
wire            user_8_randclk_reg_mod_en_w32;  
wire    [31:0]  user_8_reg_dout;                
wire            user_8_write_en;                
wire            user_9_randclk_reg_mod_en_w32;  
wire    [31:0]  user_9_reg_dout;                
wire            user_9_write_en;                
wire    [31:0]  user_reg_14_dout;               
wire    [31:0]  user_reg_15_dout;               
wire    [31:0]  user_write_en;                  
wire            ussp_explicit_we;               
wire            uusp_explicit_we;               
wire            wb_intsp_sel;                   
wire            wb_oper_sp_adjust;              
wire    [31:0]  wb_oper_wbuffer_data;           
wire            wb_secu_mode;                   
wire            wb_supv_mode;                   
wire            wb_ussp_sel;                    
wire            wb_uusp_sel;                    
wire    [31:0]  write_data;                     
wire    [31:0]  write_data_for_sp;              
wire    [31:0]  write_port_data;                






nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_0 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_0_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_0_reg_dout              ),
  .x_write_en                    (user_0_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_1 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_1_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_1_reg_dout              ),
  .x_write_en                    (user_1_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_2 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_2_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_2_reg_dout              ),
  .x_write_en                    (user_2_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_3 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_3_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_3_reg_dout              ),
  .x_write_en                    (user_3_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_4 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_4_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_4_reg_dout              ),
  .x_write_en                    (user_4_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_5 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_5_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_5_reg_dout              ),
  .x_write_en                    (user_5_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_6 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_6_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_6_reg_dout              ),
  .x_write_en                    (user_6_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_7 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_7_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_7_reg_dout              ),
  .x_write_en                    (user_7_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_8 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_8_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_8_reg_dout              ),
  .x_write_en                    (user_8_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_9 (
  .cp0_yy_clk_en                 (cp0_yy_clk_en                ),
  .forever_cpuclk                (forever_cpuclk               ),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         ),
  .write_data                    (write_data                   ),
  .x_randclk_reg_mod_en_w32      (user_9_randclk_reg_mod_en_w32),
  .x_reg_dout                    (user_9_reg_dout              ),
  .x_write_en                    (user_9_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_10 (
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .write_data                     (write_data                    ),
  .x_randclk_reg_mod_en_w32       (user_10_randclk_reg_mod_en_w32),
  .x_reg_dout                     (user_10_reg_dout              ),
  .x_write_en                     (user_10_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_11 (
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .write_data                     (write_data                    ),
  .x_randclk_reg_mod_en_w32       (user_11_randclk_reg_mod_en_w32),
  .x_reg_dout                     (user_11_reg_dout              ),
  .x_write_en                     (user_11_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_12 (
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .write_data                     (write_data                    ),
  .x_randclk_reg_mod_en_w32       (user_12_randclk_reg_mod_en_w32),
  .x_reg_dout                     (user_12_reg_dout              ),
  .x_write_en                     (user_12_write_en              )
);










nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_13 (
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .write_data                     (write_data                    ),
  .x_randclk_reg_mod_en_w32       (user_13_randclk_reg_mod_en_w32),
  .x_reg_dout                     (user_13_reg_dout              ),
  .x_write_en                     (user_13_write_en              )
);











nm_iu_gated_clk_reg_timing  x_nm_iu_gated_clk_reg_user_14 (
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .write_data                     (write_data_for_sp[31:0]       ),
  .x_randclk_reg_mod_en_w32       (user_14_randclk_reg_mod_en_w32),
  .x_reg_dout                     (user_14_reg_dout              ),
  .x_write_en                     (user_14_write_en              )
);














nm_iu_gated_clk_reg  x_nm_iu_gated_clk_reg_user_15 (
  .cp0_yy_clk_en                  (cp0_yy_clk_en                 ),
  .forever_cpuclk                 (forever_cpuclk                ),
  .pad_yy_gate_clk_en_b           (pad_yy_gate_clk_en_b          ),
  .write_data                     (write_data                    ),
  .x_randclk_reg_mod_en_w32       (user_15_randclk_reg_mod_en_w32),
  .x_reg_dout                     (user_15_reg_dout              ),
  .x_write_en                     (user_15_write_en              )
);












































































































































































nm_iu_gated_clk_reg_timing  x_nm_iu_gated_clk_reg_privl_14 (
  .cp0_yy_clk_en                   (cp0_yy_clk_en                  ),
  .forever_cpuclk                  (forever_cpuclk                 ),
  .pad_yy_gate_clk_en_b            (pad_yy_gate_clk_en_b           ),
  .write_data                      (write_data_for_sp[31:0]        ),
  .x_randclk_reg_mod_en_w32        (privl_14_randclk_reg_mod_en_w32),
  .x_reg_dout                      (privl_14_reg_dout              ),
  .x_write_en                      (privl_14_write_en              )
);
















nm_iu_gated_clk_reg_timing  x_nm_iu_gated_clk_reg_intsp_14 (
  .cp0_yy_clk_en                   (cp0_yy_clk_en                  ),
  .forever_cpuclk                  (forever_cpuclk                 ),
  .pad_yy_gate_clk_en_b            (pad_yy_gate_clk_en_b           ),
  .write_data                      (write_data_for_sp[31:0]        ),
  .x_randclk_reg_mod_en_w32        (intsp_14_randclk_reg_mod_en_w32),
  .x_reg_dout                      (intsp_14_reg_dout              ),
  .x_write_en                      (intsp_14_write_en              )
);













































assign user_0_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[0];
assign user_1_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[1];
assign user_2_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[2];
assign user_3_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[3];
assign user_4_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[4];
assign user_5_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[5];
assign user_6_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[6];
assign user_7_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[7];
assign user_8_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[8];
assign user_9_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[9];
assign user_10_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[10];
assign user_11_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[11];
assign user_12_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[12];
assign user_13_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[13];
assign user_14_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[14];
assign user_15_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[15];
assign privl_14_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[20];
assign intsp_14_randclk_reg_mod_en_w32 = randclk_oper_gpr_mod_en_w32[1] ;







assign pad_cpu_gpr_rst_b = 1'b1;

assign gpr_sync_rst_b = pad_cpu_gpr_rst_b && iu_yy_xx_reg_rst_b
                        && ifu_iu_nsinst_gpr_rst_b;
assign gpr_sync_rst_for_sp_b = pad_cpu_gpr_rst_b && iu_yy_xx_reg_rst_b;


assign write_port_data[31:0] = {32{gpr_sync_rst_b}}
                             & inst_write_data[31:0];
assign write_data[31:0] = write_port_data[31:0];














assign wb_secu_mode         = 1'b0;
assign susp_explicit_we     = 1'b0;
assign sssp_explicit_we     = 1'b0;
assign reg_explicit_we = uusp_explicit_we
                      || ussp_explicit_we
                      || susp_explicit_we
                      || sssp_explicit_we
                      || intsp_explicit_we; 
assign write_data_for_sp[31:0] = reg_explicit_we
                               ? write_port_data[31:0]
                               : cp0_sp_adjust_wdata[31:0];
assign cp0_sp_adjust_wdata[31:0] = wb_oper_sp_adjust
                               ? wb_oper_wbuffer_data[31:0]
                               : cp0_reg_write_data[31:0];
  



















always @( inst_write_index[4:0])
begin
  reg_sel[31:0] = 32'b0;
  case(inst_write_index[4:0])
  5'h0 :  reg_sel[0]  = 1'b1;
  5'h1 :  reg_sel[1]  = 1'b1;
  5'h2 :  reg_sel[2]  = 1'b1;
  5'h3 :  reg_sel[3]  = 1'b1;
  5'h4 :  reg_sel[4]  = 1'b1;
  5'h5 :  reg_sel[5]  = 1'b1;
  5'h6 :  reg_sel[6]  = 1'b1;
  5'h7 :  reg_sel[7]  = 1'b1;
  5'h8 :  reg_sel[8]  = 1'b1;
  5'h9 :  reg_sel[9]  = 1'b1;
  5'ha :  reg_sel[10] = 1'b1;
  5'hb :  reg_sel[11] = 1'b1;
  5'hc :  reg_sel[12] = 1'b1;
  5'hd :  reg_sel[13] = 1'b1;
  5'he :  reg_sel[14] = 1'b1;
  5'hf :  reg_sel[15] = 1'b1;
  endcase

end



assign user_write_en[31:26] = reg_sel[31:26] & {6{inst_wen}};


assign user_write_en[25]    = reg_sel[25] && inst_wen || !gpr_sync_rst_b;


assign user_write_en[24:23] = reg_sel[24:23] & {2{inst_wen}};


assign user_write_en[22]    = reg_sel[22] && inst_wen || !gpr_sync_rst_b;


assign user_write_en[21:16] = reg_sel[21:16] & {6{inst_wen}};




assign user_write_en[15]    = reg_sel[15] && inst_wen && !alter_mode;


assign wb_uusp_sel          = !wb_supv_mode && !wb_secu_mode && !alter_mode;
assign uusp_explicit_we     = (reg_sel[14] && inst_wen && wb_uusp_sel)
                           || !gpr_sync_rst_for_sp_b;
assign user_write_en[14]    = cp0_iu_user_reg14_we
                           || uusp_explicit_we
                           || (wb_oper_sp_adjust && wb_uusp_sel);


assign user_write_en[13:0]  = reg_sel[13:0] & {14{inst_wen}} & {14{!alter_mode}};



assign wb_ussp_sel          = wb_supv_mode && !alter_mode
                            && !wb_intsp_sel;
assign ussp_explicit_we     = reg_sel[14] && inst_wen && wb_ussp_sel
                           || !gpr_sync_rst_for_sp_b;
assign privl_write_en_14    = ussp_explicit_we
                           || (wb_oper_sp_adjust && wb_ussp_sel);





assign intsp_explicit_we     = (reg_sel[14] && inst_wen && wb_intsp_sel)
                           || !gpr_sync_rst_for_sp_b;
assign intsp_write_en_14    = cp0_iu_intsp_we
                           || intsp_explicit_we
                           || (wb_oper_sp_adjust && wb_intsp_sel);






assign user_0_write_en   = !gpr_sync_rst_b | user_write_en[0];
assign user_1_write_en   = !gpr_sync_rst_b | user_write_en[1];
assign user_2_write_en   = !gpr_sync_rst_b | user_write_en[2];
assign user_3_write_en   = !gpr_sync_rst_b | user_write_en[3];
assign user_4_write_en   = !gpr_sync_rst_b | user_write_en[4];
assign user_5_write_en   = !gpr_sync_rst_b | user_write_en[5];
assign user_6_write_en   = !gpr_sync_rst_b | user_write_en[6];
assign user_7_write_en   = !gpr_sync_rst_b | user_write_en[7];
assign user_8_write_en   = !gpr_sync_rst_b | user_write_en[8];
assign user_9_write_en   = !gpr_sync_rst_b | user_write_en[9];
assign user_10_write_en  = !gpr_sync_rst_b | user_write_en[10];
assign user_11_write_en  = !gpr_sync_rst_b | user_write_en[11];
assign user_12_write_en  = !gpr_sync_rst_b | user_write_en[12];
assign user_13_write_en  = !gpr_sync_rst_b | user_write_en[13];

assign user_14_write_en  = user_write_en[14];
assign user_15_write_en  = !gpr_sync_rst_b | user_write_en[15];

assign privl_14_write_en = privl_write_en_14;
assign intsp_14_write_en = intsp_write_en_14;






assign user_reg_15_dout[31:0] = alter_mode ? alter_15_reg_dout[31:0]
                                           : user_15_reg_dout[31:0];


assign user_reg_14_dout[31:0] = user_14_reg_dout[31:0];

assign intsp_reg_14_dout[31:0] = intsp_14_reg_dout[31:0];













assign alter_mode = 1'b0;
assign alter_0_reg_dout[31:0] = 32'b0;
assign alter_1_reg_dout[31:0] = 32'b0;
assign alter_2_reg_dout[31:0] = 32'b0;
assign alter_3_reg_dout[31:0] = 32'b0;
assign alter_4_reg_dout[31:0] = 32'b0;
assign alter_5_reg_dout[31:0] = 32'b0;
assign alter_6_reg_dout[31:0] = 32'b0;
assign alter_7_reg_dout[31:0] = 32'b0;
assign alter_8_reg_dout[31:0] = 32'b0;
assign alter_9_reg_dout[31:0]  = 32'b0;
assign alter_10_reg_dout[31:0] = 32'b0;
assign alter_11_reg_dout[31:0] = 32'b0;
assign alter_12_reg_dout[31:0] = 32'b0;
assign alter_13_reg_dout[31:0] = 32'b0;
assign alter_14_reg_dout[31:0] = 32'b0;
assign alter_15_reg_dout[31:0] = 32'b0;








always @( user_8_reg_dout[31:0]
       or alter_3_reg_dout[31:0]
       or alter_7_reg_dout[31:0]
       or user_0_reg_dout[31:0]
       or alter_13_reg_dout[31:0]
       or inst_read_index0[4:0]
       or user_11_reg_dout[31:0]
       or user_10_reg_dout[31:0]
       or user_3_reg_dout[31:0]
       or user_9_reg_dout[31:0]
       or alter_15_reg_dout[31:0]
       or alter_1_reg_dout[31:0]
       or alter_2_reg_dout[31:0]
       or alter_6_reg_dout[31:0]
       or user_1_reg_dout[31:0]
       or user_2_reg_dout[31:0]
       or sp_read_data0[31:0]
       or user_13_reg_dout[31:0]
       or alter_5_reg_dout[31:0]
       or alter_4_reg_dout[31:0]
       or alter_mode
       or user_4_reg_dout[31:0]
       or user_5_reg_dout[31:0]
       or user_15_reg_dout[31:0]
       or user_6_reg_dout[31:0]
       or alter_10_reg_dout[31:0]
       or alter_12_reg_dout[31:0]
       or alter_9_reg_dout[31:0]
       or alter_11_reg_dout[31:0]
       or alter_0_reg_dout[31:0]
       or user_12_reg_dout[31:0]
       or user_7_reg_dout[31:0]
       or alter_8_reg_dout[31:0])
begin
  case(inst_read_index0[4:0])
  5'h0:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_0_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_0_reg_dout[31:0];
  5'h1:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_1_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_1_reg_dout[31:0];
  5'h2:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_2_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_2_reg_dout[31:0];
  5'h3:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_3_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_3_reg_dout[31:0];
  5'h4:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_4_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_4_reg_dout[31:0];
  5'h5:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_5_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_5_reg_dout[31:0];
  5'h6:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_6_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_6_reg_dout[31:0];
  5'h7:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_7_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_7_reg_dout[31:0];
  5'h8:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_8_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_8_reg_dout[31:0];
  5'h9:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_9_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_9_reg_dout[31:0];
  5'ha:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_10_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_10_reg_dout[31:0];
  5'hb:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_11_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_11_reg_dout[31:0];
  5'hc:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_12_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_12_reg_dout[31:0];
  5'hd:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_13_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_13_reg_dout[31:0];
  5'he:
    gpr_read_data0[31:0] = sp_read_data0[31:0];
  5'hf:
  if(alter_mode)
    gpr_read_data0[31:0] = alter_15_reg_dout[31:0];
  else
    gpr_read_data0[31:0] = user_15_reg_dout[31:0];
  default: gpr_read_data0[31:0] = 32'b0;
  endcase

end


always @( supv_mode
       or privl_14_reg_dout[31:0]
       or alter_mode
       or intsp_reg_14_dout[31:0]
       or user_14_reg_dout[31:0]
       or alter_14_reg_dout[31:0]
       or cp0_yy_intsp_sel_post)
begin
  if(alter_mode)
    sp_read_data0[31:0] = alter_14_reg_dout[31:0];
  else
    if(supv_mode && !cp0_yy_intsp_sel_post)
      sp_read_data0[31:0] = privl_14_reg_dout[31:0];
    else if(supv_mode && cp0_yy_intsp_sel_post   )
      sp_read_data0[31:0] = intsp_reg_14_dout[31:0];
    else
      sp_read_data0[31:0] = user_14_reg_dout[31:0];


end

assign oper_sp_gpr_reg[31:0] = sp_read_data0[31:0];
assign inst_read_data0[31:0] = gpr_read_data0[31:0];
















always @( user_8_reg_dout[31:0]
       or alter_3_reg_dout[31:0]
       or cp0_iu_epc[31:0]
       or alter_7_reg_dout[31:0]
       or user_0_reg_dout[31:0]
       or alter_13_reg_dout[31:0]
       or user_11_reg_dout[31:0]
       or supv_mode
       or user_10_reg_dout[31:0]
       or user_3_reg_dout[31:0]
       or user_9_reg_dout[31:0]
       or alter_15_reg_dout[31:0]
       or inst_read_index1[4:0]
       or alter_1_reg_dout[31:0]
       or alter_2_reg_dout[31:0]
       or intsp_14_reg_dout[31:0]
       or alter_6_reg_dout[31:0]
       or user_1_reg_dout[31:0]
       or user_2_reg_dout[31:0]
       or privl_14_reg_dout[31:0]
       or user_13_reg_dout[31:0]
       or alter_5_reg_dout[31:0]
       or alter_4_reg_dout[31:0]
       or alter_mode
       or user_4_reg_dout[31:0]
       or user_5_reg_dout[31:0]
       or user_15_reg_dout[31:0]
       or user_6_reg_dout[31:0]
       or cp0_iu_epsr[31:0]
       or alter_10_reg_dout[31:0]
       or alter_12_reg_dout[31:0]
       or alter_9_reg_dout[31:0]
       or alter_11_reg_dout[31:0]
       or user_14_reg_dout[31:0]
       or alter_0_reg_dout[31:0]
       or user_12_reg_dout[31:0]
       or ifu_iu_ex_cr_oper
       or user_7_reg_dout[31:0]
       or alter_8_reg_dout[31:0]
       or alter_14_reg_dout[31:0]
       or cp0_yy_intsp_sel_post)
begin
  case(inst_read_index1[4:0])
  5'h0:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_0_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_0_reg_dout[31:0];
  5'h1:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_1_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_1_reg_dout[31:0];
  5'h2:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_2_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_2_reg_dout[31:0];
  5'h3:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_3_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_3_reg_dout[31:0];
  5'h4:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_4_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_4_reg_dout[31:0];
  5'h5:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_5_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_5_reg_dout[31:0];
  5'h6:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_6_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_6_reg_dout[31:0];
  5'h7:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_7_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_7_reg_dout[31:0];
  5'h8:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_8_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_8_reg_dout[31:0];
  5'h9:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_9_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_9_reg_dout[31:0];
  5'ha:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_10_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_10_reg_dout[31:0];
  5'hb:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_11_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_11_reg_dout[31:0];
  5'hc:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_12_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_12_reg_dout[31:0];
  5'hd:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_13_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_13_reg_dout[31:0];
  5'he:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_14_reg_dout[31:0];
  else
     if (supv_mode & cp0_yy_intsp_sel_post )
      gpr_read_data1[31:0] = intsp_14_reg_dout[31:0];
    else if(supv_mode)
      gpr_read_data1[31:0] = privl_14_reg_dout[31:0];
    else
      gpr_read_data1[31:0] = user_14_reg_dout[31:0];
  5'hf:
  if(alter_mode)
    gpr_read_data1[31:0] = alter_15_reg_dout[31:0];
  else
    gpr_read_data1[31:0] = user_15_reg_dout[31:0];
  5'h10:
  if(ifu_iu_ex_cr_oper)
    gpr_read_data1[31:0] = cp0_iu_epsr[31:0];
  else
    gpr_read_data1[31:0] = 32'b0;
  5'h11:
  if(ifu_iu_ex_cr_oper)
    gpr_read_data1[31:0] = cp0_iu_epc[31:0];
  else
    gpr_read_data1[31:0] = 32'b0;
  default: gpr_read_data1[31:0] = 32'b0;
  endcase

end
assign inst_read_data1[31:0] = gpr_read_data1[31:0];

































endmodule




























module nm_iu_pcgen(
  branch_pcgen_add_pc,
  branch_pcgen_br_chgflw_vld,
  branch_pcgen_br_chgflw_vld_for_data,
  branch_pcgen_br_pc_chgflw_vld,
  branch_pcgen_branch_chgflw_vld_for_data,
  branch_pcgen_jmp_chgflw_vld_for_data,
  branch_pcgen_reg_pc,
  cp0_iu_epc_for_chgflw,
  cp0_iu_flush_chgflw_vld,
  cp0_iu_rte_chgflw_vld,
  cp0_iu_rte_chgflw_vld_for_data,
  cp0_yy_clk_en,
  cpurst_b,
  decd_xx_inst_32bit,
  forever_cpuclk,
  had_iu_pc,
  had_iu_rte_pc_sel,
  had_yy_xx_exit_dbg,
  ifu_iu_ibus_idle,
  ifu_iu_spcu_retire_mask,
  ifu_iu_unstack_chgflw,
  ifu_iu_xx_ibus_data,
  iu_ifu_addr,
  iu_ifu_data_fetch,
  iu_ifu_data_fetch_for_data,
  iu_ifu_inst_fetch,
  iu_ifu_inst_fetch_for_data,
  iu_ifu_inst_fetch_without_dbg_disable,
  iu_yy_xx_flush,
  iu_yy_xx_retire,
  misc_clk,
  nie_flush_chgflw,
  pad_yy_gate_clk_en_b,
  pcgen_branch_inc_pc,
  pcgen_ctrl_stall,
  pcgen_retire_updt_pc,
  pcgen_top_abort_clk_en,
  pcgen_xx_cur_pc,
  pcgen_xx_ibus_idle,
  randclk_pcgen_mod_en_w32,
  retire_branch_stall,
  retire_pcgen_curpc_update,
  retire_xx_normal_retire,
  vector_pcgen_buf_vbr,
  vector_pcgen_chgflw_vld,
  vector_pcgen_cur_pc_vld,
  vector_pcgen_enter_addr,
  vector_pcgen_ibus_req,
  wb_pcgen_ldst_stall,
  wb_pcgen_pc_updt_val,
  wb_pcgen_switch_ld_pc,
  wb_retire_fast_retire_load_pc
);


input   [30:0]  branch_pcgen_add_pc;                    
input           branch_pcgen_br_chgflw_vld;             
input           branch_pcgen_br_chgflw_vld_for_data;    
input           branch_pcgen_br_pc_chgflw_vld;          
input           branch_pcgen_branch_chgflw_vld_for_data; 
input           branch_pcgen_jmp_chgflw_vld_for_data;   
input   [30:0]  branch_pcgen_reg_pc;                    
input   [30:0]  cp0_iu_epc_for_chgflw;                  
input           cp0_iu_flush_chgflw_vld;                
input           cp0_iu_rte_chgflw_vld;                  
input           cp0_iu_rte_chgflw_vld_for_data;         
input           cp0_yy_clk_en;                          
input           cpurst_b;                               
input           decd_xx_inst_32bit;                     
input           forever_cpuclk;                         
input   [30:0]  had_iu_pc;                              
input           had_iu_rte_pc_sel;                      
input           had_yy_xx_exit_dbg;                     
input           ifu_iu_ibus_idle;                       
input           ifu_iu_spcu_retire_mask;                
input           ifu_iu_unstack_chgflw;                  
input   [31:0]  ifu_iu_xx_ibus_data;                    
input           iu_yy_xx_flush;                         
input           iu_yy_xx_retire;                        
input           misc_clk;                               
input           nie_flush_chgflw;                       
input           pad_yy_gate_clk_en_b;                   
input           randclk_pcgen_mod_en_w32;               
input           retire_branch_stall;                    
input           retire_pcgen_curpc_update;              
input           retire_xx_normal_retire;                
input           vector_pcgen_buf_vbr;                   
input           vector_pcgen_chgflw_vld;                
input           vector_pcgen_cur_pc_vld;                
input   [30:0]  vector_pcgen_enter_addr;                
input           vector_pcgen_ibus_req;                  
input           wb_pcgen_ldst_stall;                    
input   [30:0]  wb_pcgen_pc_updt_val;                   
input           wb_pcgen_switch_ld_pc;                  
input   [30:0]  wb_retire_fast_retire_load_pc;          
output  [30:0]  iu_ifu_addr;                            
output          iu_ifu_data_fetch;                      
output          iu_ifu_data_fetch_for_data;             
output          iu_ifu_inst_fetch;                      
output          iu_ifu_inst_fetch_for_data;             
output          iu_ifu_inst_fetch_without_dbg_disable;  
output  [30:0]  pcgen_branch_inc_pc;                    
output          pcgen_ctrl_stall;                       
output  [30:0]  pcgen_retire_updt_pc;                   
output          pcgen_top_abort_clk_en;                 
output  [30:0]  pcgen_xx_cur_pc;                        
output          pcgen_xx_ibus_idle;                     


reg             cur_state;                              
reg             fetch_cur_state;                        
reg             fetch_next_state;                       
reg             next_state;                             
reg     [30:0]  pcgen_cur_pc;                           


wire    [30:0]  bctm_pcgen_chgflw_pc;                   
wire            bctm_pcgen_chk_chgflw_vld;              
wire            bctm_pcgen_chk_fail_pc_vld;             
wire            bctm_pcgen_jmp_chgflw_vld;              
wire            bctm_pcgen_jmp_chgflw_vld_for_data;     
wire    [30:0]  branch_pcgen_add_pc;                    
wire            branch_pcgen_br_chgflw_vld;             
wire            branch_pcgen_br_chgflw_vld_for_data;    
wire            branch_pcgen_br_pc_chgflw_vld;          
wire            branch_pcgen_branch_chgflw_vld_for_data; 
wire            branch_pcgen_jmp_chgflw_vld_for_data;   
wire    [30:0]  branch_pcgen_reg_pc;                    
wire    [30:0]  cp0_iu_epc_for_chgflw;                  
wire            cp0_iu_flush_chgflw_vld;                
wire            cp0_iu_rte_chgflw_vld;                  
wire            cp0_iu_rte_chgflw_vld_for_data;         
wire            cp0_yy_clk_en;                          
wire            cpurst_b;                               
wire            curpc_10_0_clk;                         
wire            curpc_10_0_clk_en;                      
wire            curpc_30_11_clk;                        
wire            curpc_30_11_clk_en;                     
wire            curpc_sel_from_wb;                      
wire            curpc_sel_not_hs;                       
wire            decd_xx_inst_32bit;                     
wire            forever_cpuclk;                         
wire    [30:0]  had_iu_pc;                              
wire            had_iu_rte_pc_sel;                      
wire            had_yy_xx_exit_dbg;                     
wire            ifu_iu_ibus_idle;                       
wire            ifu_iu_spcu_retire_mask;                
wire            ifu_iu_unstack_chgflw;                  
wire    [31:0]  ifu_iu_xx_ibus_data;                    
wire            inst_fetch_mask;                        
wire    [30:0]  iu_ifu_addr;                            
wire            iu_ifu_data_fetch;                      
wire            iu_ifu_data_fetch_for_data;             
wire            iu_ifu_inst_fetch;                      
wire            iu_ifu_inst_fetch_for_data;             
wire            iu_ifu_inst_fetch_without_dbg_disable;  
wire            iu_yy_xx_flush;                         
wire            iu_yy_xx_retire;                        
wire            misc_clk;                               
wire            nie_flush_chgflw;                       
wire            pad_yy_gate_clk_en_b;                   
wire            pcgen_abort_chgflw_vld;                 
wire            pcgen_abort_chgflw_vld_for_data;        
wire    [30:0]  pcgen_addr_after_bctm;                  
wire    [30:0]  pcgen_addr_chgflw_asap;                 
wire    [30:0]  pcgen_addr_chgflw_delay;                
wire    [30:0]  pcgen_addr_except_chgflw_delay;         
wire            pcgen_address_add;                      
wire            pcgen_address_cur;                      
wire            pcgen_address_epc;                      
wire            pcgen_address_had;                      
wire            pcgen_address_ibus;                     
wire            pcgen_address_inc;                      
wire            pcgen_address_reg;                      
wire            pcgen_address_svbr;                     
wire            pcgen_address_vec;                      
wire    [30:0]  pcgen_branch_inc_pc;                    
wire            pcgen_chfglw_asap_vld_for_data;         
wire            pcgen_chgflw_asap_vld;                  
wire            pcgen_chgflw_delay_sel;                 
wire            pcgen_ctrl_stall;                       
wire    [30:0]  pcgen_cur_pc_next_val;                  
wire    [30:0]  pcgen_cur_pc_next_val_before_hs;        
wire            pcgen_cur_pc_updt_vld;                  
wire            pcgen_cur_pc_updt_vld_by_inst;          
wire            pcgen_cur_pc_updt_vld_chgflw;           
wire            pcgen_cur_pc_updt_vld_normal;           
wire            pcgen_cur_pc_updt_vld_not_by_inst;      
wire            pcgen_fetch_mask_trig;                  
wire            pcgen_idle_chgflw_vld;                  
wire            pcgen_idle_chgflw_vld_for_data;         
wire    [1 :0]  pcgen_inc_offset;                       
wire    [30:0]  pcgen_increase_pc;                      
wire            pcgen_inst_fetch;                       
wire    [30:0]  pcgen_retire_updt_pc;                   
wire            pcgen_top_abort_clk_en;                 
wire            pcgen_wait_idle_trig;                   
wire    [30:0]  pcgen_xx_cur_pc;                        
wire            pcgen_xx_ibus_idle;                     
wire            randclk_pcgen_mod_en_w32;               
wire            retire_branch_stall;                    
wire            retire_pcgen_curpc_update;              
wire            retire_xx_normal_retire;                
wire            vector_pcgen_buf_vbr;                   
wire            vector_pcgen_chgflw_vld;                
wire            vector_pcgen_cur_pc_vld;                
wire    [30:0]  vector_pcgen_enter_addr;                
wire            vector_pcgen_ibus_req;                  
wire            wb_pcgen_ldst_stall;                    
wire    [30:0]  wb_pcgen_pc_updt_val;                   
wire            wb_pcgen_switch_ld_pc;                  
wire    [30:0]  wb_retire_fast_retire_load_pc;          


parameter IDLE       = 1'b0;
parameter WAIT_IDLE  = 1'b1;
parameter FETCH_IDLE = 1'b0;
parameter FETCH_MASK = 1'b1;
parameter EMMU_IDLE       = 1'b0;
parameter EMMU_WAIT_IDLE  = 1'b1;




assign pcgen_top_abort_clk_en = pcgen_wait_idle_trig
                             || pcgen_fetch_mask_trig
                             || (cur_state != IDLE)
                             || (fetch_cur_state != FETCH_IDLE);











assign curpc_10_0_clk_en = pcgen_cur_pc_updt_vld;

gated_clk_cell  x_curpc_gated_clk (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (curpc_10_0_clk          ),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (curpc_10_0_clk_en       ),
  .module_en                (randclk_pcgen_mod_en_w32),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);








assign curpc_30_11_clk_en = pcgen_cur_pc_updt_vld_chgflw
                         || pcgen_cur_pc_updt_vld_normal
                            && (pcgen_cur_pc[11] ^ pcgen_cur_pc_next_val[11]);

gated_clk_cell  x_curpc_30_11_gated_clk (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (curpc_30_11_clk         ),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (curpc_30_11_clk_en      ),
  .module_en                (randclk_pcgen_mod_en_w32),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);

























assign bctm_pcgen_jmp_chgflw_vld          = 1'b0;
assign bctm_pcgen_jmp_chgflw_vld_for_data = 1'b0;
assign bctm_pcgen_chgflw_pc[30:0] = 31'b0;
assign bctm_pcgen_chk_fail_pc_vld = 1'b0;
assign bctm_pcgen_chk_chgflw_vld = 1'b0;

assign pcgen_inst_fetch = branch_pcgen_br_chgflw_vld
                       || cp0_iu_rte_chgflw_vld
                       || cp0_iu_flush_chgflw_vld 
                       || had_yy_xx_exit_dbg
                       || vector_pcgen_chgflw_vld 
                       || bctm_pcgen_jmp_chgflw_vld
                       || bctm_pcgen_chk_chgflw_vld
                       || ifu_iu_unstack_chgflw 
                       || nie_flush_chgflw;




























always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state <= IDLE;
  else
    cur_state <= next_state;
end




assign pcgen_chgflw_asap_vld          = branch_pcgen_br_chgflw_vld;
assign pcgen_chfglw_asap_vld_for_data = branch_pcgen_br_chgflw_vld_for_data; 

assign pcgen_wait_idle_trig = pcgen_inst_fetch && !pcgen_chgflw_asap_vld;

always @( cur_state
       or pcgen_wait_idle_trig
       or ifu_iu_ibus_idle)
begin
  case(cur_state)
  IDLE      : if(pcgen_wait_idle_trig)
                next_state = WAIT_IDLE;
              else
                next_state = IDLE;
  WAIT_IDLE : if(ifu_iu_ibus_idle)
                next_state = IDLE;
              else
                next_state = WAIT_IDLE;
  default   :   next_state = IDLE;
  endcase

end

always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    fetch_cur_state <= FETCH_IDLE;
  else if(iu_yy_xx_flush)
    fetch_cur_state <= FETCH_IDLE;
  else
    fetch_cur_state <= fetch_next_state;
end

assign pcgen_fetch_mask_trig = pcgen_chgflw_asap_vld && !iu_yy_xx_retire;

always @( pcgen_fetch_mask_trig
       or iu_yy_xx_retire
       or fetch_cur_state)
begin
  case(fetch_cur_state)
  FETCH_IDLE : if(pcgen_fetch_mask_trig)
                 fetch_next_state = FETCH_MASK;
               else
                 fetch_next_state = FETCH_IDLE;
  FETCH_MASK : if(iu_yy_xx_retire)
                 fetch_next_state = FETCH_IDLE;
               else
                 fetch_next_state = FETCH_MASK;
  default    :   fetch_next_state = FETCH_IDLE;
  endcase

end

assign inst_fetch_mask = (fetch_cur_state == FETCH_MASK);
assign pcgen_xx_ibus_idle = ifu_iu_ibus_idle || inst_fetch_mask;






assign pcgen_idle_chgflw_vld  = pcgen_chgflw_asap_vld 
                                && !inst_fetch_mask;
assign pcgen_abort_chgflw_vld = (cur_state == WAIT_IDLE)
                                && ifu_iu_ibus_idle;

assign iu_ifu_inst_fetch  = pcgen_abort_chgflw_vld || pcgen_idle_chgflw_vld;

assign pcgen_idle_chgflw_vld_for_data  = pcgen_chfglw_asap_vld_for_data
                                         && !inst_fetch_mask;
assign pcgen_abort_chgflw_vld_for_data = (cur_state == WAIT_IDLE)
                                         && ifu_iu_ibus_idle; 
assign iu_ifu_inst_fetch_for_data = pcgen_abort_chgflw_vld_for_data ||
                                    pcgen_idle_chgflw_vld_for_data;

assign iu_ifu_inst_fetch_without_dbg_disable = iu_ifu_inst_fetch && !retire_branch_stall
                                               && !wb_pcgen_ldst_stall;










assign pcgen_ctrl_stall   = (cur_state == WAIT_IDLE)
                         && !ifu_iu_spcu_retire_mask;// && !ifu_iu_ibus_idle;

















assign iu_ifu_data_fetch = vector_pcgen_ibus_req;
assign iu_ifu_data_fetch_for_data = vector_pcgen_ibus_req;







assign pcgen_address_had  = had_yy_xx_exit_dbg
                         || cp0_iu_rte_chgflw_vld_for_data && had_iu_rte_pc_sel;

assign pcgen_address_vec  = vector_pcgen_buf_vbr;

assign pcgen_address_ibus = vector_pcgen_cur_pc_vld;

assign pcgen_address_epc  = cp0_iu_rte_chgflw_vld_for_data && !had_iu_rte_pc_sel
                            && !pcgen_address_svbr;



assign pcgen_address_add  = branch_pcgen_branch_chgflw_vld_for_data
                            && !pcgen_address_svbr;
assign pcgen_address_reg  = branch_pcgen_jmp_chgflw_vld_for_data
                            && !pcgen_address_svbr;

assign pcgen_address_svbr = bctm_pcgen_jmp_chgflw_vld_for_data
                         || bctm_pcgen_chk_fail_pc_vld;

assign pcgen_address_inc  = !(pcgen_address_add
                             || pcgen_address_reg
                             || pcgen_address_svbr
                             || pcgen_address_cur);




assign pcgen_address_cur  = (cur_state == WAIT_IDLE)
                         || vector_pcgen_ibus_req; 







assign pcgen_addr_chgflw_delay[30:0] = 
             {31{pcgen_address_had}}  & had_iu_pc[30:0]
           | {31{pcgen_address_vec}}  & vector_pcgen_enter_addr[30:0]
           | {31{pcgen_address_ibus}} & ifu_iu_xx_ibus_data[31:1]
           | {31{pcgen_address_epc}}  & cp0_iu_epc_for_chgflw[30:0];


assign pcgen_addr_chgflw_asap[30:0] =
             {31{pcgen_address_add}}  & branch_pcgen_add_pc[30:0]
           | {31{pcgen_address_reg}}  & branch_pcgen_reg_pc[30:0]
           | {31{pcgen_address_inc}}  & pcgen_increase_pc[30:0]
           | {31{pcgen_address_cur}}  & pcgen_cur_pc[30:0];

assign pcgen_addr_after_bctm[30:0] = 
             {31{pcgen_address_svbr}}  & bctm_pcgen_chgflw_pc[30:0]
           | {31{!pcgen_address_svbr}} & pcgen_addr_chgflw_asap[30:0];

assign pcgen_addr_except_chgflw_delay[30:0] = pcgen_cur_pc_updt_vld
                                      ? pcgen_addr_after_bctm[30:0]
                                      : pcgen_cur_pc[30:0];







assign pcgen_retire_updt_pc[30:0] = pcgen_addr_except_chgflw_delay[30:0]; 




assign pcgen_chgflw_delay_sel = pcgen_cur_pc_updt_vld
                             && (pcgen_address_had
                                 || pcgen_address_vec
                                 || pcgen_address_ibus
                                 || pcgen_address_epc);

assign pcgen_cur_pc_next_val_before_hs[30:0] = pcgen_chgflw_delay_sel
                                      ? pcgen_addr_chgflw_delay[30:0]
                                      : pcgen_addr_except_chgflw_delay[30:0];

assign curpc_sel_from_wb = retire_pcgen_curpc_update
                        && !bctm_pcgen_chk_fail_pc_vld;
assign curpc_sel_not_hs = !curpc_sel_from_wb
                       && !wb_pcgen_switch_ld_pc;
assign pcgen_cur_pc_next_val[30:0] = 
        {31{curpc_sel_from_wb}}     & wb_retire_fast_retire_load_pc[30:0]
      | {31{wb_pcgen_switch_ld_pc}} & wb_pcgen_pc_updt_val[30:0]
      | {31{curpc_sel_not_hs}}      & pcgen_cur_pc_next_val_before_hs[30:0];




assign iu_ifu_addr[30:0] = pcgen_addr_chgflw_asap[30:0]; 











assign pcgen_cur_pc_updt_vld_not_by_inst = had_yy_xx_exit_dbg
                                        || vector_pcgen_buf_vbr
                                        || vector_pcgen_cur_pc_vld
                                        || bctm_pcgen_chk_fail_pc_vld
                                        || retire_pcgen_curpc_update
                                        || wb_pcgen_switch_ld_pc;


assign pcgen_cur_pc_updt_vld_by_inst = branch_pcgen_br_pc_chgflw_vld
                                    || cp0_iu_rte_chgflw_vld
                                    || bctm_pcgen_jmp_chgflw_vld;




assign pcgen_cur_pc_updt_vld_normal = retire_xx_normal_retire;

assign pcgen_cur_pc_updt_vld_chgflw = pcgen_cur_pc_updt_vld_not_by_inst 
                                   || pcgen_cur_pc_updt_vld_by_inst;

assign pcgen_cur_pc_updt_vld = pcgen_cur_pc_updt_vld_not_by_inst
                            || pcgen_cur_pc_updt_vld_normal;





always @(posedge curpc_10_0_clk)
begin
    pcgen_cur_pc[10:0] <= pcgen_cur_pc_next_val[10:0];
end

always @(posedge curpc_30_11_clk)
begin
    pcgen_cur_pc[30:11] <= pcgen_cur_pc_next_val[30:11];
end


assign pcgen_xx_cur_pc[30:0] = pcgen_cur_pc[30:0];








assign pcgen_increase_pc[30:0] = pcgen_cur_pc[30:0] + pcgen_inc_offset[1:0];



assign pcgen_inc_offset[1] = decd_xx_inst_32bit;
assign pcgen_inc_offset[0] = !decd_xx_inst_32bit;

assign pcgen_branch_inc_pc[30:0] = pcgen_increase_pc[30:0];







endmodule


























module nm_iu_randclk(
  randclk_oper_gpr_mod_en_w32,
  randclk_pcgen_mod_en_w32,
  randclk_retire_mod_en_w2,
  randclk_wb_buf_mod_en_w32,
  randclk_wb_ctrl_mod_en_w2,
  randclk_wb_idx_mod_en_w5
);


output  [20:0]  randclk_oper_gpr_mod_en_w32; 
output          randclk_pcgen_mod_en_w32;   
output          randclk_retire_mod_en_w2;   
output          randclk_wb_buf_mod_en_w32;  
output          randclk_wb_ctrl_mod_en_w2;  
output          randclk_wb_idx_mod_en_w5;   




wire    [20:0]  randclk_oper_gpr_mod_en_w32; 
wire            randclk_pcgen_mod_en_w32;   
wire            randclk_retire_mod_en_w2;   
wire            randclk_wb_buf_mod_en_w32;  
wire            randclk_wb_ctrl_mod_en_w2;  
wire            randclk_wb_idx_mod_en_w5;   





assign randclk_oper_gpr_mod_en_w32[20:0] = 21'b0;
assign randclk_pcgen_mod_en_w32          = 1'b0;
assign randclk_retire_mod_en_w2          = 1'b0;

assign randclk_wb_buf_mod_en_w32         = 1'b0;
assign randclk_wb_ctrl_mod_en_w2         = 1'b0;
assign randclk_wb_idx_mod_en_w5          = 1'b0;




endmodule





























module nm_iu_rbus(
  alu_rbus_c,
  alu_rbus_c_vld,
  alu_rbus_data,
  alu_rbus_data_vld,
  alu_rbus_req,
  branch_rbus_data,
  branch_rbus_data_vld,
  branch_rbus_req,
  cp0_iu_data,
  cp0_iu_data_vld,
  cp0_iu_expt_vec,
  cp0_iu_expt_vld,
  cp0_iu_flush,
  cp0_iu_req,
  ctrl_alu_ex_data_sel,
  ctrl_branch_ex_data_sel,
  ctrl_cp0_ex_data_sel,
  ctrl_lsu_ex_data_sel,
  ctrl_mad_ex_data_sel,
  ctrl_special_ex_data_sel,
  ctrl_xx_sp_adjust,
  decd_xx_unit_special_sel,
  ifu_iu_ex_dst_reg,
  ifu_iu_ex_int_spcu_mask,
  ifu_iu_ex_split_on,
  ifu_iu_hs_retire_mask,
  lsu_iu_data,
  lsu_iu_data_vld,
  lsu_iu_expt_vec,
  lsu_iu_expt_vld,
  lsu_iu_fast_retire,
  lsu_iu_req,
  lsu_iu_store,
  mad_alu_data_vld,
  mad_alu_rbus_data,
  mad_rbus_req,
  rbus_retire_c,
  rbus_retire_c_vld,
  rbus_retire_cmplt,
  rbus_retire_expt_vec,
  rbus_retire_expt_vld,
  rbus_retire_flush,
  rbus_retire_split_inst,
  rbus_wb_cmplt,
  rbus_wb_data,
  rbus_wb_dst_reg,
  rbus_wb_inst_cmplt,
  rbus_wb_load,
  rbus_wb_store,
  special_rbus_expt_vec,
  special_rbus_expt_vld,
  special_rbus_req,
  wb_rbus_st_aft_load,
  wb_xx_acc_err_after_retire
);


input           alu_rbus_c;                      
input           alu_rbus_c_vld;                  
input   [31:0]  alu_rbus_data;                   
input           alu_rbus_data_vld;               
input           alu_rbus_req;                    
input   [31:0]  branch_rbus_data;                
input           branch_rbus_data_vld;            
input           branch_rbus_req;                 
input   [31:0]  cp0_iu_data;                     
input           cp0_iu_data_vld;                 
input   [4 :0]  cp0_iu_expt_vec;                 
input           cp0_iu_expt_vld;                 
input           cp0_iu_flush;                    
input           cp0_iu_req;                      
input           ctrl_alu_ex_data_sel;            
input           ctrl_branch_ex_data_sel;         
input           ctrl_cp0_ex_data_sel;            
input           ctrl_lsu_ex_data_sel;            
input           ctrl_mad_ex_data_sel;            
input           ctrl_special_ex_data_sel;        
input           ctrl_xx_sp_adjust;               
input           decd_xx_unit_special_sel;        
input   [4 :0]  ifu_iu_ex_dst_reg;               
input           ifu_iu_ex_int_spcu_mask;         
input           ifu_iu_ex_split_on;              
input           ifu_iu_hs_retire_mask;           
input   [31:0]  lsu_iu_data;                     
input           lsu_iu_data_vld;                 
input   [4 :0]  lsu_iu_expt_vec;                 
input           lsu_iu_expt_vld;                 
input           lsu_iu_fast_retire;              
input           lsu_iu_req;                      
input           lsu_iu_store;                    
input           mad_alu_data_vld;                
input   [31:0]  mad_alu_rbus_data;               
input           mad_rbus_req;                    
input   [4 :0]  special_rbus_expt_vec;           
input           special_rbus_expt_vld;           
input           special_rbus_req;                
input           wb_rbus_st_aft_load;             
input           wb_xx_acc_err_after_retire;      
output          rbus_retire_c;                   
output          rbus_retire_c_vld;               
output          rbus_retire_cmplt;               
output  [4 :0]  rbus_retire_expt_vec;            
output          rbus_retire_expt_vld;            
output          rbus_retire_flush;               
output          rbus_retire_split_inst;          
output          rbus_wb_cmplt;                   
output  [31:0]  rbus_wb_data;                    
output  [4 :0]  rbus_wb_dst_reg;                 
output          rbus_wb_inst_cmplt;              
output          rbus_wb_load;                    
output          rbus_wb_store;                   




wire            alu_data_sel;                    
wire            alu_rbus_c;                      
wire            alu_rbus_c_vld;                  
wire    [31:0]  alu_rbus_data;                   
wire            alu_rbus_data_vld;               
wire            alu_rbus_req;                    
wire            alu_sel;                         
wire            bctm_rbus_flush;                 
wire            bctm_rbus_req;                   
wire    [31:0]  bctm_rbus_wb_data;               
wire    [4 :0]  bctm_rbus_wb_reg;                
wire            bctm_rbus_wb_vld;                
wire    [31:0]  branch_rbus_data;                
wire            branch_rbus_data_vld;            
wire            branch_rbus_req;                 
wire            branch_sel;                      
wire    [31:0]  cp0_iu_data;                     
wire            cp0_iu_data_vld;                 
wire    [4 :0]  cp0_iu_expt_vec;                 
wire            cp0_iu_expt_vld;                 
wire            cp0_iu_flush;                    
wire            cp0_iu_req;                      
wire            cp0_sel;                         
wire            ctrl_alu_ex_data_sel;            
wire            ctrl_branch_ex_data_sel;         
wire            ctrl_cp0_ex_data_sel;            
wire            ctrl_lsu_ex_data_sel;            
wire            ctrl_mad_ex_data_sel;            
wire            ctrl_special_ex_data_sel;        
wire            ctrl_xx_sp_adjust;               
wire            decd_xx_unit_special_sel;        
wire    [4 :0]  ifu_iu_ex_dst_reg;               
wire            ifu_iu_ex_int_spcu_mask;         
wire            ifu_iu_ex_split_on;              
wire            ifu_iu_hs_retire_mask;           
wire    [31:0]  lsu_iu_data;                     
wire            lsu_iu_data_vld;                 
wire    [4 :0]  lsu_iu_expt_vec;                 
wire            lsu_iu_expt_vld;                 
wire            lsu_iu_fast_retire;              
wire            lsu_iu_flush;                    
wire            lsu_iu_req;                      
wire            lsu_iu_store;                    
wire            lsu_sel;                         
wire            mad_alu_data_vld;                
wire    [31:0]  mad_alu_rbus_data;               
wire            mad_data_sel;                    
wire            mad_rbus_req;                    
wire            mad_sel;                         
wire            prgsign_rbus_req;                
wire            prgsign_rbus_secure_violation;   
wire            rbus_cmplt;                      
wire    [31:0]  rbus_data;                       
wire    [31:0]  rbus_data_expt_lsu;              
wire    [31:0]  rbus_data_expt_lsu_without_pol;  
wire            rbus_data_sel_alu;               
wire            rbus_data_sel_branch;            
wire            rbus_data_sel_cp0;               
wire            rbus_data_sel_lsu;               
wire            rbus_data_sel_mad;               
wire            rbus_retire_c;                   
wire            rbus_retire_c_vld;               
wire            rbus_retire_cmplt;               
wire            rbus_retire_data_vld;            
wire    [4 :0]  rbus_retire_expt_vec;            
wire    [4 :0]  rbus_retire_expt_vec_aft_prgsign; 
wire    [4 :0]  rbus_retire_expt_vec_pre;        
wire            rbus_retire_expt_vld;            
wire            rbus_retire_expt_vld_pre;        
wire            rbus_retire_flush;               
wire            rbus_retire_split_inst;          
wire            rbus_wb_cmplt;                   
wire    [31:0]  rbus_wb_data;                    
wire    [4 :0]  rbus_wb_dst_reg;                 
wire            rbus_wb_inst_cmplt;              
wire            rbus_wb_load;                    
wire            rbus_wb_store;                   
wire            rbus_write_back_cmplt;           
wire    [4 :0]  special_rbus_expt_vec;           
wire            special_rbus_expt_vld;           
wire            special_rbus_req;                
wire            special_sel;                     
wire            wb_rbus_st_aft_load;             
wire            wb_xx_acc_err_after_retire;      





assign bctm_rbus_req           = 1'b0;
assign bctm_rbus_flush         = 1'b0;
assign bctm_rbus_wb_vld        = 1'b0;
assign bctm_rbus_wb_data[31:0] = 32'b0;
assign bctm_rbus_wb_reg[4:0]   = 5'b0;
assign lsu_iu_flush            = 1'b0;
assign branch_sel  = ctrl_branch_ex_data_sel;//  && !decd_xx_unit_special_sel;
assign cp0_sel     = ctrl_cp0_ex_data_sel     && !decd_xx_unit_special_sel;
assign special_sel = ctrl_special_ex_data_sel ||  decd_xx_unit_special_sel;
assign lsu_sel     = ctrl_lsu_ex_data_sel     && !decd_xx_unit_special_sel;

assign alu_sel     = ctrl_alu_ex_data_sel && !decd_xx_unit_special_sel;
assign alu_data_sel= ctrl_alu_ex_data_sel;
assign mad_sel     = ctrl_mad_ex_data_sel && !decd_xx_unit_special_sel;
assign mad_data_sel= ctrl_mad_ex_data_sel;



assign prgsign_rbus_req = 1'b0;
assign prgsign_rbus_secure_violation = 1'b0;
assign rbus_cmplt = alu_rbus_req    || mad_rbus_req 
                 || lsu_iu_req      || special_rbus_req
                 || cp0_iu_req      || branch_rbus_req 
                 || bctm_rbus_req   || prgsign_rbus_req; 

assign rbus_retire_cmplt = rbus_cmplt && !ifu_iu_hs_retire_mask
                                      && !ifu_iu_ex_int_spcu_mask;







assign rbus_retire_flush = //branch_rbus_req && branch_rbus_flush
                           cp0_iu_req      && cp0_iu_flush
                        || bctm_rbus_req   && bctm_rbus_flush
                        || lsu_iu_req      && lsu_iu_flush;







assign rbus_data_sel_branch = ctrl_branch_ex_data_sel 
                           && branch_rbus_data_vld    && !bctm_rbus_wb_vld;
assign rbus_data_sel_cp0    = ctrl_cp0_ex_data_sel    && !bctm_rbus_wb_vld;
assign rbus_data_sel_mad    = mad_data_sel            && !bctm_rbus_wb_vld;
assign rbus_data_sel_alu    = alu_data_sel            && !bctm_rbus_wb_vld
                           || ctrl_xx_sp_adjust;

assign rbus_data_expt_lsu_without_pol[31:0] = 
                                  {32{bctm_rbus_wb_vld}}     & bctm_rbus_wb_data[31:0]
                                | {32{rbus_data_sel_branch}} & branch_rbus_data[31:0]
                                | {32{rbus_data_sel_cp0}}    & cp0_iu_data[31:0]
                                | {32{rbus_data_sel_mad}}    & mad_alu_rbus_data[31:0]
                                | {32{rbus_data_sel_alu}}    & alu_rbus_data[31:0];

assign rbus_data_expt_lsu[31:0] = rbus_data_expt_lsu_without_pol[31:0];

assign rbus_data_sel_lsu = (ctrl_lsu_ex_data_sel || wb_rbus_st_aft_load)
                           && !bctm_rbus_wb_vld && !ctrl_xx_sp_adjust;
assign rbus_data[31:0] = {32{!rbus_data_sel_lsu}} & rbus_data_expt_lsu[31:0]
                       | {32{rbus_data_sel_lsu}}  & lsu_iu_data[31:0];







assign rbus_retire_data_vld = alu_sel    && alu_rbus_data_vld
                           || mad_sel    && mad_alu_data_vld
                           || lsu_sel    && lsu_iu_data_vld
                           || cp0_sel    && cp0_iu_data_vld
                           || branch_sel && branch_rbus_data_vld;
                            

assign rbus_retire_expt_vld_pre = lsu_sel     && lsu_iu_expt_vld
                               || special_sel && special_rbus_expt_vld
                               || cp0_sel     && cp0_iu_expt_vld;

assign rbus_retire_expt_vec_pre[4:0] = {5{lsu_sel}}     & lsu_iu_expt_vec[4:0]
                                     | {5{special_sel}} & special_rbus_expt_vec[4:0]
                                     | {5{cp0_sel}}     & cp0_iu_expt_vec[4:0];




assign rbus_retire_c_vld = alu_sel && alu_rbus_c_vld;
assign rbus_retire_c     = alu_sel && alu_rbus_c;



assign rbus_retire_expt_vld = rbus_retire_expt_vld_pre || wb_xx_acc_err_after_retire
                              || prgsign_rbus_secure_violation;
assign rbus_retire_expt_vec_aft_prgsign[4:0] = prgsign_rbus_secure_violation
                                                ? 5'b01000
                                                : rbus_retire_expt_vec_pre[4:0];
assign rbus_retire_expt_vec[4:0] = wb_xx_acc_err_after_retire
                                        ? 5'b00010
                                        : rbus_retire_expt_vec_aft_prgsign[4:0];





assign rbus_retire_split_inst   = ifu_iu_ex_split_on;




























assign rbus_wb_dst_reg[4:0]        = (bctm_rbus_wb_vld)
                                     ? bctm_rbus_wb_reg[4:0]
                                     : ifu_iu_ex_dst_reg[4:0];

assign rbus_wb_data[31:0]          =  rbus_data[31:0];







assign rbus_write_back_cmplt = rbus_cmplt && rbus_retire_data_vld;
                                         // && !lsu_iu_fast_retire;

assign rbus_wb_load          = !lsu_iu_store
                                          && lsu_iu_fast_retire;
assign rbus_wb_store         = lsu_iu_store
                                          && lsu_iu_fast_retire;




assign rbus_wb_cmplt         = rbus_write_back_cmplt || bctm_rbus_wb_vld;
assign rbus_wb_inst_cmplt    = rbus_cmplt;



endmodule
































module nm_iu_retire(
  cp0_iu_dbg_disable_for_tee,
  cp0_iu_ee,
  cp0_iu_ee_for_int,
  cp0_iu_ic,
  cp0_iu_ie_for_int,
  cp0_iu_int_spcu_en,
  cp0_yy_clk_en,
  cpu_intc_ack_vec,
  cpu_intc_int_ack,
  cpurst_b,
  ctrl_branch_ex_sel,
  ctrl_retire_nest_int_en,
  ctrl_retire_ni_vld,
  decd_retire_cp0_inst,
  decd_retire_inst_rte,
  forever_cpuclk,
  had_core_dbg_mode_req,
  had_iu_bkpt_trace_en,
  had_iu_dr_set_req,
  had_iu_flush_mbee,
  had_iu_force_dbg_en,
  had_iu_int_vld,
  had_iu_mbkpt_fsm_index_mbee,
  had_iu_mem_bkpt_exp_req,
  had_iu_mem_bkpt_mask,
  had_iu_mem_bkpt_req,
  had_iu_rte_pc_sel,
  had_iu_trace_req,
  had_iu_trace_req_for_dbg_disable,
  had_iu_xx_fdb,
  had_iu_xx_jdbreq,
  had_yy_xx_exit_dbg,
  ifu_iu_ex_inst_dbg_disable,
  ifu_iu_ex_sp_oper,
  ifu_iu_ex_split_on,
  ifu_iu_hs_retire_mask,
  ifu_iu_hs_stack_on,
  ifu_iu_hs_switch_se,
  ifu_iu_ibus_idle,
  ifu_iu_inst_bkpt_dbg_occur_vld,
  ifu_iu_inst_bkpt_dbgexp_occur_vld,
  ifu_iu_inst_buf_inst_dbg_disable,
  ifu_iu_inst_buf_inst_vld,
  intc_cpu_int_b,
  intc_cpu_vec_b,
  iu_cp0_c,
  iu_cp0_c_vld,
  iu_cp0_cur_epc_update,
  iu_cp0_epc,
  iu_cp0_epc_update,
  iu_cp0_expt_vld,
  iu_cp0_had_int_vld,
  iu_cp0_int_vld,
  iu_had_adr_dbg_ack,
  iu_had_data_bkpt_occur_vld,
  iu_had_dbg_disable_for_tee,
  iu_had_dr_dbg_ack,
  iu_had_expt_vld,
  iu_had_fast_retire_acc_err_pc_update,
  iu_had_fast_retire_acc_err_pc_val,
  iu_had_inst_bkpt_occur_vld,
  iu_had_int_ack,
  iu_had_retire_with_had_int,
  iu_had_trace_occur_vld,
  iu_had_xx_bkpt_inst,
  iu_had_xx_dbg_ack,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_had_xx_retire_pc,
  iu_ifu_kill_inst,
  iu_ifu_not_wait_for_dbg_disable,
  iu_ifu_spcu_int_en,
  iu_pad_inst_retire,
  iu_pad_inst_split,
  iu_pad_retire_pc,
  iu_yy_xx_dbgon,
  iu_yy_xx_expt_vec,
  iu_yy_xx_flush,
  iu_yy_xx_hs_acc_err,
  iu_yy_xx_reg_rst_b,
  iu_yy_xx_retire,
  lsu_iu_wb_acc_err,
  lsu_iu_wb_cmplt,
  nie_flush_chgflw,
  pad_yy_gate_clk_en_b,
  pcgen_retire_updt_pc,
  pcgen_xx_cur_pc,
  randclk_retire_mod_en_w2,
  rbus_retire_c,
  rbus_retire_c_vld,
  rbus_retire_cmplt,
  rbus_retire_expt_vec,
  rbus_retire_expt_vld,
  rbus_retire_flush,
  rbus_retire_split_inst,
  rbus_wb_load,
  rbus_wb_store,
  retire_branch_stall,
  retire_pcgen_curpc_update,
  retire_special_ack_expt_vld,
  retire_special_clear_cnt_with_ack_dbg,
  retire_vector_expt_vld,
  retire_vector_srst_vec,
  retire_wb_dbg_in_ack,
  retire_xx_normal_retire,
  special_idly_c_wdata,
  special_retire_idly_c_wen,
  special_retire_idly_int_mask,
  special_retire_inst_wsc,
  wb_retire_fast_retire_load_pc,
  wb_xx_acc_err_after_retire,
  wb_xx_lsu_check_fail_after_retire
);


input           cp0_iu_dbg_disable_for_tee;           
input           cp0_iu_ee;                            
input           cp0_iu_ee_for_int;                    
input           cp0_iu_ic;                            
input           cp0_iu_ie_for_int;                    
input           cp0_iu_int_spcu_en;                   
input           cp0_yy_clk_en;                        
input           cpurst_b;                             
input           ctrl_branch_ex_sel;                   
input           ctrl_retire_nest_int_en;              
input           ctrl_retire_ni_vld;                   
input           decd_retire_cp0_inst;                 
input           decd_retire_inst_rte;                 
input           forever_cpuclk;                       
input           had_core_dbg_mode_req;                
input           had_iu_bkpt_trace_en;                 
input           had_iu_dr_set_req;                    
input           had_iu_flush_mbee;                    
input           had_iu_force_dbg_en;                  
input           had_iu_int_vld;                       
input           had_iu_mbkpt_fsm_index_mbee;          
input           had_iu_mem_bkpt_exp_req;              
input           had_iu_mem_bkpt_mask;                 
input           had_iu_mem_bkpt_req;                  
input           had_iu_rte_pc_sel;                    
input           had_iu_trace_req;                     
input           had_iu_trace_req_for_dbg_disable;     
input           had_iu_xx_fdb;                        
input           had_iu_xx_jdbreq;                     
input           had_yy_xx_exit_dbg;                   
input           ifu_iu_ex_inst_dbg_disable;           
input           ifu_iu_ex_sp_oper;                    
input           ifu_iu_ex_split_on;                   
input           ifu_iu_hs_retire_mask;                
input           ifu_iu_hs_stack_on;                   
input           ifu_iu_hs_switch_se;                  
input           ifu_iu_ibus_idle;                     
input           ifu_iu_inst_bkpt_dbg_occur_vld;       
input           ifu_iu_inst_bkpt_dbgexp_occur_vld;    
input           ifu_iu_inst_buf_inst_dbg_disable;     
input           ifu_iu_inst_buf_inst_vld;             
input           intc_cpu_int_b;                       
input   [7 :0]  intc_cpu_vec_b;                       
input           iu_yy_xx_reg_rst_b;                   
input           lsu_iu_wb_acc_err;                    
input           lsu_iu_wb_cmplt;                      
input           pad_yy_gate_clk_en_b;                 
input   [30:0]  pcgen_retire_updt_pc;                 
input   [30:0]  pcgen_xx_cur_pc;                      
input           randclk_retire_mod_en_w2;             
input           rbus_retire_c;                        
input           rbus_retire_c_vld;                    
input           rbus_retire_cmplt;                    
input   [4 :0]  rbus_retire_expt_vec;                 
input           rbus_retire_expt_vld;                 
input           rbus_retire_flush;                    
input           rbus_retire_split_inst;               
input           rbus_wb_load;                         
input           rbus_wb_store;                        
input           special_idly_c_wdata;                 
input           special_retire_idly_c_wen;            
input           special_retire_idly_int_mask;         
input           special_retire_inst_wsc;              
input   [30:0]  wb_retire_fast_retire_load_pc;        
input           wb_xx_acc_err_after_retire;           
input           wb_xx_lsu_check_fail_after_retire;    
output  [7 :0]  cpu_intc_ack_vec;                     
output          cpu_intc_int_ack;                     
output          iu_cp0_c;                             
output          iu_cp0_c_vld;                         
output          iu_cp0_cur_epc_update;                
output  [30:0]  iu_cp0_epc;                           
output          iu_cp0_epc_update;                    
output          iu_cp0_expt_vld;                      
output          iu_cp0_had_int_vld;                   
output          iu_cp0_int_vld;                       
output          iu_had_adr_dbg_ack;                   
output          iu_had_data_bkpt_occur_vld;           
output          iu_had_dbg_disable_for_tee;           
output          iu_had_dr_dbg_ack;                    
output          iu_had_expt_vld;                      
output          iu_had_fast_retire_acc_err_pc_update; 
output  [30:0]  iu_had_fast_retire_acc_err_pc_val;    
output          iu_had_inst_bkpt_occur_vld;           
output          iu_had_int_ack;                       
output          iu_had_retire_with_had_int;           
output          iu_had_trace_occur_vld;               
output          iu_had_xx_bkpt_inst;                  
output          iu_had_xx_dbg_ack;                    
output          iu_had_xx_mldst;                      
output          iu_had_xx_retire;                     
output          iu_had_xx_retire_normal;              
output  [31:0]  iu_had_xx_retire_pc;                  
output          iu_ifu_kill_inst;                     
output          iu_ifu_not_wait_for_dbg_disable;      
output          iu_ifu_spcu_int_en;                   
output          iu_pad_inst_retire;                   
output          iu_pad_inst_split;                    
output  [31:0]  iu_pad_retire_pc;                     
output          iu_yy_xx_dbgon;                       
output  [7 :0]  iu_yy_xx_expt_vec;                    
output          iu_yy_xx_flush;                       
output          iu_yy_xx_hs_acc_err;                  
output          iu_yy_xx_retire;                      
output          nie_flush_chgflw;                     
output          retire_branch_stall;                  
output          retire_pcgen_curpc_update;            
output          retire_special_ack_expt_vld;          
output          retire_special_clear_cnt_with_ack_dbg; 
output          retire_vector_expt_vld;               
output          retire_vector_srst_vec;               
output          retire_wb_dbg_in_ack;                 
output          retire_xx_normal_retire;              


reg             bkpt_cur_state;                       
reg             bkpt_next_state;                      
reg     [1 :0]  br_cur_state;                         
reg     [1 :0]  br_next_state;                        
reg             dbg_mode_on;                          
reg             dbgreq_ack_ff;                        
reg     [7 :0]  expt_vec;                             
reg             retire_ack_expt;                      
reg             retire_ack_int;                       
reg             retire_with_ack_dbg;                  
reg             retire_with_ack_int;                  
reg             trace_cur_state;                      
reg             trace_next_state;                     
reg             wb_split_inst;                        


wire            bctm_retire_epc_updt_vld;             
wire            bctm_retire_had_pc_updt_vld;          
wire            bkpt_fsm_trigger;                     
wire            cp0_iu_dbg_disable_for_tee;           
wire            cp0_iu_ee;                            
wire            cp0_iu_ee_for_int;                    
wire            cp0_iu_ic;                            
wire            cp0_iu_ie_for_int;                    
wire            cp0_iu_int_spcu_en;                   
wire            cp0_yy_clk_en;                        
wire    [7 :0]  cpu_intc_ack_vec;                     
wire            cpu_intc_int_ack;                     
wire            cpurst_b;                             
wire            ctrl_branch_ex_sel;                   
wire            ctrl_retire_nest_int_en;              
wire            ctrl_retire_ni_vld;                   
wire            dbg_clk;                              
wire            dbg_clk_en;                           
wire            dbgreq_ack;                           
wire            dbgreq_ack_aft_force;                 
wire            decd_retire_cp0_inst;                 
wire            decd_retire_inst_rte;                 
wire            epc_update_after_retire;              
wire            ex_inst_dbg_disable;                  
wire    [30:0]  fast_retire_acc_err_epc;              
wire            forever_cpuclk;                       
wire            had_core_dbg_mode_req;                
wire            had_iu_bkpt_trace_en;                 
wire            had_iu_dr_set_req;                    
wire            had_iu_flush_mbee;                    
wire            had_iu_force_dbg_en;                  
wire            had_iu_int_vld;                       
wire            had_iu_mbkpt_fsm_index_mbee;          
wire            had_iu_mem_bkpt_exp_req;              
wire            had_iu_mem_bkpt_mask;                 
wire            had_iu_mem_bkpt_req;                  
wire            had_iu_rte_pc_sel;                    
wire            had_iu_trace_req;                     
wire            had_iu_trace_req_for_dbg_disable;     
wire            had_iu_xx_fdb;                        
wire            had_iu_xx_jdbreq;                     
wire            had_yy_xx_exit_dbg;                   
wire            hadpc_update_after_retire;            
wire            ifu_iu_ex_inst_dbg_disable;           
wire            ifu_iu_ex_sp_oper;                    
wire            ifu_iu_ex_split_on;                   
wire            ifu_iu_hs_retire_mask;                
wire            ifu_iu_hs_stack_on;                   
wire            ifu_iu_hs_switch_se;                  
wire            ifu_iu_ibus_idle;                     
wire            ifu_iu_inst_bkpt_dbg_occur_vld;       
wire            ifu_iu_inst_bkpt_dbgexp_occur_vld;    
wire            ifu_iu_inst_buf_inst_dbg_disable;     
wire            ifu_iu_inst_buf_inst_vld;             
wire            inst_dbg_disable;                     
wire            int_enable_with_ee_ie;                
wire            int_ic_aft_sec_sel;                   
wire    [7 :0]  int_vec;                              
wire            intc_cpu_int_b;                       
wire    [7 :0]  intc_cpu_vec_b;                       
wire            iu_cp0_c;                             
wire            iu_cp0_c_vld;                         
wire            iu_cp0_cur_epc_update;                
wire    [30:0]  iu_cp0_epc;                           
wire            iu_cp0_epc_update;                    
wire            iu_cp0_expt_vld;                      
wire            iu_cp0_had_int_vld;                   
wire            iu_cp0_int_vld;                       
wire            iu_had_adr_dbg_ack;                   
wire            iu_had_data_bkpt_occur_vld;           
wire            iu_had_dbg_disable_for_tee;           
wire            iu_had_dr_dbg_ack;                    
wire            iu_had_expt_vld;                      
wire            iu_had_fast_retire_acc_err_pc_update; 
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;    
wire            iu_had_inst_bkpt_occur_vld;           
wire            iu_had_int_ack;                       
wire            iu_had_retire_with_had_int;           
wire            iu_had_trace_occur_vld;               
wire            iu_had_xx_bkpt_inst;                  
wire            iu_had_xx_dbg_ack;                    
wire            iu_had_xx_mldst;                      
wire            iu_had_xx_retire;                     
wire            iu_had_xx_retire_normal;              
wire    [31:0]  iu_had_xx_retire_pc;                  
wire            iu_ifu_kill_inst;                     
wire            iu_ifu_not_wait_for_dbg_disable;      
wire            iu_ifu_spcu_int_en;                   
wire            iu_pad_inst_retire;                   
wire            iu_pad_inst_split;                    
wire    [31:0]  iu_pad_retire_pc;                     
wire            iu_yy_xx_dbgon;                       
wire    [7 :0]  iu_yy_xx_expt_vec;                    
wire            iu_yy_xx_flush;                       
wire            iu_yy_xx_hs_acc_err;                  
wire            iu_yy_xx_reg_rst_b;                   
wire            iu_yy_xx_retire;                      
wire            load_store_fast_retire;               
wire            lsu_iu_wb_acc_err;                    
wire            lsu_iu_wb_cmplt;                      
wire            nie_flush;                            
wire            nie_flush_chgflw;                     
wire            pad_yy_gate_clk_en_b;                 
wire    [30:0]  pcgen_retire_updt_pc;                 
wire    [30:0]  pcgen_xx_cur_pc;                      
wire            randclk_retire_mod_en_w2;             
wire            rbus_flush;                           
wire            rbus_retire_c;                        
wire            rbus_retire_c_vld;                    
wire            rbus_retire_cmplt;                    
wire    [4 :0]  rbus_retire_expt_vec;                 
wire            rbus_retire_expt_vld;                 
wire            rbus_retire_flush;                    
wire            rbus_retire_split_inst;               
wire            rbus_wb_load;                         
wire            rbus_wb_store;                        
wire            retire_ack_bkpt;                      
wire            retire_ack_dr_set_req;                
wire            retire_ack_expt_vld;                  
wire            retire_ack_int_vld;                   
wire            retire_ack_jdbreq;                    
wire            retire_ack_mem_bkpt_fast_retire;      
wire            retire_ack_mem_bkpt_req;              
wire            retire_ack_mem_bkpt_vld;              
wire            retire_ack_mem_bkpt_vld_idle;         
wire            retire_ack_trace_fast_retire;         
wire            retire_ack_trace_req;                 
wire            retire_ack_trace_vld;                 
wire            retire_ack_trace_vld_idle;            
wire            retire_branch_dbg_idle;               
wire            retire_branch_stall;                  
wire            retire_dbg_disable;                   
wire            retire_dbg_disable_pre;               
wire            retire_dbg_expt;                      
wire            retire_dbg_mask;                      
wire    [30:0]  retire_epc_or_hadpc;                  
wire            retire_expt_int_vld;                  
wire            retire_expt_vld;                      
wire            retire_hs_acc_err;                    
wire            retire_inst_expt;                     
wire            retire_int;                           
wire            retire_int_mask_from_had;             
wire            retire_int_vld;                       
wire            retire_pc_expt_vld;                   
wire            retire_pcgen_curpc_update;            
wire            retire_special_ack_expt_vld;          
wire            retire_special_clear_cnt_with_ack_dbg; 
wire            retire_split_inst_no_dbg;             
wire            retire_split_inst_no_dbg_for_pad;     
wire            retire_split_inst_with_dbg_ack;       
wire            retire_srst_misalign_expt;            
wire            retire_vector_expt_vld;               
wire            retire_vector_srst_vec;               
wire            retire_wb_dbg_in_ack;                 
wire            retire_with_ack_had_int;              
wire            retire_with_ack_vic_int;              
wire            retire_xx_normal_retire;              
wire            sec_retire_flush;                     
wire            soft_reset_vld;                       
wire            special_idly_c_wdata;                 
wire            special_retire_idly_c_wen;            
wire            special_retire_idly_int_mask;         
wire            special_retire_inst_wsc;              
wire            wb_dbg_exp_after_retire;              
wire    [30:0]  wb_retire_fast_retire_load_pc;        
wire            wb_split_inst_clk_en;                 
wire            wb_xx_acc_err_after_retire;           
wire            wb_xx_lsu_check_fail_after_retire;    





assign dbg_clk_en = dbgreq_ack_aft_force || dbg_mode_on || dbgreq_ack_ff
                 || retire_int_vld
                 || retire_with_ack_int || retire_with_ack_dbg
                 || wb_split_inst_clk_en
                 || had_iu_mem_bkpt_req || had_iu_trace_req
                 || had_iu_trace_req_for_dbg_disable
                 || retire_wb_dbg_in_ack || had_iu_mem_bkpt_exp_req;

gated_clk_cell  x_dbg_gated_clk (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (dbg_clk                 ),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (dbg_clk_en              ),
  .module_en                (randclk_retire_mod_en_w2),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);





























assign iu_yy_xx_retire      = rbus_retire_cmplt;

assign iu_cp0_c_vld         = rbus_retire_cmplt && rbus_retire_c_vld
                           || special_retire_idly_c_wen;

assign iu_cp0_c             = special_retire_idly_c_wen ? special_idly_c_wdata
                                                        : rbus_retire_c;





assign retire_int = (!intc_cpu_int_b && !had_iu_int_vld
                       && int_enable_with_ee_ie
                  || had_iu_int_vld
                       && !decd_retire_cp0_inst
                    )
                && !special_retire_idly_int_mask
                && !special_retire_inst_wsc
                && !decd_retire_inst_rte
                && !had_iu_rte_pc_sel
                && !(ctrl_retire_ni_vld || wb_xx_acc_err_after_retire)
                && (  !int_ic_aft_sec_sel && !rbus_retire_split_inst 
                    || int_ic_aft_sec_sel);
assign int_enable_with_ee_ie = cp0_iu_ee_for_int && cp0_iu_ie_for_int;
assign int_ic_aft_sec_sel = cp0_iu_ic;


assign int_vec[7:0]  = had_iu_int_vld ? 8'b00001101 : ~intc_cpu_vec_b[7:0];

assign retire_srst_misalign_expt =  cp0_iu_ee
                                 && rbus_retire_expt_vld
                                 && (rbus_retire_expt_vec[4:1] == 4'b0000);

assign retire_inst_expt     =  rbus_retire_expt_vld;









assign retire_dbg_expt = 1'b0;

assign iu_ifu_kill_inst = 1'b0;


always @( rbus_retire_expt_vec[4:0]
       or retire_dbg_expt
       or int_vec[7:0]
       or retire_inst_expt
       or cp0_iu_ee
       or retire_srst_misalign_expt
       or retire_int)
begin
  expt_vec[7:0]   = 8'b0;
  retire_ack_expt = 1'b0;
  retire_ack_int  = 1'b0;
  if(retire_dbg_expt)
  begin
    retire_ack_expt = 1'b1;
    expt_vec[7:0] = {5'b0,3'b111};
  end
  else if(retire_srst_misalign_expt)
  begin
    retire_ack_expt = 1'b1;
    expt_vec[7:0] = {7'b0,rbus_retire_expt_vec[0]};
  end
  else if(retire_int)
  begin
    retire_ack_int  = 1'b1;
    expt_vec[7:0]   = int_vec[7:0];
  end
  else if(retire_inst_expt)
  begin
    retire_ack_expt = 1'b1;
    if(cp0_iu_ee)
      expt_vec[7:0] = {3'b0,rbus_retire_expt_vec[4:0]};
    else
      expt_vec[7:0] = 8'b00001000;
  end

end

assign retire_hs_acc_err = 1'b0;
assign iu_yy_xx_hs_acc_err = retire_hs_acc_err;


assign retire_ack_expt_vld = (retire_ack_expt && iu_yy_xx_retire)
                          || (wb_xx_acc_err_after_retire
                              && !retire_with_ack_int)
                          || wb_dbg_exp_after_retire && cp0_iu_ee;

assign retire_ack_int_vld  = retire_ack_int && iu_yy_xx_retire;

assign retire_expt_vld = retire_ack_expt_vld && (!dbg_mode_on || soft_reset_vld)
                      && !dbgreq_ack_aft_force;



assign retire_int_mask_from_had = had_iu_mem_bkpt_mask || had_iu_trace_req;
assign retire_int_vld  = retire_ack_int_vld  && !dbg_mode_on && !dbgreq_ack_aft_force
                         && !retire_int_mask_from_had;

assign iu_yy_xx_expt_vec[7:0] = ifu_iu_hs_stack_on ? 8'b00001000
                                                   : expt_vec[7:0];

assign retire_expt_int_vld = retire_expt_vld || retire_int_vld;



assign retire_split_inst_no_dbg = rbus_retire_split_inst
                                  && !(iu_yy_xx_retire && retire_int);



assign retire_split_inst_no_dbg_for_pad = rbus_retire_split_inst
                                          && !(retire_ack_expt_vld || retire_ack_int_vld);
assign retire_split_inst_with_dbg_ack = retire_split_inst_no_dbg_for_pad && !dbgreq_ack_aft_force;





assign retire_pc_expt_vld = retire_inst_expt && !dbg_mode_on;




assign iu_cp0_expt_vld             = retire_expt_int_vld;


assign iu_cp0_int_vld              = retire_int_vld;
assign iu_ifu_spcu_int_en          = retire_int_vld && !had_iu_bkpt_trace_en
                                     && cp0_iu_int_spcu_en;
assign iu_cp0_had_int_vld          = retire_int_vld && had_iu_int_vld;



assign retire_vector_expt_vld      = retire_expt_int_vld;
assign cpu_intc_int_ack            = retire_int_vld && !had_iu_int_vld;
assign cpu_intc_ack_vec[7:0]       = ~intc_cpu_vec_b[7:0];

assign retire_special_ack_expt_vld = retire_ack_expt_vld;
assign retire_special_clear_cnt_with_ack_dbg = retire_with_ack_dbg 
                                            && (wb_xx_acc_err_after_retire || wb_dbg_exp_after_retire && cp0_iu_ee);

assign soft_reset_vld              = (expt_vec[7:0] == 8'b0);
assign retire_vector_srst_vec      = soft_reset_vld;









always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    retire_with_ack_int <= 1'b0;
  else if(retire_int_vld)
    retire_with_ack_int <= 1'b1;
  else if(iu_yy_xx_retire)
    retire_with_ack_int <= 1'b0;
end

always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    retire_with_ack_dbg <= 1'b0;
  else if(dbgreq_ack_aft_force)
    retire_with_ack_dbg <= 1'b1;
  else if(iu_yy_xx_retire)
    retire_with_ack_dbg <= 1'b0;
end

assign retire_with_ack_vic_int = retire_with_ack_int && !had_iu_rte_pc_sel;
assign retire_with_ack_had_int = retire_with_ack_int && had_iu_rte_pc_sel;




assign bctm_retire_epc_updt_vld = 1'b0;
assign bctm_retire_had_pc_updt_vld = 1'b0;













assign fast_retire_acc_err_epc[30:0] = wb_retire_fast_retire_load_pc[30:0];
assign retire_epc_or_hadpc[30:0] = wb_xx_acc_err_after_retire
                                      ? fast_retire_acc_err_epc[30:0]
                                      : pcgen_retire_updt_pc[30:0];

assign iu_cp0_epc[30:0] = retire_epc_or_hadpc[30:0];

assign epc_update_after_retire = wb_xx_acc_err_after_retire && retire_with_ack_vic_int
                              || bctm_retire_epc_updt_vld;
assign iu_cp0_epc_update = epc_update_after_retire
                        && !ifu_iu_hs_retire_mask;
assign iu_cp0_cur_epc_update = 1'b0;



assign retire_pcgen_curpc_update = (epc_update_after_retire
                                      || hadpc_update_after_retire)
                                && ifu_iu_hs_retire_mask;





assign inst_dbg_disable    = 1'b0;

assign retire_ack_jdbreq  = had_iu_xx_jdbreq
                          && !ifu_iu_hs_switch_se
                          && !inst_dbg_disable
                          && !retire_dbg_disable;



assign retire_dbg_mask = ifu_iu_ex_sp_oper && ifu_iu_ex_split_on;
assign retire_ack_dr_set_req   = iu_yy_xx_retire && had_iu_dr_set_req
                                 && !retire_dbg_mask
                                 && !inst_dbg_disable
                                 && !had_iu_rte_pc_sel
                                 && !retire_dbg_disable;

assign retire_ack_bkpt    =  iu_yy_xx_retire && rbus_retire_expt_vld
                          && (rbus_retire_expt_vec[4:0] == 5'b00111)
                          && (had_iu_xx_fdb || had_core_dbg_mode_req
                          ||  ifu_iu_inst_bkpt_dbg_occur_vld)
                          && !dbg_mode_on
                          && !inst_dbg_disable
                          && !had_iu_rte_pc_sel
                          && !retire_dbg_disable
                          && !(ifu_iu_inst_bkpt_dbgexp_occur_vld
                          &&  !ifu_iu_inst_bkpt_dbg_occur_vld);



assign retire_ack_mem_bkpt_req         = retire_ack_mem_bkpt_vld_idle 
                                         && had_iu_mem_bkpt_req
                                         && !inst_dbg_disable
                                         && !had_iu_rte_pc_sel
                                         && !retire_dbg_disable;
assign retire_ack_mem_bkpt_fast_retire = retire_ack_mem_bkpt_vld
                                     && !had_iu_mbkpt_fsm_index_mbee;

assign retire_ack_trace_req            = retire_ack_trace_vld_idle    
                                         && had_iu_trace_req
                                         && !inst_dbg_disable
                                         && !had_iu_rte_pc_sel
                                         && !retire_dbg_disable;
assign retire_ack_trace_fast_retire    = retire_ack_trace_vld; 

assign dbgreq_ack = retire_ack_jdbreq     || retire_ack_bkpt
                 || retire_ack_dr_set_req || retire_ack_mem_bkpt_req
                 || retire_ack_trace_req
                 || retire_ack_mem_bkpt_fast_retire
                 || retire_ack_trace_fast_retire;

assign dbgreq_ack_aft_force = dbgreq_ack || had_iu_force_dbg_en;


always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    dbgreq_ack_ff <= 1'b0;
  else
    dbgreq_ack_ff <= dbgreq_ack_aft_force;
end

assign iu_had_xx_dbg_ack = dbgreq_ack_ff;

always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    dbg_mode_on <= 1'b0;
  else if(had_yy_xx_exit_dbg || !iu_yy_xx_reg_rst_b)
    dbg_mode_on <= 1'b0;
  else if(dbgreq_ack_aft_force)
    dbg_mode_on <= 1'b1;
  else
    dbg_mode_on <= dbg_mode_on;
end


assign iu_yy_xx_dbgon            = dbg_mode_on;

assign iu_had_xx_retire          = iu_yy_xx_retire;

assign iu_had_xx_retire_pc[31:0] = {pcgen_xx_cur_pc[30:0],1'b0};

assign iu_had_xx_mldst           = retire_split_inst_no_dbg;

assign iu_had_xx_retire_normal   = !rbus_retire_expt_vld;





assign iu_had_int_ack = 1'b0;
assign iu_had_retire_with_had_int = 1'b0;


assign iu_had_dbg_disable_for_tee = cp0_iu_dbg_disable_for_tee;

assign iu_had_adr_dbg_ack = retire_ack_jdbreq;

assign iu_had_dr_dbg_ack  = retire_ack_dr_set_req;

assign iu_had_inst_bkpt_occur_vld = retire_ack_bkpt
                                 && ifu_iu_inst_bkpt_dbg_occur_vld;
assign iu_had_data_bkpt_occur_vld = retire_ack_mem_bkpt_req
                                 || retire_ack_mem_bkpt_fast_retire;

assign iu_had_xx_bkpt_inst       = retire_ack_bkpt
                               && !ifu_iu_inst_bkpt_dbg_occur_vld
                               && !had_core_dbg_mode_req;

assign iu_had_trace_occur_vld     = retire_ack_trace_req
                                 || retire_ack_trace_fast_retire;






assign iu_had_expt_vld            = retire_expt_int_vld;






assign wb_split_inst_clk_en = wb_split_inst ^ retire_split_inst_no_dbg;
always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_split_inst <= 1'b0;
  else if(iu_yy_xx_retire)
    wb_split_inst <= retire_split_inst_no_dbg;
end






assign hadpc_update_after_retire = wb_xx_acc_err_after_retire
                                     && (retire_with_ack_dbg
                                      || retire_with_ack_had_int)
                                || bctm_retire_had_pc_updt_vld;
assign iu_had_fast_retire_acc_err_pc_update = hadpc_update_after_retire
                                           && !ifu_iu_hs_retire_mask;
assign iu_had_fast_retire_acc_err_pc_val[30:0] = retire_epc_or_hadpc[30:0];






assign load_store_fast_retire = rbus_wb_load || rbus_wb_store;


parameter BKPT_IDLE = 1'b0;
parameter BKPT_ACK  = 1'b1;

always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bkpt_cur_state <= BKPT_IDLE;
  else
    bkpt_cur_state <= bkpt_next_state;
end

assign bkpt_fsm_trigger = (had_iu_mem_bkpt_req
                        || had_iu_mem_bkpt_exp_req)
                        && load_store_fast_retire
                        && !ex_inst_dbg_disable && !had_iu_rte_pc_sel;


always @( bkpt_cur_state
       or bkpt_fsm_trigger
       or lsu_iu_wb_cmplt)
begin
  case(bkpt_cur_state)
  BKPT_IDLE : if(bkpt_fsm_trigger)
                bkpt_next_state = BKPT_ACK;
              else
                bkpt_next_state = BKPT_IDLE;
  BKPT_ACK  : if(lsu_iu_wb_cmplt)
                bkpt_next_state = BKPT_IDLE;
              else
                bkpt_next_state = BKPT_ACK;
  default   :   bkpt_next_state = BKPT_IDLE;
  endcase

end


assign retire_ack_mem_bkpt_vld_idle = (bkpt_cur_state == BKPT_IDLE)
                                      && !load_store_fast_retire;
assign retire_ack_mem_bkpt_vld = (bkpt_cur_state == BKPT_ACK)
                                 && lsu_iu_wb_cmplt
                                 && !lsu_iu_wb_acc_err;
assign wb_dbg_exp_after_retire = (bkpt_cur_state == BKPT_ACK) 
                                 && lsu_iu_wb_cmplt
                                 && !lsu_iu_wb_acc_err
                                 && had_iu_mbkpt_fsm_index_mbee;


parameter TRACE_IDLE = 1'b0;
parameter TRACE_ACK  = 1'b1;

always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    trace_cur_state <= TRACE_IDLE;
  else
    trace_cur_state <= trace_next_state;
end


always @( trace_cur_state
       or had_iu_rte_pc_sel
       or had_iu_trace_req
       or ex_inst_dbg_disable
       or load_store_fast_retire
       or lsu_iu_wb_cmplt)
begin
  case(trace_cur_state)
  TRACE_IDLE : if(had_iu_trace_req && load_store_fast_retire
                  && !ex_inst_dbg_disable && !had_iu_rte_pc_sel)
                trace_next_state = TRACE_ACK;
              else
                trace_next_state = TRACE_IDLE;
  TRACE_ACK  : if(lsu_iu_wb_cmplt)
                trace_next_state = TRACE_IDLE;
              else
                trace_next_state = TRACE_ACK;
  default    :  trace_next_state = TRACE_IDLE;
  endcase

end

assign retire_ack_trace_vld_idle = (trace_cur_state == TRACE_IDLE)
                                   && !load_store_fast_retire;
assign retire_ack_trace_vld = (trace_cur_state == TRACE_ACK)
                              && lsu_iu_wb_cmplt
                              && !lsu_iu_wb_acc_err;



assign retire_wb_dbg_in_ack = (bkpt_cur_state  == BKPT_ACK)
                           || (trace_cur_state == TRACE_ACK);






parameter BR_DBG_IDLE = 2'b00;
parameter BR_DBG_ACK  = 2'b10;

always @(posedge dbg_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    br_cur_state[1:0] <= BR_DBG_IDLE;
  else
    br_cur_state[1:0] <= br_next_state[1:0];
end


always @( ifu_iu_ibus_idle
       or ctrl_branch_ex_sel
       or br_cur_state
       or had_iu_trace_req_for_dbg_disable
       or ifu_iu_inst_buf_inst_vld)
begin
  case(br_cur_state)
  BR_DBG_IDLE : if(ctrl_branch_ex_sel && ifu_iu_ibus_idle && had_iu_trace_req_for_dbg_disable)
                  br_next_state = BR_DBG_ACK;
                else
                  br_next_state = BR_DBG_IDLE;
  BR_DBG_ACK  : if(ifu_iu_inst_buf_inst_vld)
                  br_next_state = BR_DBG_IDLE;
                else
                  br_next_state = BR_DBG_ACK;
  default     :   br_next_state = BR_DBG_IDLE;
  endcase

end

assign retire_branch_stall = (br_cur_state == BR_DBG_IDLE)
                                && had_iu_trace_req_for_dbg_disable
                          || (br_cur_state == BR_DBG_ACK)
                                && !ifu_iu_inst_buf_inst_vld;

assign retire_branch_dbg_idle = (br_cur_state == BR_DBG_IDLE);


assign iu_ifu_not_wait_for_dbg_disable = retire_branch_dbg_idle;

assign retire_dbg_disable = retire_dbg_disable_pre || cp0_iu_dbg_disable_for_tee;

assign retire_dbg_disable_pre = retire_branch_dbg_idle
                                  ? ex_inst_dbg_disable
                                  : ifu_iu_inst_buf_inst_dbg_disable;

assign ex_inst_dbg_disable = ifu_iu_ex_inst_dbg_disable || cp0_iu_dbg_disable_for_tee;







assign retire_xx_normal_retire = iu_yy_xx_retire
                                    && !rbus_retire_split_inst
                                    && !(retire_pc_expt_vld && !special_retire_inst_wsc);





assign sec_retire_flush = 1'b0;

assign rbus_flush      = iu_yy_xx_retire && rbus_retire_flush;

assign nie_flush       = ctrl_retire_nest_int_en && had_iu_flush_mbee && iu_yy_xx_retire;

assign nie_flush_chgflw = nie_flush;


assign iu_yy_xx_flush  = rbus_flush
                         || iu_cp0_expt_vld
                         || dbgreq_ack_aft_force
                         || wb_xx_lsu_check_fail_after_retire
                         || retire_hs_acc_err
                         || sec_retire_flush
                         || nie_flush;





assign iu_pad_inst_retire     = iu_yy_xx_retire && !retire_split_inst_with_dbg_ack;

assign iu_pad_inst_split      = retire_split_inst_with_dbg_ack;

assign iu_pad_retire_pc[31:0] = {pcgen_xx_cur_pc[30:0],1'b0};


endmodule



























module nm_iu_special(
  cp0_iu_idly_counter_clear,
  cpurst_b,
  ctrl_special_ex_sel,
  ctrl_special_expt_vec,
  ctrl_special_expt_vld,
  decd_special_idly,
  idly_counter_eq_zero,
  iu_pad_inst_retire,
  iu_yy_xx_dbgon,
  iu_yy_xx_retire,
  misc_clk,
  oper_imm_for_special,
  retire_special_ack_expt_vld,
  retire_special_clear_cnt_with_ack_dbg,
  special_idly_c_wdata,
  special_rbus_expt_vec,
  special_rbus_expt_vld,
  special_rbus_req,
  special_retire_idly_c_wen,
  special_retire_idly_int_mask,
  special_retire_inst_wsc,
  special_top_clk_en
);


input          cp0_iu_idly_counter_clear;            
input          cpurst_b;                             
input          ctrl_special_ex_sel;                  
input   [4:0]  ctrl_special_expt_vec;                
input          ctrl_special_expt_vld;                
input          decd_special_idly;                    
input          iu_pad_inst_retire;                   
input          iu_yy_xx_dbgon;                       
input          iu_yy_xx_retire;                      
input          misc_clk;                             
input   [4:0]  oper_imm_for_special;                 
input          retire_special_ack_expt_vld;          
input          retire_special_clear_cnt_with_ack_dbg; 
output         idly_counter_eq_zero;                 
output         special_idly_c_wdata;                 
output  [4:0]  special_rbus_expt_vec;                
output         special_rbus_expt_vld;                
output         special_rbus_req;                     
output         special_retire_idly_c_wen;            
output         special_retire_idly_int_mask;         
output         special_retire_inst_wsc;              
output         special_top_clk_en;                   


reg     [5:0]  idly_counter;                         


wire           cp0_iu_idly_counter_clear;            
wire           cpurst_b;                             
wire           ctrl_special_ex_sel;                  
wire    [4:0]  ctrl_special_expt_vec;                
wire           ctrl_special_expt_vld;                
wire           decd_special_idly;                    
wire           idly_counter_clear_en;                
wire           idly_counter_dec_en;                  
wire           idly_counter_eq_zero;                 
wire           idly_counter_frozen_en;               
wire           idly_counter_initial_en;              
wire    [5:0]  idly_imm;                             
wire           idly_inst_retire;                     
wire           iu_pad_inst_retire;                   
wire           iu_yy_xx_dbgon;                       
wire           iu_yy_xx_retire;                      
wire           misc_clk;                             
wire    [4:0]  oper_imm_for_special;                 
wire           retire_special_ack_expt_vld;          
wire           retire_special_clear_cnt_with_ack_dbg; 
wire           special_idly_c_wdata;                 
wire    [4:0]  special_rbus_expt_vec;                
wire           special_rbus_expt_vld;                
wire           special_rbus_req;                     
wire           special_retire_idly_c_wen;            
wire           special_retire_idly_int_mask;         
wire           special_retire_inst_wsc;              
wire           special_top_clk_en;                   






assign special_top_clk_en = idly_counter_frozen_en
                         || idly_counter_clear_en
                         || idly_counter_dec_en
                         || idly_counter_initial_en;

assign idly_imm[5:0] = oper_imm_for_special[4:2] == 3'b000
                     ? 6'b000100
                     : oper_imm_for_special[4:0] + 1'b1;

always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    idly_counter[5:0] <= 6'b0;
  else if(retire_special_clear_cnt_with_ack_dbg)
    idly_counter[5:0] <= 6'b0;
  else if(idly_counter_frozen_en)
    idly_counter[5:0] <= idly_counter[5:0];
  else if(idly_counter_clear_en)
    idly_counter[5:0] <= 6'b0;
  else if(idly_counter_dec_en)
    idly_counter[5:0] <= idly_counter[5:0] - 1'b1;
  else if(idly_counter_initial_en)
    idly_counter[5:0] <= idly_imm[5:0];
  else
    idly_counter[5:0] <= idly_counter[5:0];
end

assign idly_counter_eq_zero  = (idly_counter[5:0] == 6'b0);

assign idly_inst_retire = iu_yy_xx_retire && decd_special_idly;



assign idly_counter_initial_en = idly_inst_retire && idly_counter_eq_zero;



assign idly_counter_dec_en   = iu_pad_inst_retire && !idly_counter_eq_zero;


assign idly_counter_frozen_en = iu_yy_xx_dbgon;


assign idly_counter_clear_en = retire_special_ack_expt_vld
                            || cp0_iu_idly_counter_clear;




assign special_retire_idly_int_mask = !idly_counter_eq_zero || decd_special_idly;






assign special_retire_idly_c_wen = (idly_inst_retire && idly_counter_eq_zero)
                     || (retire_special_ack_expt_vld && !idly_counter_eq_zero);
assign special_idly_c_wdata = idly_counter_eq_zero ? 1'b0: 1'b1;








assign special_rbus_req        = ctrl_special_ex_sel;


assign special_rbus_expt_vld      = ctrl_special_expt_vld;
assign special_rbus_expt_vec[4:0] = ctrl_special_expt_vec[4:0];

assign special_retire_inst_wsc = 1'b0;


endmodule

























module nm_iu_top(
  bmu_lsu_acc_err,
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data_vld,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cp0_iu_data,
  cp0_iu_data_vld,
  cp0_iu_dbg_disable_for_tee,
  cp0_iu_ee,
  cp0_iu_ee_for_int,
  cp0_iu_epc,
  cp0_iu_epc_for_chgflw,
  cp0_iu_epsr,
  cp0_iu_expt_vec,
  cp0_iu_expt_vld,
  cp0_iu_flush,
  cp0_iu_flush_chgflw_vld,
  cp0_iu_ic,
  cp0_iu_idly_counter_clear,
  cp0_iu_ie_for_int,
  cp0_iu_int_spcu_en,
  cp0_iu_intsp_we,
  cp0_iu_reg_write_data,
  cp0_iu_req,
  cp0_iu_rte_chgflw_vld,
  cp0_iu_rte_chgflw_vld_for_data,
  cp0_iu_src_c,
  cp0_iu_stall,
  cp0_iu_user_reg14_we,
  cp0_iu_vbr,
  cp0_iu_vec,
  cp0_yy_clk_en,
  cp0_yy_intsp_sel_post,
  cp0_yy_supv_mode,
  cpu_intc_ack_vec,
  cpu_intc_int_ack,
  cpurst_b,
  forever_cpuclk,
  had_core_dbg_mode_req,
  had_idu_wbbr_data,
  had_idu_wbbr_vld,
  had_iu_bkpt_trace_en,
  had_iu_dr_set_req,
  had_iu_flush_mbee,
  had_iu_force_dbg_en,
  had_iu_int_vld,
  had_iu_mbkpt_fsm_index_mbee,
  had_iu_mem_bkpt_exp_req,
  had_iu_mem_bkpt_mask,
  had_iu_mem_bkpt_req,
  had_iu_pc,
  had_iu_rte_pc_sel,
  had_iu_trace_req,
  had_iu_trace_req_for_dbg_disable,
  had_iu_xx_fdb,
  had_iu_xx_jdbreq,
  had_yy_xx_exit_dbg,
  idly_counter_eq_zero,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_dst_reg,
  ifu_iu_ex_expt_vld,
  ifu_iu_ex_imm,
  ifu_iu_ex_inst_bkpt,
  ifu_iu_ex_inst_dbg_disable,
  ifu_iu_ex_inst_vld,
  ifu_iu_ex_int_spcu_mask,
  ifu_iu_ex_int_spcu_vld,
  ifu_iu_ex_main_unit_sel,
  ifu_iu_ex_ni,
  ifu_iu_ex_op,
  ifu_iu_ex_pcode,
  ifu_iu_ex_predec_imm_vld,
  ifu_iu_ex_prvlg_expt_vld,
  ifu_iu_ex_rand_vld,
  ifu_iu_ex_sop,
  ifu_iu_ex_sp_oper,
  ifu_iu_ex_split_on,
  ifu_iu_ex_src0_reg,
  ifu_iu_ex_src1_reg,
  ifu_iu_hs_retire_mask,
  ifu_iu_hs_stack_on,
  ifu_iu_hs_stall_vector,
  ifu_iu_hs_switch_se,
  ifu_iu_ibus_idle,
  ifu_iu_inst_bkpt_dbg_occur_vld,
  ifu_iu_inst_bkpt_dbgexp_occur_vld,
  ifu_iu_inst_buf_inst_dbg_disable,
  ifu_iu_inst_buf_inst_vld,
  ifu_iu_nsinst_gpr_rst_b,
  ifu_iu_spcu_retire_mask,
  ifu_iu_unstack_chgflw,
  ifu_iu_vector_ibus_in_idle,
  ifu_iu_xx_ibus_data,
  intc_cpu_int_b,
  intc_cpu_vec_b,
  iu_bmu_vec_redirect,
  iu_cp0_af_updt_vld,
  iu_cp0_bm_vld,
  iu_cp0_c,
  iu_cp0_c_vld,
  iu_cp0_cur_epc_update,
  iu_cp0_epc,
  iu_cp0_epc_update,
  iu_cp0_epc_wen_for_nir,
  iu_cp0_epsr_wen_for_nir,
  iu_cp0_ex_data_sel,
  iu_cp0_ex_doze,
  iu_cp0_ex_mfcr,
  iu_cp0_ex_mtcr,
  iu_cp0_ex_psrclr,
  iu_cp0_ex_psrset,
  iu_cp0_ex_rte,
  iu_cp0_ex_sel,
  iu_cp0_ex_stop,
  iu_cp0_ex_wait,
  iu_cp0_expt_vld,
  iu_cp0_had_int_vld,
  iu_cp0_int_vld,
  iu_cp0_intsp_reg14_dout,
  iu_cp0_nest_int_en,
  iu_cp0_oper_mux_en,
  iu_cp0_prgsign_sign_vld,
  iu_cp0_src0,
  iu_cp0_src1,
  iu_cp0_syc_rst_b,
  iu_cp0_updt_val,
  iu_cp0_user_reg14_dout,
  iu_had_adr_dbg_ack,
  iu_had_data_bkpt_occur_vld,
  iu_had_dbg_disable_for_tee,
  iu_had_dr_dbg_ack,
  iu_had_expt_vld,
  iu_had_fast_retire_acc_err_pc_update,
  iu_had_fast_retire_acc_err_pc_val,
  iu_had_flush,
  iu_had_inst_bkpt_occur_vld,
  iu_had_int_ack,
  iu_had_retire_with_had_int,
  iu_had_trace_occur_vld,
  iu_had_xx_bkpt_inst,
  iu_had_xx_data,
  iu_had_xx_data_vld,
  iu_had_xx_dbg_ack,
  iu_had_xx_mldst,
  iu_had_xx_retire,
  iu_had_xx_retire_normal,
  iu_had_xx_retire_pc,
  iu_ifu_addr,
  iu_ifu_c_write_back,
  iu_ifu_cnt,
  iu_ifu_cnt_write_en,
  iu_ifu_data_fetch,
  iu_ifu_data_fetch_for_data,
  iu_ifu_ex_stall,
  iu_ifu_imm_data,
  iu_ifu_imm_write_en,
  iu_ifu_inst_fetch,
  iu_ifu_inst_fetch_for_data,
  iu_ifu_inst_fetch_mask,
  iu_ifu_inst_fetch_without_dbg_disable,
  iu_ifu_kill_inst,
  iu_ifu_not_wait_for_dbg_disable,
  iu_ifu_r15,
  iu_ifu_r15_vld,
  iu_ifu_security_violation,
  iu_ifu_spcu_error,
  iu_ifu_spcu_error_without_misalign,
  iu_ifu_spcu_int_en,
  iu_lsu_base,
  iu_lsu_data,
  iu_lsu_ex_data_sel,
  iu_lsu_ex_sel,
  iu_lsu_inst_store,
  iu_lsu_lrw,
  iu_lsu_lrw_no_fast_retire,
  iu_lsu_offset,
  iu_lsu_offset_sub,
  iu_lsu_oper_mux_en,
  iu_lsu_sign_exten,
  iu_lsu_size,
  iu_lsu_sp_base,
  iu_lsu_split_on,
  iu_lsu_src0_sp,
  iu_lsu_stall_without_hready,
  iu_lsu_wb_ldst,
  iu_pad_gpr_data,
  iu_pad_gpr_index,
  iu_pad_gpr_we,
  iu_pad_inst_retire,
  iu_pad_inst_split,
  iu_pad_retire_pc,
  iu_sysyio_soft_rst,
  iu_yy_xx_dbgon,
  iu_yy_xx_expt_vec,
  iu_yy_xx_flush,
  lsu_iu_addr_check_fail,
  lsu_iu_data,
  lsu_iu_data_vld,
  lsu_iu_expt_vec,
  lsu_iu_expt_vld,
  lsu_iu_fast_retire,
  lsu_iu_req,
  lsu_iu_stall,
  lsu_iu_store,
  lsu_iu_trans_acc_err,
  lsu_iu_wb_acc_err,
  lsu_iu_wb_bstack_chk_fail,
  lsu_iu_wb_cmplt,
  lsu_iu_wb_data_vld,
  lsu_iu_wb_load_data,
  pad_yy_gate_clk_en_b
);


input           bmu_lsu_acc_err;                        
input           bmu_xx_ibus_acc_err;                    
input           bmu_xx_ibus_data_vld;                   
input           bmu_xx_ibus_grnt;                       
input           bmu_xx_ibus_trans_cmplt;                
input   [31:0]  cp0_iu_data;                            
input           cp0_iu_data_vld;                        
input           cp0_iu_dbg_disable_for_tee;             
input           cp0_iu_ee;                              
input           cp0_iu_ee_for_int;                      
input   [31:0]  cp0_iu_epc;                             
input   [30:0]  cp0_iu_epc_for_chgflw;                  
input   [31:0]  cp0_iu_epsr;                            
input   [4 :0]  cp0_iu_expt_vec;                        
input           cp0_iu_expt_vld;                        
input           cp0_iu_flush;                           
input           cp0_iu_flush_chgflw_vld;                
input           cp0_iu_ic;                              
input           cp0_iu_idly_counter_clear;              
input           cp0_iu_ie_for_int;                      
input           cp0_iu_int_spcu_en;                     
input           cp0_iu_intsp_we;                        
input   [31:0]  cp0_iu_reg_write_data;                  
input           cp0_iu_req;                             
input           cp0_iu_rte_chgflw_vld;                  
input           cp0_iu_rte_chgflw_vld_for_data;         
input           cp0_iu_src_c;                           
input           cp0_iu_stall;                           
input           cp0_iu_user_reg14_we;                   
input   [21:0]  cp0_iu_vbr;                             
input   [7 :0]  cp0_iu_vec;                             
input           cp0_yy_clk_en;                          
input           cp0_yy_intsp_sel_post;                  
input           cp0_yy_supv_mode;                       
input           cpurst_b;                               
input           forever_cpuclk;                         
input           had_core_dbg_mode_req;                  
input   [31:0]  had_idu_wbbr_data;                      
input           had_idu_wbbr_vld;                       
input           had_iu_bkpt_trace_en;                   
input           had_iu_dr_set_req;                      
input           had_iu_flush_mbee;                      
input           had_iu_force_dbg_en;                    
input           had_iu_int_vld;                         
input           had_iu_mbkpt_fsm_index_mbee;            
input           had_iu_mem_bkpt_exp_req;                
input           had_iu_mem_bkpt_mask;                   
input           had_iu_mem_bkpt_req;                    
input   [30:0]  had_iu_pc;                              
input           had_iu_rte_pc_sel;                      
input           had_iu_trace_req;                       
input           had_iu_trace_req_for_dbg_disable;       
input           had_iu_xx_fdb;                          
input           had_iu_xx_jdbreq;                       
input           had_yy_xx_exit_dbg;                     
input           ifu_iu_ex_cr_oper;                      
input   [4 :0]  ifu_iu_ex_dst_reg;                      
input           ifu_iu_ex_expt_vld;                     
input   [31:0]  ifu_iu_ex_imm;                          
input           ifu_iu_ex_inst_bkpt;                    
input           ifu_iu_ex_inst_dbg_disable;             
input           ifu_iu_ex_inst_vld;                     
input           ifu_iu_ex_int_spcu_mask;                
input           ifu_iu_ex_int_spcu_vld;                 
input   [1 :0]  ifu_iu_ex_main_unit_sel;                
input           ifu_iu_ex_ni;                           
input   [5 :0]  ifu_iu_ex_op;                           
input   [4 :0]  ifu_iu_ex_pcode;                        
input           ifu_iu_ex_predec_imm_vld;               
input           ifu_iu_ex_prvlg_expt_vld;               
input           ifu_iu_ex_rand_vld;                     
input   [5 :0]  ifu_iu_ex_sop;                          
input           ifu_iu_ex_sp_oper;                      
input           ifu_iu_ex_split_on;                     
input   [4 :0]  ifu_iu_ex_src0_reg;                     
input   [4 :0]  ifu_iu_ex_src1_reg;                     
input           ifu_iu_hs_retire_mask;                  
input           ifu_iu_hs_stack_on;                     
input           ifu_iu_hs_stall_vector;                 
input           ifu_iu_hs_switch_se;                    
input           ifu_iu_ibus_idle;                       
input           ifu_iu_inst_bkpt_dbg_occur_vld;         
input           ifu_iu_inst_bkpt_dbgexp_occur_vld;      
input           ifu_iu_inst_buf_inst_dbg_disable;       
input           ifu_iu_inst_buf_inst_vld;               
input           ifu_iu_nsinst_gpr_rst_b;                
input           ifu_iu_spcu_retire_mask;                
input           ifu_iu_unstack_chgflw;                  
input           ifu_iu_vector_ibus_in_idle;             
input   [31:0]  ifu_iu_xx_ibus_data;                    
input           intc_cpu_int_b;                         
input   [7 :0]  intc_cpu_vec_b;                         
input           lsu_iu_addr_check_fail;                 
input   [31:0]  lsu_iu_data;                            
input           lsu_iu_data_vld;                        
input   [4 :0]  lsu_iu_expt_vec;                        
input           lsu_iu_expt_vld;                        
input           lsu_iu_fast_retire;                     
input           lsu_iu_req;                             
input           lsu_iu_stall;                           
input           lsu_iu_store;                           
input           lsu_iu_trans_acc_err;                   
input           lsu_iu_wb_acc_err;                      
input           lsu_iu_wb_bstack_chk_fail;              
input           lsu_iu_wb_cmplt;                        
input           lsu_iu_wb_data_vld;                     
input   [31:0]  lsu_iu_wb_load_data;                    
input           pad_yy_gate_clk_en_b;                   
output  [7 :0]  cpu_intc_ack_vec;                       
output          cpu_intc_int_ack;                       
output          idly_counter_eq_zero;                   
output          iu_bmu_vec_redirect;                    
output          iu_cp0_af_updt_vld;                     
output          iu_cp0_bm_vld;                          
output          iu_cp0_c;                               
output          iu_cp0_c_vld;                           
output          iu_cp0_cur_epc_update;                  
output  [30:0]  iu_cp0_epc;                             
output          iu_cp0_epc_update;                      
output          iu_cp0_epc_wen_for_nir;                 
output          iu_cp0_epsr_wen_for_nir;                
output          iu_cp0_ex_data_sel;                     
output          iu_cp0_ex_doze;                         
output          iu_cp0_ex_mfcr;                         
output          iu_cp0_ex_mtcr;                         
output          iu_cp0_ex_psrclr;                       
output          iu_cp0_ex_psrset;                       
output          iu_cp0_ex_rte;                          
output          iu_cp0_ex_sel;                          
output          iu_cp0_ex_stop;                         
output          iu_cp0_ex_wait;                         
output          iu_cp0_expt_vld;                        
output          iu_cp0_had_int_vld;                     
output          iu_cp0_int_vld;                         
output  [31:0]  iu_cp0_intsp_reg14_dout;                
output          iu_cp0_nest_int_en;                     
output          iu_cp0_oper_mux_en;                     
output          iu_cp0_prgsign_sign_vld;                
output  [31:0]  iu_cp0_src0;                            
output  [9 :0]  iu_cp0_src1;                            
output          iu_cp0_syc_rst_b;                       
output  [31:0]  iu_cp0_updt_val;                        
output  [31:0]  iu_cp0_user_reg14_dout;                 
output          iu_had_adr_dbg_ack;                     
output          iu_had_data_bkpt_occur_vld;             
output          iu_had_dbg_disable_for_tee;             
output          iu_had_dr_dbg_ack;                      
output          iu_had_expt_vld;                        
output          iu_had_fast_retire_acc_err_pc_update;   
output  [30:0]  iu_had_fast_retire_acc_err_pc_val;      
output          iu_had_flush;                           
output          iu_had_inst_bkpt_occur_vld;             
output          iu_had_int_ack;                         
output          iu_had_retire_with_had_int;             
output          iu_had_trace_occur_vld;                 
output          iu_had_xx_bkpt_inst;                    
output  [31:0]  iu_had_xx_data;                         
output          iu_had_xx_data_vld;                     
output          iu_had_xx_dbg_ack;                      
output          iu_had_xx_mldst;                        
output          iu_had_xx_retire;                       
output          iu_had_xx_retire_normal;                
output  [31:0]  iu_had_xx_retire_pc;                    
output  [30:0]  iu_ifu_addr;                            
output          iu_ifu_c_write_back;                    
output  [4 :0]  iu_ifu_cnt;                             
output          iu_ifu_cnt_write_en;                    
output          iu_ifu_data_fetch;                      
output          iu_ifu_data_fetch_for_data;             
output          iu_ifu_ex_stall;                        
output  [31:0]  iu_ifu_imm_data;                        
output          iu_ifu_imm_write_en;                    
output          iu_ifu_inst_fetch;                      
output          iu_ifu_inst_fetch_for_data;             
output          iu_ifu_inst_fetch_mask;                 
output          iu_ifu_inst_fetch_without_dbg_disable;  
output          iu_ifu_kill_inst;                       
output          iu_ifu_not_wait_for_dbg_disable;        
output  [30:0]  iu_ifu_r15;                             
output          iu_ifu_r15_vld;                         
output          iu_ifu_security_violation;              
output          iu_ifu_spcu_error;                      
output          iu_ifu_spcu_error_without_misalign;     
output          iu_ifu_spcu_int_en;                     
output  [31:0]  iu_lsu_base;                            
output  [31:0]  iu_lsu_data;                            
output          iu_lsu_ex_data_sel;                     
output          iu_lsu_ex_sel;                          
output          iu_lsu_inst_store;                      
output          iu_lsu_lrw;                             
output          iu_lsu_lrw_no_fast_retire;              
output  [15:0]  iu_lsu_offset;                          
output          iu_lsu_offset_sub;                      
output          iu_lsu_oper_mux_en;                     
output          iu_lsu_sign_exten;                      
output  [1 :0]  iu_lsu_size;                            
output  [31:0]  iu_lsu_sp_base;                         
output          iu_lsu_split_on;                        
output          iu_lsu_src0_sp;                         
output          iu_lsu_stall_without_hready;            
output          iu_lsu_wb_ldst;                         
output  [31:0]  iu_pad_gpr_data;                        
output  [4 :0]  iu_pad_gpr_index;                       
output          iu_pad_gpr_we;                          
output          iu_pad_inst_retire;                     
output          iu_pad_inst_split;                      
output  [31:0]  iu_pad_retire_pc;                       
output          iu_sysyio_soft_rst;                     
output          iu_yy_xx_dbgon;                         
output  [7 :0]  iu_yy_xx_expt_vec;                      
output          iu_yy_xx_flush;                         




wire            alu_rbus_c;                             
wire            alu_rbus_c_vld;                         
wire    [31:0]  alu_rbus_data;                          
wire            alu_rbus_data_vld;                      
wire            alu_rbus_req;                           
wire            bctm_top_clk_en;                        
wire            bmu_lsu_acc_err;                        
wire            bmu_xx_ibus_acc_err;                    
wire            bmu_xx_ibus_data_vld;                   
wire            bmu_xx_ibus_grnt;                       
wire            bmu_xx_ibus_trans_cmplt;                
wire            branch_ctrl_stall;                      
wire    [30:0]  branch_pcgen_add_pc;                    
wire            branch_pcgen_br_chgflw_vld;             
wire            branch_pcgen_br_chgflw_vld_for_data;    
wire            branch_pcgen_br_pc_chgflw_vld;          
wire            branch_pcgen_branch_chgflw_vld_for_data; 
wire            branch_pcgen_jmp_chgflw_vld_for_data;   
wire    [30:0]  branch_pcgen_reg_pc;                    
wire    [31:0]  branch_rbus_data;                       
wire            branch_rbus_data_vld;                   
wire            branch_rbus_req;                        
wire            branch_wb_jmp_reg;                      
wire    [31:0]  cp0_iu_data;                            
wire            cp0_iu_data_vld;                        
wire            cp0_iu_dbg_disable_for_tee;             
wire            cp0_iu_ee;                              
wire            cp0_iu_ee_for_int;                      
wire    [31:0]  cp0_iu_epc;                             
wire    [30:0]  cp0_iu_epc_for_chgflw;                  
wire    [31:0]  cp0_iu_epsr;                            
wire    [4 :0]  cp0_iu_expt_vec;                        
wire            cp0_iu_expt_vld;                        
wire            cp0_iu_flush;                           
wire            cp0_iu_flush_chgflw_vld;                
wire            cp0_iu_ic;                              
wire            cp0_iu_idly_counter_clear;              
wire            cp0_iu_ie_for_int;                      
wire            cp0_iu_int_spcu_en;                     
wire            cp0_iu_intsp_we;                        
wire    [31:0]  cp0_iu_reg_write_data;                  
wire            cp0_iu_req;                             
wire            cp0_iu_rte_chgflw_vld;                  
wire            cp0_iu_rte_chgflw_vld_for_data;         
wire            cp0_iu_src_c;                           
wire            cp0_iu_stall;                           
wire            cp0_iu_user_reg14_we;                   
wire    [21:0]  cp0_iu_vbr;                             
wire    [7 :0]  cp0_iu_vec;                             
wire            cp0_yy_clk_en;                          
wire            cp0_yy_intsp_sel_post;                  
wire            cp0_yy_supv_mode;                       
wire    [7 :0]  cpu_intc_ack_vec;                       
wire            cpu_intc_int_ack;                       
wire            cpurst_b;                               
wire            ctrl_alu_ex_data_sel;                   
wire            ctrl_alu_ex_sel;                        
wire            ctrl_alu_mad_oper_mux_en;               
wire            ctrl_alu_oper_mux_en;                   
wire            ctrl_branch_ex_data_sel;                
wire            ctrl_branch_ex_sel;                     
wire            ctrl_cp0_ex_data_sel;                   
wire            ctrl_lsu_ex_data_sel;                   
wire            ctrl_mad_ex_data_sel;                   
wire            ctrl_mad_ex_sel;                        
wire            ctrl_mad_oper_mux_en;                   
wire            ctrl_retire_nest_int_en;                
wire            ctrl_retire_ni_vld;                     
wire            ctrl_special_ex_data_sel;               
wire            ctrl_special_ex_sel;                    
wire    [4 :0]  ctrl_special_expt_vec;                  
wire            ctrl_special_expt_vld;                  
wire            ctrl_wb_ex_inst_dst_vld;                
wire            ctrl_wb_nie_nir_vld;                    
wire            ctrl_xx_dup_alu_sel;                    
wire            ctrl_xx_lsu_predec_sel;                 
wire            ctrl_xx_sp_adjust;                      
wire            ctrl_xx_sp_sub;                         
wire    [1 :0]  decd_alu_dst_vld_pre;                   
wire    [3 :0]  decd_alu_src0_pre;                      
wire            decd_alu_src1_imm_vld;                  
wire    [5 :0]  decd_alu_src1_pre;                      
wire    [1 :0]  decd_alu_srcc_pre;                      
wire    [6 :0]  decd_branch_sub_func;                   
wire            decd_ctrl_expt_bkpt;                    
wire            decd_ctrl_expt_inv;                     
wire            decd_ctrl_expt_trap;                    
wire            decd_ctrl_expt_wsc;                     
wire            decd_retire_cp0_inst;                   
wire            decd_retire_inst_rte;                   
wire            decd_special_idly;                      
wire            decd_wb_cp0_inst_cr_oper;               
wire            decd_xx_dst_vld;                        
wire    [3 :0]  decd_xx_func;                           
wire            decd_xx_grs_vld;                        
wire            decd_xx_inst_32bit;                     
wire    [6 :0]  decd_xx_sub_func;                       
wire    [6 :0]  decd_xx_unit_sel;                       
wire            decd_xx_unit_special_sel;               
wire            forever_cpuclk;                         
wire            had_core_dbg_mode_req;                  
wire    [31:0]  had_idu_wbbr_data;                      
wire            had_idu_wbbr_vld;                       
wire            had_iu_bkpt_trace_en;                   
wire            had_iu_dr_set_req;                      
wire            had_iu_flush_mbee;                      
wire            had_iu_force_dbg_en;                    
wire            had_iu_int_vld;                         
wire            had_iu_mbkpt_fsm_index_mbee;            
wire            had_iu_mem_bkpt_exp_req;                
wire            had_iu_mem_bkpt_mask;                   
wire            had_iu_mem_bkpt_req;                    
wire    [30:0]  had_iu_pc;                              
wire            had_iu_rte_pc_sel;                      
wire            had_iu_trace_req;                       
wire            had_iu_trace_req_for_dbg_disable;       
wire            had_iu_xx_fdb;                          
wire            had_iu_xx_jdbreq;                       
wire            had_yy_xx_exit_dbg;                     
wire            idly_counter_eq_zero;                   
wire            ifu_iu_ex_cr_oper;                      
wire    [4 :0]  ifu_iu_ex_dst_reg;                      
wire            ifu_iu_ex_expt_vld;                     
wire    [31:0]  ifu_iu_ex_imm;                          
wire            ifu_iu_ex_inst_bkpt;                    
wire            ifu_iu_ex_inst_dbg_disable;             
wire            ifu_iu_ex_inst_vld;                     
wire            ifu_iu_ex_int_spcu_mask;                
wire            ifu_iu_ex_int_spcu_vld;                 
wire    [1 :0]  ifu_iu_ex_main_unit_sel;                
wire            ifu_iu_ex_ni;                           
wire    [5 :0]  ifu_iu_ex_op;                           
wire    [4 :0]  ifu_iu_ex_pcode;                        
wire            ifu_iu_ex_predec_imm_vld;               
wire            ifu_iu_ex_prvlg_expt_vld;               
wire            ifu_iu_ex_rand_vld;                     
wire    [5 :0]  ifu_iu_ex_sop;                          
wire            ifu_iu_ex_sp_oper;                      
wire            ifu_iu_ex_split_on;                     
wire    [4 :0]  ifu_iu_ex_src0_reg;                     
wire    [4 :0]  ifu_iu_ex_src1_reg;                     
wire            ifu_iu_hs_retire_mask;                  
wire            ifu_iu_hs_stack_on;                     
wire            ifu_iu_hs_stall_vector;                 
wire            ifu_iu_hs_switch_se;                    
wire            ifu_iu_ibus_idle;                       
wire            ifu_iu_inst_bkpt_dbg_occur_vld;         
wire            ifu_iu_inst_bkpt_dbgexp_occur_vld;      
wire            ifu_iu_inst_buf_inst_dbg_disable;       
wire            ifu_iu_inst_buf_inst_vld;               
wire            ifu_iu_nsinst_gpr_rst_b;                
wire            ifu_iu_spcu_retire_mask;                
wire            ifu_iu_unstack_chgflw;                  
wire            ifu_iu_vector_ibus_in_idle;             
wire    [31:0]  ifu_iu_xx_ibus_data;                    
wire            intc_cpu_int_b;                         
wire    [7 :0]  intc_cpu_vec_b;                         
wire            iu_bmu_vec_redirect;                    
wire            iu_cp0_af_updt_vld;                     
wire            iu_cp0_bm_vld;                          
wire            iu_cp0_c;                               
wire            iu_cp0_c_vld;                           
wire            iu_cp0_cur_epc_update;                  
wire    [30:0]  iu_cp0_epc;                             
wire            iu_cp0_epc_update;                      
wire            iu_cp0_epc_wen_for_nir;                 
wire            iu_cp0_epsr_wen_for_nir;                
wire            iu_cp0_ex_data_sel;                     
wire            iu_cp0_ex_doze;                         
wire            iu_cp0_ex_mfcr;                         
wire            iu_cp0_ex_mtcr;                         
wire            iu_cp0_ex_psrclr;                       
wire            iu_cp0_ex_psrset;                       
wire            iu_cp0_ex_rte;                          
wire            iu_cp0_ex_sel;                          
wire            iu_cp0_ex_stop;                         
wire            iu_cp0_ex_wait;                         
wire            iu_cp0_expt_vld;                        
wire            iu_cp0_had_int_vld;                     
wire            iu_cp0_int_vld;                         
wire    [31:0]  iu_cp0_intsp_reg14_dout;                
wire            iu_cp0_nest_int_en;                     
wire            iu_cp0_oper_mux_en;                     
wire            iu_cp0_prgsign_sign_vld;                
wire    [31:0]  iu_cp0_src0;                            
wire    [9 :0]  iu_cp0_src1;                            
wire            iu_cp0_syc_rst_b;                       
wire    [31:0]  iu_cp0_updt_val;                        
wire    [31:0]  iu_cp0_user_reg14_dout;                 
wire            iu_had_adr_dbg_ack;                     
wire            iu_had_data_bkpt_occur_vld;             
wire            iu_had_dbg_disable_for_tee;             
wire            iu_had_dr_dbg_ack;                      
wire            iu_had_expt_vld;                        
wire            iu_had_fast_retire_acc_err_pc_update;   
wire    [30:0]  iu_had_fast_retire_acc_err_pc_val;      
wire            iu_had_flush;                           
wire            iu_had_inst_bkpt_occur_vld;             
wire            iu_had_int_ack;                         
wire            iu_had_retire_with_had_int;             
wire            iu_had_trace_occur_vld;                 
wire            iu_had_xx_bkpt_inst;                    
wire    [31:0]  iu_had_xx_data;                         
wire            iu_had_xx_data_vld;                     
wire            iu_had_xx_dbg_ack;                      
wire            iu_had_xx_mldst;                        
wire            iu_had_xx_retire;                       
wire            iu_had_xx_retire_normal;                
wire    [31:0]  iu_had_xx_retire_pc;                    
wire    [30:0]  iu_ifu_addr;                            
wire            iu_ifu_c_write_back;                    
wire    [4 :0]  iu_ifu_cnt;                             
wire            iu_ifu_cnt_write_en;                    
wire            iu_ifu_data_fetch;                      
wire            iu_ifu_data_fetch_for_data;             
wire            iu_ifu_ex_stall;                        
wire    [31:0]  iu_ifu_imm_data;                        
wire            iu_ifu_imm_write_en;                    
wire            iu_ifu_inst_fetch;                      
wire            iu_ifu_inst_fetch_for_data;             
wire            iu_ifu_inst_fetch_mask;                 
wire            iu_ifu_inst_fetch_without_dbg_disable;  
wire            iu_ifu_kill_inst;                       
wire            iu_ifu_not_wait_for_dbg_disable;        
wire    [30:0]  iu_ifu_r15;                             
wire            iu_ifu_r15_vld;                         
wire            iu_ifu_security_violation;              
wire            iu_ifu_spcu_error;                      
wire            iu_ifu_spcu_error_without_misalign;     
wire            iu_ifu_spcu_int_en;                     
wire    [31:0]  iu_lsu_base;                            
wire    [31:0]  iu_lsu_data;                            
wire            iu_lsu_ex_data_sel;                     
wire            iu_lsu_ex_sel;                          
wire            iu_lsu_inst_store;                      
wire            iu_lsu_lrw;                             
wire            iu_lsu_lrw_no_fast_retire;              
wire    [15:0]  iu_lsu_offset;                          
wire            iu_lsu_offset_sub;                      
wire            iu_lsu_oper_mux_en;                     
wire            iu_lsu_sign_exten;                      
wire    [1 :0]  iu_lsu_size;                            
wire    [31:0]  iu_lsu_sp_base;                         
wire            iu_lsu_split_on;                        
wire            iu_lsu_src0_sp;                         
wire            iu_lsu_stall_without_hready;            
wire            iu_lsu_wb_ldst;                         
wire    [31:0]  iu_pad_gpr_data;                        
wire    [4 :0]  iu_pad_gpr_index;                       
wire            iu_pad_gpr_we;                          
wire            iu_pad_inst_retire;                     
wire            iu_pad_inst_split;                      
wire    [31:0]  iu_pad_retire_pc;                       
wire            iu_sysyio_soft_rst;                     
wire            iu_yy_xx_dbgon;                         
wire    [7 :0]  iu_yy_xx_expt_vec;                      
wire            iu_yy_xx_flush;                         
wire            iu_yy_xx_hs_acc_err;                    
wire            iu_yy_xx_reg_rst_b;                     
wire            iu_yy_xx_retire;                        
wire            lsu_iu_addr_check_fail;                 
wire    [31:0]  lsu_iu_data;                            
wire            lsu_iu_data_vld;                        
wire    [4 :0]  lsu_iu_expt_vec;                        
wire            lsu_iu_expt_vld;                        
wire            lsu_iu_fast_retire;                     
wire            lsu_iu_req;                             
wire            lsu_iu_stall;                           
wire            lsu_iu_store;                           
wire            lsu_iu_trans_acc_err;                   
wire            lsu_iu_wb_acc_err;                      
wire            lsu_iu_wb_bstack_chk_fail;              
wire            lsu_iu_wb_cmplt;                        
wire            lsu_iu_wb_data_vld;                     
wire    [31:0]  lsu_iu_wb_load_data;                    
wire            mad_alu_data_vld;                       
wire            mad_alu_ff1_vld;                        
wire    [31:0]  mad_alu_rbus_data;                      
wire            mad_ctrl_stall;                         
wire            mad_rbus_req;                           
wire            misc_clk;                               
wire            misc_clk_en;                            
wire            nie_flush_chgflw;                       
wire    [31:0]  oper_alu_src0_reg;                      
wire    [31:0]  oper_alu_src1_imm;                      
wire    [31:0]  oper_alu_src1_reg;                      
wire    [31:0]  oper_branch_reg;                        
wire    [4 :0]  oper_imm_for_special;                   
wire    [31:0]  oper_mad_src0;                          
wire    [31:0]  oper_mad_src1;                          
wire    [31:0]  oper_wb_r15;                            
wire            oper_wb_src0_equal_to_dst;              
wire            oper_wb_src1_equal_to_dst;              
wire            pad_yy_gate_clk_en_b;                   
wire    [30:0]  pcgen_branch_inc_pc;                    
wire            pcgen_ctrl_stall;                       
wire    [30:0]  pcgen_retire_updt_pc;                   
wire            pcgen_top_abort_clk_en;                 
wire    [30:0]  pcgen_xx_cur_pc;                        
wire            pcgen_xx_ibus_idle;                     
wire    [20:0]  randclk_oper_gpr_mod_en_w32;            
wire            randclk_pcgen_mod_en_w32;               
wire            randclk_retire_mod_en_w2;               
wire            randclk_wb_buf_mod_en_w32;              
wire            randclk_wb_ctrl_mod_en_w2;              
wire            randclk_wb_idx_mod_en_w5;               
wire            rbus_retire_c;                          
wire            rbus_retire_c_vld;                      
wire            rbus_retire_cmplt;                      
wire    [4 :0]  rbus_retire_expt_vec;                   
wire            rbus_retire_expt_vld;                   
wire            rbus_retire_flush;                      
wire            rbus_retire_split_inst;                 
wire            rbus_wb_cmplt;                          
wire    [31:0]  rbus_wb_data;                           
wire    [4 :0]  rbus_wb_dst_reg;                        
wire            rbus_wb_inst_cmplt;                     
wire            rbus_wb_load;                           
wire            rbus_wb_store;                          
wire            retire_branch_stall;                    
wire            retire_pcgen_curpc_update;              
wire            retire_special_ack_expt_vld;            
wire            retire_special_clear_cnt_with_ack_dbg;  
wire            retire_vector_expt_vld;                 
wire            retire_vector_srst_vec;                 
wire            retire_wb_dbg_in_ack;                   
wire            retire_xx_normal_retire;                
wire            sec_top_clk_en;                         
wire            special_idly_c_wdata;                   
wire    [4 :0]  special_rbus_expt_vec;                  
wire            special_rbus_expt_vld;                  
wire            special_rbus_req;                       
wire            special_retire_idly_c_wen;              
wire            special_retire_idly_int_mask;           
wire            special_retire_inst_wsc;                
wire            special_top_clk_en;                     
wire            vec_top_clk_en;                         
wire            vector_ctrl_stall;                      
wire            vector_pcgen_buf_vbr;                   
wire            vector_pcgen_chgflw_vld;                
wire            vector_pcgen_cur_pc_vld;                
wire    [30:0]  vector_pcgen_enter_addr;                
wire            vector_pcgen_ibus_req;                  
wire            wb_ctrl_stall;                          
wire            wb_ctrl_stall_without_hready;           
wire            wb_intsp_sel;                           
wire    [31:0]  wb_oper_fwd_data_no_load;               
wire            wb_oper_fwd_en;                         
wire            wb_oper_sp_adjust;                      
wire            wb_oper_supv_mode;                      
wire    [31:0]  wb_oper_wbuffer_data;                   
wire    [31:0]  wb_oper_write_data;                     
wire            wb_oper_write_en;                       
wire    [4 :0]  wb_oper_write_idx;                      
wire    [4 :0]  wb_oper_write_idx_for_dep;              
wire            wb_pcgen_ldst_stall;                    
wire    [30:0]  wb_pcgen_pc_updt_val;                   
wire            wb_pcgen_switch_ld_pc;                  
wire            wb_rbus_st_aft_load;                    
wire    [30:0]  wb_retire_fast_retire_load_pc;          
wire            wb_top_secu_mode_clk_en;                
wire            wb_top_sp_adjust_clk_en;                
wire            wb_top_sp_sel_clk_en;                   
wire            wb_top_supv_mode_clk_en;                
wire            wb_vector_ldst_wait_cmplt;              
wire            wb_xx_acc_err_after_retire;             
wire            wb_xx_lsu_check_fail_after_retire;      




gated_clk_cell  x_misc_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (misc_clk            ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (misc_clk_en         ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);








assign bctm_top_clk_en = 1'b0;

assign iu_cp0_bm_vld = 1'b0;

assign sec_top_clk_en = 1'b0;

assign misc_clk_en = bctm_top_clk_en
                  || pcgen_top_abort_clk_en
                  || vec_top_clk_en
                  || sec_top_clk_en
                  || wb_top_secu_mode_clk_en
                  || wb_top_supv_mode_clk_en
                  || wb_top_sp_adjust_clk_en
                  || special_top_clk_en
                  || wb_top_sp_sel_clk_en;









nm_iu_decd  x_nm_iu_decd (
  .ctrl_xx_lsu_predec_sel   (ctrl_xx_lsu_predec_sel  ),
  .decd_alu_dst_vld_pre     (decd_alu_dst_vld_pre    ),
  .decd_alu_src0_pre        (decd_alu_src0_pre       ),
  .decd_alu_src1_imm_vld    (decd_alu_src1_imm_vld   ),
  .decd_alu_src1_pre        (decd_alu_src1_pre       ),
  .decd_alu_srcc_pre        (decd_alu_srcc_pre       ),
  .decd_branch_sub_func     (decd_branch_sub_func    ),
  .decd_ctrl_expt_bkpt      (decd_ctrl_expt_bkpt     ),
  .decd_ctrl_expt_inv       (decd_ctrl_expt_inv      ),
  .decd_ctrl_expt_trap      (decd_ctrl_expt_trap     ),
  .decd_ctrl_expt_wsc       (decd_ctrl_expt_wsc      ),
  .decd_retire_cp0_inst     (decd_retire_cp0_inst    ),
  .decd_retire_inst_rte     (decd_retire_inst_rte    ),
  .decd_special_idly        (decd_special_idly       ),
  .decd_wb_cp0_inst_cr_oper (decd_wb_cp0_inst_cr_oper),
  .decd_xx_dst_vld          (decd_xx_dst_vld         ),
  .decd_xx_func             (decd_xx_func            ),
  .decd_xx_grs_vld          (decd_xx_grs_vld         ),
  .decd_xx_inst_32bit       (decd_xx_inst_32bit      ),
  .decd_xx_sub_func         (decd_xx_sub_func        ),
  .decd_xx_unit_sel         (decd_xx_unit_sel        ),
  .decd_xx_unit_special_sel (decd_xx_unit_special_sel),
  .ifu_iu_ex_cr_oper        (ifu_iu_ex_cr_oper       ),
  .ifu_iu_ex_expt_vld       (ifu_iu_ex_expt_vld      ),
  .ifu_iu_ex_inst_bkpt      (ifu_iu_ex_inst_bkpt     ),
  .ifu_iu_ex_op             (ifu_iu_ex_op            ),
  .ifu_iu_ex_pcode          (ifu_iu_ex_pcode         ),
  .ifu_iu_ex_prvlg_expt_vld (ifu_iu_ex_prvlg_expt_vld),
  .ifu_iu_ex_sop            (ifu_iu_ex_sop           ),
  .iu_cp0_ex_doze           (iu_cp0_ex_doze          ),
  .iu_cp0_ex_mfcr           (iu_cp0_ex_mfcr          ),
  .iu_cp0_ex_mtcr           (iu_cp0_ex_mtcr          ),
  .iu_cp0_ex_psrclr         (iu_cp0_ex_psrclr        ),
  .iu_cp0_ex_psrset         (iu_cp0_ex_psrset        ),
  .iu_cp0_ex_rte            (iu_cp0_ex_rte           ),
  .iu_cp0_ex_stop           (iu_cp0_ex_stop          ),
  .iu_cp0_ex_wait           (iu_cp0_ex_wait          ),
  .iu_lsu_inst_store        (iu_lsu_inst_store       ),
  .iu_lsu_offset_sub        (iu_lsu_offset_sub       ),
  .iu_lsu_sign_exten        (iu_lsu_sign_exten       ),
  .iu_lsu_size              (iu_lsu_size             )
);



nm_iu_oper  x_nm_iu_oper (
  .cp0_iu_epc                  (cp0_iu_epc                 ),
  .cp0_iu_epsr                 (cp0_iu_epsr                ),
  .cp0_iu_intsp_we             (cp0_iu_intsp_we            ),
  .cp0_iu_reg_write_data       (cp0_iu_reg_write_data      ),
  .cp0_iu_user_reg14_we        (cp0_iu_user_reg14_we       ),
  .cp0_yy_clk_en               (cp0_yy_clk_en              ),
  .cp0_yy_intsp_sel_post       (cp0_yy_intsp_sel_post      ),
  .cp0_yy_supv_mode            (cp0_yy_supv_mode           ),
  .ctrl_xx_lsu_predec_sel      (ctrl_xx_lsu_predec_sel     ),
  .ctrl_xx_sp_adjust           (ctrl_xx_sp_adjust          ),
  .decd_xx_grs_vld             (decd_xx_grs_vld            ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_idu_wbbr_data           (had_idu_wbbr_data          ),
  .had_idu_wbbr_vld            (had_idu_wbbr_vld           ),
  .ifu_iu_ex_cr_oper           (ifu_iu_ex_cr_oper          ),
  .ifu_iu_ex_imm               (ifu_iu_ex_imm              ),
  .ifu_iu_ex_pcode             (ifu_iu_ex_pcode            ),
  .ifu_iu_ex_predec_imm_vld    (ifu_iu_ex_predec_imm_vld   ),
  .ifu_iu_ex_src0_reg          (ifu_iu_ex_src0_reg         ),
  .ifu_iu_ex_src1_reg          (ifu_iu_ex_src1_reg         ),
  .ifu_iu_nsinst_gpr_rst_b     (ifu_iu_nsinst_gpr_rst_b    ),
  .iu_cp0_intsp_reg14_dout     (iu_cp0_intsp_reg14_dout    ),
  .iu_cp0_src0                 (iu_cp0_src0                ),
  .iu_cp0_src1                 (iu_cp0_src1                ),
  .iu_cp0_user_reg14_dout      (iu_cp0_user_reg14_dout     ),
  .iu_lsu_base                 (iu_lsu_base                ),
  .iu_lsu_data                 (iu_lsu_data                ),
  .iu_lsu_lrw                  (iu_lsu_lrw                 ),
  .iu_lsu_lrw_no_fast_retire   (iu_lsu_lrw_no_fast_retire  ),
  .iu_lsu_offset               (iu_lsu_offset              ),
  .iu_lsu_sp_base              (iu_lsu_sp_base             ),
  .iu_lsu_src0_sp              (iu_lsu_src0_sp             ),
  .iu_yy_xx_reg_rst_b          (iu_yy_xx_reg_rst_b         ),
  .oper_alu_src0_reg           (oper_alu_src0_reg          ),
  .oper_alu_src1_imm           (oper_alu_src1_imm          ),
  .oper_alu_src1_reg           (oper_alu_src1_reg          ),
  .oper_branch_reg             (oper_branch_reg            ),
  .oper_imm_for_special        (oper_imm_for_special       ),
  .oper_mad_src0               (oper_mad_src0              ),
  .oper_mad_src1               (oper_mad_src1              ),
  .oper_wb_r15                 (oper_wb_r15                ),
  .oper_wb_src0_equal_to_dst   (oper_wb_src0_equal_to_dst  ),
  .oper_wb_src1_equal_to_dst   (oper_wb_src1_equal_to_dst  ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .pcgen_xx_cur_pc             (pcgen_xx_cur_pc            ),
  .randclk_oper_gpr_mod_en_w32 (randclk_oper_gpr_mod_en_w32),
  .wb_intsp_sel                (wb_intsp_sel               ),
  .wb_oper_fwd_data_no_load    (wb_oper_fwd_data_no_load   ),
  .wb_oper_fwd_en              (wb_oper_fwd_en             ),
  .wb_oper_sp_adjust           (wb_oper_sp_adjust          ),
  .wb_oper_supv_mode           (wb_oper_supv_mode          ),
  .wb_oper_wbuffer_data        (wb_oper_wbuffer_data       ),
  .wb_oper_write_data          (wb_oper_write_data         ),
  .wb_oper_write_en            (wb_oper_write_en           ),
  .wb_oper_write_idx           (wb_oper_write_idx          ),
  .wb_oper_write_idx_for_dep   (wb_oper_write_idx_for_dep  )
);



nm_iu_alu  x_nm_iu_alu (
  .alu_rbus_c               (alu_rbus_c              ),
  .alu_rbus_c_vld           (alu_rbus_c_vld          ),
  .alu_rbus_data            (alu_rbus_data           ),
  .alu_rbus_data_vld        (alu_rbus_data_vld       ),
  .alu_rbus_req             (alu_rbus_req            ),
  .cp0_iu_src_c             (cp0_iu_src_c            ),
  .ctrl_alu_ex_sel          (ctrl_alu_ex_sel         ),
  .ctrl_alu_mad_oper_mux_en (ctrl_alu_mad_oper_mux_en),
  .ctrl_alu_oper_mux_en     (ctrl_alu_oper_mux_en    ),
  .ctrl_xx_dup_alu_sel      (ctrl_xx_dup_alu_sel     ),
  .ctrl_xx_sp_adjust        (ctrl_xx_sp_adjust       ),
  .ctrl_xx_sp_sub           (ctrl_xx_sp_sub          ),
  .decd_alu_dst_vld_pre     (decd_alu_dst_vld_pre    ),
  .decd_alu_src0_pre        (decd_alu_src0_pre       ),
  .decd_alu_src1_imm_vld    (decd_alu_src1_imm_vld   ),
  .decd_alu_src1_pre        (decd_alu_src1_pre       ),
  .decd_alu_srcc_pre        (decd_alu_srcc_pre       ),
  .decd_xx_dst_vld          (decd_xx_dst_vld         ),
  .decd_xx_func             (decd_xx_func            ),
  .decd_xx_sub_func         (decd_xx_sub_func        ),
  .ifu_iu_ex_inst_vld       (ifu_iu_ex_inst_vld      ),
  .iu_ifu_c_write_back      (iu_ifu_c_write_back     ),
  .mad_alu_ff1_vld          (mad_alu_ff1_vld         ),
  .oper_alu_src0_reg        (oper_alu_src0_reg       ),
  .oper_alu_src1_imm        (oper_alu_src1_imm       ),
  .oper_alu_src1_reg        (oper_alu_src1_reg       )
);



nm_iu_mad  x_nm_iu_mad (
  .ctrl_mad_ex_data_sel (ctrl_mad_ex_data_sel),
  .ctrl_mad_ex_sel      (ctrl_mad_ex_sel     ),
  .ctrl_mad_oper_mux_en (ctrl_mad_oper_mux_en),
  .iu_ifu_cnt           (iu_ifu_cnt          ),
  .iu_ifu_cnt_write_en  (iu_ifu_cnt_write_en ),
  .iu_ifu_imm_data      (iu_ifu_imm_data     ),
  .iu_ifu_imm_write_en  (iu_ifu_imm_write_en ),
  .mad_alu_data_vld     (mad_alu_data_vld    ),
  .mad_alu_ff1_vld      (mad_alu_ff1_vld     ),
  .mad_alu_rbus_data    (mad_alu_rbus_data   ),
  .mad_ctrl_stall       (mad_ctrl_stall      ),
  .mad_rbus_req         (mad_rbus_req        ),
  .oper_mad_src0        (oper_mad_src0       ),
  .oper_mad_src1        (oper_mad_src1       )
);



nm_iu_branch  x_nm_iu_branch (
  .branch_ctrl_stall                       (branch_ctrl_stall                      ),
  .branch_pcgen_add_pc                     (branch_pcgen_add_pc                    ),
  .branch_pcgen_br_chgflw_vld              (branch_pcgen_br_chgflw_vld             ),
  .branch_pcgen_br_chgflw_vld_for_data     (branch_pcgen_br_chgflw_vld_for_data    ),
  .branch_pcgen_br_pc_chgflw_vld           (branch_pcgen_br_pc_chgflw_vld          ),
  .branch_pcgen_branch_chgflw_vld_for_data (branch_pcgen_branch_chgflw_vld_for_data),
  .branch_pcgen_jmp_chgflw_vld_for_data    (branch_pcgen_jmp_chgflw_vld_for_data   ),
  .branch_pcgen_reg_pc                     (branch_pcgen_reg_pc                    ),
  .branch_rbus_data                        (branch_rbus_data                       ),
  .branch_rbus_data_vld                    (branch_rbus_data_vld                   ),
  .branch_rbus_req                         (branch_rbus_req                        ),
  .branch_wb_jmp_reg                       (branch_wb_jmp_reg                      ),
  .cp0_iu_src_c                            (cp0_iu_src_c                           ),
  .ctrl_branch_ex_data_sel                 (ctrl_branch_ex_data_sel                ),
  .ctrl_branch_ex_sel                      (ctrl_branch_ex_sel                     ),
  .decd_branch_sub_func                    (decd_branch_sub_func                   ),
  .ifu_iu_ex_imm                           (ifu_iu_ex_imm                          ),
  .ifu_iu_ex_src0_reg                      (ifu_iu_ex_src0_reg                     ),
  .oper_branch_reg                         (oper_branch_reg                        ),
  .pcgen_branch_inc_pc                     (pcgen_branch_inc_pc                    ),
  .pcgen_xx_ibus_idle                      (pcgen_xx_ibus_idle                     ),
  .retire_branch_stall                     (retire_branch_stall                    ),
  .wb_ctrl_stall_without_hready            (wb_ctrl_stall_without_hready           )
);



nm_iu_special  x_nm_iu_special (
  .cp0_iu_idly_counter_clear             (cp0_iu_idly_counter_clear            ),
  .cpurst_b                              (cpurst_b                             ),
  .ctrl_special_ex_sel                   (ctrl_special_ex_sel                  ),
  .ctrl_special_expt_vec                 (ctrl_special_expt_vec                ),
  .ctrl_special_expt_vld                 (ctrl_special_expt_vld                ),
  .decd_special_idly                     (decd_special_idly                    ),
  .idly_counter_eq_zero                  (idly_counter_eq_zero                 ),
  .iu_pad_inst_retire                    (iu_pad_inst_retire                   ),
  .iu_yy_xx_dbgon                        (iu_yy_xx_dbgon                       ),
  .iu_yy_xx_retire                       (iu_yy_xx_retire                      ),
  .misc_clk                              (misc_clk                             ),
  .oper_imm_for_special                  (oper_imm_for_special                 ),
  .retire_special_ack_expt_vld           (retire_special_ack_expt_vld          ),
  .retire_special_clear_cnt_with_ack_dbg (retire_special_clear_cnt_with_ack_dbg),
  .special_idly_c_wdata                  (special_idly_c_wdata                 ),
  .special_rbus_expt_vec                 (special_rbus_expt_vec                ),
  .special_rbus_expt_vld                 (special_rbus_expt_vld                ),
  .special_rbus_req                      (special_rbus_req                     ),
  .special_retire_idly_c_wen             (special_retire_idly_c_wen            ),
  .special_retire_idly_int_mask          (special_retire_idly_int_mask         ),
  .special_retire_inst_wsc               (special_retire_inst_wsc              ),
  .special_top_clk_en                    (special_top_clk_en                   )
);



nm_iu_rbus  x_nm_iu_rbus (
  .alu_rbus_c                 (alu_rbus_c                ),
  .alu_rbus_c_vld             (alu_rbus_c_vld            ),
  .alu_rbus_data              (alu_rbus_data             ),
  .alu_rbus_data_vld          (alu_rbus_data_vld         ),
  .alu_rbus_req               (alu_rbus_req              ),
  .branch_rbus_data           (branch_rbus_data          ),
  .branch_rbus_data_vld       (branch_rbus_data_vld      ),
  .branch_rbus_req            (branch_rbus_req           ),
  .cp0_iu_data                (cp0_iu_data               ),
  .cp0_iu_data_vld            (cp0_iu_data_vld           ),
  .cp0_iu_expt_vec            (cp0_iu_expt_vec           ),
  .cp0_iu_expt_vld            (cp0_iu_expt_vld           ),
  .cp0_iu_flush               (cp0_iu_flush              ),
  .cp0_iu_req                 (cp0_iu_req                ),
  .ctrl_alu_ex_data_sel       (ctrl_alu_ex_data_sel      ),
  .ctrl_branch_ex_data_sel    (ctrl_branch_ex_data_sel   ),
  .ctrl_cp0_ex_data_sel       (ctrl_cp0_ex_data_sel      ),
  .ctrl_lsu_ex_data_sel       (ctrl_lsu_ex_data_sel      ),
  .ctrl_mad_ex_data_sel       (ctrl_mad_ex_data_sel      ),
  .ctrl_special_ex_data_sel   (ctrl_special_ex_data_sel  ),
  .ctrl_xx_sp_adjust          (ctrl_xx_sp_adjust         ),
  .decd_xx_unit_special_sel   (decd_xx_unit_special_sel  ),
  .ifu_iu_ex_dst_reg          (ifu_iu_ex_dst_reg         ),
  .ifu_iu_ex_int_spcu_mask    (ifu_iu_ex_int_spcu_mask   ),
  .ifu_iu_ex_split_on         (ifu_iu_ex_split_on        ),
  .ifu_iu_hs_retire_mask      (ifu_iu_hs_retire_mask     ),
  .lsu_iu_data                (lsu_iu_data               ),
  .lsu_iu_data_vld            (lsu_iu_data_vld           ),
  .lsu_iu_expt_vec            (lsu_iu_expt_vec           ),
  .lsu_iu_expt_vld            (lsu_iu_expt_vld           ),
  .lsu_iu_fast_retire         (lsu_iu_fast_retire        ),
  .lsu_iu_req                 (lsu_iu_req                ),
  .lsu_iu_store               (lsu_iu_store              ),
  .mad_alu_data_vld           (mad_alu_data_vld          ),
  .mad_alu_rbus_data          (mad_alu_rbus_data         ),
  .mad_rbus_req               (mad_rbus_req              ),
  .rbus_retire_c              (rbus_retire_c             ),
  .rbus_retire_c_vld          (rbus_retire_c_vld         ),
  .rbus_retire_cmplt          (rbus_retire_cmplt         ),
  .rbus_retire_expt_vec       (rbus_retire_expt_vec      ),
  .rbus_retire_expt_vld       (rbus_retire_expt_vld      ),
  .rbus_retire_flush          (rbus_retire_flush         ),
  .rbus_retire_split_inst     (rbus_retire_split_inst    ),
  .rbus_wb_cmplt              (rbus_wb_cmplt             ),
  .rbus_wb_data               (rbus_wb_data              ),
  .rbus_wb_dst_reg            (rbus_wb_dst_reg           ),
  .rbus_wb_inst_cmplt         (rbus_wb_inst_cmplt        ),
  .rbus_wb_load               (rbus_wb_load              ),
  .rbus_wb_store              (rbus_wb_store             ),
  .special_rbus_expt_vec      (special_rbus_expt_vec     ),
  .special_rbus_expt_vld      (special_rbus_expt_vld     ),
  .special_rbus_req           (special_rbus_req          ),
  .wb_rbus_st_aft_load        (wb_rbus_st_aft_load       ),
  .wb_xx_acc_err_after_retire (wb_xx_acc_err_after_retire)
);



nm_iu_retire  x_nm_iu_retire (
  .cp0_iu_dbg_disable_for_tee            (cp0_iu_dbg_disable_for_tee           ),
  .cp0_iu_ee                             (cp0_iu_ee                            ),
  .cp0_iu_ee_for_int                     (cp0_iu_ee_for_int                    ),
  .cp0_iu_ic                             (cp0_iu_ic                            ),
  .cp0_iu_ie_for_int                     (cp0_iu_ie_for_int                    ),
  .cp0_iu_int_spcu_en                    (cp0_iu_int_spcu_en                   ),
  .cp0_yy_clk_en                         (cp0_yy_clk_en                        ),
  .cpu_intc_ack_vec                      (cpu_intc_ack_vec                     ),
  .cpu_intc_int_ack                      (cpu_intc_int_ack                     ),
  .cpurst_b                              (cpurst_b                             ),
  .ctrl_branch_ex_sel                    (ctrl_branch_ex_sel                   ),
  .ctrl_retire_nest_int_en               (ctrl_retire_nest_int_en              ),
  .ctrl_retire_ni_vld                    (ctrl_retire_ni_vld                   ),
  .decd_retire_cp0_inst                  (decd_retire_cp0_inst                 ),
  .decd_retire_inst_rte                  (decd_retire_inst_rte                 ),
  .forever_cpuclk                        (forever_cpuclk                       ),
  .had_core_dbg_mode_req                 (had_core_dbg_mode_req                ),
  .had_iu_bkpt_trace_en                  (had_iu_bkpt_trace_en                 ),
  .had_iu_dr_set_req                     (had_iu_dr_set_req                    ),
  .had_iu_flush_mbee                     (had_iu_flush_mbee                    ),
  .had_iu_force_dbg_en                   (had_iu_force_dbg_en                  ),
  .had_iu_int_vld                        (had_iu_int_vld                       ),
  .had_iu_mbkpt_fsm_index_mbee           (had_iu_mbkpt_fsm_index_mbee          ),
  .had_iu_mem_bkpt_exp_req               (had_iu_mem_bkpt_exp_req              ),
  .had_iu_mem_bkpt_mask                  (had_iu_mem_bkpt_mask                 ),
  .had_iu_mem_bkpt_req                   (had_iu_mem_bkpt_req                  ),
  .had_iu_rte_pc_sel                     (had_iu_rte_pc_sel                    ),
  .had_iu_trace_req                      (had_iu_trace_req                     ),
  .had_iu_trace_req_for_dbg_disable      (had_iu_trace_req_for_dbg_disable     ),
  .had_iu_xx_fdb                         (had_iu_xx_fdb                        ),
  .had_iu_xx_jdbreq                      (had_iu_xx_jdbreq                     ),
  .had_yy_xx_exit_dbg                    (had_yy_xx_exit_dbg                   ),
  .ifu_iu_ex_inst_dbg_disable            (ifu_iu_ex_inst_dbg_disable           ),
  .ifu_iu_ex_sp_oper                     (ifu_iu_ex_sp_oper                    ),
  .ifu_iu_ex_split_on                    (ifu_iu_ex_split_on                   ),
  .ifu_iu_hs_retire_mask                 (ifu_iu_hs_retire_mask                ),
  .ifu_iu_hs_stack_on                    (ifu_iu_hs_stack_on                   ),
  .ifu_iu_hs_switch_se                   (ifu_iu_hs_switch_se                  ),
  .ifu_iu_ibus_idle                      (ifu_iu_ibus_idle                     ),
  .ifu_iu_inst_bkpt_dbg_occur_vld        (ifu_iu_inst_bkpt_dbg_occur_vld       ),
  .ifu_iu_inst_bkpt_dbgexp_occur_vld     (ifu_iu_inst_bkpt_dbgexp_occur_vld    ),
  .ifu_iu_inst_buf_inst_dbg_disable      (ifu_iu_inst_buf_inst_dbg_disable     ),
  .ifu_iu_inst_buf_inst_vld              (ifu_iu_inst_buf_inst_vld             ),
  .intc_cpu_int_b                        (intc_cpu_int_b                       ),
  .intc_cpu_vec_b                        (intc_cpu_vec_b                       ),
  .iu_cp0_c                              (iu_cp0_c                             ),
  .iu_cp0_c_vld                          (iu_cp0_c_vld                         ),
  .iu_cp0_cur_epc_update                 (iu_cp0_cur_epc_update                ),
  .iu_cp0_epc                            (iu_cp0_epc                           ),
  .iu_cp0_epc_update                     (iu_cp0_epc_update                    ),
  .iu_cp0_expt_vld                       (iu_cp0_expt_vld                      ),
  .iu_cp0_had_int_vld                    (iu_cp0_had_int_vld                   ),
  .iu_cp0_int_vld                        (iu_cp0_int_vld                       ),
  .iu_had_adr_dbg_ack                    (iu_had_adr_dbg_ack                   ),
  .iu_had_data_bkpt_occur_vld            (iu_had_data_bkpt_occur_vld           ),
  .iu_had_dbg_disable_for_tee            (iu_had_dbg_disable_for_tee           ),
  .iu_had_dr_dbg_ack                     (iu_had_dr_dbg_ack                    ),
  .iu_had_expt_vld                       (iu_had_expt_vld                      ),
  .iu_had_fast_retire_acc_err_pc_update  (iu_had_fast_retire_acc_err_pc_update ),
  .iu_had_fast_retire_acc_err_pc_val     (iu_had_fast_retire_acc_err_pc_val    ),
  .iu_had_inst_bkpt_occur_vld            (iu_had_inst_bkpt_occur_vld           ),
  .iu_had_int_ack                        (iu_had_int_ack                       ),
  .iu_had_retire_with_had_int            (iu_had_retire_with_had_int           ),
  .iu_had_trace_occur_vld                (iu_had_trace_occur_vld               ),
  .iu_had_xx_bkpt_inst                   (iu_had_xx_bkpt_inst                  ),
  .iu_had_xx_dbg_ack                     (iu_had_xx_dbg_ack                    ),
  .iu_had_xx_mldst                       (iu_had_xx_mldst                      ),
  .iu_had_xx_retire                      (iu_had_xx_retire                     ),
  .iu_had_xx_retire_normal               (iu_had_xx_retire_normal              ),
  .iu_had_xx_retire_pc                   (iu_had_xx_retire_pc                  ),
  .iu_ifu_kill_inst                      (iu_ifu_kill_inst                     ),
  .iu_ifu_not_wait_for_dbg_disable       (iu_ifu_not_wait_for_dbg_disable      ),
  .iu_ifu_spcu_int_en                    (iu_ifu_spcu_int_en                   ),
  .iu_pad_inst_retire                    (iu_pad_inst_retire                   ),
  .iu_pad_inst_split                     (iu_pad_inst_split                    ),
  .iu_pad_retire_pc                      (iu_pad_retire_pc                     ),
  .iu_yy_xx_dbgon                        (iu_yy_xx_dbgon                       ),
  .iu_yy_xx_expt_vec                     (iu_yy_xx_expt_vec                    ),
  .iu_yy_xx_flush                        (iu_yy_xx_flush                       ),
  .iu_yy_xx_hs_acc_err                   (iu_yy_xx_hs_acc_err                  ),
  .iu_yy_xx_reg_rst_b                    (iu_yy_xx_reg_rst_b                   ),
  .iu_yy_xx_retire                       (iu_yy_xx_retire                      ),
  .lsu_iu_wb_acc_err                     (lsu_iu_wb_acc_err                    ),
  .lsu_iu_wb_cmplt                       (lsu_iu_wb_cmplt                      ),
  .nie_flush_chgflw                      (nie_flush_chgflw                     ),
  .pad_yy_gate_clk_en_b                  (pad_yy_gate_clk_en_b                 ),
  .pcgen_retire_updt_pc                  (pcgen_retire_updt_pc                 ),
  .pcgen_xx_cur_pc                       (pcgen_xx_cur_pc                      ),
  .randclk_retire_mod_en_w2              (randclk_retire_mod_en_w2             ),
  .rbus_retire_c                         (rbus_retire_c                        ),
  .rbus_retire_c_vld                     (rbus_retire_c_vld                    ),
  .rbus_retire_cmplt                     (rbus_retire_cmplt                    ),
  .rbus_retire_expt_vec                  (rbus_retire_expt_vec                 ),
  .rbus_retire_expt_vld                  (rbus_retire_expt_vld                 ),
  .rbus_retire_flush                     (rbus_retire_flush                    ),
  .rbus_retire_split_inst                (rbus_retire_split_inst               ),
  .rbus_wb_load                          (rbus_wb_load                         ),
  .rbus_wb_store                         (rbus_wb_store                        ),
  .retire_branch_stall                   (retire_branch_stall                  ),
  .retire_pcgen_curpc_update             (retire_pcgen_curpc_update            ),
  .retire_special_ack_expt_vld           (retire_special_ack_expt_vld          ),
  .retire_special_clear_cnt_with_ack_dbg (retire_special_clear_cnt_with_ack_dbg),
  .retire_vector_expt_vld                (retire_vector_expt_vld               ),
  .retire_vector_srst_vec                (retire_vector_srst_vec               ),
  .retire_wb_dbg_in_ack                  (retire_wb_dbg_in_ack                 ),
  .retire_xx_normal_retire               (retire_xx_normal_retire              ),
  .special_idly_c_wdata                  (special_idly_c_wdata                 ),
  .special_retire_idly_c_wen             (special_retire_idly_c_wen            ),
  .special_retire_idly_int_mask          (special_retire_idly_int_mask         ),
  .special_retire_inst_wsc               (special_retire_inst_wsc              ),
  .wb_retire_fast_retire_load_pc         (wb_retire_fast_retire_load_pc        ),
  .wb_xx_acc_err_after_retire            (wb_xx_acc_err_after_retire           ),
  .wb_xx_lsu_check_fail_after_retire     (wb_xx_lsu_check_fail_after_retire    )
);




nm_iu_wb  x_nm_iu_wb (
  .branch_wb_jmp_reg                 (branch_wb_jmp_reg                ),
  .cp0_yy_clk_en                     (cp0_yy_clk_en                    ),
  .cp0_yy_intsp_sel_post             (cp0_yy_intsp_sel_post            ),
  .cp0_yy_supv_mode                  (cp0_yy_supv_mode                 ),
  .cpurst_b                          (cpurst_b                         ),
  .ctrl_cp0_ex_data_sel              (ctrl_cp0_ex_data_sel             ),
  .ctrl_lsu_ex_data_sel              (ctrl_lsu_ex_data_sel             ),
  .ctrl_mad_ex_data_sel              (ctrl_mad_ex_data_sel             ),
  .ctrl_wb_ex_inst_dst_vld           (ctrl_wb_ex_inst_dst_vld          ),
  .ctrl_wb_nie_nir_vld               (ctrl_wb_nie_nir_vld              ),
  .ctrl_xx_sp_adjust                 (ctrl_xx_sp_adjust                ),
  .decd_wb_cp0_inst_cr_oper          (decd_wb_cp0_inst_cr_oper         ),
  .decd_xx_inst_32bit                (decd_xx_inst_32bit               ),
  .forever_cpuclk                    (forever_cpuclk                   ),
  .ifu_iu_ex_cr_oper                 (ifu_iu_ex_cr_oper                ),
  .ifu_iu_ex_int_spcu_mask           (ifu_iu_ex_int_spcu_mask          ),
  .ifu_iu_ex_int_spcu_vld            (ifu_iu_ex_int_spcu_vld           ),
  .ifu_iu_ex_split_on                (ifu_iu_ex_split_on               ),
  .iu_cp0_epc_wen_for_nir            (iu_cp0_epc_wen_for_nir           ),
  .iu_cp0_epsr_wen_for_nir           (iu_cp0_epsr_wen_for_nir          ),
  .iu_cp0_updt_val                   (iu_cp0_updt_val                  ),
  .iu_had_flush                      (iu_had_flush                     ),
  .iu_had_xx_data                    (iu_had_xx_data                   ),
  .iu_had_xx_data_vld                (iu_had_xx_data_vld               ),
  .iu_ifu_r15                        (iu_ifu_r15                       ),
  .iu_ifu_r15_vld                    (iu_ifu_r15_vld                   ),
  .iu_lsu_stall_without_hready       (iu_lsu_stall_without_hready      ),
  .iu_lsu_wb_ldst                    (iu_lsu_wb_ldst                   ),
  .iu_pad_gpr_data                   (iu_pad_gpr_data                  ),
  .iu_pad_gpr_index                  (iu_pad_gpr_index                 ),
  .iu_pad_gpr_we                     (iu_pad_gpr_we                    ),
  .iu_yy_xx_dbgon                    (iu_yy_xx_dbgon                   ),
  .iu_yy_xx_flush                    (iu_yy_xx_flush                   ),
  .lsu_iu_fast_retire                (lsu_iu_fast_retire               ),
  .lsu_iu_wb_acc_err                 (lsu_iu_wb_acc_err                ),
  .lsu_iu_wb_bstack_chk_fail         (lsu_iu_wb_bstack_chk_fail        ),
  .lsu_iu_wb_cmplt                   (lsu_iu_wb_cmplt                  ),
  .lsu_iu_wb_data_vld                (lsu_iu_wb_data_vld               ),
  .lsu_iu_wb_load_data               (lsu_iu_wb_load_data              ),
  .misc_clk                          (misc_clk                         ),
  .oper_wb_r15                       (oper_wb_r15                      ),
  .oper_wb_src0_equal_to_dst         (oper_wb_src0_equal_to_dst        ),
  .oper_wb_src1_equal_to_dst         (oper_wb_src1_equal_to_dst        ),
  .pad_yy_gate_clk_en_b              (pad_yy_gate_clk_en_b             ),
  .pcgen_xx_cur_pc                   (pcgen_xx_cur_pc                  ),
  .randclk_wb_buf_mod_en_w32         (randclk_wb_buf_mod_en_w32        ),
  .randclk_wb_ctrl_mod_en_w2         (randclk_wb_ctrl_mod_en_w2        ),
  .randclk_wb_idx_mod_en_w5          (randclk_wb_idx_mod_en_w5         ),
  .rbus_wb_cmplt                     (rbus_wb_cmplt                    ),
  .rbus_wb_data                      (rbus_wb_data                     ),
  .rbus_wb_dst_reg                   (rbus_wb_dst_reg                  ),
  .rbus_wb_inst_cmplt                (rbus_wb_inst_cmplt               ),
  .rbus_wb_load                      (rbus_wb_load                     ),
  .rbus_wb_store                     (rbus_wb_store                    ),
  .retire_wb_dbg_in_ack              (retire_wb_dbg_in_ack             ),
  .wb_ctrl_stall                     (wb_ctrl_stall                    ),
  .wb_ctrl_stall_without_hready      (wb_ctrl_stall_without_hready     ),
  .wb_intsp_sel                      (wb_intsp_sel                     ),
  .wb_oper_fwd_data_no_load          (wb_oper_fwd_data_no_load         ),
  .wb_oper_fwd_en                    (wb_oper_fwd_en                   ),
  .wb_oper_sp_adjust                 (wb_oper_sp_adjust                ),
  .wb_oper_supv_mode                 (wb_oper_supv_mode                ),
  .wb_oper_wbuffer_data              (wb_oper_wbuffer_data             ),
  .wb_oper_write_data                (wb_oper_write_data               ),
  .wb_oper_write_en                  (wb_oper_write_en                 ),
  .wb_oper_write_idx                 (wb_oper_write_idx                ),
  .wb_oper_write_idx_for_dep         (wb_oper_write_idx_for_dep        ),
  .wb_pcgen_ldst_stall               (wb_pcgen_ldst_stall              ),
  .wb_pcgen_pc_updt_val              (wb_pcgen_pc_updt_val             ),
  .wb_pcgen_switch_ld_pc             (wb_pcgen_switch_ld_pc            ),
  .wb_rbus_st_aft_load               (wb_rbus_st_aft_load              ),
  .wb_retire_fast_retire_load_pc     (wb_retire_fast_retire_load_pc    ),
  .wb_top_secu_mode_clk_en           (wb_top_secu_mode_clk_en          ),
  .wb_top_sp_adjust_clk_en           (wb_top_sp_adjust_clk_en          ),
  .wb_top_sp_sel_clk_en              (wb_top_sp_sel_clk_en             ),
  .wb_top_supv_mode_clk_en           (wb_top_supv_mode_clk_en          ),
  .wb_vector_ldst_wait_cmplt         (wb_vector_ldst_wait_cmplt        ),
  .wb_xx_acc_err_after_retire        (wb_xx_acc_err_after_retire       ),
  .wb_xx_lsu_check_fail_after_retire (wb_xx_lsu_check_fail_after_retire)
);



nm_iu_pcgen  x_nm_iu_pcgen (
  .branch_pcgen_add_pc                     (branch_pcgen_add_pc                    ),
  .branch_pcgen_br_chgflw_vld              (branch_pcgen_br_chgflw_vld             ),
  .branch_pcgen_br_chgflw_vld_for_data     (branch_pcgen_br_chgflw_vld_for_data    ),
  .branch_pcgen_br_pc_chgflw_vld           (branch_pcgen_br_pc_chgflw_vld          ),
  .branch_pcgen_branch_chgflw_vld_for_data (branch_pcgen_branch_chgflw_vld_for_data),
  .branch_pcgen_jmp_chgflw_vld_for_data    (branch_pcgen_jmp_chgflw_vld_for_data   ),
  .branch_pcgen_reg_pc                     (branch_pcgen_reg_pc                    ),
  .cp0_iu_epc_for_chgflw                   (cp0_iu_epc_for_chgflw                  ),
  .cp0_iu_flush_chgflw_vld                 (cp0_iu_flush_chgflw_vld                ),
  .cp0_iu_rte_chgflw_vld                   (cp0_iu_rte_chgflw_vld                  ),
  .cp0_iu_rte_chgflw_vld_for_data          (cp0_iu_rte_chgflw_vld_for_data         ),
  .cp0_yy_clk_en                           (cp0_yy_clk_en                          ),
  .cpurst_b                                (cpurst_b                               ),
  .decd_xx_inst_32bit                      (decd_xx_inst_32bit                     ),
  .forever_cpuclk                          (forever_cpuclk                         ),
  .had_iu_pc                               (had_iu_pc                              ),
  .had_iu_rte_pc_sel                       (had_iu_rte_pc_sel                      ),
  .had_yy_xx_exit_dbg                      (had_yy_xx_exit_dbg                     ),
  .ifu_iu_ibus_idle                        (ifu_iu_ibus_idle                       ),
  .ifu_iu_spcu_retire_mask                 (ifu_iu_spcu_retire_mask                ),
  .ifu_iu_unstack_chgflw                   (ifu_iu_unstack_chgflw                  ),
  .ifu_iu_xx_ibus_data                     (ifu_iu_xx_ibus_data                    ),
  .iu_ifu_addr                             (iu_ifu_addr                            ),
  .iu_ifu_data_fetch                       (iu_ifu_data_fetch                      ),
  .iu_ifu_data_fetch_for_data              (iu_ifu_data_fetch_for_data             ),
  .iu_ifu_inst_fetch                       (iu_ifu_inst_fetch                      ),
  .iu_ifu_inst_fetch_for_data              (iu_ifu_inst_fetch_for_data             ),
  .iu_ifu_inst_fetch_without_dbg_disable   (iu_ifu_inst_fetch_without_dbg_disable  ),
  .iu_yy_xx_flush                          (iu_yy_xx_flush                         ),
  .iu_yy_xx_retire                         (iu_yy_xx_retire                        ),
  .misc_clk                                (misc_clk                               ),
  .nie_flush_chgflw                        (nie_flush_chgflw                       ),
  .pad_yy_gate_clk_en_b                    (pad_yy_gate_clk_en_b                   ),
  .pcgen_branch_inc_pc                     (pcgen_branch_inc_pc                    ),
  .pcgen_ctrl_stall                        (pcgen_ctrl_stall                       ),
  .pcgen_retire_updt_pc                    (pcgen_retire_updt_pc                   ),
  .pcgen_top_abort_clk_en                  (pcgen_top_abort_clk_en                 ),
  .pcgen_xx_cur_pc                         (pcgen_xx_cur_pc                        ),
  .pcgen_xx_ibus_idle                      (pcgen_xx_ibus_idle                     ),
  .randclk_pcgen_mod_en_w32                (randclk_pcgen_mod_en_w32               ),
  .retire_branch_stall                     (retire_branch_stall                    ),
  .retire_pcgen_curpc_update               (retire_pcgen_curpc_update              ),
  .retire_xx_normal_retire                 (retire_xx_normal_retire                ),
  .vector_pcgen_buf_vbr                    (vector_pcgen_buf_vbr                   ),
  .vector_pcgen_chgflw_vld                 (vector_pcgen_chgflw_vld                ),
  .vector_pcgen_cur_pc_vld                 (vector_pcgen_cur_pc_vld                ),
  .vector_pcgen_enter_addr                 (vector_pcgen_enter_addr                ),
  .vector_pcgen_ibus_req                   (vector_pcgen_ibus_req                  ),
  .wb_pcgen_ldst_stall                     (wb_pcgen_ldst_stall                    ),
  .wb_pcgen_pc_updt_val                    (wb_pcgen_pc_updt_val                   ),
  .wb_pcgen_switch_ld_pc                   (wb_pcgen_switch_ld_pc                  ),
  .wb_retire_fast_retire_load_pc           (wb_retire_fast_retire_load_pc          )
);



nm_iu_vector  x_nm_iu_vector (
  .bmu_lsu_acc_err                    (bmu_lsu_acc_err                   ),
  .bmu_xx_ibus_acc_err                (bmu_xx_ibus_acc_err               ),
  .bmu_xx_ibus_data_vld               (bmu_xx_ibus_data_vld              ),
  .bmu_xx_ibus_grnt                   (bmu_xx_ibus_grnt                  ),
  .bmu_xx_ibus_trans_cmplt            (bmu_xx_ibus_trans_cmplt           ),
  .cp0_iu_vbr                         (cp0_iu_vbr                        ),
  .cp0_iu_vec                         (cp0_iu_vec                        ),
  .cpurst_b                           (cpurst_b                          ),
  .ifu_iu_ex_int_spcu_mask            (ifu_iu_ex_int_spcu_mask           ),
  .ifu_iu_hs_stall_vector             (ifu_iu_hs_stall_vector            ),
  .ifu_iu_spcu_retire_mask            (ifu_iu_spcu_retire_mask           ),
  .ifu_iu_vector_ibus_in_idle         (ifu_iu_vector_ibus_in_idle        ),
  .iu_bmu_vec_redirect                (iu_bmu_vec_redirect               ),
  .iu_cp0_af_updt_vld                 (iu_cp0_af_updt_vld                ),
  .iu_cp0_syc_rst_b                   (iu_cp0_syc_rst_b                  ),
  .iu_ifu_inst_fetch_mask             (iu_ifu_inst_fetch_mask            ),
  .iu_ifu_spcu_error                  (iu_ifu_spcu_error                 ),
  .iu_ifu_spcu_error_without_misalign (iu_ifu_spcu_error_without_misalign),
  .iu_sysyio_soft_rst                 (iu_sysyio_soft_rst                ),
  .iu_yy_xx_hs_acc_err                (iu_yy_xx_hs_acc_err               ),
  .iu_yy_xx_reg_rst_b                 (iu_yy_xx_reg_rst_b                ),
  .lsu_iu_addr_check_fail             (lsu_iu_addr_check_fail            ),
  .lsu_iu_trans_acc_err               (lsu_iu_trans_acc_err              ),
  .misc_clk                           (misc_clk                          ),
  .retire_vector_expt_vld             (retire_vector_expt_vld            ),
  .retire_vector_srst_vec             (retire_vector_srst_vec            ),
  .vec_top_clk_en                     (vec_top_clk_en                    ),
  .vector_ctrl_stall                  (vector_ctrl_stall                 ),
  .vector_pcgen_buf_vbr               (vector_pcgen_buf_vbr              ),
  .vector_pcgen_chgflw_vld            (vector_pcgen_chgflw_vld           ),
  .vector_pcgen_cur_pc_vld            (vector_pcgen_cur_pc_vld           ),
  .vector_pcgen_enter_addr            (vector_pcgen_enter_addr           ),
  .vector_pcgen_ibus_req              (vector_pcgen_ibus_req             ),
  .wb_vector_ldst_wait_cmplt          (wb_vector_ldst_wait_cmplt         )
);



nm_iu_ctrl  x_nm_iu_ctrl (
  .branch_ctrl_stall        (branch_ctrl_stall       ),
  .cp0_iu_stall             (cp0_iu_stall            ),
  .ctrl_alu_ex_data_sel     (ctrl_alu_ex_data_sel    ),
  .ctrl_alu_ex_sel          (ctrl_alu_ex_sel         ),
  .ctrl_alu_mad_oper_mux_en (ctrl_alu_mad_oper_mux_en),
  .ctrl_alu_oper_mux_en     (ctrl_alu_oper_mux_en    ),
  .ctrl_branch_ex_data_sel  (ctrl_branch_ex_data_sel ),
  .ctrl_branch_ex_sel       (ctrl_branch_ex_sel      ),
  .ctrl_cp0_ex_data_sel     (ctrl_cp0_ex_data_sel    ),
  .ctrl_lsu_ex_data_sel     (ctrl_lsu_ex_data_sel    ),
  .ctrl_mad_ex_data_sel     (ctrl_mad_ex_data_sel    ),
  .ctrl_mad_ex_sel          (ctrl_mad_ex_sel         ),
  .ctrl_mad_oper_mux_en     (ctrl_mad_oper_mux_en    ),
  .ctrl_retire_nest_int_en  (ctrl_retire_nest_int_en ),
  .ctrl_retire_ni_vld       (ctrl_retire_ni_vld      ),
  .ctrl_special_ex_data_sel (ctrl_special_ex_data_sel),
  .ctrl_special_ex_sel      (ctrl_special_ex_sel     ),
  .ctrl_special_expt_vec    (ctrl_special_expt_vec   ),
  .ctrl_special_expt_vld    (ctrl_special_expt_vld   ),
  .ctrl_wb_ex_inst_dst_vld  (ctrl_wb_ex_inst_dst_vld ),
  .ctrl_wb_nie_nir_vld      (ctrl_wb_nie_nir_vld     ),
  .ctrl_xx_dup_alu_sel      (ctrl_xx_dup_alu_sel     ),
  .ctrl_xx_lsu_predec_sel   (ctrl_xx_lsu_predec_sel  ),
  .ctrl_xx_sp_adjust        (ctrl_xx_sp_adjust       ),
  .ctrl_xx_sp_sub           (ctrl_xx_sp_sub          ),
  .decd_ctrl_expt_bkpt      (decd_ctrl_expt_bkpt     ),
  .decd_ctrl_expt_inv       (decd_ctrl_expt_inv      ),
  .decd_ctrl_expt_trap      (decd_ctrl_expt_trap     ),
  .decd_ctrl_expt_wsc       (decd_ctrl_expt_wsc      ),
  .decd_xx_sub_func         (decd_xx_sub_func        ),
  .decd_xx_unit_sel         (decd_xx_unit_sel        ),
  .decd_xx_unit_special_sel (decd_xx_unit_special_sel),
  .ifu_iu_ex_cr_oper        (ifu_iu_ex_cr_oper       ),
  .ifu_iu_ex_expt_vld       (ifu_iu_ex_expt_vld      ),
  .ifu_iu_ex_inst_vld       (ifu_iu_ex_inst_vld      ),
  .ifu_iu_ex_main_unit_sel  (ifu_iu_ex_main_unit_sel ),
  .ifu_iu_ex_ni             (ifu_iu_ex_ni            ),
  .ifu_iu_ex_pcode          (ifu_iu_ex_pcode         ),
  .ifu_iu_ex_prvlg_expt_vld (ifu_iu_ex_prvlg_expt_vld),
  .ifu_iu_ex_rand_vld       (ifu_iu_ex_rand_vld      ),
  .ifu_iu_ex_sp_oper        (ifu_iu_ex_sp_oper       ),
  .ifu_iu_ex_split_on       (ifu_iu_ex_split_on      ),
  .iu_cp0_ex_data_sel       (iu_cp0_ex_data_sel      ),
  .iu_cp0_ex_sel            (iu_cp0_ex_sel           ),
  .iu_cp0_nest_int_en       (iu_cp0_nest_int_en      ),
  .iu_cp0_oper_mux_en       (iu_cp0_oper_mux_en      ),
  .iu_ifu_ex_stall          (iu_ifu_ex_stall         ),
  .iu_lsu_ex_data_sel       (iu_lsu_ex_data_sel      ),
  .iu_lsu_ex_sel            (iu_lsu_ex_sel           ),
  .iu_lsu_oper_mux_en       (iu_lsu_oper_mux_en      ),
  .iu_lsu_split_on          (iu_lsu_split_on         ),
  .lsu_iu_stall             (lsu_iu_stall            ),
  .mad_ctrl_stall           (mad_ctrl_stall          ),
  .pcgen_ctrl_stall         (pcgen_ctrl_stall        ),
  .rbus_wb_inst_cmplt       (rbus_wb_inst_cmplt      ),
  .vector_ctrl_stall        (vector_ctrl_stall       ),
  .wb_ctrl_stall            (wb_ctrl_stall           )
);



nm_iu_randclk  x_nm_iu_randclk (
  .randclk_oper_gpr_mod_en_w32 (randclk_oper_gpr_mod_en_w32),
  .randclk_pcgen_mod_en_w32    (randclk_pcgen_mod_en_w32   ),
  .randclk_retire_mod_en_w2    (randclk_retire_mod_en_w2   ),
  .randclk_wb_buf_mod_en_w32   (randclk_wb_buf_mod_en_w32  ),
  .randclk_wb_ctrl_mod_en_w2   (randclk_wb_ctrl_mod_en_w2  ),
  .randclk_wb_idx_mod_en_w5    (randclk_wb_idx_mod_en_w5   )
);


assign iu_ifu_security_violation = 1'b0;





assign iu_cp0_prgsign_sign_vld = 1'b0;



endmodule


























module nm_iu_vector(
  bmu_lsu_acc_err,
  bmu_xx_ibus_acc_err,
  bmu_xx_ibus_data_vld,
  bmu_xx_ibus_grnt,
  bmu_xx_ibus_trans_cmplt,
  cp0_iu_vbr,
  cp0_iu_vec,
  cpurst_b,
  ifu_iu_ex_int_spcu_mask,
  ifu_iu_hs_stall_vector,
  ifu_iu_spcu_retire_mask,
  ifu_iu_vector_ibus_in_idle,
  iu_bmu_vec_redirect,
  iu_cp0_af_updt_vld,
  iu_cp0_syc_rst_b,
  iu_ifu_inst_fetch_mask,
  iu_ifu_spcu_error,
  iu_ifu_spcu_error_without_misalign,
  iu_sysyio_soft_rst,
  iu_yy_xx_hs_acc_err,
  iu_yy_xx_reg_rst_b,
  lsu_iu_addr_check_fail,
  lsu_iu_trans_acc_err,
  misc_clk,
  retire_vector_expt_vld,
  retire_vector_srst_vec,
  vec_top_clk_en,
  vector_ctrl_stall,
  vector_pcgen_buf_vbr,
  vector_pcgen_chgflw_vld,
  vector_pcgen_cur_pc_vld,
  vector_pcgen_enter_addr,
  vector_pcgen_ibus_req,
  wb_vector_ldst_wait_cmplt
);


input           bmu_lsu_acc_err;                   
input           bmu_xx_ibus_acc_err;               
input           bmu_xx_ibus_data_vld;              
input           bmu_xx_ibus_grnt;                  
input           bmu_xx_ibus_trans_cmplt;           
input   [21:0]  cp0_iu_vbr;                        
input   [7 :0]  cp0_iu_vec;                        
input           cpurst_b;                          
input           ifu_iu_ex_int_spcu_mask;           
input           ifu_iu_hs_stall_vector;            
input           ifu_iu_spcu_retire_mask;           
input           ifu_iu_vector_ibus_in_idle;        
input           iu_yy_xx_hs_acc_err;               
input           lsu_iu_addr_check_fail;            
input           lsu_iu_trans_acc_err;              
input           misc_clk;                          
input           retire_vector_expt_vld;            
input           retire_vector_srst_vec;            
input           wb_vector_ldst_wait_cmplt;         
output          iu_bmu_vec_redirect;               
output          iu_cp0_af_updt_vld;                
output          iu_cp0_syc_rst_b;                  
output          iu_ifu_inst_fetch_mask;            
output          iu_ifu_spcu_error;                 
output          iu_ifu_spcu_error_without_misalign; 
output          iu_sysyio_soft_rst;                
output          iu_yy_xx_reg_rst_b;                
output          vec_top_clk_en;                    
output          vector_ctrl_stall;                 
output          vector_pcgen_buf_vbr;              
output          vector_pcgen_chgflw_vld;           
output          vector_pcgen_cur_pc_vld;           
output  [30:0]  vector_pcgen_enter_addr;           
output          vector_pcgen_ibus_req;             


reg     [3 :0]  cur_state;                         
reg     [3 :0]  next_state;                        


wire            bmu_lsu_acc_err;                   
wire            bmu_xx_ibus_acc_err;               
wire            bmu_xx_ibus_data_vld;              
wire            bmu_xx_ibus_grnt;                  
wire            bmu_xx_ibus_trans_cmplt;           
wire    [21:0]  cp0_iu_vbr;                        
wire    [7 :0]  cp0_iu_vec;                        
wire            cpurst_b;                          
wire            ifu_iu_ex_int_spcu_mask;           
wire            ifu_iu_hs_stall_vector;            
wire            ifu_iu_spcu_retire_mask;           
wire            ifu_iu_vector_ibus_in_idle;        
wire            iu_bmu_vec_redirect;               
wire            iu_cp0_af_updt_vld;                
wire            iu_cp0_syc_rst_b;                  
wire            iu_ifu_inst_fetch_mask;            
wire            iu_ifu_spcu_error;                 
wire            iu_ifu_spcu_error_without_misalign; 
wire            iu_sysyio_soft_rst;                
wire            iu_yy_xx_hs_acc_err;               
wire            iu_yy_xx_reg_rst_b;                
wire            lsu_iu_addr_check_fail;            
wire            lsu_iu_trans_acc_err;              
wire            misc_clk;                          
wire            reg_rst_b;                         
wire            retire_vector_expt_vld;            
wire            retire_vector_srst_vec;            
wire            vec_top_clk_en;                    
wire            vector_ctrl_stall;                 
wire            vector_cur_pc_vld;                 
wire            vector_pcgen_buf_vbr;              
wire            vector_pcgen_chgflw_vld;           
wire            vector_pcgen_cur_pc_vld;           
wire    [30:0]  vector_pcgen_enter_addr;           
wire            vector_pcgen_ibus_req;             
wire            wb_vector_ldst_wait_cmplt;         


parameter IDLE       = 4'b0000;
parameter BUF_VBR    = 4'b0010;
parameter WAIT_IDLE  = 4'b0011;
parameter WAIT_DATA  = 4'b0001;
parameter DELAY      = 4'b0100; 
parameter WAIT_GRANT = 4'b0101;
parameter RESET      = 4'b1000;
parameter SOFT_RESET = 4'b1001;
parameter WAIT_SYSCLK= 4'b1010;
parameter ASSERT_SRST= 4'b1011;






assign vec_top_clk_en = (cur_state == IDLE)
                          && retire_vector_expt_vld
                     || (cur_state != IDLE)
                     || iu_yy_xx_hs_acc_err;





























always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[3:0] <= RESET;
  else
    cur_state[3:0] <= next_state[3:0];
end






always @( cur_state
       or iu_yy_xx_hs_acc_err
       or bmu_xx_ibus_trans_cmplt
       or ifu_iu_vector_ibus_in_idle
       or retire_vector_srst_vec
       or retire_vector_expt_vld
       or bmu_xx_ibus_grnt
       or wb_vector_ldst_wait_cmplt
       or ifu_iu_hs_stall_vector
       or lsu_iu_addr_check_fail)
begin
  case(cur_state)
  IDLE        : if(retire_vector_expt_vld && retire_vector_srst_vec)
                  next_state = SOFT_RESET;
                else if(retire_vector_expt_vld && lsu_iu_addr_check_fail)
                  next_state = DELAY;
                else if(retire_vector_expt_vld || iu_yy_xx_hs_acc_err)
                  next_state = BUF_VBR;
                else
                  next_state = IDLE;








  DELAY       : next_state = BUF_VBR;
  BUF_VBR     : if(wb_vector_ldst_wait_cmplt)
                  next_state = BUF_VBR;
                else if(ifu_iu_hs_stall_vector)
                  next_state = BUF_VBR;
                else
                  next_state = WAIT_IDLE;
  WAIT_IDLE   : if(ifu_iu_vector_ibus_in_idle && !bmu_xx_ibus_grnt)
                  next_state = WAIT_GRANT;
                else if(ifu_iu_vector_ibus_in_idle)
                  next_state = WAIT_DATA;
                else
                  next_state = WAIT_IDLE;
  WAIT_GRANT  : if(bmu_xx_ibus_grnt)
                  next_state = WAIT_DATA;
                else
                  next_state = WAIT_GRANT;
  WAIT_DATA   : if(bmu_xx_ibus_trans_cmplt)
                  next_state = IDLE;
                else
                  next_state = WAIT_DATA;

  RESET       :   next_state = BUF_VBR;
  SOFT_RESET  :   next_state = WAIT_SYSCLK;
  WAIT_SYSCLK :   next_state = ASSERT_SRST;
  ASSERT_SRST :   next_state = BUF_VBR;
  default     :   next_state = IDLE;
  endcase

end









assign vector_ctrl_stall = !(cur_state == IDLE) && !ifu_iu_spcu_retire_mask
                                                && !ifu_iu_ex_int_spcu_mask;








assign iu_ifu_inst_fetch_mask = !(cur_state == IDLE);

assign iu_ifu_spcu_error = bmu_xx_ibus_acc_err || lsu_iu_trans_acc_err;
assign iu_ifu_spcu_error_without_misalign = bmu_xx_ibus_acc_err || bmu_lsu_acc_err;





assign vector_pcgen_buf_vbr = (cur_state == BUF_VBR)
                           && !wb_vector_ldst_wait_cmplt
                           && !ifu_iu_hs_stall_vector;





assign vector_pcgen_ibus_req = (cur_state == WAIT_IDLE)
                                && ifu_iu_vector_ibus_in_idle
                            || (cur_state == WAIT_GRANT);










assign vector_pcgen_enter_addr[30:9] = cp0_iu_vbr[21:0];
assign vector_pcgen_enter_addr[8:1]  = cp0_iu_vec[7:0];
assign vector_pcgen_enter_addr[0]    = 1'b0;








assign vector_cur_pc_vld = (cur_state == WAIT_DATA)
                           && bmu_xx_ibus_data_vld;
assign vector_pcgen_cur_pc_vld = vector_cur_pc_vld;







assign vector_pcgen_chgflw_vld = vector_cur_pc_vld;
assign iu_cp0_af_updt_vld = 1'b0;




assign reg_rst_b =  !(cur_state == RESET)
                 && !(cur_state == SOFT_RESET);

assign iu_yy_xx_reg_rst_b = reg_rst_b;
assign iu_cp0_syc_rst_b   = reg_rst_b;


assign iu_sysyio_soft_rst = (cur_state == ASSERT_SRST); 

assign iu_bmu_vec_redirect = (cur_state == WAIT_IDLE)
                          || (cur_state == WAIT_GRANT);




endmodule




























module nm_iu_wb(
  branch_wb_jmp_reg,
  cp0_yy_clk_en,
  cp0_yy_intsp_sel_post,
  cp0_yy_supv_mode,
  cpurst_b,
  ctrl_cp0_ex_data_sel,
  ctrl_lsu_ex_data_sel,
  ctrl_mad_ex_data_sel,
  ctrl_wb_ex_inst_dst_vld,
  ctrl_wb_nie_nir_vld,
  ctrl_xx_sp_adjust,
  decd_wb_cp0_inst_cr_oper,
  decd_xx_inst_32bit,
  forever_cpuclk,
  ifu_iu_ex_cr_oper,
  ifu_iu_ex_int_spcu_mask,
  ifu_iu_ex_int_spcu_vld,
  ifu_iu_ex_split_on,
  iu_cp0_epc_wen_for_nir,
  iu_cp0_epsr_wen_for_nir,
  iu_cp0_updt_val,
  iu_had_flush,
  iu_had_xx_data,
  iu_had_xx_data_vld,
  iu_ifu_r15,
  iu_ifu_r15_vld,
  iu_lsu_stall_without_hready,
  iu_lsu_wb_ldst,
  iu_pad_gpr_data,
  iu_pad_gpr_index,
  iu_pad_gpr_we,
  iu_yy_xx_dbgon,
  iu_yy_xx_flush,
  lsu_iu_fast_retire,
  lsu_iu_wb_acc_err,
  lsu_iu_wb_bstack_chk_fail,
  lsu_iu_wb_cmplt,
  lsu_iu_wb_data_vld,
  lsu_iu_wb_load_data,
  misc_clk,
  oper_wb_r15,
  oper_wb_src0_equal_to_dst,
  oper_wb_src1_equal_to_dst,
  pad_yy_gate_clk_en_b,
  pcgen_xx_cur_pc,
  randclk_wb_buf_mod_en_w32,
  randclk_wb_ctrl_mod_en_w2,
  randclk_wb_idx_mod_en_w5,
  rbus_wb_cmplt,
  rbus_wb_data,
  rbus_wb_dst_reg,
  rbus_wb_inst_cmplt,
  rbus_wb_load,
  rbus_wb_store,
  retire_wb_dbg_in_ack,
  wb_ctrl_stall,
  wb_ctrl_stall_without_hready,
  wb_intsp_sel,
  wb_oper_fwd_data_no_load,
  wb_oper_fwd_en,
  wb_oper_sp_adjust,
  wb_oper_supv_mode,
  wb_oper_wbuffer_data,
  wb_oper_write_data,
  wb_oper_write_en,
  wb_oper_write_idx,
  wb_oper_write_idx_for_dep,
  wb_pcgen_ldst_stall,
  wb_pcgen_pc_updt_val,
  wb_pcgen_switch_ld_pc,
  wb_rbus_st_aft_load,
  wb_retire_fast_retire_load_pc,
  wb_top_secu_mode_clk_en,
  wb_top_sp_adjust_clk_en,
  wb_top_sp_sel_clk_en,
  wb_top_supv_mode_clk_en,
  wb_vector_ldst_wait_cmplt,
  wb_xx_acc_err_after_retire,
  wb_xx_lsu_check_fail_after_retire
);


input           branch_wb_jmp_reg;                        
input           cp0_yy_clk_en;                            
input           cp0_yy_intsp_sel_post;                    
input           cp0_yy_supv_mode;                         
input           cpurst_b;                                 
input           ctrl_cp0_ex_data_sel;                     
input           ctrl_lsu_ex_data_sel;                     
input           ctrl_mad_ex_data_sel;                     
input           ctrl_wb_ex_inst_dst_vld;                  
input           ctrl_wb_nie_nir_vld;                      
input           ctrl_xx_sp_adjust;                        
input           decd_wb_cp0_inst_cr_oper;                 
input           decd_xx_inst_32bit;                       
input           forever_cpuclk;                           
input           ifu_iu_ex_cr_oper;                        
input           ifu_iu_ex_int_spcu_mask;                  
input           ifu_iu_ex_int_spcu_vld;                   
input           ifu_iu_ex_split_on;                       
input           iu_yy_xx_dbgon;                           
input           iu_yy_xx_flush;                           
input           lsu_iu_fast_retire;                       
input           lsu_iu_wb_acc_err;                        
input           lsu_iu_wb_bstack_chk_fail;                
input           lsu_iu_wb_cmplt;                          
input           lsu_iu_wb_data_vld;                       
input   [31:0]  lsu_iu_wb_load_data;                      
input           misc_clk;                                 
input   [31:0]  oper_wb_r15;                              
input           oper_wb_src0_equal_to_dst;                
input           oper_wb_src1_equal_to_dst;                
input           pad_yy_gate_clk_en_b;                     
input   [30:0]  pcgen_xx_cur_pc;                          
input           randclk_wb_buf_mod_en_w32;                
input           randclk_wb_ctrl_mod_en_w2;                
input           randclk_wb_idx_mod_en_w5;                 
input           rbus_wb_cmplt;                            
input   [31:0]  rbus_wb_data;                             
input   [4 :0]  rbus_wb_dst_reg;                          
input           rbus_wb_inst_cmplt;                       
input           rbus_wb_load;                             
input           rbus_wb_store;                            
input           retire_wb_dbg_in_ack;                     
output          iu_cp0_epc_wen_for_nir;                   
output          iu_cp0_epsr_wen_for_nir;                  
output  [31:0]  iu_cp0_updt_val;                          
output          iu_had_flush;                             
output  [31:0]  iu_had_xx_data;                           
output          iu_had_xx_data_vld;                       
output  [30:0]  iu_ifu_r15;                               
output          iu_ifu_r15_vld;                           
output          iu_lsu_stall_without_hready;              
output          iu_lsu_wb_ldst;                           
output  [31:0]  iu_pad_gpr_data;                          
output  [4 :0]  iu_pad_gpr_index;                         
output          iu_pad_gpr_we;                            
output          wb_ctrl_stall;                            
output          wb_ctrl_stall_without_hready;             
output          wb_intsp_sel;                             
output  [31:0]  wb_oper_fwd_data_no_load;                 
output          wb_oper_fwd_en;                           
output          wb_oper_sp_adjust;                        
output          wb_oper_supv_mode;                        
output  [31:0]  wb_oper_wbuffer_data;                     
output  [31:0]  wb_oper_write_data;                       
output          wb_oper_write_en;                         
output  [4 :0]  wb_oper_write_idx;                        
output  [4 :0]  wb_oper_write_idx_for_dep;                
output          wb_pcgen_ldst_stall;                      
output  [30:0]  wb_pcgen_pc_updt_val;                     
output          wb_pcgen_switch_ld_pc;                    
output          wb_rbus_st_aft_load;                      
output  [30:0]  wb_retire_fast_retire_load_pc;            
output          wb_top_secu_mode_clk_en;                  
output          wb_top_sp_adjust_clk_en;                  
output          wb_top_sp_sel_clk_en;                     
output          wb_top_supv_mode_clk_en;                  
output          wb_vector_ldst_wait_cmplt;                
output          wb_xx_acc_err_after_retire;               
output          wb_xx_lsu_check_fail_after_retire;        


reg     [1 :0]  cur_state;                                
reg             ex_wb_split_on;                           
reg     [1 :0]  next_state;                               
reg             wb_cr_oper;                               
reg     [31:0]  wb_data_buffer;                           
reg     [4 :0]  wb_idx_buffer;                            
reg             wb_inst_32;                               
reg             wb_int_spcu_inst;                         
reg             wb_int_spcu_mask;                         
reg             wb_intsp_sel;                             
reg             wb_oper_supv_mode;                        
reg             wb_sp_adjust;                             


wire            branch_wb_jmp_reg;                        
wire            cp0_yy_clk_en;                            
wire            cp0_yy_intsp_sel_post;                    
wire            cp0_yy_supv_mode;                         
wire            cp0_yy_supv_mode_post;                    
wire            cpurst_b;                                 
wire            ctrl_cp0_ex_data_sel;                     
wire            ctrl_lsu_ex_data_sel;                     
wire            ctrl_mad_ex_data_sel;                     
wire            ctrl_wb_ex_inst_dst_vld;                  
wire            ctrl_wb_nie_nir_vld;                      
wire            ctrl_xx_sp_adjust;                        
wire            decd_wb_cp0_inst_cr_oper;                 
wire            decd_xx_inst_32bit;                       
wire            forever_cpuclk;                           
wire            ifu_iu_ex_cr_oper;                        
wire            ifu_iu_ex_int_spcu_mask;                  
wire            ifu_iu_ex_int_spcu_vld;                   
wire            ifu_iu_ex_split_on;                       
wire            iu_cp0_epc_wen_for_nir;                   
wire            iu_cp0_epsr_wen_for_nir;                  
wire    [31:0]  iu_cp0_updt_val;                          
wire            iu_had_flush;                             
wire    [31:0]  iu_had_xx_data;                           
wire            iu_had_xx_data_vld;                       
wire    [30:0]  iu_ifu_r15;                               
wire            iu_ifu_r15_vld;                           
wire            iu_lsu_stall_without_hready;              
wire            iu_lsu_wb_ldst;                           
wire    [31:0]  iu_pad_gpr_data;                          
wire    [4 :0]  iu_pad_gpr_index;                         
wire            iu_pad_gpr_we;                            
wire            iu_yy_xx_dbgon;                           
wire            iu_yy_xx_flush;                           
wire            lsu_iu_fast_retire;                       
wire            lsu_iu_wb_acc_err;                        
wire            lsu_iu_wb_bstack_chk_fail;                
wire            lsu_iu_wb_cmplt;                          
wire            lsu_iu_wb_data_vld;                       
wire    [31:0]  lsu_iu_wb_load_data;                      
wire            misc_clk;                                 
wire    [1 :0]  next_cmplt_state;                         
wire    [31:0]  oper_wb_r15;                              
wire            oper_wb_src0_equal_to_dst;                
wire            oper_wb_src1_equal_to_dst;                
wire            pad_yy_gate_clk_en_b;                     
wire    [30:0]  pcgen_xx_cur_pc;                          
wire    [30:0]  pcgen_xx_cur_pc_mask;                     
wire            randclk_wb_buf_mod_en_w32;                
wire            randclk_wb_ctrl_mod_en_w2;                
wire            randclk_wb_idx_mod_en_w5;                 
wire            rbus_wb_cmplt;                            
wire    [31:0]  rbus_wb_data;                             
wire    [4 :0]  rbus_wb_dst_reg;                          
wire            rbus_wb_inst_cmplt;                       
wire            rbus_wb_load;                             
wire            rbus_wb_store;                            
wire            retire_wb_dbg_in_ack;                     
wire            wb_acc_err_after_retire;                  
wire            wb_alu_or_load_wen;                       
wire            wb_buf_stall;                             
wire            wb_buf_stall_without_hready;              
wire            wb_check_fail_after_retire;               
wire            wb_clk;                                   
wire            wb_clk_en;                                
wire            wb_cmplt_write_back;                      
wire            wb_ctrl_load_fwd_non_alu;                 
wire            wb_ctrl_stall;                            
wire            wb_ctrl_stall_without_bctm;               
wire            wb_ctrl_stall_without_bctm_without_hready; 
wire            wb_ctrl_stall_without_hready;             
wire            wb_data_buf_0_16_update;                  
wire            wb_data_buf_16_0_clk;                     
wire            wb_data_buf_16_0_clk_en;                  
wire    [31:0]  wb_data_buffer_post;                      
wire            wb_data_buffer_update;                    
wire            wb_dst_reg_14;                            
wire            wb_dst_reg_15;                            
wire            wb_dst_reg_22;                            
wire            wb_dst_reg_23;                            
wire            wb_dst_reg_24;                            
wire            wb_dst_reg_25;                            
wire            wb_dst_reg_30;                            
wire            wb_dst_reg_high_16;                       
wire            wb_dst_reg_valid;                         
wire            wb_ex_cmplt;                              
wire            wb_ex_in_diff_mode;                       
wire            wb_ex_with_diff_intsp;                    
wire            wb_fast_retire_pc_mask;                   
wire    [1 :0]  wb_fast_retire_pc_offset;                 
wire            wb_idx_buf_3_0_clk;                       
wire            wb_idx_buf_3_0_clk_en;                    
wire            wb_idx_buf_3_0_update;                    
wire            wb_idx_buf_update;                        
wire    [4 :0]  wb_idx_for_dep;                           
wire    [30:0]  wb_ifu_r15;                               
wire            wb_int_spcu_epc_mask;                     
wire            wb_int_spcu_expt_mask;                    
wire            wb_int_spcu_nie;                          
wire            wb_ldst;                                  
wire            wb_load_fwd_mad;                          
wire    [31:0]  wb_oper_fwd_data_no_load;                 
wire            wb_oper_fwd_en;                           
wire            wb_oper_sp_adjust;                        
wire    [31:0]  wb_oper_wbuffer_data;                     
wire    [31:0]  wb_oper_write_data;                       
wire            wb_oper_write_en;                         
wire    [4 :0]  wb_oper_write_idx;                        
wire    [4 :0]  wb_oper_write_idx_for_dep;                
wire            wb_pcgen_ldst_stall;                      
wire    [30:0]  wb_pcgen_pc_updt_val;                     
wire            wb_pcgen_switch_ld_pc;                    
wire            wb_r15_buf_write;                         
wire            wb_r15_ex_write_en;                       
wire            wb_r15_load;                              
wire            wb_rbus_st_aft_load;                      
wire    [30:0]  wb_retire_fast_retire_load_pc;            
wire            wb_sp_wen_stall;                          
wire            wb_store_aft_load;                        
wire            wb_top_secu_mode_clk_en;                  
wire            wb_top_sp_adjust_clk_en;                  
wire            wb_top_sp_sel_clk_en;                     
wire            wb_top_supv_mode_clk_en;                  
wire            wb_uncmplt_load;                          
wire            wb_uncmplt_store;                         
wire            wb_vector_ldst_wait_cmplt;                
wire            wb_write_back;                            
wire    [31:0]  wb_write_back_data;                       
wire    [31:0]  wb_write_back_data_without_pol;           
wire            wb_write_back_en;                         
wire            wb_xx_acc_err_after_retire;               
wire            wb_xx_lsu_check_fail_after_retire;        
























parameter IDLE  = 2'b00;
parameter LOAD  = 2'b01;
parameter STORE = 2'b10;
parameter ALU   = 2'b11;










assign wb_clk_en = (cur_state != IDLE) || wb_ex_cmplt;

gated_clk_cell  x_wb_gated_clk (
  .clk_in                    (forever_cpuclk           ),
  .clk_out                   (wb_clk                   ),
  .external_en               (1'b0                     ),
  .global_en                 (cp0_yy_clk_en            ),
  .local_en                  (wb_clk_en                ),
  .module_en                 (randclk_wb_ctrl_mod_en_w2),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     )
);


























assign wb_data_buf_16_0_clk_en = wb_data_buf_0_16_update;

gated_clk_cell  x_wb_data_buf_16_0_gated_clk (
  .clk_in                    (forever_cpuclk           ),
  .clk_out                   (wb_data_buf_16_0_clk     ),
  .external_en               (1'b0                     ),
  .global_en                 (cp0_yy_clk_en            ),
  .local_en                  (wb_data_buf_16_0_clk_en  ),
  .module_en                 (randclk_wb_buf_mod_en_w32),
  .pad_yy_gate_clk_en_b      (pad_yy_gate_clk_en_b     )
);

















assign wb_idx_buf_update     = wb_cmplt_write_back || wb_uncmplt_load;
assign wb_idx_buf_3_0_update = wb_idx_buf_update;
assign wb_idx_buf_3_0_clk_en = wb_idx_buf_3_0_update;

gated_clk_cell  x_idx_buf_3_0_gated_clk (
  .clk_in                   (forever_cpuclk          ),
  .clk_out                  (wb_idx_buf_3_0_clk      ),
  .external_en              (1'b0                    ),
  .global_en                (cp0_yy_clk_en           ),
  .local_en                 (wb_idx_buf_3_0_clk_en   ),
  .module_en                (randclk_wb_idx_mod_en_w5),
  .pad_yy_gate_clk_en_b     (pad_yy_gate_clk_en_b    )
);



































always @(posedge wb_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[1:0] <= IDLE;
  else
    cur_state[1:0] <= next_state[1:0];
end




assign wb_uncmplt_load     = rbus_wb_load;
assign wb_uncmplt_store    = rbus_wb_store;
assign wb_cmplt_write_back = rbus_wb_cmplt;

assign wb_ex_cmplt         = wb_uncmplt_load
                             || wb_uncmplt_store
                             || wb_cmplt_write_back;

assign next_cmplt_state[1:0] = {2{wb_uncmplt_load}}     & LOAD
                             | {2{wb_uncmplt_store}}    & STORE
                             | {2{wb_cmplt_write_back}} & ALU;


always @( cur_state
       or wb_ex_cmplt
       or next_cmplt_state
       or lsu_iu_wb_cmplt)
begin
  case(cur_state)
  IDLE       : if(wb_ex_cmplt)
                 next_state = next_cmplt_state;
               else
                 next_state = IDLE;
  LOAD       : if(lsu_iu_wb_cmplt && wb_ex_cmplt)
                 next_state = next_cmplt_state;
               else if(lsu_iu_wb_cmplt && !wb_ex_cmplt)
                 next_state = IDLE;
               else
                 next_state = LOAD;
  STORE      : if(lsu_iu_wb_cmplt && wb_ex_cmplt)
                 next_state = next_cmplt_state;
               else if(lsu_iu_wb_cmplt && !wb_ex_cmplt)
                 next_state = IDLE;
               else
                 next_state = STORE;
  ALU        : if(wb_ex_cmplt)
                 next_state = next_cmplt_state;
               else
                 next_state = IDLE;
  default    :   next_state = IDLE;
  endcase

end






assign wb_alu_or_load_wen = ((cur_state == LOAD)
                               && lsu_iu_wb_cmplt
                               && lsu_iu_wb_data_vld
                          || (cur_state == ALU));
assign wb_write_back_en   = wb_alu_or_load_wen 
                            && wb_dst_reg_valid;

assign wb_write_back      = ((cur_state == ALU)
                             || (cur_state == LOAD))
                            && wb_dst_reg_valid;





assign wb_acc_err_after_retire = ((cur_state == LOAD) || (cur_state == STORE)) 
                                  && lsu_iu_wb_cmplt
                                  && lsu_iu_wb_acc_err
                                  && !wb_int_spcu_expt_mask;

assign wb_xx_acc_err_after_retire = wb_acc_err_after_retire;

assign wb_ldst = ((cur_state == LOAD) || (cur_state == STORE));
assign iu_lsu_wb_ldst = wb_ldst;
























always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_oper_supv_mode <= 1'b1;
  else if(rbus_wb_inst_cmplt)
    wb_oper_supv_mode <= cp0_yy_supv_mode_post;
end
assign cp0_yy_supv_mode_post   = cp0_yy_supv_mode;
assign wb_top_supv_mode_clk_en = cp0_yy_supv_mode_post ^ wb_oper_supv_mode;





always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_intsp_sel <= 1'b1;
  else if(rbus_wb_inst_cmplt)
    wb_intsp_sel <= cp0_yy_intsp_sel_post;
end 

assign wb_top_sp_sel_clk_en = cp0_yy_intsp_sel_post  ^  wb_intsp_sel ;








assign wb_top_secu_mode_clk_en = 1'b0;

always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_sp_adjust <= 1'b0;
  else if(rbus_wb_inst_cmplt)
    wb_sp_adjust <= ctrl_xx_sp_adjust;
end
assign wb_oper_sp_adjust = wb_sp_adjust && lsu_iu_wb_cmplt
                        && (!lsu_iu_wb_acc_err || wb_int_spcu_nie);

always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_int_spcu_inst <= 1'b0;
  else if(rbus_wb_inst_cmplt)
    wb_int_spcu_inst <= ifu_iu_ex_int_spcu_vld;
end

always @(posedge misc_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_int_spcu_mask <= 1'b0;
  else if(rbus_wb_inst_cmplt)
    wb_int_spcu_mask <= ifu_iu_ex_int_spcu_mask;
end

assign wb_int_spcu_epc_mask  = wb_int_spcu_inst;
assign wb_int_spcu_expt_mask = wb_int_spcu_mask;
assign wb_int_spcu_nie       = wb_int_spcu_inst && !wb_int_spcu_mask;

assign wb_top_sp_adjust_clk_en = (ctrl_xx_sp_adjust ^ wb_sp_adjust)
                              || (ifu_iu_ex_int_spcu_vld ^ wb_int_spcu_inst)
                              || (ifu_iu_ex_int_spcu_mask ^ wb_int_spcu_mask);


always @(posedge wb_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_inst_32 <= 1'b0;
  else if(lsu_iu_fast_retire)
    wb_inst_32 <= decd_xx_inst_32bit;
end

always @(posedge wb_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    ex_wb_split_on <= 1'b0;
  else if(lsu_iu_fast_retire)
    ex_wb_split_on <= ifu_iu_ex_split_on;
end


assign wb_check_fail_after_retire = ((cur_state == LOAD) || (cur_state == STORE))
                                     && lsu_iu_wb_bstack_chk_fail;
assign wb_xx_lsu_check_fail_after_retire = wb_check_fail_after_retire;










assign wb_buf_stall  = ((cur_state == LOAD) || (cur_state == STORE))
                         && !(lsu_iu_wb_cmplt
                              && !lsu_iu_wb_acc_err 
                              && !lsu_iu_wb_bstack_chk_fail)
                    || retire_wb_dbg_in_ack;

assign wb_buf_stall_without_hready = ((cur_state == LOAD)    || (cur_state == STORE))
                                       && (lsu_iu_wb_acc_err || lsu_iu_wb_bstack_chk_fail)
                                  || retire_wb_dbg_in_ack;

assign wb_pcgen_ldst_stall = ((cur_state == LOAD) || (cur_state == STORE))
                             && !lsu_iu_wb_cmplt;

















assign wb_data_buffer_post[31:0]  = rbus_wb_data[31:0];
assign wb_data_buffer_update = wb_cmplt_write_back
                            || ctrl_xx_sp_adjust && rbus_wb_inst_cmplt;
assign wb_store_aft_load     = (cur_state == LOAD)
                               && (wb_uncmplt_store || (next_state == IDLE));
assign wb_rbus_st_aft_load   = wb_store_aft_load;

assign wb_data_buf_0_16_update = wb_data_buffer_update || wb_store_aft_load;
always @(posedge wb_data_buf_16_0_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_data_buffer[31:0] <= 32'b0;
  else if(wb_data_buf_0_16_update)
    wb_data_buffer[31:0] <= wb_data_buffer_post[31:0];
  else
    wb_data_buffer[31:0] <= wb_data_buffer[31:0];
end 













































assign wb_fast_retire_pc_mask = !ex_wb_split_on && lsu_iu_wb_acc_err
                             && !wb_int_spcu_epc_mask;
assign wb_fast_retire_pc_offset[1:0] = {2{wb_fast_retire_pc_mask}}
                                     & {wb_inst_32,!wb_inst_32};
assign pcgen_xx_cur_pc_mask[30:8] = pcgen_xx_cur_pc[30:8];
assign pcgen_xx_cur_pc_mask[7:0]  = pcgen_xx_cur_pc[7:0]
                                  & {8{lsu_iu_wb_acc_err}};
assign wb_retire_fast_retire_load_pc[30:0] = pcgen_xx_cur_pc_mask[30:0] 
                                              - wb_fast_retire_pc_offset[1:0];



assign wb_vector_ldst_wait_cmplt = ((cur_state == LOAD) || (cur_state == STORE))
                                   && !lsu_iu_wb_cmplt;





always @(posedge wb_idx_buf_3_0_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_idx_buffer[4:0] <= 5'b0;
  else if(wb_idx_buf_3_0_update)
    wb_idx_buffer[4:0] <= rbus_wb_dst_reg[4:0];
  else
    wb_idx_buffer[4:0] <= wb_idx_buffer[4:0];
end

always @(posedge wb_idx_buf_3_0_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    wb_cr_oper <= 1'b0;
  else if(wb_idx_buf_3_0_update)
    wb_cr_oper <= ifu_iu_ex_cr_oper;
  else
    wb_cr_oper <= wb_cr_oper;
end





















assign wb_dst_reg_30            = 1'b0;
assign wb_dst_reg_25            = 1'b0;
assign wb_dst_reg_24            = 1'b0;
assign wb_dst_reg_23            = 1'b0;
assign wb_dst_reg_22            = 1'b0;
assign wb_dst_reg_high_16       = wb_idx_buffer[4]
                               && !wb_dst_reg_30
                               && !wb_dst_reg_25
                               && !wb_dst_reg_24
                               && !wb_dst_reg_23
                               && !wb_dst_reg_22;
assign wb_dst_reg_15            = (wb_idx_buffer[4:0] == 5'd15);
assign wb_dst_reg_valid         = !wb_dst_reg_high_16;
assign wb_dst_reg_14            = (wb_idx_buffer[4:0] == 5'd14);





assign wb_write_back_data[31:0] = (cur_state == LOAD)
                                  ? lsu_iu_wb_load_data[31:0]
                                  : wb_data_buffer[31:0];
assign wb_write_back_data_without_pol[31:0] = wb_write_back_data[31:0];




assign wb_oper_write_en         = wb_write_back_en;

assign iu_cp0_epsr_wen_for_nir  = wb_alu_or_load_wen && wb_cr_oper
                                  && (wb_idx_buffer[4:0] == 5'd16);
assign iu_cp0_epc_wen_for_nir   = wb_alu_or_load_wen && wb_cr_oper
                                  && (wb_idx_buffer[4:0] == 5'd17);
assign iu_cp0_updt_val[31:0]    = wb_write_back_data_without_pol[31:0];

assign wb_pcgen_switch_ld_pc      = 1'b0;
assign wb_pcgen_pc_updt_val[30:0] = 31'b0;


assign wb_oper_write_idx[4:0]   = wb_idx_buffer[4:0];
assign wb_idx_for_dep[4:0] = wb_sp_adjust ? 5'b01110 : wb_idx_buffer[4:0];
assign wb_oper_write_idx_for_dep[4:0] = wb_idx_for_dep[4:0];
assign wb_oper_write_data[31:0] = wb_write_back_data[31:0];
assign wb_oper_wbuffer_data[31:0] = wb_data_buffer[31:0];

assign wb_oper_fwd_en           = (wb_write_back || wb_sp_adjust && wb_ldst);
assign wb_oper_fwd_data_no_load[31:0] = wb_data_buffer[31:0];


assign iu_pad_gpr_we            = wb_write_back_en;
assign iu_pad_gpr_index[4:0]    = wb_idx_buffer[4:0];
assign iu_pad_gpr_data[31:0]    = wb_write_back_data_without_pol[31:0];


assign iu_had_xx_data_vld       = wb_write_back_en && iu_yy_xx_dbgon;
assign iu_had_xx_data[31:0]     = wb_write_back_data_without_pol[31:0];
assign iu_had_flush             = iu_yy_xx_flush;









assign wb_r15_buf_write         = wb_dst_reg_15;








assign wb_r15_ex_write_en       = ctrl_wb_ex_inst_dst_vld
                                  && (!rbus_wb_dst_reg[4]
                                      && (&rbus_wb_dst_reg[3:0]));



assign wb_r15_load = ((cur_state == LOAD) || (cur_state == ALU))
                     && wb_r15_buf_write;

assign iu_ifu_r15_vld           = !(wb_r15_ex_write_en || wb_r15_load);










assign wb_ifu_r15[30:0]         = oper_wb_r15[31:1];
assign iu_ifu_r15[30:0]         = wb_ifu_r15[30:0];



































assign wb_ctrl_load_fwd_non_alu = (cur_state == LOAD)
                                  && oper_wb_src0_equal_to_dst
                                  && !wb_sp_adjust
                                  && (branch_wb_jmp_reg
                                   || ctrl_lsu_ex_data_sel
                                   || ctrl_cp0_ex_data_sel);

assign wb_load_fwd_mad = (cur_state == LOAD)
                         && (oper_wb_src0_equal_to_dst
                             || oper_wb_src1_equal_to_dst)
                         && ctrl_mad_ex_data_sel;



assign wb_sp_wen_stall = (wb_write_back && wb_dst_reg_14 || wb_sp_adjust && wb_ldst)
                                 && ((ctrl_cp0_ex_data_sel && decd_wb_cp0_inst_cr_oper)
                                       || wb_ex_in_diff_mode || wb_ex_with_diff_intsp
                                    )
                      || (wb_sp_adjust && (cur_state == LOAD))
                                 && !ctrl_wb_nie_nir_vld;
assign wb_ex_in_diff_mode = (cp0_yy_supv_mode_post ^ wb_oper_supv_mode);
assign wb_ex_with_diff_intsp = (cp0_yy_intsp_sel_post ^ wb_intsp_sel);








assign wb_ctrl_stall_without_bctm = wb_buf_stall
                       || wb_ctrl_load_fwd_non_alu
                       || wb_load_fwd_mad
                       || wb_sp_wen_stall;
assign wb_ctrl_stall_without_bctm_without_hready = wb_buf_stall_without_hready
                                                || wb_ctrl_load_fwd_non_alu
                                                || wb_load_fwd_mad
                                                || wb_sp_wen_stall;

assign wb_ctrl_stall = wb_ctrl_stall_without_bctm;
assign wb_ctrl_stall_without_hready = wb_ctrl_stall_without_bctm_without_hready;


assign iu_lsu_stall_without_hready = wb_ctrl_stall_without_hready;





endmodule
























module nm_lsu_ctrl(
  bmu_lsu_acc_err,
  bmu_lsu_bstack_chk_fail,
  bmu_lsu_data_vld,
  bmu_lsu_grnt,
  bmu_lsu_trans_cmplt,
  cp0_lsu_sge,
  cp0_lsu_sgp,
  cp0_yy_supv_mode,
  cpurst_b,
  ctrl_dp_ldst_info_buf_reuse,
  ctrl_dp_ldst_req_grnt,
  ctrl_dp_store_buffer_updt,
  ctrl_top_req_en,
  ctrl_unalign_ldst_unalign,
  ctrl_unalign_req_grant,
  ctrl_unalign_store,
  ctrl_unalign_trans_cmplt,
  dp_ctrl_misalign,
  dp_ctrl_stack_check_fail,
  dp_ctrl_unalign,
  iu_lsu_ex_data_sel,
  iu_lsu_ex_sel,
  iu_lsu_inst_store,
  iu_lsu_lrw,
  iu_lsu_lrw_no_fast_retire,
  iu_lsu_oper_mux_en,
  iu_lsu_src0_sp,
  iu_lsu_stall_without_hready,
  iu_lsu_wb_ldst,
  iu_yy_xx_flush,
  lsu_bmu_addr_check_fail,
  lsu_bmu_idle,
  lsu_bmu_req,
  lsu_bmu_req_without_cmplt,
  lsu_bmu_sg_chk_fail,
  lsu_bmu_wfd1,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  lsu_inst_store,
  lsu_iu_addr_check_fail,
  lsu_iu_data_vld,
  lsu_iu_expt_vec,
  lsu_iu_expt_vld,
  lsu_iu_fast_retire,
  lsu_iu_req,
  lsu_iu_stall,
  lsu_iu_trans_acc_err,
  lsu_iu_wb_acc_err,
  lsu_iu_wb_bstack_chk_fail,
  lsu_iu_wb_cmplt,
  lsu_iu_wb_data_vld,
  sm_clk,
  unalign_ctrl_not_last_beat,
  unalign_ctrl_stall,
  unalign_xx_split_on
);


input          bmu_lsu_acc_err;            
input          bmu_lsu_bstack_chk_fail;    
input          bmu_lsu_data_vld;           
input          bmu_lsu_grnt;               
input          bmu_lsu_trans_cmplt;        
input          cp0_lsu_sge;                
input          cp0_lsu_sgp;                
input          cp0_yy_supv_mode;           
input          cpurst_b;                   
input          dp_ctrl_misalign;           
input          dp_ctrl_stack_check_fail;   
input          dp_ctrl_unalign;            
input          iu_lsu_ex_data_sel;         
input          iu_lsu_ex_sel;              
input          iu_lsu_inst_store;          
input          iu_lsu_lrw;                 
input          iu_lsu_lrw_no_fast_retire;  
input          iu_lsu_oper_mux_en;         
input          iu_lsu_src0_sp;             
input          iu_lsu_stall_without_hready; 
input          iu_lsu_wb_ldst;             
input          iu_yy_xx_flush;             
input          sm_clk;                     
input          unalign_ctrl_not_last_beat; 
input          unalign_ctrl_stall;         
input          unalign_xx_split_on;        
output         ctrl_dp_ldst_info_buf_reuse; 
output         ctrl_dp_ldst_req_grnt;      
output         ctrl_dp_store_buffer_updt;  
output         ctrl_top_req_en;            
output         ctrl_unalign_ldst_unalign;  
output         ctrl_unalign_req_grant;     
output         ctrl_unalign_store;         
output         ctrl_unalign_trans_cmplt;   
output         lsu_bmu_addr_check_fail;    
output         lsu_bmu_idle;               
output         lsu_bmu_req;                
output         lsu_bmu_req_without_cmplt;  
output         lsu_bmu_sg_chk_fail;        
output         lsu_bmu_wfd1;               
output         lsu_had_addr_vld;           
output         lsu_had_ex_cmplt;           
output         lsu_inst_store;             
output         lsu_iu_addr_check_fail;     
output         lsu_iu_data_vld;            
output  [4:0]  lsu_iu_expt_vec;            
output         lsu_iu_expt_vld;            
output         lsu_iu_fast_retire;         
output         lsu_iu_req;                 
output         lsu_iu_stall;               
output         lsu_iu_trans_acc_err;       
output         lsu_iu_wb_acc_err;          
output         lsu_iu_wb_bstack_chk_fail;  
output         lsu_iu_wb_cmplt;            
output         lsu_iu_wb_data_vld;         


reg            cur_state;                  
reg            next_state;                 


wire           bmu_lsu_acc_err;            
wire           bmu_lsu_bstack_chk_fail;    
wire           bmu_lsu_data_vld;           
wire           bmu_lsu_grnt;               
wire           bmu_lsu_trans_cmplt;        
wire           cp0_lsu_sge;                
wire           cp0_lsu_sgp;                
wire           cp0_yy_supv_mode;           
wire           cpurst_b;                   
wire           ctrl_dp_ldst_info_buf_reuse; 
wire           ctrl_dp_ldst_req_grnt;      
wire           ctrl_dp_store_buffer_updt;  
wire           ctrl_top_req_en;            
wire           ctrl_unalign_ldst_unalign;  
wire           ctrl_unalign_req_grant;     
wire           ctrl_unalign_store;         
wire           ctrl_unalign_trans_cmplt;   
wire           dp_ctrl_misalign;           
wire           dp_ctrl_stack_check_fail;   
wire           dp_ctrl_unalign;            
wire           fast_retire_grnt;           
wire           idle_retire;                
wire           iu_lsu_ex_data_sel;         
wire           iu_lsu_ex_sel;              
wire           iu_lsu_inst_store;          
wire           iu_lsu_lrw;                 
wire           iu_lsu_lrw_no_fast_retire;  
wire           iu_lsu_oper_mux_en;         
wire           iu_lsu_src0_sp;             
wire           iu_lsu_stall_without_hready; 
wire           iu_lsu_wb_ldst;             
wire           iu_yy_xx_flush;             
wire           lsu_addr_chk_fail;          
wire           lsu_bmu_addr_check_fail;    
wire           lsu_bmu_idle;               
wire           lsu_bmu_req;                
wire           lsu_bmu_req_without_cmplt;  
wire           lsu_bmu_sg_chk_fail;        
wire           lsu_bmu_wfd1;               
wire           lsu_dbus_req;               
wire           lsu_fast_retire;            
wire           lsu_had_addr_vld;           
wire           lsu_had_ex_cmplt;           
wire           lsu_inst_store;             
wire           lsu_iu_addr_check_fail;     
wire           lsu_iu_data_vld;            
wire    [4:0]  lsu_iu_expt_vec;            
wire           lsu_iu_expt_vld;            
wire           lsu_iu_fast_retire;         
wire           lsu_iu_req;                 
wire           lsu_iu_req_wait_data;       
wire           lsu_iu_stall;               
wire           lsu_iu_trans_acc_err;       
wire           lsu_iu_wb_acc_err;          
wire           lsu_iu_wb_bstack_chk_fail;  
wire           lsu_iu_wb_cmplt;            
wire           lsu_iu_wb_data_vld;         
wire           lsu_sel;                    
wire           lsu_sel_without_cmplt;      
wire           lsu_sel_without_hready;     
wire           lsu_trans_cmplt;            
wire           lsu_wb_acc_err;             
wire           sm_clk;                     
wire           stack_check_fail_vld;       
wire           stack_guard_mode_check_vld; 
wire           unalign_ctrl_not_last_beat; 
wire           unalign_ctrl_stall;         
wire           unalign_xx_split_on;        


parameter IDLE       = 1'b0;

parameter WAIT_DATA  = 1'b1;




assign ctrl_top_req_en = (cur_state == IDLE) && (next_state == WAIT_DATA)
                      || (cur_state != IDLE);
















parameter MISA_VEC=5'b00001, ACC_VEC=5'b00010;








assign lsu_addr_chk_fail = 1'b0;






assign lsu_sel = iu_lsu_ex_sel && !dp_ctrl_misalign;
assign lsu_sel_without_hready = iu_lsu_ex_data_sel && !dp_ctrl_misalign
                                && !iu_lsu_stall_without_hready;
assign lsu_bmu_addr_check_fail = lsu_addr_chk_fail;

assign lsu_iu_addr_check_fail = lsu_sel && lsu_addr_chk_fail;

assign lsu_sel_without_cmplt = iu_lsu_ex_data_sel && !dp_ctrl_misalign;


assign lsu_inst_store = iu_lsu_oper_mux_en && iu_lsu_inst_store;

assign lsu_fast_retire = !unalign_xx_split_on && !iu_lsu_lrw_no_fast_retire;

assign fast_retire_grnt = lsu_fast_retire && bmu_lsu_grnt;





assign ctrl_unalign_ldst_unalign = iu_lsu_ex_data_sel && dp_ctrl_unalign;
assign ctrl_unalign_store = lsu_inst_store;

assign ctrl_unalign_req_grant = ctrl_dp_ldst_info_buf_reuse;
assign ctrl_unalign_trans_cmplt = lsu_trans_cmplt;
















always @(posedge sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state <= IDLE;
  else if(iu_yy_xx_flush)
    cur_state <= IDLE;
  else
    cur_state <= next_state;
end


always @( cur_state
       or bmu_lsu_grnt
       or lsu_sel_without_hready
       or iu_lsu_ex_sel
       or lsu_fast_retire
       or iu_lsu_wb_ldst
       or lsu_trans_cmplt)
begin
  case(cur_state)
  IDLE       : if(lsu_sel_without_hready)
                 begin
                   if(bmu_lsu_grnt)
                     begin
                       if(!iu_lsu_ex_sel || !lsu_fast_retire)
                         next_state = WAIT_DATA;
                       else
                         next_state = IDLE;
                     end
                   else
                     next_state = IDLE;

                 end
               else
                 next_state = IDLE;









  WAIT_DATA  : if(lsu_trans_cmplt)
                 begin
                   if(!iu_lsu_wb_ldst || lsu_fast_retire)
                     next_state = IDLE;
                   else
                     next_state = WAIT_DATA;
                 end
               else
                 next_state = WAIT_DATA;
  default    :   next_state = IDLE;
  endcase

end


assign lsu_trans_cmplt      = bmu_lsu_trans_cmplt;


assign lsu_dbus_req     = (cur_state == IDLE) && lsu_sel_without_hready;
assign lsu_bmu_req = lsu_dbus_req;
assign lsu_bmu_req_without_cmplt = (cur_state == IDLE) && lsu_sel_without_cmplt;

assign lsu_bmu_idle = !iu_lsu_wb_ldst || (cur_state == IDLE) && lsu_trans_cmplt;
assign lsu_bmu_wfd1 = iu_lsu_wb_ldst ^ (cur_state == WAIT_DATA);


assign lsu_iu_trans_acc_err = bmu_lsu_trans_cmplt && bmu_lsu_acc_err
                           || iu_lsu_ex_sel && dp_ctrl_misalign;


assign idle_retire          = fast_retire_grnt || dp_ctrl_misalign;


assign lsu_iu_req           =    (cur_state == IDLE)
                                   && iu_lsu_ex_sel && idle_retire

                              || lsu_iu_req_wait_data;






assign lsu_wb_acc_err = iu_lsu_wb_ldst && bmu_lsu_acc_err; 
assign lsu_iu_req_wait_data  =   (cur_state == WAIT_DATA)
                                   && lsu_trans_cmplt 
                                   && !lsu_wb_acc_err
                                   && (lsu_fast_retire 
                                       || !iu_lsu_wb_ldst
                                          && (!unalign_ctrl_not_last_beat
                                              || bmu_lsu_acc_err
                                              || bmu_lsu_bstack_chk_fail)
                                      );



assign lsu_iu_fast_retire   =   (cur_state == IDLE)
                                   && iu_lsu_ex_sel
                                   && fast_retire_grnt
                                   && !dp_ctrl_misalign




                             || (cur_state == WAIT_DATA)
                                   && lsu_trans_cmplt
                                   && !lsu_wb_acc_err
                                   && lsu_fast_retire;




assign ctrl_dp_store_buffer_updt   = lsu_dbus_req
                                     && lsu_inst_store 
                                     && bmu_lsu_grnt;

assign ctrl_dp_ldst_info_buf_reuse = lsu_dbus_req
                                       && bmu_lsu_grnt
                                       && lsu_bmu_idle
                                  || (cur_state == WAIT_DATA)
                                       && iu_lsu_wb_ldst
                                       && lsu_trans_cmplt
                                       && !bmu_lsu_acc_err;
assign ctrl_dp_ldst_req_grnt = 1'b0;





assign lsu_iu_stall         = (cur_state == IDLE)
                                 && iu_lsu_ex_sel && !idle_retire




                           || (cur_state == WAIT_DATA)
                                 && (!lsu_trans_cmplt
                                     || iu_lsu_wb_ldst && !lsu_fast_retire)
                           || unalign_ctrl_stall;

assign lsu_iu_data_vld      = (cur_state == WAIT_DATA) 
                              && bmu_lsu_data_vld
                              && !iu_lsu_wb_ldst
                              && !lsu_fast_retire;

assign lsu_iu_expt_vld      = (cur_state == WAIT_DATA)
                              && bmu_lsu_acc_err
                              && !iu_lsu_wb_ldst
                              && !lsu_fast_retire
                           || dp_ctrl_misalign;

assign lsu_iu_expt_vec[4:0] = {5{dp_ctrl_misalign}} & MISA_VEC 
                            | {5{cur_state}}        & ACC_VEC;





assign lsu_had_addr_vld   = lsu_dbus_req && bmu_lsu_grnt;
assign lsu_had_ex_cmplt   = lsu_iu_req;




assign lsu_iu_wb_cmplt    = bmu_lsu_trans_cmplt;
assign lsu_iu_wb_data_vld = bmu_lsu_data_vld;
assign lsu_iu_wb_acc_err  = bmu_lsu_acc_err;
assign lsu_iu_wb_bstack_chk_fail = bmu_lsu_bstack_chk_fail;


assign stack_guard_mode_check_vld = (cp0_lsu_sgp == cp0_yy_supv_mode);

assign stack_check_fail_vld =  dp_ctrl_stack_check_fail

                            && !dp_ctrl_misalign
                            && iu_lsu_src0_sp
                            && !iu_lsu_lrw
                            && stack_guard_mode_check_vld
                            && cp0_lsu_sge;
assign lsu_bmu_sg_chk_fail  = stack_check_fail_vld;


endmodule

























module nm_lsu_dp(
  bmu_lsu_data,
  cp0_lsu_mm,
  cp0_lsu_sgbr,
  cp0_lsu_sgtr,
  cp0_yy_be_v1,
  cp0_yy_be_v2,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  cru_lsu_acc_ca,
  ctrl_dp_ldst_info_buf_reuse,
  ctrl_dp_ldst_req_grnt,
  ctrl_dp_store_buffer_updt,
  dp_ctrl_misalign,
  dp_ctrl_stack_check_fail,
  dp_ctrl_unalign,
  dp_unalign_addr_1_0,
  dp_unalign_flop_addr_1_0,
  dp_unalign_flop_size_half,
  dp_unalign_flop_size_word,
  dp_unalign_size_half,
  dp_unalign_size_word,
  forever_cpuclk,
  iu_lsu_base,
  iu_lsu_data,
  iu_lsu_ex_data_sel,
  iu_lsu_lrw,
  iu_lsu_offset,
  iu_lsu_offset_sub,
  iu_lsu_oper_mux_en,
  iu_lsu_sign_exten,
  iu_lsu_size,
  iu_lsu_sp_base,
  iu_lsu_split_on,
  lsu_bmu_addr,
  lsu_bmu_prot,
  lsu_bmu_size,
  lsu_bmu_store_error,
  lsu_bmu_wdata,
  lsu_bmu_write,
  lsu_had_addr,
  lsu_had_st,
  lsu_inst_store,
  lsu_iu_data,
  lsu_iu_store,
  lsu_iu_wb_load_data,
  mpu_lsu_acc_scu,
  pad_yy_gate_clk_en_b,
  randclk_dp_size_buf_mod_en_w5,
  randclk_dp_unalign_buf_mod_en_w24,
  unalign_dp_buffer_wen,
  unalign_dp_first_req,
  unalign_dp_load_data_byte1_to_byte1,
  unalign_dp_load_data_byte1_to_byte2,
  unalign_dp_load_data_byte1_to_byte3,
  unalign_dp_load_data_byte1_to_byte4,
  unalign_dp_load_data_byte2_to_byte1,
  unalign_dp_load_data_byte2_to_byte2,
  unalign_dp_load_data_byte2_to_byte3,
  unalign_dp_load_data_byte2_to_byte4,
  unalign_dp_load_data_byte3_to_byte1,
  unalign_dp_load_data_byte3_to_byte2,
  unalign_dp_load_data_byte3_to_byte3,
  unalign_dp_load_data_byte3_to_byte4,
  unalign_dp_load_data_byte4_to_byte1,
  unalign_dp_load_data_byte4_to_byte2,
  unalign_dp_load_data_byte4_to_byte3,
  unalign_dp_load_data_byte4_to_byte4,
  unalign_dp_plus1_addr,
  unalign_dp_plus2_addr,
  unalign_dp_plus3_addr,
  unalign_dp_size_half,
  unalign_dp_size_word,
  unalign_dp_store_data_byte1_to_byte1,
  unalign_dp_store_data_byte1_to_byte2,
  unalign_dp_store_data_byte1_to_byte3,
  unalign_dp_store_data_byte1_to_byte4,
  unalign_dp_store_data_byte2_to_byte1,
  unalign_dp_store_data_byte2_to_byte2,
  unalign_dp_store_data_byte2_to_byte3,
  unalign_dp_store_data_byte2_to_byte4,
  unalign_dp_store_data_byte3_to_byte1,
  unalign_dp_store_data_byte3_to_byte2,
  unalign_dp_store_data_byte3_to_byte3,
  unalign_dp_store_data_byte3_to_byte4,
  unalign_dp_store_data_byte4_to_byte1,
  unalign_dp_store_data_byte4_to_byte2,
  unalign_dp_store_data_byte4_to_byte3,
  unalign_dp_store_data_byte4_to_byte4,
  unalign_xx_split_on
);


input   [31:0]  bmu_lsu_data;                        
input           cp0_lsu_mm;                          
input   [31:0]  cp0_lsu_sgbr;                        
input   [31:0]  cp0_lsu_sgtr;                        
input           cp0_yy_be_v1;                        
input           cp0_yy_be_v2;                        
input           cp0_yy_clk_en;                       
input           cp0_yy_supv_mode_aft_dbg;            
input           cpurst_b;                            
input           cru_lsu_acc_ca;                      
input           ctrl_dp_ldst_info_buf_reuse;         
input           ctrl_dp_ldst_req_grnt;               
input           ctrl_dp_store_buffer_updt;           
input           forever_cpuclk;                      
input   [31:0]  iu_lsu_base;                         
input   [31:0]  iu_lsu_data;                         
input           iu_lsu_ex_data_sel;                  
input           iu_lsu_lrw;                          
input   [15:0]  iu_lsu_offset;                       
input           iu_lsu_offset_sub;                   
input           iu_lsu_oper_mux_en;                  
input           iu_lsu_sign_exten;                   
input   [1 :0]  iu_lsu_size;                         
input   [31:0]  iu_lsu_sp_base;                      
input           iu_lsu_split_on;                     
input           lsu_inst_store;                      
input           mpu_lsu_acc_scu;                     
input           pad_yy_gate_clk_en_b;                
input           randclk_dp_size_buf_mod_en_w5;       
input           randclk_dp_unalign_buf_mod_en_w24;   
input           unalign_dp_buffer_wen;               
input           unalign_dp_first_req;                
input           unalign_dp_load_data_byte1_to_byte1; 
input           unalign_dp_load_data_byte1_to_byte2; 
input           unalign_dp_load_data_byte1_to_byte3; 
input           unalign_dp_load_data_byte1_to_byte4; 
input           unalign_dp_load_data_byte2_to_byte1; 
input           unalign_dp_load_data_byte2_to_byte2; 
input           unalign_dp_load_data_byte2_to_byte3; 
input           unalign_dp_load_data_byte2_to_byte4; 
input           unalign_dp_load_data_byte3_to_byte1; 
input           unalign_dp_load_data_byte3_to_byte2; 
input           unalign_dp_load_data_byte3_to_byte3; 
input           unalign_dp_load_data_byte3_to_byte4; 
input           unalign_dp_load_data_byte4_to_byte1; 
input           unalign_dp_load_data_byte4_to_byte2; 
input           unalign_dp_load_data_byte4_to_byte3; 
input           unalign_dp_load_data_byte4_to_byte4; 
input           unalign_dp_plus1_addr;               
input           unalign_dp_plus2_addr;               
input           unalign_dp_plus3_addr;               
input           unalign_dp_size_half;                
input           unalign_dp_size_word;                
input           unalign_dp_store_data_byte1_to_byte1; 
input           unalign_dp_store_data_byte1_to_byte2; 
input           unalign_dp_store_data_byte1_to_byte3; 
input           unalign_dp_store_data_byte1_to_byte4; 
input           unalign_dp_store_data_byte2_to_byte1; 
input           unalign_dp_store_data_byte2_to_byte2; 
input           unalign_dp_store_data_byte2_to_byte3; 
input           unalign_dp_store_data_byte2_to_byte4; 
input           unalign_dp_store_data_byte3_to_byte1; 
input           unalign_dp_store_data_byte3_to_byte2; 
input           unalign_dp_store_data_byte3_to_byte3; 
input           unalign_dp_store_data_byte3_to_byte4; 
input           unalign_dp_store_data_byte4_to_byte1; 
input           unalign_dp_store_data_byte4_to_byte2; 
input           unalign_dp_store_data_byte4_to_byte3; 
input           unalign_dp_store_data_byte4_to_byte4; 
input           unalign_xx_split_on;                 
output          dp_ctrl_misalign;                    
output          dp_ctrl_stack_check_fail;            
output          dp_ctrl_unalign;                     
output  [1 :0]  dp_unalign_addr_1_0;                 
output  [1 :0]  dp_unalign_flop_addr_1_0;            
output          dp_unalign_flop_size_half;           
output          dp_unalign_flop_size_word;           
output          dp_unalign_size_half;                
output          dp_unalign_size_word;                
output  [31:0]  lsu_bmu_addr;                        
output  [3 :0]  lsu_bmu_prot;                        
output  [1 :0]  lsu_bmu_size;                        
output          lsu_bmu_store_error;                 
output  [31:0]  lsu_bmu_wdata;                       
output          lsu_bmu_write;                       
output  [31:0]  lsu_had_addr;                        
output          lsu_had_st;                          
output  [31:0]  lsu_iu_data;                         
output          lsu_iu_store;                        
output  [31:0]  lsu_iu_wb_load_data;                 


reg     [4 :0]  ldst_size_buffer;                    
reg     [31:0]  load_write_data;                     
reg     [31:0]  lsu_data_sign_extd;                  
reg             lsu_misalign;                        
reg     [17:0]  lsu_offset_17_0;                     
reg     [31:0]  lsu_sized_data;                      
reg     [31:0]  lsu_store_wdata;                     
reg     [31:0]  store_data_buffer;                   
reg     [31:0]  store_data_buffer_updt_val;          
reg     [23:0]  unalign_data_buffer;                 


wire    [31:0]  bmu_lsu_data;                        
wire            btm_check_fail;                      
wire    [31:0]  btm_rst;                             
wire    [32:0]  btm_src0;                            
wire    [32:0]  btm_src1;                            
wire    [4 :0]  buffer_ldst_info;                    
wire            cp0_lsu_mm;                          
wire    [31:0]  cp0_lsu_sgbr;                        
wire    [31:0]  cp0_lsu_sgtr;                        
wire            cp0_yy_be_v1;                        
wire            cp0_yy_be_v2;                        
wire            cp0_yy_clk_en;                       
wire            cp0_yy_supv_mode_aft_dbg;            
wire            cpurst_b;                            
wire            cru_lsu_acc_ca;                      
wire            ctrl_dp_ldst_info_buf_reuse;         
wire            ctrl_dp_ldst_req_grnt;               
wire            ctrl_dp_store_buffer_updt;           
wire            dp_ctrl_misalign;                    
wire            dp_ctrl_stack_check_fail;            
wire            dp_ctrl_unalign;                     
wire    [1 :0]  dp_unalign_addr_1_0;                 
wire    [1 :0]  dp_unalign_flop_addr_1_0;            
wire            dp_unalign_flop_size_half;           
wire            dp_unalign_flop_size_word;           
wire            dp_unalign_size_half;                
wire            dp_unalign_size_word;                
wire            forever_cpuclk;                      
wire    [3 :0]  gpr_byte_wen;                        
wire    [31:0]  iu_lsu_base;                         
wire    [31:0]  iu_lsu_data;                         
wire            iu_lsu_ex_data_sel;                  
wire            iu_lsu_lrw;                          
wire    [15:0]  iu_lsu_offset;                       
wire            iu_lsu_offset_sub;                   
wire            iu_lsu_oper_mux_en;                  
wire            iu_lsu_sign_exten;                   
wire    [1 :0]  iu_lsu_size;                         
wire    [31:0]  iu_lsu_sp_base;                      
wire            iu_lsu_split_on;                     
wire            load_size_half;                      
wire    [31:0]  lsu_addr;                            
wire    [1 :0]  lsu_addr_1_0;                        
wire    [1 :0]  lsu_addr_1_0_pre_mux;                
wire    [31:0]  lsu_addr_offset;                     
wire    [31:0]  lsu_addr_offset_pre;                 
wire    [31:0]  lsu_addr_post;                       
wire    [31:0]  lsu_addr_post_before_mask;           
wire    [1 :0]  lsu_addr_post_low_2bit;              
wire    [1 :0]  lsu_addr_post_mask;                  
wire    [31:0]  lsu_base;                            
wire    [31:0]  lsu_bmu_addr;                        
wire    [3 :0]  lsu_bmu_prot;                        
wire    [1 :0]  lsu_bmu_size;                        
wire            lsu_bmu_store_error;                 
wire    [31:0]  lsu_bmu_wdata;                       
wire            lsu_bmu_write;                       
wire            lsu_bpop_second_req;                 
wire    [31:0]  lsu_data;                            
wire    [31:0]  lsu_had_addr;                        
wire            lsu_had_st;                          
wire            lsu_inst_store;                      
wire            lsu_iu_adder_carry_in;               
wire    [31:0]  lsu_iu_adder_src0;                   
wire    [31:0]  lsu_iu_adder_src1;                   
wire    [31:0]  lsu_iu_data;                         
wire            lsu_iu_store;                        
wire    [31:0]  lsu_iu_wb_load_data;                 
wire    [15:0]  lsu_offset;                          
wire            lsu_offset_sub;                      
wire            lsu_offset_sub_post;                 
wire            lsu_sign_exten;                      
wire    [1 :0]  lsu_size;                            
wire            lsu_size_half;                       
wire    [1 :0]  lsu_size_post;                       
wire            lsu_size_word;                       
wire    [7 :0]  lsu_sized_data_default;              
wire    [31:0]  lsu_sp_base_addr;                    
wire    [7 :0]  lsu_store_wdata_default;             
wire    [1 :0]  lsu_unalign_addr_1_0_flop;           
wire    [1 :0]  lsu_unalign_size_flop;               
wire    [1 :0]  lsu_wb_addr_1_0;                     
wire            lsu_wb_sign_exten;                   
wire    [1 :0]  lsu_wb_size;                         
wire    [31:0]  lsu_wdata;                           
wire            mpu_lsu_acc_scu;                     
wire    [1 :0]  offset_low_2bit;                     
wire            pad_yy_gate_clk_en_b;                
wire            randclk_dp_size_buf_mod_en_w5;       
wire            randclk_dp_unalign_buf_mod_en_w24;   
wire            size_buf_clk;                        
wire            size_buf_clk_en;                     
wire            size_buf_en;                         
wire            size_buf_vld;                        
wire            store_buffer_clk;                    
wire            store_buffer_clk_en;                 
wire            store_buffer_updt;                   
wire            top_check_pass;                      
wire    [31:0]  top_rst;                             
wire    [32:0]  top_src0;                            
wire    [32:0]  top_src1;                            
wire            unalign_buf_clk;                     
wire            unalign_buf_en;                      
wire            unalign_byte1_wen;                   
wire            unalign_byte2_wen;                   
wire            unalign_byte3_wen;                   
wire            unalign_byte4_wen;                   
wire    [23:0]  unalign_data_buffer_poled;           
wire            unalign_dp_buffer_wen;               
wire            unalign_dp_first_req;                
wire            unalign_dp_load_data_byte1_to_byte1; 
wire            unalign_dp_load_data_byte1_to_byte2; 
wire            unalign_dp_load_data_byte1_to_byte3; 
wire            unalign_dp_load_data_byte1_to_byte4; 
wire            unalign_dp_load_data_byte2_to_byte1; 
wire            unalign_dp_load_data_byte2_to_byte2; 
wire            unalign_dp_load_data_byte2_to_byte3; 
wire            unalign_dp_load_data_byte2_to_byte4; 
wire            unalign_dp_load_data_byte3_to_byte1; 
wire            unalign_dp_load_data_byte3_to_byte2; 
wire            unalign_dp_load_data_byte3_to_byte3; 
wire            unalign_dp_load_data_byte3_to_byte4; 
wire            unalign_dp_load_data_byte4_to_byte1; 
wire            unalign_dp_load_data_byte4_to_byte2; 
wire            unalign_dp_load_data_byte4_to_byte3; 
wire            unalign_dp_load_data_byte4_to_byte4; 
wire            unalign_dp_plus1_addr;               
wire            unalign_dp_plus2_addr;               
wire            unalign_dp_plus3_addr;               
wire            unalign_dp_size_half;                
wire            unalign_dp_size_word;                
wire            unalign_dp_store_data_byte1_to_byte1; 
wire            unalign_dp_store_data_byte1_to_byte2; 
wire            unalign_dp_store_data_byte1_to_byte3; 
wire            unalign_dp_store_data_byte1_to_byte4; 
wire            unalign_dp_store_data_byte2_to_byte1; 
wire            unalign_dp_store_data_byte2_to_byte2; 
wire            unalign_dp_store_data_byte2_to_byte3; 
wire            unalign_dp_store_data_byte2_to_byte4; 
wire            unalign_dp_store_data_byte3_to_byte1; 
wire            unalign_dp_store_data_byte3_to_byte2; 
wire            unalign_dp_store_data_byte3_to_byte3; 
wire            unalign_dp_store_data_byte3_to_byte4; 
wire            unalign_dp_store_data_byte4_to_byte1; 
wire            unalign_dp_store_data_byte4_to_byte2; 
wire            unalign_dp_store_data_byte4_to_byte3; 
wire            unalign_dp_store_data_byte4_to_byte4; 
wire    [3 :0]  unalign_ld_byte1_sel;                
wire    [3 :0]  unalign_ld_byte2_sel;                
wire    [3 :0]  unalign_ld_byte3_sel;                
wire    [3 :0]  unalign_ld_byte4_sel;                
wire    [3 :0]  unalign_st_byte1_sel;                
wire    [3 :0]  unalign_st_byte2_sel;                
wire    [3 :0]  unalign_st_byte3_sel;                
wire    [3 :0]  unalign_st_byte4_sel;                
wire            unalign_xx_split_on;                 





assign unalign_buf_en = unalign_dp_buffer_wen;

gated_clk_cell  x_unalign_buf_gated_clk (
  .clk_in                            (forever_cpuclk                   ),
  .clk_out                           (unalign_buf_clk                  ),
  .external_en                       (1'b0                             ),
  .global_en                         (cp0_yy_clk_en                    ),
  .local_en                          (unalign_buf_en                   ),
  .module_en                         (randclk_dp_unalign_buf_mod_en_w24),
  .pad_yy_gate_clk_en_b              (pad_yy_gate_clk_en_b             )
);








assign size_buf_vld = !lsu_inst_store || lsu_misalign;
assign size_buf_en = ctrl_dp_ldst_info_buf_reuse
                     && unalign_dp_first_req
                     && size_buf_vld;
assign size_buf_clk_en = (ctrl_dp_ldst_info_buf_reuse || ctrl_dp_ldst_req_grnt)
                     && unalign_dp_first_req
                     && size_buf_vld;

gated_clk_cell  x_size_buf_gated_clk (
  .clk_in                        (forever_cpuclk               ),
  .clk_out                       (size_buf_clk                 ),
  .external_en                   (1'b0                         ),
  .global_en                     (cp0_yy_clk_en                ),
  .local_en                      (size_buf_clk_en              ),
  .module_en                     (randclk_dp_size_buf_mod_en_w5),
  .pad_yy_gate_clk_en_b          (pad_yy_gate_clk_en_b         )
);





























assign lsu_base[31:0]     = {32{iu_lsu_oper_mux_en}} & iu_lsu_base[31:0];
assign lsu_wdata[31:0]    = {32{iu_lsu_oper_mux_en}} & iu_lsu_data[31:0];
assign lsu_size[1:0]      =  {2{iu_lsu_oper_mux_en}} & iu_lsu_size[1:0];
assign lsu_offset_sub     =     iu_lsu_oper_mux_en   & iu_lsu_offset_sub;
assign lsu_addr_1_0[1:0]  =  lsu_addr_1_0_pre_mux[1:0];
assign lsu_sign_exten     =     iu_lsu_oper_mux_en   & iu_lsu_sign_exten;

assign lsu_offset[15:0]   = {16{iu_lsu_oper_mux_en}} & iu_lsu_offset[15:0];

assign lsu_data[31:0]     = bmu_lsu_data[31:0];




parameter BYTE = 2'b00, HALF = 2'b01, WORD = 2'b10;
parameter LE = 2'b00;
parameter BE_V1 = 2'b10, BE_V2 = 2'b01;




















always @( lsu_offset[15:0]
       or lsu_size[1:0])
begin
  case(lsu_size[1:0])
    BYTE   : lsu_offset_17_0[17:0] = {2'b0,lsu_offset[15:0]};
    HALF   : lsu_offset_17_0[17:0] = {1'b0,lsu_offset[15:0],1'b0};
    WORD   : lsu_offset_17_0[17:0] = {lsu_offset[15:0],2'b0};
    default: lsu_offset_17_0[17:0] = 18'bx;
  endcase

end

assign lsu_offset_sub_post       = lsu_offset_sub;
assign lsu_addr_offset_pre[31:0] = {{14{lsu_offset_sub_post}},
                                   {18{lsu_offset_sub_post}} ^ lsu_offset_17_0[17:0]};
assign lsu_addr_offset[31:0] = {lsu_addr_offset_pre[31:2],
                                lsu_addr_offset_pre[1:0] | offset_low_2bit[1:0]};



assign lsu_iu_adder_src0[31:0] = lsu_base[31:0];
assign lsu_iu_adder_src1[31:0] = lsu_addr_offset[31:0];
assign lsu_iu_adder_carry_in   = lsu_offset_sub_post;
assign lsu_addr[31:0]          = lsu_iu_adder_src0[31:0] + lsu_iu_adder_src1[31:0] + lsu_iu_adder_carry_in;

assign lsu_sp_base_addr[31:0]  = iu_lsu_sp_base[31:0] + lsu_iu_adder_src1[31:0] + lsu_iu_adder_carry_in;





assign top_src0[32:0] = {1'b0,lsu_sp_base_addr[31:0]};
assign top_src1[32:0] = {1'b1,~cp0_lsu_sgtr[31:0]};

assign {top_check_pass,top_rst[31:0]} = top_src0[32:0] + top_src1[32:0] + 1'b1;

assign btm_src0[32:0] = {1'b0,lsu_sp_base_addr[31:0]};      
assign btm_src1[32:0] = {1'b1,~cp0_lsu_sgbr[31:0]};      

assign {btm_check_fail,btm_rst[31:0]} = btm_src0[32:0] + btm_src1[32:0] + 1'b1;


assign dp_ctrl_stack_check_fail = !top_check_pass || btm_check_fail;







assign lsu_bmu_store_error = 1'b0;





assign lsu_bmu_addr[31:0]      = lsu_addr_post[31:0];
assign lsu_bmu_size[1:0]       = lsu_size_post[1:0];
assign lsu_bmu_prot[3:0]       = {cru_lsu_acc_ca,
                                  mpu_lsu_acc_scu,
                                  cp0_yy_supv_mode_aft_dbg,
                                  !iu_lsu_lrw};

























assign lsu_bpop_second_req               = 1'b0;





assign lsu_addr_1_0_pre_mux[1:0]  = lsu_addr[1:0];

always @( lsu_base[1:0]
       or lsu_size[1:0])
begin
  case(lsu_size[1:0])
    WORD    : lsu_misalign = | lsu_base[1:0];
    HALF    : lsu_misalign = lsu_base[0];
    default : lsu_misalign = 1'b0;
  endcase

end

assign dp_unalign_addr_1_0[1:0] = lsu_addr_1_0[1:0];
assign dp_unalign_flop_addr_1_0[1:0] = lsu_unalign_addr_1_0_flop[1:0];

assign offset_low_2bit[1] = (unalign_dp_plus2_addr || unalign_dp_plus3_addr)
                            && !lsu_bpop_second_req;
assign offset_low_2bit[0] = (unalign_dp_plus1_addr || unalign_dp_plus3_addr)
                            && !lsu_bpop_second_req;


assign dp_ctrl_misalign = (!cp0_lsu_mm || iu_lsu_split_on) && lsu_misalign;
assign dp_ctrl_unalign  = cp0_lsu_mm && !iu_lsu_split_on && lsu_misalign;


assign lsu_size_word = lsu_size[1] && !lsu_size[0];
assign lsu_size_half = !lsu_size[1] && lsu_size[0];
assign dp_unalign_size_word = lsu_size_word;
assign dp_unalign_size_half = lsu_size_half;
assign dp_unalign_flop_size_word = lsu_unalign_size_flop[1] && !lsu_unalign_size_flop[0];
assign dp_unalign_flop_size_half = !lsu_unalign_size_flop[1] && lsu_unalign_size_flop[0];





assign lsu_addr_post_before_mask[31:0] = {lsu_addr[31:2], lsu_addr_1_0[1:0]};



assign lsu_size_post[1:0] = unalign_xx_split_on ? {unalign_dp_size_word, unalign_dp_size_half}
                                                : lsu_size[1:0];

assign lsu_addr_post_mask[1:0] = {!lsu_size_post[1], !lsu_size_post[1]};

assign lsu_addr_post_low_2bit[1:0] = lsu_addr_post_before_mask[1:0] & lsu_addr_post_mask[1:0]; 
assign lsu_addr_post[31:0] = {lsu_addr_post_before_mask[31:2], lsu_addr_post_low_2bit[1:0]}; 













assign lsu_bmu_write = lsu_inst_store && iu_lsu_ex_data_sel;
assign lsu_iu_store  = lsu_inst_store;

assign unalign_st_byte1_sel[3:0] = {unalign_dp_store_data_byte1_to_byte1,
                                    unalign_dp_store_data_byte2_to_byte1,
                                    unalign_dp_store_data_byte3_to_byte1,
                                    unalign_dp_store_data_byte4_to_byte1};

assign lsu_store_wdata_default[7:0] = 8'b0;


always @( lsu_addr_1_0[1:0]
       or unalign_st_byte1_sel[3:0]
       or cp0_yy_be_v2
       or lsu_size[1:0]
       or lsu_wdata[7:0]
       or lsu_wdata[31:8]
       or lsu_store_wdata_default[7:0]
       or cp0_yy_be_v1)
begin
  lsu_store_wdata[7:0]  = lsu_store_wdata_default[7:0];
  casez({unalign_st_byte1_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_size[1:0],lsu_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[31:24];
    {4'b0000,BE_V1,BYTE, 2'b11} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0000,BE_V1,HALF, 2'b1?} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0000,BE_V1,WORD, 2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0000,BE_V2,BYTE, 2'b00} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0000,BE_V2,HALF, 2'b0?} : lsu_store_wdata[7:0]  = lsu_wdata[15:8];
    {4'b0000,BE_V2,WORD, 2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[31:24];
    {4'b0000,LE   ,BYTE, 2'b00} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0000,LE   ,HALF, 2'b0?} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
    {4'b0000,LE   ,WORD, 2'b??} : lsu_store_wdata[7:0]  = lsu_wdata[7:0];
  endcase

end


assign unalign_st_byte2_sel[3:0] = {unalign_dp_store_data_byte1_to_byte2,
                                    unalign_dp_store_data_byte2_to_byte2,
                                    unalign_dp_store_data_byte3_to_byte2,
                                    unalign_dp_store_data_byte4_to_byte2};


always @( lsu_addr_1_0[1:0]
       or cp0_yy_be_v2
       or lsu_size[1:0]
       or lsu_wdata[7:0]
       or lsu_wdata[31:8]
       or lsu_store_wdata_default[7:0]
       or cp0_yy_be_v1
       or unalign_st_byte2_sel[3:0])
begin
  lsu_store_wdata[15:8]  = lsu_store_wdata_default[7:0];
  casez({unalign_st_byte2_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_size[1:0],lsu_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[31:24];
    {4'b0000,BE_V1,BYTE, 2'b10} : lsu_store_wdata[15:8]  = lsu_wdata[7:0];
    {4'b0000,BE_V1,HALF, 2'b1?} : lsu_store_wdata[15:8]  = lsu_wdata[15:8];
    {4'b0000,BE_V1,WORD, 2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[15:8];
    {4'b0000,BE_V2,BYTE, 2'b01} : lsu_store_wdata[15:8]  = lsu_wdata[7:0];
    {4'b0000,BE_V2,HALF, 2'b0?} : lsu_store_wdata[15:8]  = lsu_wdata[7:0];
    {4'b0000,BE_V2,WORD, 2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[23:16];
    {4'b0000,LE   ,BYTE, 2'b01} : lsu_store_wdata[15:8]  = lsu_wdata[7:0];
    {4'b0000,LE   ,HALF, 2'b0?} : lsu_store_wdata[15:8]  = lsu_wdata[15:8];
    {4'b0000,LE   ,WORD, 2'b??} : lsu_store_wdata[15:8]  = lsu_wdata[15:8];
  endcase

end


assign unalign_st_byte3_sel[3:0] = {unalign_dp_store_data_byte1_to_byte3,
                                    unalign_dp_store_data_byte2_to_byte3,
                                    unalign_dp_store_data_byte3_to_byte3,
                                    unalign_dp_store_data_byte4_to_byte3};


always @( lsu_addr_1_0[1:0]
       or cp0_yy_be_v2
       or unalign_st_byte3_sel[3:0]
       or lsu_size[1:0]
       or lsu_wdata[7:0]
       or lsu_wdata[31:8]
       or lsu_store_wdata_default[7:0]
       or cp0_yy_be_v1)
begin
  lsu_store_wdata[23:16]  = lsu_store_wdata_default[7:0];
  casez({unalign_st_byte3_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_size[1:0],lsu_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_store_wdata[23:16] = lsu_wdata[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_store_wdata[23:16] = lsu_wdata[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_store_wdata[23:16] = lsu_wdata[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_store_wdata[23:16] = lsu_wdata[31:24];
    {4'b0000,BE_V1,BYTE, 2'b01} : lsu_store_wdata[23:16] = lsu_wdata[7:0];
    {4'b0000,BE_V1,HALF, 2'b0?} : lsu_store_wdata[23:16] = lsu_wdata[7:0];
    {4'b0000,BE_V1,WORD, 2'b??} : lsu_store_wdata[23:16] = lsu_wdata[23:16];
    {4'b0000,BE_V2,BYTE, 2'b10} : lsu_store_wdata[23:16] = lsu_wdata[7:0];
    {4'b0000,BE_V2,HALF, 2'b1?} : lsu_store_wdata[23:16] = lsu_wdata[15:8];
    {4'b0000,BE_V2,WORD, 2'b??} : lsu_store_wdata[23:16] = lsu_wdata[15:8];
    {4'b0000,LE   ,BYTE, 2'b10} : lsu_store_wdata[23:16] = lsu_wdata[7:0];
    {4'b0000,LE   ,HALF, 2'b1?} : lsu_store_wdata[23:16] = lsu_wdata[7:0];
    {4'b0000,LE   ,WORD, 2'b??} : lsu_store_wdata[23:16] = lsu_wdata[23:16];
  endcase

end


assign unalign_st_byte4_sel[3:0] = {unalign_dp_store_data_byte1_to_byte4,
                                    unalign_dp_store_data_byte2_to_byte4,
                                    unalign_dp_store_data_byte3_to_byte4,
                                    unalign_dp_store_data_byte4_to_byte4};


always @( lsu_addr_1_0[1:0]
       or cp0_yy_be_v2
       or lsu_size[1:0]
       or lsu_wdata[7:0]
       or lsu_wdata[31:8]
       or lsu_store_wdata_default[7:0]
       or cp0_yy_be_v1
       or unalign_st_byte4_sel[3:0])
begin
  lsu_store_wdata[31:24]  = lsu_store_wdata_default[7:0];
  casez({unalign_st_byte4_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_size[1:0],lsu_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_store_wdata[31:24] = lsu_wdata[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_store_wdata[31:24] = lsu_wdata[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_store_wdata[31:24] = lsu_wdata[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_store_wdata[31:24] = lsu_wdata[31:24];
    {4'b0000,BE_V1,BYTE, 2'b00} : lsu_store_wdata[31:24] = lsu_wdata[7:0];
    {4'b0000,BE_V1,HALF, 2'b0?} : lsu_store_wdata[31:24] = lsu_wdata[15:8];
    {4'b0000,BE_V1,WORD, 2'b??} : lsu_store_wdata[31:24] = lsu_wdata[31:24];
    {4'b0000,BE_V2,BYTE, 2'b11} : lsu_store_wdata[31:24] = lsu_wdata[7:0];
    {4'b0000,BE_V2,HALF, 2'b1?} : lsu_store_wdata[31:24] = lsu_wdata[7:0];
    {4'b0000,BE_V2,WORD, 2'b??} : lsu_store_wdata[31:24] = lsu_wdata[7:0];
    {4'b0000,LE   ,BYTE, 2'b11} : lsu_store_wdata[31:24] = lsu_wdata[7:0];
    {4'b0000,LE   ,HALF, 2'b1?} : lsu_store_wdata[31:24] = lsu_wdata[15:8];
    {4'b0000,LE   ,WORD, 2'b??} : lsu_store_wdata[31:24] = lsu_wdata[31:24];
  endcase

end










assign store_buffer_clk_en = store_buffer_updt;

gated_clk_cell  x_store_buffer_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (store_buffer_clk    ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (store_buffer_clk_en ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);








assign store_buffer_updt = ctrl_dp_store_buffer_updt;

always @( store_buffer_updt
       or store_data_buffer[31:0]
       or lsu_store_wdata[31:0])
begin
  if(store_buffer_updt)
    store_data_buffer_updt_val[31:0] = lsu_store_wdata[31:0];
  else
    store_data_buffer_updt_val[31:0] = store_data_buffer[31:0];

end

always @(posedge store_buffer_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    store_data_buffer[31:0] <= 32'b0;
  else 
    store_data_buffer[31:0] <= store_data_buffer_updt_val[31:0];
end

assign lsu_bmu_wdata[31:0] = store_data_buffer[31:0];



















assign buffer_ldst_info[4:0] = {lsu_sign_exten,
                                lsu_size[1:0],
                                lsu_addr_1_0[1:0]};

always @(posedge size_buf_clk)
begin
  if(size_buf_en)
    ldst_size_buffer[4:0] <= buffer_ldst_info[4:0];
end


assign lsu_wb_addr_1_0[1:0] = ldst_size_buffer[1:0];
assign lsu_wb_size[1:0]     = ldst_size_buffer[3:2];
assign lsu_wb_sign_exten    = ldst_size_buffer[4];
assign lsu_unalign_addr_1_0_flop[1:0] = lsu_wb_addr_1_0[1:0];
assign lsu_unalign_size_flop[1:0] = lsu_wb_size[1:0];



assign unalign_ld_byte1_sel[3:0] = {unalign_dp_load_data_byte1_to_byte1,
                                    unalign_dp_load_data_byte2_to_byte1, 
                                    unalign_dp_load_data_byte3_to_byte1,
                                    unalign_dp_load_data_byte4_to_byte1};

assign lsu_sized_data_default[7:0] = 8'b0;



always @( lsu_wb_size[1:0]
       or unalign_ld_byte1_sel[3:0]
       or lsu_wb_addr_1_0[1:0]
       or cp0_yy_be_v2
       or lsu_data[31:16]
       or cp0_yy_be_v1
       or lsu_sized_data_default[7:0]
       or lsu_data[15:0])
begin
  lsu_sized_data[7:0]  = lsu_sized_data_default[7:0];
  casez({unalign_ld_byte1_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_wb_size[1:0],lsu_wb_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_sized_data[7:0]  = lsu_data[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_sized_data[7:0]  = lsu_data[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_sized_data[7:0]  = lsu_data[31:24];
    {4'b0000,BE_V1,BYTE, 2'b00} : lsu_sized_data[7:0]  = lsu_data[31:24];
    {4'b0000,BE_V1,BYTE, 2'b01} : lsu_sized_data[7:0]  = lsu_data[23:16];
    {4'b0000,BE_V1,BYTE, 2'b10} : lsu_sized_data[7:0]  = lsu_data[15:8];
    {4'b0000,BE_V1,BYTE, 2'b11} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0000,BE_V1,HALF, 2'b0?} : lsu_sized_data[7:0]  = lsu_data[23:16];
    {4'b0000,BE_V1,HALF, 2'b1?} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0000,BE_V1,WORD, 2'b??} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0000,BE_V2,BYTE, 2'b00} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0000,BE_V2,BYTE, 2'b01} : lsu_sized_data[7:0]  = lsu_data[15:8];
    {4'b0000,BE_V2,BYTE, 2'b10} : lsu_sized_data[7:0]  = lsu_data[23:16];
    {4'b0000,BE_V2,BYTE, 2'b11} : lsu_sized_data[7:0]  = lsu_data[31:24];
    {4'b0000,BE_V2,HALF, 2'b0?} : lsu_sized_data[7:0]  = lsu_data[15:8];
    {4'b0000,BE_V2,HALF, 2'b1?} : lsu_sized_data[7:0]  = lsu_data[31:24];
    {4'b0000,BE_V2,WORD, 2'b??} : lsu_sized_data[7:0]  = lsu_data[31:24];
    {4'b0000,LE   ,BYTE, 2'b00} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0000,LE   ,BYTE, 2'b01} : lsu_sized_data[7:0]  = lsu_data[15:8];
    {4'b0000,LE   ,BYTE, 2'b10} : lsu_sized_data[7:0]  = lsu_data[23:16];
    {4'b0000,LE   ,BYTE, 2'b11} : lsu_sized_data[7:0]  = lsu_data[31:24];
    {4'b0000,LE   ,HALF, 2'b0?} : lsu_sized_data[7:0]  = lsu_data[7:0];
    {4'b0000,LE   ,HALF, 2'b1?} : lsu_sized_data[7:0]  = lsu_data[23:16];
    {4'b0000,LE   ,WORD, 2'b??} : lsu_sized_data[7:0]  = lsu_data[7:0];
  endcase

end


assign unalign_ld_byte2_sel[3:0] = {unalign_dp_load_data_byte1_to_byte2,
                                    unalign_dp_load_data_byte2_to_byte2,
                                    unalign_dp_load_data_byte3_to_byte2,
                                    unalign_dp_load_data_byte4_to_byte2};


always @( lsu_wb_size[1:0]
       or lsu_wb_addr_1_0[1:0]
       or cp0_yy_be_v2
       or lsu_data[31:16]
       or cp0_yy_be_v1
       or lsu_sized_data_default[7:0]
       or lsu_data[15:0]
       or unalign_ld_byte2_sel[3:0])
begin
  lsu_sized_data[15:8]  = lsu_sized_data_default[7:0];
  casez({unalign_ld_byte2_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_wb_size[1:0],lsu_wb_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_sized_data[15:8] = lsu_data[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_sized_data[15:8] = lsu_data[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_sized_data[15:8] = lsu_data[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_sized_data[15:8] = lsu_data[31:24];
    {4'b0000,BE_V1,HALF, 2'b0?} : lsu_sized_data[15:8] = lsu_data[31:24];
    {4'b0000,BE_V1,HALF, 2'b1?} : lsu_sized_data[15:8] = lsu_data[15:8];
    {4'b0000,BE_V1,WORD, 2'b??} : lsu_sized_data[15:8] = lsu_data[15:8];
    {4'b0000,BE_V2,HALF, 2'b0?} : lsu_sized_data[15:8] = lsu_data[7:0];
    {4'b0000,BE_V2,HALF, 2'b1?} : lsu_sized_data[15:8] = lsu_data[23:16];
    {4'b0000,BE_V2,WORD, 2'b??} : lsu_sized_data[15:8] = lsu_data[23:16];
    {4'b0000,LE   ,HALF, 2'b0?} : lsu_sized_data[15:8] = lsu_data[15:8];
    {4'b0000,LE   ,HALF, 2'b1?} : lsu_sized_data[15:8] = lsu_data[31:24];
    {4'b0000,LE   ,WORD, 2'b??} : lsu_sized_data[15:8] = lsu_data[15:8];
  endcase

end


assign unalign_ld_byte3_sel[3:0] = {unalign_dp_load_data_byte1_to_byte3,
                                    unalign_dp_load_data_byte2_to_byte3,
                                    unalign_dp_load_data_byte3_to_byte3,
                                    unalign_dp_load_data_byte4_to_byte3};


always @( lsu_wb_size[1:0]
       or lsu_wb_addr_1_0[1:0]
       or cp0_yy_be_v2
       or lsu_data[31:16]
       or cp0_yy_be_v1
       or lsu_sized_data_default[7:0]
       or unalign_ld_byte3_sel[3:0]
       or lsu_data[15:0])
begin
  lsu_sized_data[23:16]  = lsu_sized_data_default[7:0];
  casez({unalign_ld_byte3_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_wb_size[1:0],lsu_wb_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_sized_data[23:16] = lsu_data[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_sized_data[23:16] = lsu_data[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_sized_data[23:16] = lsu_data[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_sized_data[23:16] = lsu_data[31:24];
    {4'b0000,BE_V1,WORD ,2'b??} : lsu_sized_data[23:16] = lsu_data[23:16];
    {4'b0000,BE_V2,WORD ,2'b??} : lsu_sized_data[23:16] = lsu_data[15:8];
    {4'b0000,LE   ,WORD ,2'b??} : lsu_sized_data[23:16] = lsu_data[23:16];
  endcase

end


assign unalign_ld_byte4_sel[3:0] = {unalign_dp_load_data_byte1_to_byte4,
                                    unalign_dp_load_data_byte2_to_byte4,
                                    unalign_dp_load_data_byte3_to_byte4, 
                                    unalign_dp_load_data_byte4_to_byte4};


always @( lsu_wb_size[1:0]
       or lsu_wb_addr_1_0[1:0]
       or cp0_yy_be_v2
       or lsu_data[31:16]
       or cp0_yy_be_v1
       or lsu_sized_data_default[7:0]
       or unalign_ld_byte4_sel[3:0]
       or lsu_data[15:0])
begin
  lsu_sized_data[31:24]  = lsu_sized_data_default[7:0];
  casez({unalign_ld_byte4_sel[3:0],cp0_yy_be_v1,cp0_yy_be_v2,lsu_wb_size[1:0],lsu_wb_addr_1_0[1:0]})
    {4'b1000,2'b??,2'b??,2'b??} : lsu_sized_data[31:24] = lsu_data[7:0];
    {4'b0100,2'b??,2'b??,2'b??} : lsu_sized_data[31:24] = lsu_data[15:8];
    {4'b0010,2'b??,2'b??,2'b??} : lsu_sized_data[31:24] = lsu_data[23:16];
    {4'b0001,2'b??,2'b??,2'b??} : lsu_sized_data[31:24] = lsu_data[31:24];
    {4'b0000,BE_V1,WORD ,2'b??} : lsu_sized_data[31:24] = lsu_data[31:24];
    {4'b0000,BE_V2,WORD ,2'b??} : lsu_sized_data[31:24] = lsu_data[7:0];
    {4'b0000,LE   ,WORD ,2'b??} : lsu_sized_data[31:24] = lsu_data[31:24];
  endcase

end




always @( lsu_wb_size[1:0]
       or lsu_sized_data[31:0]
       or lsu_wb_sign_exten)
begin
  case({lsu_wb_sign_exten,lsu_wb_size[1:0]})
    {1'b1,BYTE} : lsu_data_sign_extd[31:0] = {{24{lsu_sized_data[7]}},lsu_sized_data[7:0]};
    {1'b1,HALF} : lsu_data_sign_extd[31:0] = {{16{lsu_sized_data[15]}},lsu_sized_data[15:0]};
    default     : lsu_data_sign_extd[31:0] = lsu_sized_data[31:0];
  endcase

end


assign unalign_byte1_wen = | unalign_ld_byte1_sel[3:0];
assign unalign_byte2_wen = | unalign_ld_byte2_sel[3:0];
assign load_size_half    = !lsu_wb_size[1] && lsu_wb_size[0];
assign unalign_byte3_wen = (| unalign_ld_byte3_sel[3:0]) || (load_size_half && unalign_byte2_wen);
assign unalign_byte4_wen = (| unalign_ld_byte4_sel[3:0]) || (load_size_half && unalign_byte2_wen);

assign gpr_byte_wen[3:0] =  {unalign_byte4_wen, unalign_byte3_wen,
                             unalign_byte2_wen, unalign_byte1_wen};

always @(posedge unalign_buf_clk)
begin
  if(unalign_dp_buffer_wen)
    begin
      if(unalign_byte4_wen)
        unalign_data_buffer[23:0] <= lsu_data_sign_extd[31:8];
      else
        unalign_data_buffer[23:0] <= lsu_data_sign_extd[23:0];
    end
end


assign unalign_data_buffer_poled[23:0]   = unalign_data_buffer[23:0];


always @( unalign_data_buffer_poled[23:0]
       or lsu_data_sign_extd[31:0]
       or gpr_byte_wen[3:0])
begin
  case({gpr_byte_wen[3:0]})
    4'b0001 : load_write_data[31:0] = {unalign_data_buffer_poled[23:0], lsu_data_sign_extd[7:0]};
    4'b0011 : load_write_data[31:0] = {unalign_data_buffer_poled[23:8], lsu_data_sign_extd[15:0]};
    4'b0111 : load_write_data[31:0] = {unalign_data_buffer_poled[23:16],lsu_data_sign_extd[23:0]};
    4'b1000 : load_write_data[31:0] = {lsu_data_sign_extd[31:24], unalign_data_buffer_poled[23:0]};
    4'b1100 : load_write_data[31:0] = {lsu_data_sign_extd[31:16], unalign_data_buffer_poled[15:0]};
    4'b1110 : load_write_data[31:0] = {lsu_data_sign_extd[31:8],  unalign_data_buffer_poled[7:0]};
    default : load_write_data[31:0] = lsu_data_sign_extd[31:0];
  endcase

end

assign lsu_iu_data[31:0] = load_write_data[31:0];

assign lsu_iu_wb_load_data[31:0] = lsu_data_sign_extd[31:0];








assign lsu_had_st         = lsu_inst_store;
assign lsu_had_addr[31:0] = lsu_bmu_addr[31:0];


endmodule



























module nm_lsu_randclk(
  randclk_dp_size_buf_mod_en_w5,
  randclk_dp_unalign_buf_mod_en_w24
);


output       randclk_dp_size_buf_mod_en_w5;    
output       randclk_dp_unalign_buf_mod_en_w24; 




wire         randclk_dp_size_buf_mod_en_w5;    
wire         randclk_dp_unalign_buf_mod_en_w24; 






assign randclk_dp_unalign_buf_mod_en_w24 = 1'b0;

assign randclk_dp_size_buf_mod_en_w5 = 1'b0;



endmodule

























module nm_lsu_top(
  bmu_lsu_acc_err,
  bmu_lsu_bstack_chk_fail,
  bmu_lsu_data,
  bmu_lsu_data_vld,
  bmu_lsu_grnt,
  bmu_lsu_trans_cmplt,
  cp0_lsu_mm,
  cp0_lsu_sgbr,
  cp0_lsu_sge,
  cp0_lsu_sgp,
  cp0_lsu_sgtr,
  cp0_yy_be,
  cp0_yy_be_v1,
  cp0_yy_be_v2,
  cp0_yy_clk_en,
  cp0_yy_supv_mode,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  forever_cpuclk,
  iu_lsu_base,
  iu_lsu_data,
  iu_lsu_ex_data_sel,
  iu_lsu_ex_sel,
  iu_lsu_inst_store,
  iu_lsu_lrw,
  iu_lsu_lrw_no_fast_retire,
  iu_lsu_offset,
  iu_lsu_offset_sub,
  iu_lsu_oper_mux_en,
  iu_lsu_sign_exten,
  iu_lsu_size,
  iu_lsu_sp_base,
  iu_lsu_split_on,
  iu_lsu_src0_sp,
  iu_lsu_stall_without_hready,
  iu_lsu_wb_ldst,
  iu_yy_xx_flush,
  lsu_bmu_addr,
  lsu_bmu_addr_check_fail,
  lsu_bmu_idle,
  lsu_bmu_prot,
  lsu_bmu_req,
  lsu_bmu_req_without_cmplt,
  lsu_bmu_sg_chk_fail,
  lsu_bmu_size,
  lsu_bmu_store_error,
  lsu_bmu_wdata,
  lsu_bmu_wfd1,
  lsu_bmu_write,
  lsu_had_addr,
  lsu_had_addr_vld,
  lsu_had_ex_cmplt,
  lsu_had_st,
  lsu_iu_addr_check_fail,
  lsu_iu_data,
  lsu_iu_data_vld,
  lsu_iu_expt_vec,
  lsu_iu_expt_vld,
  lsu_iu_fast_retire,
  lsu_iu_req,
  lsu_iu_stall,
  lsu_iu_store,
  lsu_iu_trans_acc_err,
  lsu_iu_wb_acc_err,
  lsu_iu_wb_bstack_chk_fail,
  lsu_iu_wb_cmplt,
  lsu_iu_wb_data_vld,
  lsu_iu_wb_load_data,
  mpu_lsu_acc_scu,
  pad_yy_gate_clk_en_b
);


input           bmu_lsu_acc_err;                     
input           bmu_lsu_bstack_chk_fail;             
input   [31:0]  bmu_lsu_data;                        
input           bmu_lsu_data_vld;                    
input           bmu_lsu_grnt;                        
input           bmu_lsu_trans_cmplt;                 
input           cp0_lsu_mm;                          
input   [31:0]  cp0_lsu_sgbr;                        
input           cp0_lsu_sge;                         
input           cp0_lsu_sgp;                         
input   [31:0]  cp0_lsu_sgtr;                        
input           cp0_yy_be;                           
input           cp0_yy_be_v1;                        
input           cp0_yy_be_v2;                        
input           cp0_yy_clk_en;                       
input           cp0_yy_supv_mode;                    
input           cp0_yy_supv_mode_aft_dbg;            
input           cpurst_b;                            
input           forever_cpuclk;                      
input   [31:0]  iu_lsu_base;                         
input   [31:0]  iu_lsu_data;                         
input           iu_lsu_ex_data_sel;                  
input           iu_lsu_ex_sel;                       
input           iu_lsu_inst_store;                   
input           iu_lsu_lrw;                          
input           iu_lsu_lrw_no_fast_retire;           
input   [15:0]  iu_lsu_offset;                       
input           iu_lsu_offset_sub;                   
input           iu_lsu_oper_mux_en;                  
input           iu_lsu_sign_exten;                   
input   [1 :0]  iu_lsu_size;                         
input   [31:0]  iu_lsu_sp_base;                      
input           iu_lsu_split_on;                     
input           iu_lsu_src0_sp;                      
input           iu_lsu_stall_without_hready;         
input           iu_lsu_wb_ldst;                      
input           iu_yy_xx_flush;                      
input           mpu_lsu_acc_scu;                     
input           pad_yy_gate_clk_en_b;                
output  [31:0]  lsu_bmu_addr;                        
output          lsu_bmu_addr_check_fail;             
output          lsu_bmu_idle;                        
output  [3 :0]  lsu_bmu_prot;                        
output          lsu_bmu_req;                         
output          lsu_bmu_req_without_cmplt;           
output          lsu_bmu_sg_chk_fail;                 
output  [1 :0]  lsu_bmu_size;                        
output          lsu_bmu_store_error;                 
output  [31:0]  lsu_bmu_wdata;                       
output          lsu_bmu_wfd1;                        
output          lsu_bmu_write;                       
output  [31:0]  lsu_had_addr;                        
output          lsu_had_addr_vld;                    
output          lsu_had_ex_cmplt;                    
output          lsu_had_st;                          
output          lsu_iu_addr_check_fail;              
output  [31:0]  lsu_iu_data;                         
output          lsu_iu_data_vld;                     
output  [4 :0]  lsu_iu_expt_vec;                     
output          lsu_iu_expt_vld;                     
output          lsu_iu_fast_retire;                  
output          lsu_iu_req;                          
output          lsu_iu_stall;                        
output          lsu_iu_store;                        
output          lsu_iu_trans_acc_err;                
output          lsu_iu_wb_acc_err;                   
output          lsu_iu_wb_bstack_chk_fail;           
output          lsu_iu_wb_cmplt;                     
output          lsu_iu_wb_data_vld;                  
output  [31:0]  lsu_iu_wb_load_data;                 




wire            bmu_lsu_acc_err;                     
wire            bmu_lsu_bstack_chk_fail;             
wire    [31:0]  bmu_lsu_data;                        
wire            bmu_lsu_data_vld;                    
wire            bmu_lsu_grnt;                        
wire            bmu_lsu_trans_cmplt;                 
wire            cp0_lsu_mm;                          
wire    [31:0]  cp0_lsu_sgbr;                        
wire            cp0_lsu_sge;                         
wire            cp0_lsu_sgp;                         
wire    [31:0]  cp0_lsu_sgtr;                        
wire            cp0_yy_be;                           
wire            cp0_yy_be_v1;                        
wire            cp0_yy_be_v2;                        
wire            cp0_yy_clk_en;                       
wire            cp0_yy_supv_mode;                    
wire            cp0_yy_supv_mode_aft_dbg;            
wire            cpurst_b;                            
wire            ctrl_dp_ldst_info_buf_reuse;         
wire            ctrl_dp_ldst_req_grnt;               
wire            ctrl_dp_store_buffer_updt;           
wire            ctrl_top_req_en;                     
wire            ctrl_unalign_ldst_unalign;           
wire            ctrl_unalign_req_grant;              
wire            ctrl_unalign_store;                  
wire            ctrl_unalign_trans_cmplt;            
wire            dp_ctrl_misalign;                    
wire            dp_ctrl_stack_check_fail;            
wire            dp_ctrl_unalign;                     
wire    [1 :0]  dp_unalign_addr_1_0;                 
wire    [1 :0]  dp_unalign_flop_addr_1_0;            
wire            dp_unalign_flop_size_half;           
wire            dp_unalign_flop_size_word;           
wire            dp_unalign_size_half;                
wire            dp_unalign_size_word;                
wire            forever_cpuclk;                      
wire    [31:0]  iu_lsu_base;                         
wire    [31:0]  iu_lsu_data;                         
wire            iu_lsu_ex_data_sel;                  
wire            iu_lsu_ex_sel;                       
wire            iu_lsu_inst_store;                   
wire            iu_lsu_lrw;                          
wire            iu_lsu_lrw_no_fast_retire;           
wire    [15:0]  iu_lsu_offset;                       
wire            iu_lsu_offset_sub;                   
wire            iu_lsu_oper_mux_en;                  
wire            iu_lsu_sign_exten;                   
wire    [1 :0]  iu_lsu_size;                         
wire    [31:0]  iu_lsu_sp_base;                      
wire            iu_lsu_split_on;                     
wire            iu_lsu_src0_sp;                      
wire            iu_lsu_stall_without_hready;         
wire            iu_lsu_wb_ldst;                      
wire            iu_yy_xx_flush;                      
wire    [31:0]  lsu_bmu_addr;                        
wire            lsu_bmu_addr_check_fail;             
wire            lsu_bmu_idle;                        
wire    [3 :0]  lsu_bmu_prot;                        
wire            lsu_bmu_req;                         
wire            lsu_bmu_req_without_cmplt;           
wire            lsu_bmu_sg_chk_fail;                 
wire    [1 :0]  lsu_bmu_size;                        
wire            lsu_bmu_store_error;                 
wire    [31:0]  lsu_bmu_wdata;                       
wire            lsu_bmu_wfd1;                        
wire            lsu_bmu_write;                       
wire    [31:0]  lsu_had_addr;                        
wire            lsu_had_addr_vld;                    
wire            lsu_had_ex_cmplt;                    
wire            lsu_had_st;                          
wire            lsu_inst_store;                      
wire            lsu_iu_addr_check_fail;              
wire    [31:0]  lsu_iu_data;                         
wire            lsu_iu_data_vld;                     
wire    [4 :0]  lsu_iu_expt_vec;                     
wire            lsu_iu_expt_vld;                     
wire            lsu_iu_fast_retire;                  
wire            lsu_iu_req;                          
wire            lsu_iu_stall;                        
wire            lsu_iu_store;                        
wire            lsu_iu_trans_acc_err;                
wire            lsu_iu_wb_acc_err;                   
wire            lsu_iu_wb_bstack_chk_fail;           
wire            lsu_iu_wb_cmplt;                     
wire            lsu_iu_wb_data_vld;                  
wire    [31:0]  lsu_iu_wb_load_data;                 
wire            mpu_lsu_acc_scu;                     
wire            pad_yy_gate_clk_en_b;                
wire            randclk_dp_size_buf_mod_en_w5;       
wire            randclk_dp_unalign_buf_mod_en_w24;   
wire            sm_clk;                              
wire            top_sm_clk_en;                       
wire            unalign_ctrl_not_last_beat;          
wire            unalign_ctrl_stall;                  
wire            unalign_dp_buffer_wen;               
wire            unalign_dp_first_req;                
wire            unalign_dp_load_data_byte1_to_byte1; 
wire            unalign_dp_load_data_byte1_to_byte2; 
wire            unalign_dp_load_data_byte1_to_byte3; 
wire            unalign_dp_load_data_byte1_to_byte4; 
wire            unalign_dp_load_data_byte2_to_byte1; 
wire            unalign_dp_load_data_byte2_to_byte2; 
wire            unalign_dp_load_data_byte2_to_byte3; 
wire            unalign_dp_load_data_byte2_to_byte4; 
wire            unalign_dp_load_data_byte3_to_byte1; 
wire            unalign_dp_load_data_byte3_to_byte2; 
wire            unalign_dp_load_data_byte3_to_byte3; 
wire            unalign_dp_load_data_byte3_to_byte4; 
wire            unalign_dp_load_data_byte4_to_byte1; 
wire            unalign_dp_load_data_byte4_to_byte2; 
wire            unalign_dp_load_data_byte4_to_byte3; 
wire            unalign_dp_load_data_byte4_to_byte4; 
wire            unalign_dp_plus1_addr;               
wire            unalign_dp_plus2_addr;               
wire            unalign_dp_plus3_addr;               
wire            unalign_dp_size_half;                
wire            unalign_dp_size_word;                
wire            unalign_dp_store_data_byte1_to_byte1; 
wire            unalign_dp_store_data_byte1_to_byte2; 
wire            unalign_dp_store_data_byte1_to_byte3; 
wire            unalign_dp_store_data_byte1_to_byte4; 
wire            unalign_dp_store_data_byte2_to_byte1; 
wire            unalign_dp_store_data_byte2_to_byte2; 
wire            unalign_dp_store_data_byte2_to_byte3; 
wire            unalign_dp_store_data_byte2_to_byte4; 
wire            unalign_dp_store_data_byte3_to_byte1; 
wire            unalign_dp_store_data_byte3_to_byte2; 
wire            unalign_dp_store_data_byte3_to_byte3; 
wire            unalign_dp_store_data_byte3_to_byte4; 
wire            unalign_dp_store_data_byte4_to_byte1; 
wire            unalign_dp_store_data_byte4_to_byte2; 
wire            unalign_dp_store_data_byte4_to_byte3; 
wire            unalign_dp_store_data_byte4_to_byte4; 
wire            unalign_top_clk_en;                  
wire            unalign_xx_split_on;                 


assign top_sm_clk_en = ctrl_top_req_en || unalign_top_clk_en;

gated_clk_cell  x_sm_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sm_clk              ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (top_sm_clk_en       ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);


















nm_lsu_dp  x_nm_lsu_dp (
  .bmu_lsu_data                         (bmu_lsu_data                        ),
  .cp0_lsu_mm                           (cp0_lsu_mm                          ),
  .cp0_lsu_sgbr                         (cp0_lsu_sgbr                        ),
  .cp0_lsu_sgtr                         (cp0_lsu_sgtr                        ),
  .cp0_yy_be_v1                         (cp0_yy_be_v1                        ),
  .cp0_yy_be_v2                         (cp0_yy_be_v2                        ),
  .cp0_yy_clk_en                        (cp0_yy_clk_en                       ),
  .cp0_yy_supv_mode_aft_dbg             (cp0_yy_supv_mode_aft_dbg            ),
  .cpurst_b                             (cpurst_b                            ),
  .cru_lsu_acc_ca                       (1'b0                                ),
  .ctrl_dp_ldst_info_buf_reuse          (ctrl_dp_ldst_info_buf_reuse         ),
  .ctrl_dp_ldst_req_grnt                (ctrl_dp_ldst_req_grnt               ),
  .ctrl_dp_store_buffer_updt            (ctrl_dp_store_buffer_updt           ),
  .dp_ctrl_misalign                     (dp_ctrl_misalign                    ),
  .dp_ctrl_stack_check_fail             (dp_ctrl_stack_check_fail            ),
  .dp_ctrl_unalign                      (dp_ctrl_unalign                     ),
  .dp_unalign_addr_1_0                  (dp_unalign_addr_1_0                 ),
  .dp_unalign_flop_addr_1_0             (dp_unalign_flop_addr_1_0            ),
  .dp_unalign_flop_size_half            (dp_unalign_flop_size_half           ),
  .dp_unalign_flop_size_word            (dp_unalign_flop_size_word           ),
  .dp_unalign_size_half                 (dp_unalign_size_half                ),
  .dp_unalign_size_word                 (dp_unalign_size_word                ),
  .forever_cpuclk                       (forever_cpuclk                      ),
  .iu_lsu_base                          (iu_lsu_base                         ),
  .iu_lsu_data                          (iu_lsu_data                         ),
  .iu_lsu_ex_data_sel                   (iu_lsu_ex_data_sel                  ),
  .iu_lsu_lrw                           (iu_lsu_lrw                          ),
  .iu_lsu_offset                        (iu_lsu_offset                       ),
  .iu_lsu_offset_sub                    (iu_lsu_offset_sub                   ),
  .iu_lsu_oper_mux_en                   (iu_lsu_oper_mux_en                  ),
  .iu_lsu_sign_exten                    (iu_lsu_sign_exten                   ),
  .iu_lsu_size                          (iu_lsu_size                         ),
  .iu_lsu_sp_base                       (iu_lsu_sp_base                      ),
  .iu_lsu_split_on                      (iu_lsu_split_on                     ),
  .lsu_bmu_addr                         (lsu_bmu_addr                        ),
  .lsu_bmu_prot                         (lsu_bmu_prot                        ),
  .lsu_bmu_size                         (lsu_bmu_size                        ),
  .lsu_bmu_store_error                  (lsu_bmu_store_error                 ),
  .lsu_bmu_wdata                        (lsu_bmu_wdata                       ),
  .lsu_bmu_write                        (lsu_bmu_write                       ),
  .lsu_had_addr                         (lsu_had_addr                        ),
  .lsu_had_st                           (lsu_had_st                          ),
  .lsu_inst_store                       (lsu_inst_store                      ),
  .lsu_iu_data                          (lsu_iu_data                         ),
  .lsu_iu_store                         (lsu_iu_store                        ),
  .lsu_iu_wb_load_data                  (lsu_iu_wb_load_data                 ),
  .mpu_lsu_acc_scu                      (mpu_lsu_acc_scu                     ),
  .pad_yy_gate_clk_en_b                 (pad_yy_gate_clk_en_b                ),
  .randclk_dp_size_buf_mod_en_w5        (randclk_dp_size_buf_mod_en_w5       ),
  .randclk_dp_unalign_buf_mod_en_w24    (randclk_dp_unalign_buf_mod_en_w24   ),
  .unalign_dp_buffer_wen                (unalign_dp_buffer_wen               ),
  .unalign_dp_first_req                 (unalign_dp_first_req                ),
  .unalign_dp_load_data_byte1_to_byte1  (unalign_dp_load_data_byte1_to_byte1 ),
  .unalign_dp_load_data_byte1_to_byte2  (unalign_dp_load_data_byte1_to_byte2 ),
  .unalign_dp_load_data_byte1_to_byte3  (unalign_dp_load_data_byte1_to_byte3 ),
  .unalign_dp_load_data_byte1_to_byte4  (unalign_dp_load_data_byte1_to_byte4 ),
  .unalign_dp_load_data_byte2_to_byte1  (unalign_dp_load_data_byte2_to_byte1 ),
  .unalign_dp_load_data_byte2_to_byte2  (unalign_dp_load_data_byte2_to_byte2 ),
  .unalign_dp_load_data_byte2_to_byte3  (unalign_dp_load_data_byte2_to_byte3 ),
  .unalign_dp_load_data_byte2_to_byte4  (unalign_dp_load_data_byte2_to_byte4 ),
  .unalign_dp_load_data_byte3_to_byte1  (unalign_dp_load_data_byte3_to_byte1 ),
  .unalign_dp_load_data_byte3_to_byte2  (unalign_dp_load_data_byte3_to_byte2 ),
  .unalign_dp_load_data_byte3_to_byte3  (unalign_dp_load_data_byte3_to_byte3 ),
  .unalign_dp_load_data_byte3_to_byte4  (unalign_dp_load_data_byte3_to_byte4 ),
  .unalign_dp_load_data_byte4_to_byte1  (unalign_dp_load_data_byte4_to_byte1 ),
  .unalign_dp_load_data_byte4_to_byte2  (unalign_dp_load_data_byte4_to_byte2 ),
  .unalign_dp_load_data_byte4_to_byte3  (unalign_dp_load_data_byte4_to_byte3 ),
  .unalign_dp_load_data_byte4_to_byte4  (unalign_dp_load_data_byte4_to_byte4 ),
  .unalign_dp_plus1_addr                (unalign_dp_plus1_addr               ),
  .unalign_dp_plus2_addr                (unalign_dp_plus2_addr               ),
  .unalign_dp_plus3_addr                (unalign_dp_plus3_addr               ),
  .unalign_dp_size_half                 (unalign_dp_size_half                ),
  .unalign_dp_size_word                 (unalign_dp_size_word                ),
  .unalign_dp_store_data_byte1_to_byte1 (unalign_dp_store_data_byte1_to_byte1),
  .unalign_dp_store_data_byte1_to_byte2 (unalign_dp_store_data_byte1_to_byte2),
  .unalign_dp_store_data_byte1_to_byte3 (unalign_dp_store_data_byte1_to_byte3),
  .unalign_dp_store_data_byte1_to_byte4 (unalign_dp_store_data_byte1_to_byte4),
  .unalign_dp_store_data_byte2_to_byte1 (unalign_dp_store_data_byte2_to_byte1),
  .unalign_dp_store_data_byte2_to_byte2 (unalign_dp_store_data_byte2_to_byte2),
  .unalign_dp_store_data_byte2_to_byte3 (unalign_dp_store_data_byte2_to_byte3),
  .unalign_dp_store_data_byte2_to_byte4 (unalign_dp_store_data_byte2_to_byte4),
  .unalign_dp_store_data_byte3_to_byte1 (unalign_dp_store_data_byte3_to_byte1),
  .unalign_dp_store_data_byte3_to_byte2 (unalign_dp_store_data_byte3_to_byte2),
  .unalign_dp_store_data_byte3_to_byte3 (unalign_dp_store_data_byte3_to_byte3),
  .unalign_dp_store_data_byte3_to_byte4 (unalign_dp_store_data_byte3_to_byte4),
  .unalign_dp_store_data_byte4_to_byte1 (unalign_dp_store_data_byte4_to_byte1),
  .unalign_dp_store_data_byte4_to_byte2 (unalign_dp_store_data_byte4_to_byte2),
  .unalign_dp_store_data_byte4_to_byte3 (unalign_dp_store_data_byte4_to_byte3),
  .unalign_dp_store_data_byte4_to_byte4 (unalign_dp_store_data_byte4_to_byte4),
  .unalign_xx_split_on                  (unalign_xx_split_on                 )
);









nm_lsu_ctrl  x_nm_lsu_ctrl (
  .bmu_lsu_acc_err             (bmu_lsu_acc_err            ),
  .bmu_lsu_bstack_chk_fail     (bmu_lsu_bstack_chk_fail    ),
  .bmu_lsu_data_vld            (bmu_lsu_data_vld           ),
  .bmu_lsu_grnt                (bmu_lsu_grnt               ),
  .bmu_lsu_trans_cmplt         (bmu_lsu_trans_cmplt        ),
  .cp0_lsu_sge                 (cp0_lsu_sge                ),
  .cp0_lsu_sgp                 (cp0_lsu_sgp                ),
  .cp0_yy_supv_mode            (cp0_yy_supv_mode           ),
  .cpurst_b                    (cpurst_b                   ),
  .ctrl_dp_ldst_info_buf_reuse (ctrl_dp_ldst_info_buf_reuse),
  .ctrl_dp_ldst_req_grnt       (ctrl_dp_ldst_req_grnt      ),
  .ctrl_dp_store_buffer_updt   (ctrl_dp_store_buffer_updt  ),
  .ctrl_top_req_en             (ctrl_top_req_en            ),
  .ctrl_unalign_ldst_unalign   (ctrl_unalign_ldst_unalign  ),
  .ctrl_unalign_req_grant      (ctrl_unalign_req_grant     ),
  .ctrl_unalign_store          (ctrl_unalign_store         ),
  .ctrl_unalign_trans_cmplt    (ctrl_unalign_trans_cmplt   ),
  .dp_ctrl_misalign            (dp_ctrl_misalign           ),
  .dp_ctrl_stack_check_fail    (dp_ctrl_stack_check_fail   ),
  .dp_ctrl_unalign             (dp_ctrl_unalign            ),
  .iu_lsu_ex_data_sel          (iu_lsu_ex_data_sel         ),
  .iu_lsu_ex_sel               (iu_lsu_ex_sel              ),
  .iu_lsu_inst_store           (iu_lsu_inst_store          ),
  .iu_lsu_lrw                  (iu_lsu_lrw                 ),
  .iu_lsu_lrw_no_fast_retire   (iu_lsu_lrw_no_fast_retire  ),
  .iu_lsu_oper_mux_en          (iu_lsu_oper_mux_en         ),
  .iu_lsu_src0_sp              (iu_lsu_src0_sp             ),
  .iu_lsu_stall_without_hready (iu_lsu_stall_without_hready),
  .iu_lsu_wb_ldst              (iu_lsu_wb_ldst             ),
  .iu_yy_xx_flush              (iu_yy_xx_flush             ),
  .lsu_bmu_addr_check_fail     (lsu_bmu_addr_check_fail    ),
  .lsu_bmu_idle                (lsu_bmu_idle               ),
  .lsu_bmu_req                 (lsu_bmu_req                ),
  .lsu_bmu_req_without_cmplt   (lsu_bmu_req_without_cmplt  ),
  .lsu_bmu_sg_chk_fail         (lsu_bmu_sg_chk_fail        ),
  .lsu_bmu_wfd1                (lsu_bmu_wfd1               ),
  .lsu_had_addr_vld            (lsu_had_addr_vld           ),
  .lsu_had_ex_cmplt            (lsu_had_ex_cmplt           ),
  .lsu_inst_store              (lsu_inst_store             ),
  .lsu_iu_addr_check_fail      (lsu_iu_addr_check_fail     ),
  .lsu_iu_data_vld             (lsu_iu_data_vld            ),
  .lsu_iu_expt_vec             (lsu_iu_expt_vec            ),
  .lsu_iu_expt_vld             (lsu_iu_expt_vld            ),
  .lsu_iu_fast_retire          (lsu_iu_fast_retire         ),
  .lsu_iu_req                  (lsu_iu_req                 ),
  .lsu_iu_stall                (lsu_iu_stall               ),
  .lsu_iu_trans_acc_err        (lsu_iu_trans_acc_err       ),
  .lsu_iu_wb_acc_err           (lsu_iu_wb_acc_err          ),
  .lsu_iu_wb_bstack_chk_fail   (lsu_iu_wb_bstack_chk_fail  ),
  .lsu_iu_wb_cmplt             (lsu_iu_wb_cmplt            ),
  .lsu_iu_wb_data_vld          (lsu_iu_wb_data_vld         ),
  .sm_clk                      (sm_clk                     ),
  .unalign_ctrl_not_last_beat  (unalign_ctrl_not_last_beat ),
  .unalign_ctrl_stall          (unalign_ctrl_stall         ),
  .unalign_xx_split_on         (unalign_xx_split_on        )
);




nm_lsu_unalign  x_nm_lsu_unalign (
  .cp0_yy_be                            (cp0_yy_be                           ),
  .cp0_yy_be_v1                         (cp0_yy_be_v1                        ),
  .cp0_yy_be_v2                         (cp0_yy_be_v2                        ),
  .cpurst_b                             (cpurst_b                            ),
  .ctrl_unalign_ldst_unalign            (ctrl_unalign_ldst_unalign           ),
  .ctrl_unalign_req_grant               (ctrl_unalign_req_grant              ),
  .ctrl_unalign_store                   (ctrl_unalign_store                  ),
  .ctrl_unalign_trans_cmplt             (ctrl_unalign_trans_cmplt            ),
  .dp_unalign_addr_1_0                  (dp_unalign_addr_1_0                 ),
  .dp_unalign_flop_addr_1_0             (dp_unalign_flop_addr_1_0            ),
  .dp_unalign_flop_size_half            (dp_unalign_flop_size_half           ),
  .dp_unalign_flop_size_word            (dp_unalign_flop_size_word           ),
  .dp_unalign_size_half                 (dp_unalign_size_half                ),
  .dp_unalign_size_word                 (dp_unalign_size_word                ),
  .iu_yy_xx_flush                       (iu_yy_xx_flush                      ),
  .sm_clk                               (sm_clk                              ),
  .unalign_ctrl_not_last_beat           (unalign_ctrl_not_last_beat          ),
  .unalign_ctrl_stall                   (unalign_ctrl_stall                  ),
  .unalign_dp_buffer_wen                (unalign_dp_buffer_wen               ),
  .unalign_dp_first_req                 (unalign_dp_first_req                ),
  .unalign_dp_load_data_byte1_to_byte1  (unalign_dp_load_data_byte1_to_byte1 ),
  .unalign_dp_load_data_byte1_to_byte2  (unalign_dp_load_data_byte1_to_byte2 ),
  .unalign_dp_load_data_byte1_to_byte3  (unalign_dp_load_data_byte1_to_byte3 ),
  .unalign_dp_load_data_byte1_to_byte4  (unalign_dp_load_data_byte1_to_byte4 ),
  .unalign_dp_load_data_byte2_to_byte1  (unalign_dp_load_data_byte2_to_byte1 ),
  .unalign_dp_load_data_byte2_to_byte2  (unalign_dp_load_data_byte2_to_byte2 ),
  .unalign_dp_load_data_byte2_to_byte3  (unalign_dp_load_data_byte2_to_byte3 ),
  .unalign_dp_load_data_byte2_to_byte4  (unalign_dp_load_data_byte2_to_byte4 ),
  .unalign_dp_load_data_byte3_to_byte1  (unalign_dp_load_data_byte3_to_byte1 ),
  .unalign_dp_load_data_byte3_to_byte2  (unalign_dp_load_data_byte3_to_byte2 ),
  .unalign_dp_load_data_byte3_to_byte3  (unalign_dp_load_data_byte3_to_byte3 ),
  .unalign_dp_load_data_byte3_to_byte4  (unalign_dp_load_data_byte3_to_byte4 ),
  .unalign_dp_load_data_byte4_to_byte1  (unalign_dp_load_data_byte4_to_byte1 ),
  .unalign_dp_load_data_byte4_to_byte2  (unalign_dp_load_data_byte4_to_byte2 ),
  .unalign_dp_load_data_byte4_to_byte3  (unalign_dp_load_data_byte4_to_byte3 ),
  .unalign_dp_load_data_byte4_to_byte4  (unalign_dp_load_data_byte4_to_byte4 ),
  .unalign_dp_plus1_addr                (unalign_dp_plus1_addr               ),
  .unalign_dp_plus2_addr                (unalign_dp_plus2_addr               ),
  .unalign_dp_plus3_addr                (unalign_dp_plus3_addr               ),
  .unalign_dp_size_half                 (unalign_dp_size_half                ),
  .unalign_dp_size_word                 (unalign_dp_size_word                ),
  .unalign_dp_store_data_byte1_to_byte1 (unalign_dp_store_data_byte1_to_byte1),
  .unalign_dp_store_data_byte1_to_byte2 (unalign_dp_store_data_byte1_to_byte2),
  .unalign_dp_store_data_byte1_to_byte3 (unalign_dp_store_data_byte1_to_byte3),
  .unalign_dp_store_data_byte1_to_byte4 (unalign_dp_store_data_byte1_to_byte4),
  .unalign_dp_store_data_byte2_to_byte1 (unalign_dp_store_data_byte2_to_byte1),
  .unalign_dp_store_data_byte2_to_byte2 (unalign_dp_store_data_byte2_to_byte2),
  .unalign_dp_store_data_byte2_to_byte3 (unalign_dp_store_data_byte2_to_byte3),
  .unalign_dp_store_data_byte2_to_byte4 (unalign_dp_store_data_byte2_to_byte4),
  .unalign_dp_store_data_byte3_to_byte1 (unalign_dp_store_data_byte3_to_byte1),
  .unalign_dp_store_data_byte3_to_byte2 (unalign_dp_store_data_byte3_to_byte2),
  .unalign_dp_store_data_byte3_to_byte3 (unalign_dp_store_data_byte3_to_byte3),
  .unalign_dp_store_data_byte3_to_byte4 (unalign_dp_store_data_byte3_to_byte4),
  .unalign_dp_store_data_byte4_to_byte1 (unalign_dp_store_data_byte4_to_byte1),
  .unalign_dp_store_data_byte4_to_byte2 (unalign_dp_store_data_byte4_to_byte2),
  .unalign_dp_store_data_byte4_to_byte3 (unalign_dp_store_data_byte4_to_byte3),
  .unalign_dp_store_data_byte4_to_byte4 (unalign_dp_store_data_byte4_to_byte4),
  .unalign_top_clk_en                   (unalign_top_clk_en                  ),
  .unalign_xx_split_on                  (unalign_xx_split_on                 )
);



nm_lsu_randclk  x_randclk (
  .randclk_dp_size_buf_mod_en_w5     (randclk_dp_size_buf_mod_en_w5    ),
  .randclk_dp_unalign_buf_mod_en_w24 (randclk_dp_unalign_buf_mod_en_w24)
);



endmodule
























module nm_lsu_unalign(
  cp0_yy_be,
  cp0_yy_be_v1,
  cp0_yy_be_v2,
  cpurst_b,
  ctrl_unalign_ldst_unalign,
  ctrl_unalign_req_grant,
  ctrl_unalign_store,
  ctrl_unalign_trans_cmplt,
  dp_unalign_addr_1_0,
  dp_unalign_flop_addr_1_0,
  dp_unalign_flop_size_half,
  dp_unalign_flop_size_word,
  dp_unalign_size_half,
  dp_unalign_size_word,
  iu_yy_xx_flush,
  sm_clk,
  unalign_ctrl_not_last_beat,
  unalign_ctrl_stall,
  unalign_dp_buffer_wen,
  unalign_dp_first_req,
  unalign_dp_load_data_byte1_to_byte1,
  unalign_dp_load_data_byte1_to_byte2,
  unalign_dp_load_data_byte1_to_byte3,
  unalign_dp_load_data_byte1_to_byte4,
  unalign_dp_load_data_byte2_to_byte1,
  unalign_dp_load_data_byte2_to_byte2,
  unalign_dp_load_data_byte2_to_byte3,
  unalign_dp_load_data_byte2_to_byte4,
  unalign_dp_load_data_byte3_to_byte1,
  unalign_dp_load_data_byte3_to_byte2,
  unalign_dp_load_data_byte3_to_byte3,
  unalign_dp_load_data_byte3_to_byte4,
  unalign_dp_load_data_byte4_to_byte1,
  unalign_dp_load_data_byte4_to_byte2,
  unalign_dp_load_data_byte4_to_byte3,
  unalign_dp_load_data_byte4_to_byte4,
  unalign_dp_plus1_addr,
  unalign_dp_plus2_addr,
  unalign_dp_plus3_addr,
  unalign_dp_size_half,
  unalign_dp_size_word,
  unalign_dp_store_data_byte1_to_byte1,
  unalign_dp_store_data_byte1_to_byte2,
  unalign_dp_store_data_byte1_to_byte3,
  unalign_dp_store_data_byte1_to_byte4,
  unalign_dp_store_data_byte2_to_byte1,
  unalign_dp_store_data_byte2_to_byte2,
  unalign_dp_store_data_byte2_to_byte3,
  unalign_dp_store_data_byte2_to_byte4,
  unalign_dp_store_data_byte3_to_byte1,
  unalign_dp_store_data_byte3_to_byte2,
  unalign_dp_store_data_byte3_to_byte3,
  unalign_dp_store_data_byte3_to_byte4,
  unalign_dp_store_data_byte4_to_byte1,
  unalign_dp_store_data_byte4_to_byte2,
  unalign_dp_store_data_byte4_to_byte3,
  unalign_dp_store_data_byte4_to_byte4,
  unalign_top_clk_en,
  unalign_xx_split_on
);


input          cp0_yy_be;                              
input          cp0_yy_be_v1;                           
input          cp0_yy_be_v2;                           
input          cpurst_b;                               
input          ctrl_unalign_ldst_unalign;              
input          ctrl_unalign_req_grant;                 
input          ctrl_unalign_store;                     
input          ctrl_unalign_trans_cmplt;               
input   [1:0]  dp_unalign_addr_1_0;                    
input   [1:0]  dp_unalign_flop_addr_1_0;               
input          dp_unalign_flop_size_half;              
input          dp_unalign_flop_size_word;              
input          dp_unalign_size_half;                   
input          dp_unalign_size_word;                   
input          iu_yy_xx_flush;                         
input          sm_clk;                                 
output         unalign_ctrl_not_last_beat;             
output         unalign_ctrl_stall;                     
output         unalign_dp_buffer_wen;                  
output         unalign_dp_first_req;                   
output         unalign_dp_load_data_byte1_to_byte1;    
output         unalign_dp_load_data_byte1_to_byte2;    
output         unalign_dp_load_data_byte1_to_byte3;    
output         unalign_dp_load_data_byte1_to_byte4;    
output         unalign_dp_load_data_byte2_to_byte1;    
output         unalign_dp_load_data_byte2_to_byte2;    
output         unalign_dp_load_data_byte2_to_byte3;    
output         unalign_dp_load_data_byte2_to_byte4;    
output         unalign_dp_load_data_byte3_to_byte1;    
output         unalign_dp_load_data_byte3_to_byte2;    
output         unalign_dp_load_data_byte3_to_byte3;    
output         unalign_dp_load_data_byte3_to_byte4;    
output         unalign_dp_load_data_byte4_to_byte1;    
output         unalign_dp_load_data_byte4_to_byte2;    
output         unalign_dp_load_data_byte4_to_byte3;    
output         unalign_dp_load_data_byte4_to_byte4;    
output         unalign_dp_plus1_addr;                  
output         unalign_dp_plus2_addr;                  
output         unalign_dp_plus3_addr;                  
output         unalign_dp_size_half;                   
output         unalign_dp_size_word;                   
output         unalign_dp_store_data_byte1_to_byte1;   
output         unalign_dp_store_data_byte1_to_byte2;   
output         unalign_dp_store_data_byte1_to_byte3;   
output         unalign_dp_store_data_byte1_to_byte4;   
output         unalign_dp_store_data_byte2_to_byte1;   
output         unalign_dp_store_data_byte2_to_byte2;   
output         unalign_dp_store_data_byte2_to_byte3;   
output         unalign_dp_store_data_byte2_to_byte4;   
output         unalign_dp_store_data_byte3_to_byte1;   
output         unalign_dp_store_data_byte3_to_byte2;   
output         unalign_dp_store_data_byte3_to_byte3;   
output         unalign_dp_store_data_byte3_to_byte4;   
output         unalign_dp_store_data_byte4_to_byte1;   
output         unalign_dp_store_data_byte4_to_byte2;   
output         unalign_dp_store_data_byte4_to_byte3;   
output         unalign_dp_store_data_byte4_to_byte4;   
output         unalign_top_clk_en;                     
output         unalign_xx_split_on;                    


reg     [1:0]  cur_state;                              
reg     [1:0]  next_state;                             


wire           cp0_yy_be;                              
wire           cp0_yy_be_v1;                           
wire           cp0_yy_be_v2;                           
wire           cpurst_b;                               
wire           ctrl_unalign_ldst_unalign;              
wire           ctrl_unalign_req_grant;                 
wire           ctrl_unalign_store;                     
wire           ctrl_unalign_trans_cmplt;               
wire    [1:0]  dp_unalign_addr_1_0;                    
wire    [1:0]  dp_unalign_flop_addr_1_0;               
wire           dp_unalign_flop_size_half;              
wire           dp_unalign_flop_size_word;              
wire           dp_unalign_size_half;                   
wire           dp_unalign_size_word;                   
wire           iu_yy_xx_flush;                         
wire    [1:0]  lsu_unalign_addr_1_0;                   
wire    [1:0]  lsu_unalign_flop_addr_1_0;              
wire           lsu_unalign_flop_size_half;             
wire           lsu_unalign_flop_size_word;             
wire           lsu_unalign_ldst;                       
wire           lsu_unalign_size_half;                  
wire           lsu_unalign_size_word;                  
wire           lsu_unalign_store;                      
wire           one_beat_unalign;                       
wire           sm_clk;                                 
wire           split_stall;                            
wire           three_beat_unalign;                     
wire           unalign_addr01;                         
wire           unalign_addr10;                         
wire           unalign_addr11;                         
wire           unalign_ctrl_not_last_beat;             
wire           unalign_ctrl_stall;                     
wire           unalign_dp_buffer_wen;                  
wire           unalign_dp_first_req;                   
wire           unalign_dp_load_data_byte1_to_byte1;    
wire           unalign_dp_load_data_byte1_to_byte2;    
wire           unalign_dp_load_data_byte1_to_byte3;    
wire           unalign_dp_load_data_byte1_to_byte4;    
wire           unalign_dp_load_data_byte2_to_byte1;    
wire           unalign_dp_load_data_byte2_to_byte2;    
wire           unalign_dp_load_data_byte2_to_byte3;    
wire           unalign_dp_load_data_byte2_to_byte4;    
wire           unalign_dp_load_data_byte3_to_byte1;    
wire           unalign_dp_load_data_byte3_to_byte2;    
wire           unalign_dp_load_data_byte3_to_byte3;    
wire           unalign_dp_load_data_byte3_to_byte4;    
wire           unalign_dp_load_data_byte4_to_byte1;    
wire           unalign_dp_load_data_byte4_to_byte2;    
wire           unalign_dp_load_data_byte4_to_byte3;    
wire           unalign_dp_load_data_byte4_to_byte4;    
wire           unalign_dp_plus1_addr;                  
wire           unalign_dp_plus2_addr;                  
wire           unalign_dp_plus3_addr;                  
wire           unalign_dp_size_half;                   
wire           unalign_dp_size_word;                   
wire           unalign_dp_store_data_byte1_to_byte1;   
wire           unalign_dp_store_data_byte1_to_byte2;   
wire           unalign_dp_store_data_byte1_to_byte3;   
wire           unalign_dp_store_data_byte1_to_byte4;   
wire           unalign_dp_store_data_byte2_to_byte1;   
wire           unalign_dp_store_data_byte2_to_byte2;   
wire           unalign_dp_store_data_byte2_to_byte3;   
wire           unalign_dp_store_data_byte2_to_byte4;   
wire           unalign_dp_store_data_byte3_to_byte1;   
wire           unalign_dp_store_data_byte3_to_byte2;   
wire           unalign_dp_store_data_byte3_to_byte3;   
wire           unalign_dp_store_data_byte3_to_byte4;   
wire           unalign_dp_store_data_byte4_to_byte1;   
wire           unalign_dp_store_data_byte4_to_byte2;   
wire           unalign_dp_store_data_byte4_to_byte3;   
wire           unalign_dp_store_data_byte4_to_byte4;   
wire           unalign_flop_addr01;                    
wire           unalign_flop_addr10;                    
wire           unalign_flop_addr11;                    
wire           unalign_load_half_addr01_fst_big_v2;    
wire           unalign_load_half_addr01_fst_not_big_v2; 
wire           unalign_load_half_addr11;               
wire           unalign_load_half_addr11_fst_big_v1;    
wire           unalign_load_half_addr11_fst_big_v2;    
wire           unalign_load_half_addr11_fst_lte;       
wire           unalign_load_half_addr11_scd_big_v1;    
wire           unalign_load_half_addr11_scd_big_v2;    
wire           unalign_load_half_addr11_scd_lte;       
wire           unalign_load_two_beat;                  
wire           unalign_load_word_addr01;               
wire           unalign_load_word_addr01_fst_big_v1;    
wire           unalign_load_word_addr01_fst_big_v2;    
wire           unalign_load_word_addr01_fst_lte;       
wire           unalign_load_word_addr01_scd_big_v1;    
wire           unalign_load_word_addr01_scd_big_v2;    
wire           unalign_load_word_addr01_scd_lte;       
wire           unalign_load_word_addr10;               
wire           unalign_load_word_addr10_fst_big_v1;    
wire           unalign_load_word_addr10_fst_big_v2;    
wire           unalign_load_word_addr10_fst_lte;       
wire           unalign_load_word_addr10_scd_big_v1;    
wire           unalign_load_word_addr10_scd_big_v2;    
wire           unalign_load_word_addr10_scd_lte;       
wire           unalign_load_word_addr11;               
wire           unalign_load_word_addr11_fst_big_v1;    
wire           unalign_load_word_addr11_fst_big_v2;    
wire           unalign_load_word_addr11_fst_lte;       
wire           unalign_load_word_addr11_scd_big_v1;    
wire           unalign_load_word_addr11_scd_big_v2;    
wire           unalign_load_word_addr11_scd_lte;       
wire           unalign_req_grant;                      
wire           unalign_size_half;                      
wire           unalign_size_word;                      
wire           unalign_split_last_beat;                
wire           unalign_split_last_cmplt;               
wire           unalign_split_not_last_beat;            
wire           unalign_split_on;                       
wire           unalign_store_half_addr01;              
wire           unalign_store_half_addr01_flop;         
wire           unalign_store_half_addr01_fst_big_v1;   
wire           unalign_store_half_addr01_fst_big_v2;   
wire           unalign_store_half_addr01_fst_lte;      
wire           unalign_store_half_addr01_scd_big_v1;   
wire           unalign_store_half_addr01_scd_big_v2;   
wire           unalign_store_half_addr01_scd_lte;      
wire           unalign_store_half_addr11;              
wire           unalign_store_half_addr11_flop;         
wire           unalign_store_half_addr11_fst_big_v1;   
wire           unalign_store_half_addr11_fst_big_v2;   
wire           unalign_store_half_addr11_fst_lte;      
wire           unalign_store_half_addr11_scd_big_v1;   
wire           unalign_store_half_addr11_scd_big_v2;   
wire           unalign_store_half_addr11_scd_lte;      
wire           unalign_store_word_addr01;              
wire           unalign_store_word_addr01_flop;         
wire           unalign_store_word_addr01_fst_big_v1;   
wire           unalign_store_word_addr01_fst_big_v2;   
wire           unalign_store_word_addr01_fst_lte;      
wire           unalign_store_word_addr01_scd_big_v1;   
wire           unalign_store_word_addr01_scd_big_v2;   
wire           unalign_store_word_addr01_scd_lte;      
wire           unalign_store_word_addr01_thd_big_v1;   
wire           unalign_store_word_addr01_thd_big_v2;   
wire           unalign_store_word_addr01_thd_lte;      
wire           unalign_store_word_addr10;              
wire           unalign_store_word_addr10_flop;         
wire           unalign_store_word_addr10_fst_big_v1;   
wire           unalign_store_word_addr10_fst_big_v2;   
wire           unalign_store_word_addr10_fst_lte;      
wire           unalign_store_word_addr10_scd_big_v1;   
wire           unalign_store_word_addr10_scd_big_v2;   
wire           unalign_store_word_addr10_scd_lte;      
wire           unalign_store_word_addr11;              
wire           unalign_store_word_addr11_flop;         
wire           unalign_store_word_addr11_fst_big_v1;   
wire           unalign_store_word_addr11_fst_big_v2;   
wire           unalign_store_word_addr11_fst_lte;      
wire           unalign_store_word_addr11_scd_big_v1;   
wire           unalign_store_word_addr11_scd_big_v2;   
wire           unalign_store_word_addr11_scd_lte;      
wire           unalign_store_word_addr11_thd_big_v1;   
wire           unalign_store_word_addr11_thd_big_v2;   
wire           unalign_store_word_addr11_thd_lte;      
wire           unalign_top_clk_en;                     
wire           unalign_trans_cmplt;                    
wire           unalign_xx_split_on;                    


parameter IDLE = 2'b00;
parameter WFC1 = 2'b01;
parameter WFC2 = 2'b11;
parameter WFC3 = 2'b10;




assign unalign_top_clk_en = (cur_state == IDLE) && lsu_unalign_ldst
                         || (cur_state != IDLE);














assign lsu_unalign_ldst = ctrl_unalign_ldst_unalign;
assign lsu_unalign_store = ctrl_unalign_store;
assign lsu_unalign_size_word = dp_unalign_size_word;
assign lsu_unalign_size_half = dp_unalign_size_half;
assign lsu_unalign_flop_size_word = dp_unalign_flop_size_word;
assign lsu_unalign_flop_size_half = dp_unalign_flop_size_half;
assign lsu_unalign_flop_addr_1_0[1:0] = dp_unalign_flop_addr_1_0[1:0];
assign lsu_unalign_addr_1_0[1:0] = dp_unalign_addr_1_0[1:0];
assign unalign_flop_addr01 = !lsu_unalign_flop_addr_1_0[1] && lsu_unalign_flop_addr_1_0[0];
assign unalign_flop_addr10 = lsu_unalign_flop_addr_1_0[1] && !lsu_unalign_flop_addr_1_0[0];
assign unalign_flop_addr11 = lsu_unalign_flop_addr_1_0[1] && lsu_unalign_flop_addr_1_0[0];
assign unalign_addr01 = !lsu_unalign_addr_1_0[1] && lsu_unalign_addr_1_0[0];
assign unalign_addr10 = lsu_unalign_addr_1_0[1] && !lsu_unalign_addr_1_0[0];
assign unalign_addr11 = lsu_unalign_addr_1_0[1] && lsu_unalign_addr_1_0[0];


assign unalign_req_grant = ctrl_unalign_req_grant;
assign unalign_trans_cmplt = ctrl_unalign_trans_cmplt;

assign one_beat_unalign = !lsu_unalign_store && lsu_unalign_flop_size_half 
                          && !lsu_unalign_flop_addr_1_0[1] && lsu_unalign_flop_addr_1_0[0];
assign three_beat_unalign = lsu_unalign_store && lsu_unalign_flop_size_word 
                            && lsu_unalign_flop_addr_1_0[0];
 





always @(posedge sm_clk or negedge cpurst_b)
begin
  if(!cpurst_b)
    cur_state[1:0] <= IDLE;
  else if(iu_yy_xx_flush)
    cur_state[1:0] <= IDLE;
  else
    cur_state[1:0] <= next_state[1:0];
end


always @( cur_state
       or one_beat_unalign
       or three_beat_unalign
       or unalign_req_grant
       or lsu_unalign_ldst
       or unalign_trans_cmplt)
begin

case(cur_state)
  IDLE:
    begin
      next_state = IDLE;
      if(lsu_unalign_ldst && unalign_req_grant)
        next_state = WFC1;
    end
  WFC1:
    begin
      next_state = WFC1;
      if(one_beat_unalign && unalign_trans_cmplt) 
        next_state = IDLE;
      else if(!one_beat_unalign && unalign_req_grant)
        next_state = WFC2;
    end
  WFC2:
    begin
      next_state = WFC2;
      if(!three_beat_unalign && unalign_trans_cmplt)
        next_state = IDLE;
      else if(three_beat_unalign && unalign_req_grant)
        next_state = WFC3;
    end
  WFC3:
    begin
      next_state = WFC3;
      if(unalign_trans_cmplt)
        next_state = IDLE;
    end
default:
  next_state = IDLE;
endcase

end






assign unalign_split_on = (cur_state == IDLE) && lsu_unalign_ldst ||
                          !(cur_state == IDLE); 

assign unalign_split_not_last_beat = (cur_state == WFC1) && !one_beat_unalign ||
                                     (cur_state == WFC2) && three_beat_unalign;

assign unalign_split_last_beat = (cur_state == WFC1) && one_beat_unalign ||
                                 (cur_state == WFC2) && !three_beat_unalign||
                                 (cur_state == WFC3);

assign unalign_split_last_cmplt = unalign_split_last_beat && unalign_trans_cmplt;

assign split_stall = unalign_split_on && !unalign_split_last_cmplt;

assign unalign_ctrl_stall = split_stall;
assign unalign_ctrl_not_last_beat = unalign_split_not_last_beat;
assign unalign_dp_first_req = (cur_state == IDLE);
assign unalign_xx_split_on = unalign_split_on;









assign unalign_size_word = !lsu_unalign_store;
assign unalign_size_half = ((cur_state == IDLE) && !lsu_unalign_addr_1_0[0] ||
                            (cur_state == WFC1) && lsu_unalign_flop_size_word 
                           ) && lsu_unalign_store;


assign unalign_dp_size_word = unalign_size_word;
assign unalign_dp_size_half = unalign_size_half;


assign unalign_load_two_beat = !lsu_unalign_store &&
                               !(lsu_unalign_flop_size_half &&
                                !lsu_unalign_flop_addr_1_0[1] &&
                                 lsu_unalign_flop_addr_1_0[0]);
assign unalign_dp_buffer_wen = (cur_state == WFC1) && unalign_load_two_beat && unalign_trans_cmplt;





assign unalign_dp_plus1_addr = (cur_state == WFC1) && lsu_unalign_flop_addr_1_0[0] && lsu_unalign_store;
assign unalign_dp_plus2_addr = (cur_state == WFC1) && !lsu_unalign_flop_addr_1_0[0] && lsu_unalign_store;
assign unalign_dp_plus3_addr = (cur_state == WFC2 && three_beat_unalign)
                            || (!lsu_unalign_store && (cur_state == WFC1) && !one_beat_unalign);





assign unalign_load_half_addr01_fst_not_big_v2 = !lsu_unalign_store && lsu_unalign_flop_size_half &&
                                                unalign_flop_addr01 && (cur_state == WFC1) && !cp0_yy_be_v2;
assign unalign_load_half_addr01_fst_big_v2 = !lsu_unalign_store && lsu_unalign_flop_size_half &&
                                            unalign_flop_addr01 && (cur_state == WFC1) && cp0_yy_be_v2;

assign unalign_load_half_addr11 = !lsu_unalign_store && lsu_unalign_flop_size_half && unalign_flop_addr11;
assign unalign_load_half_addr11_fst_big_v1 = unalign_load_half_addr11 && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_load_half_addr11_scd_big_v1 = unalign_load_half_addr11 && (cur_state == WFC2) && cp0_yy_be_v1;
assign unalign_load_half_addr11_fst_big_v2 = unalign_load_half_addr11 && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_load_half_addr11_scd_big_v2 = unalign_load_half_addr11 && (cur_state == WFC2) && cp0_yy_be_v2;
assign unalign_load_half_addr11_fst_lte = unalign_load_half_addr11 && (cur_state == WFC1) && !cp0_yy_be;
assign unalign_load_half_addr11_scd_lte = unalign_load_half_addr11 && (cur_state == WFC2) && !cp0_yy_be;

assign unalign_load_word_addr01 = !lsu_unalign_store && lsu_unalign_flop_size_word && unalign_flop_addr01;
assign unalign_load_word_addr01_fst_big_v1 = unalign_load_word_addr01 && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_load_word_addr01_scd_big_v1 = unalign_load_word_addr01 && (cur_state == WFC2) && cp0_yy_be_v1;
assign unalign_load_word_addr01_fst_big_v2 = unalign_load_word_addr01 && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_load_word_addr01_scd_big_v2 = unalign_load_word_addr01 && (cur_state == WFC2) && cp0_yy_be_v2;
assign unalign_load_word_addr01_fst_lte = unalign_load_word_addr01 && (cur_state == WFC1) && !cp0_yy_be;
assign unalign_load_word_addr01_scd_lte = unalign_load_word_addr01 && (cur_state == WFC2) && !cp0_yy_be;

assign unalign_load_word_addr10 = !lsu_unalign_store && lsu_unalign_flop_size_word && unalign_flop_addr10;
assign unalign_load_word_addr10_fst_big_v1 = unalign_load_word_addr10 && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_load_word_addr10_scd_big_v1 = unalign_load_word_addr10 && (cur_state == WFC2) && cp0_yy_be_v1;
assign unalign_load_word_addr10_fst_big_v2 = unalign_load_word_addr10 && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_load_word_addr10_scd_big_v2 = unalign_load_word_addr10 && (cur_state == WFC2) && cp0_yy_be_v2;
assign unalign_load_word_addr10_fst_lte = unalign_load_word_addr10 && (cur_state == WFC1) && !cp0_yy_be;
assign unalign_load_word_addr10_scd_lte = unalign_load_word_addr10 && (cur_state == WFC2) && !cp0_yy_be;

assign unalign_load_word_addr11 = !lsu_unalign_store && lsu_unalign_flop_size_word && unalign_flop_addr11;
assign unalign_load_word_addr11_fst_big_v1 = unalign_load_word_addr11 && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_load_word_addr11_scd_big_v1 = unalign_load_word_addr11 && (cur_state == WFC2) && cp0_yy_be_v1; 
assign unalign_load_word_addr11_fst_big_v2 = unalign_load_word_addr11 && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_load_word_addr11_scd_big_v2 = unalign_load_word_addr11 && (cur_state == WFC2) && cp0_yy_be_v2;
assign unalign_load_word_addr11_fst_lte = unalign_load_word_addr11 && (cur_state == WFC1) && !cp0_yy_be;
assign unalign_load_word_addr11_scd_lte = unalign_load_word_addr11 && (cur_state == WFC2) && !cp0_yy_be;



assign unalign_dp_load_data_byte1_to_byte1 = unalign_load_half_addr11_scd_big_v2 || unalign_load_word_addr01_scd_big_v2;
assign unalign_dp_load_data_byte2_to_byte1 = unalign_load_half_addr01_fst_not_big_v2 || unalign_load_word_addr11_scd_big_v1 ||
                                             unalign_load_word_addr01_fst_lte || unalign_load_word_addr10_scd_big_v2;
assign unalign_dp_load_data_byte3_to_byte1 = unalign_load_word_addr10_scd_big_v1 || unalign_load_word_addr10_fst_lte ||
                                             unalign_load_half_addr01_fst_big_v2 || unalign_load_word_addr11_scd_big_v2;
assign unalign_dp_load_data_byte4_to_byte1 = unalign_load_half_addr11_scd_big_v1 || unalign_load_word_addr01_scd_big_v1 ||
                                             unalign_load_half_addr11_fst_lte || unalign_load_word_addr11_fst_lte;


assign unalign_dp_load_data_byte1_to_byte2 = unalign_load_half_addr11_fst_big_v1 || unalign_load_word_addr01_fst_big_v1 ||
                                             unalign_load_half_addr11_scd_lte || unalign_load_word_addr11_scd_lte ||
                                             unalign_load_word_addr10_scd_big_v2;
assign unalign_dp_load_data_byte2_to_byte2 = unalign_load_half_addr01_fst_big_v2 || unalign_load_word_addr11_scd_big_v2;
assign unalign_dp_load_data_byte3_to_byte2 = unalign_load_half_addr01_fst_not_big_v2 || unalign_load_word_addr11_scd_big_v1 ||
                                             unalign_load_word_addr01_fst_lte;
assign unalign_dp_load_data_byte4_to_byte2 = unalign_load_word_addr10_scd_big_v1 || unalign_load_word_addr10_fst_lte ||
                                             unalign_load_half_addr11_fst_big_v2 || unalign_load_word_addr01_fst_big_v2;


assign unalign_dp_load_data_byte1_to_byte3 = unalign_load_word_addr10_fst_big_v1 || unalign_load_word_addr10_scd_lte||
                                             unalign_load_word_addr11_scd_big_v2;
assign unalign_dp_load_data_byte2_to_byte3 = unalign_load_word_addr01_fst_big_v1 || unalign_load_word_addr11_scd_lte;
assign unalign_dp_load_data_byte3_to_byte3 = unalign_load_word_addr01_fst_big_v2;
assign unalign_dp_load_data_byte4_to_byte3 = unalign_load_word_addr11_scd_big_v1 || unalign_load_word_addr01_fst_lte ||
                                             unalign_load_word_addr10_fst_big_v2;


assign unalign_dp_load_data_byte1_to_byte4 = unalign_load_word_addr11_fst_big_v1 || unalign_load_word_addr01_scd_lte;
assign unalign_dp_load_data_byte2_to_byte4 = unalign_load_word_addr10_fst_big_v1 || unalign_load_word_addr10_scd_lte ||
                                             unalign_load_word_addr01_fst_big_v2;
assign unalign_dp_load_data_byte3_to_byte4 = unalign_load_word_addr01_fst_big_v1 || unalign_load_word_addr11_scd_lte ||
                                             unalign_load_word_addr10_fst_big_v2;
assign unalign_dp_load_data_byte4_to_byte4 = unalign_load_word_addr11_fst_big_v2;



assign unalign_store_half_addr01 = lsu_unalign_store && lsu_unalign_size_half && unalign_addr01;
assign unalign_store_half_addr01_flop = lsu_unalign_store && lsu_unalign_flop_size_half && unalign_flop_addr01;
assign unalign_store_half_addr01_fst_big_v1 = unalign_store_half_addr01 && (cur_state == IDLE) && cp0_yy_be_v1; 
assign unalign_store_half_addr01_scd_big_v1 = unalign_store_half_addr01_flop && (cur_state == WFC1) && cp0_yy_be_v1; 
assign unalign_store_half_addr01_fst_big_v2 = unalign_store_half_addr01 && (cur_state == IDLE) && cp0_yy_be_v2;
assign unalign_store_half_addr01_scd_big_v2 = unalign_store_half_addr01_flop && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_store_half_addr01_fst_lte = unalign_store_half_addr01 && (cur_state == IDLE) && !cp0_yy_be; 
assign unalign_store_half_addr01_scd_lte = unalign_store_half_addr01_flop && (cur_state == WFC1) && !cp0_yy_be; 

assign unalign_store_half_addr11 = lsu_unalign_store && lsu_unalign_size_half && unalign_addr11;
assign unalign_store_half_addr11_flop = lsu_unalign_store && lsu_unalign_flop_size_half && unalign_flop_addr11;
assign unalign_store_half_addr11_fst_big_v1 = unalign_store_half_addr11 && (cur_state == IDLE) && cp0_yy_be_v1;
assign unalign_store_half_addr11_scd_big_v1 = unalign_store_half_addr11_flop && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_store_half_addr11_fst_big_v2 = unalign_store_half_addr11 && (cur_state == IDLE) && cp0_yy_be_v2;
assign unalign_store_half_addr11_scd_big_v2 = unalign_store_half_addr11_flop && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_store_half_addr11_fst_lte = unalign_store_half_addr11 && (cur_state == IDLE) && !cp0_yy_be;
assign unalign_store_half_addr11_scd_lte = unalign_store_half_addr11_flop && (cur_state == WFC1) && !cp0_yy_be;

assign unalign_store_word_addr01 = lsu_unalign_store && lsu_unalign_size_word && unalign_addr01;
assign unalign_store_word_addr01_flop = lsu_unalign_store && lsu_unalign_flop_size_word && unalign_flop_addr01;
assign unalign_store_word_addr01_fst_big_v1 = unalign_store_word_addr01 && (cur_state == IDLE) && cp0_yy_be_v1;
assign unalign_store_word_addr01_scd_big_v1 = unalign_store_word_addr01_flop && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_store_word_addr01_thd_big_v1 = unalign_store_word_addr01_flop && (cur_state == WFC2) && cp0_yy_be_v1;
assign unalign_store_word_addr01_fst_big_v2 = unalign_store_word_addr01 && (cur_state == IDLE) && cp0_yy_be_v2;
assign unalign_store_word_addr01_scd_big_v2 = unalign_store_word_addr01_flop && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_store_word_addr01_thd_big_v2 = unalign_store_word_addr01_flop && (cur_state == WFC2) && cp0_yy_be_v2;
assign unalign_store_word_addr01_fst_lte = unalign_store_word_addr01 && (cur_state == IDLE) && !cp0_yy_be;
assign unalign_store_word_addr01_scd_lte = unalign_store_word_addr01_flop && (cur_state == WFC1) && !cp0_yy_be;
assign unalign_store_word_addr01_thd_lte = unalign_store_word_addr01_flop && (cur_state == WFC2) && !cp0_yy_be;

assign unalign_store_word_addr10 = lsu_unalign_store && lsu_unalign_size_word && unalign_addr10;
assign unalign_store_word_addr10_flop = lsu_unalign_store && lsu_unalign_flop_size_word && unalign_flop_addr10;
assign unalign_store_word_addr10_fst_big_v1 = unalign_store_word_addr10 && (cur_state == IDLE) && cp0_yy_be_v1;
assign unalign_store_word_addr10_scd_big_v1 = unalign_store_word_addr10_flop && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_store_word_addr10_fst_big_v2 = unalign_store_word_addr10 && (cur_state == IDLE) && cp0_yy_be_v2;
assign unalign_store_word_addr10_scd_big_v2 = unalign_store_word_addr10_flop && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_store_word_addr10_fst_lte = unalign_store_word_addr10 && (cur_state == IDLE) && !cp0_yy_be;
assign unalign_store_word_addr10_scd_lte = unalign_store_word_addr10_flop && (cur_state == WFC1) && !cp0_yy_be;

assign unalign_store_word_addr11 = lsu_unalign_store && lsu_unalign_size_word && unalign_addr11;
assign unalign_store_word_addr11_flop = lsu_unalign_store && lsu_unalign_flop_size_word && unalign_flop_addr11;
assign unalign_store_word_addr11_fst_big_v1 = unalign_store_word_addr11 && (cur_state == IDLE) && cp0_yy_be_v1;
assign unalign_store_word_addr11_scd_big_v1 = unalign_store_word_addr11_flop && (cur_state == WFC1) && cp0_yy_be_v1;
assign unalign_store_word_addr11_thd_big_v1 = unalign_store_word_addr11_flop && (cur_state == WFC2) && cp0_yy_be_v1;
assign unalign_store_word_addr11_fst_big_v2 = unalign_store_word_addr11 && (cur_state == IDLE) && cp0_yy_be_v2;
assign unalign_store_word_addr11_scd_big_v2 = unalign_store_word_addr11_flop && (cur_state == WFC1) && cp0_yy_be_v2;
assign unalign_store_word_addr11_thd_big_v2 = unalign_store_word_addr11_flop && (cur_state == WFC2) && cp0_yy_be_v2;
assign unalign_store_word_addr11_fst_lte = unalign_store_word_addr11 && (cur_state == IDLE) && !cp0_yy_be;
assign unalign_store_word_addr11_scd_lte = unalign_store_word_addr11_flop && (cur_state == WFC1) && !cp0_yy_be;
assign unalign_store_word_addr11_thd_lte = unalign_store_word_addr11_flop && (cur_state == WFC2) && !cp0_yy_be;



assign unalign_dp_store_data_byte1_to_byte1 = unalign_store_half_addr11_scd_big_v2 || unalign_store_word_addr01_thd_big_v2;
assign unalign_dp_store_data_byte2_to_byte1 = unalign_store_half_addr11_fst_big_v1 || unalign_store_word_addr01_scd_big_v1 ||
                                              unalign_store_half_addr11_scd_lte || unalign_store_word_addr11_scd_lte ||
                                              unalign_store_word_addr10_scd_big_v2;
assign unalign_dp_store_data_byte3_to_byte1 = unalign_store_word_addr10_fst_big_v1 || unalign_store_word_addr10_scd_lte ||
                                              unalign_store_word_addr11_scd_big_v2;
assign unalign_dp_store_data_byte4_to_byte1 = unalign_store_word_addr11_fst_big_v1 || unalign_store_word_addr01_thd_lte;


assign unalign_dp_store_data_byte1_to_byte2 = unalign_store_word_addr11_thd_big_v1 || unalign_store_word_addr01_fst_lte ||
                                              unalign_store_half_addr01_fst_lte || unalign_store_half_addr01_scd_big_v1 ||
                                              unalign_store_word_addr10_scd_big_v2;
assign unalign_dp_store_data_byte2_to_byte2 = unalign_store_half_addr01_fst_big_v2 || unalign_store_word_addr11_scd_big_v2;
assign unalign_dp_store_data_byte3_to_byte2 = unalign_store_word_addr01_scd_big_v1 || unalign_store_word_addr11_scd_lte;
assign unalign_dp_store_data_byte4_to_byte2 = unalign_store_word_addr10_fst_big_v1 || unalign_store_word_addr10_scd_lte ||
                                              unalign_store_word_addr01_fst_big_v2;


assign unalign_dp_store_data_byte1_to_byte3 = unalign_store_word_addr10_scd_big_v1 || unalign_store_word_addr10_fst_lte ||
                                              unalign_store_half_addr01_scd_big_v2 || unalign_store_word_addr11_thd_big_v2;
assign unalign_dp_store_data_byte2_to_byte3 = unalign_store_word_addr11_scd_big_v1 || unalign_store_word_addr01_scd_lte ||
                                              unalign_store_half_addr01_scd_lte || unalign_store_half_addr01_fst_big_v1;
assign unalign_dp_store_data_byte3_to_byte3 = unalign_store_word_addr01_scd_big_v2;
assign unalign_dp_store_data_byte4_to_byte3 = unalign_store_word_addr01_fst_big_v1 || unalign_store_word_addr11_thd_lte ||
                                              unalign_store_word_addr10_fst_big_v2;


assign unalign_dp_store_data_byte1_to_byte4 = unalign_store_half_addr11_scd_big_v1 || unalign_store_word_addr01_thd_big_v1 ||
                                              unalign_store_half_addr11_fst_lte || unalign_store_word_addr11_fst_lte;
assign unalign_dp_store_data_byte2_to_byte4 = unalign_store_word_addr10_scd_big_v1 || unalign_store_word_addr10_fst_lte ||
                                              unalign_store_half_addr11_fst_big_v2 || unalign_store_word_addr01_scd_big_v2;
assign unalign_dp_store_data_byte3_to_byte4 = unalign_store_word_addr11_scd_big_v1 || unalign_store_word_addr01_scd_lte ||
                                              unalign_store_word_addr10_fst_big_v2;
assign unalign_dp_store_data_byte4_to_byte4 = unalign_store_word_addr11_fst_big_v2;



endmodule



























module nm_mpu_acc_arb(
  cp0_yy_supv_mode_aft_dbg,
  ifu_access_deny_region,
  lsu_access_deny_region,
  lsu_mpu_is_st,
  regs_comp_ap0,
  regs_comp_ap1,
  regs_comp_ap2,
  regs_comp_ap3,
  regs_comp_excut0,
  regs_comp_excut1,
  regs_comp_excut2,
  regs_comp_excut3
);


input          cp0_yy_supv_mode_aft_dbg;  
input          lsu_mpu_is_st;             
input   [1:0]  regs_comp_ap0;             
input   [1:0]  regs_comp_ap1;             
input   [1:0]  regs_comp_ap2;             
input   [1:0]  regs_comp_ap3;             
input          regs_comp_excut0;          
input          regs_comp_excut1;          
input          regs_comp_excut2;          
input          regs_comp_excut3;          
output  [3:0]  ifu_access_deny_region;    
output  [3:0]  lsu_access_deny_region;    


reg     [3:0]  ifu_access_deny_region_pre; 
reg     [3:0]  lsu_access_deny_region;    


wire           cp0_yy_supv_mode_aft_dbg;  
wire    [3:0]  ifu_access_deny_region;    
wire    [2:0]  ifu_region_deny;           
wire           lsu_acc_supv_mode;         
wire           lsu_mpu_is_st;             
wire    [2:0]  lsu_region_deny;           
wire    [1:0]  regs_comp_ap0;             
wire    [1:0]  regs_comp_ap1;             
wire    [1:0]  regs_comp_ap2;             
wire    [1:0]  regs_comp_ap3;             
wire           regs_comp_excut0;          
wire           regs_comp_excut1;          
wire           regs_comp_excut2;          
wire           regs_comp_excut3;          





assign ifu_region_deny[2:0] = {1'b0, ~cp0_yy_supv_mode_aft_dbg, 1'b1};

assign lsu_acc_supv_mode = cp0_yy_supv_mode_aft_dbg;
assign lsu_region_deny[2:0] = {(~lsu_acc_supv_mode & lsu_mpu_is_st), 
                               ~lsu_acc_supv_mode, 1'b1};





always @( ifu_region_deny[2:0]
       or regs_comp_ap0[1:0])
begin
  case(regs_comp_ap0[1:0]) 
    2'b11: ifu_access_deny_region_pre[0] = 1'b0;
    2'b10: ifu_access_deny_region_pre[0] = ifu_region_deny[2];
    2'b01: ifu_access_deny_region_pre[0] = ifu_region_deny[1];
    2'b00: ifu_access_deny_region_pre[0] = ifu_region_deny[0];
  endcase

end


assign ifu_access_deny_region[0] = ifu_access_deny_region_pre[0] || regs_comp_excut0;


always @( lsu_region_deny[2:0]
       or regs_comp_ap0[1:0])
begin
  case(regs_comp_ap0[1:0])
    2'b11: lsu_access_deny_region[0] = 1'b0;
    2'b10: lsu_access_deny_region[0] = lsu_region_deny[2];
    2'b01: lsu_access_deny_region[0] = lsu_region_deny[1];
    2'b00: lsu_access_deny_region[0] = lsu_region_deny[0];
  endcase

end






always @( regs_comp_ap1[1:0]
       or ifu_region_deny[2:0])
begin
  case(regs_comp_ap1[1:0])
    2'b11: ifu_access_deny_region_pre[1] = 1'b0;
    2'b10: ifu_access_deny_region_pre[1] = ifu_region_deny[2];
    2'b01: ifu_access_deny_region_pre[1] = ifu_region_deny[1];
    2'b00: ifu_access_deny_region_pre[1] = ifu_region_deny[0];
  endcase

end


assign ifu_access_deny_region[1] = ifu_access_deny_region_pre[1] || regs_comp_excut1;


always @( regs_comp_ap1[1:0]
       or lsu_region_deny[2:0])
begin
  case(regs_comp_ap1[1:0])
    2'b11: lsu_access_deny_region[1] = 1'b0;
    2'b10: lsu_access_deny_region[1] = lsu_region_deny[2];
    2'b01: lsu_access_deny_region[1] = lsu_region_deny[1];
    2'b00: lsu_access_deny_region[1] = lsu_region_deny[0];
  endcase

end





always @( regs_comp_ap2[1:0]
       or ifu_region_deny[2:0])
begin
  case(regs_comp_ap2[1:0])
    2'b11: ifu_access_deny_region_pre[2] = 1'b0;
    2'b10: ifu_access_deny_region_pre[2] = ifu_region_deny[2];
    2'b01: ifu_access_deny_region_pre[2] = ifu_region_deny[1];
    2'b00: ifu_access_deny_region_pre[2] = ifu_region_deny[0];
  endcase

end


assign ifu_access_deny_region[2] = ifu_access_deny_region_pre[2] || regs_comp_excut2;


always @( regs_comp_ap2[1:0]
       or lsu_region_deny[2:0])
begin
  case(regs_comp_ap2[1:0])
    2'b11: lsu_access_deny_region[2] = 1'b0;
    2'b10: lsu_access_deny_region[2] = lsu_region_deny[2];
    2'b01: lsu_access_deny_region[2] = lsu_region_deny[1];
    2'b00: lsu_access_deny_region[2] = lsu_region_deny[0];
  endcase

end





always @( regs_comp_ap3[1:0]
       or ifu_region_deny[2:0])
begin
  case(regs_comp_ap3[1:0])
    2'b11: ifu_access_deny_region_pre[3] = 1'b0;
    2'b10: ifu_access_deny_region_pre[3] = ifu_region_deny[2];
    2'b01: ifu_access_deny_region_pre[3] = ifu_region_deny[1];
    2'b00: ifu_access_deny_region_pre[3] = ifu_region_deny[0];
  endcase

end


assign ifu_access_deny_region[3] = ifu_access_deny_region_pre[3] || regs_comp_excut3;


always @( regs_comp_ap3[1:0]
       or lsu_region_deny[2:0])
begin
  case(regs_comp_ap3[1:0])
    2'b11: lsu_access_deny_region[3] = 1'b0;
    2'b10: lsu_access_deny_region[3] = lsu_region_deny[2];
    2'b01: lsu_access_deny_region[3] = lsu_region_deny[1];
    2'b00: lsu_access_deny_region[3] = lsu_region_deny[0];
  endcase

end






















endmodule


























module nm_mpu_comp_hit(
  area_en,
  area_size,
  base_addr,
  ifu_acc_addr,
  lsu_acc_addr,
  mpu_ifu_hit,
  mpu_lsu_hit
);


input           area_en;       
input   [4 :0]  area_size;     
input   [24:0]  base_addr;     
input   [24:0]  ifu_acc_addr;  
input   [24:0]  lsu_acc_addr;  
output          mpu_ifu_hit;   
output          mpu_lsu_hit;   


reg     [24:0]  addr_mask;     


wire            area_en;       
wire    [4 :0]  area_size;     
wire    [24:0]  base_addr;     
wire    [24:0]  ifu_acc_addr;  
wire            ifu_addr_match; 
wire    [24:0]  lsu_acc_addr;  
wire            lsu_addr_match; 
wire            mpu_ifu_hit;   
wire            mpu_lsu_hit;   


assign mpu_ifu_hit    = area_en ? ifu_addr_match : 1'b0;
assign ifu_addr_match = (addr_mask[24:0] & ifu_acc_addr[24:0]) == base_addr[24:0];

assign mpu_lsu_hit    = area_en ? lsu_addr_match : 1'b0;
assign lsu_addr_match = (addr_mask[24:0] & lsu_acc_addr[24:0]) == base_addr[24:0];






always @( area_size[4:0])
begin
  case(area_size[4:0])
    5'b00110: addr_mask[24:0] = 25'h1ff_ffff;
    5'b00111: addr_mask[24:0] = 25'h1ff_fffe;
    5'b01000: addr_mask[24:0] = 25'h1ff_fffc;
    5'b01001: addr_mask[24:0] = 25'h1ff_fff8;
    5'b01010: addr_mask[24:0] = 25'h1ff_fff0;
    5'b01011: addr_mask[24:0] = 25'h1ff_ffe0;
    5'b01100: addr_mask[24:0] = 25'h1ff_ffc0;
    5'b01101: addr_mask[24:0] = 25'h1ff_ff80;
    5'b01110: addr_mask[24:0] = 25'h1ff_ff00;
    5'b01111: addr_mask[24:0] = 25'h1ff_fe00;
    5'b10000: addr_mask[24:0] = 25'h1ff_fc00;
    5'b10001: addr_mask[24:0] = 25'h1ff_f800;
    5'b10010: addr_mask[24:0] = 25'h1ff_f000;
    5'b10011: addr_mask[24:0] = 25'h1ff_e000;
    5'b10100: addr_mask[24:0] = 25'h1ff_c000;
    5'b10101: addr_mask[24:0] = 25'h1ff_8000;
    5'b10110: addr_mask[24:0] = 25'h1ff_0000;
    5'b10111: addr_mask[24:0] = 25'h1fe_0000;
    5'b11000: addr_mask[24:0] = 25'h1fc_0000;
    5'b11001: addr_mask[24:0] = 25'h1f8_0000;
    5'b11010: addr_mask[24:0] = 25'h1f0_0000;
    5'b11011: addr_mask[24:0] = 25'h1e0_0000;
    5'b11100: addr_mask[24:0] = 25'h1c0_0000;
    5'b11101: addr_mask[24:0] = 25'h180_0000;
    5'b11110: addr_mask[24:0] = 25'h100_0000;
    5'b11111: addr_mask[24:0] = 25'h000_0000;
    default : addr_mask[24:0] = 25'bx;
  endcase

end


endmodule

























module nm_mpu_enc(
  cp0_mpu_en,
  cp0_yy_supv_mode_aft_dbg,
  lsu_bmu_write,
  mpu_bmu_dbus_acc_deny,
  mpu_bmu_ibus_acc_deny,
  mpu_ifu_acc_scu,
  mpu_ifu_hit,
  mpu_lsu_acc_scu,
  mpu_lsu_hit,
  regs_comp_ap0,
  regs_comp_ap1,
  regs_comp_ap2,
  regs_comp_ap3,
  regs_comp_excut0,
  regs_comp_excut1,
  regs_comp_excut2,
  regs_comp_excut3,
  regs_comp_scu0,
  regs_comp_scu1,
  regs_comp_scu2,
  regs_comp_scu3
);


input          cp0_mpu_en;              
input          cp0_yy_supv_mode_aft_dbg; 
input          lsu_bmu_write;           
input   [3:0]  mpu_ifu_hit;             
input   [3:0]  mpu_lsu_hit;             
input   [1:0]  regs_comp_ap0;           
input   [1:0]  regs_comp_ap1;           
input   [1:0]  regs_comp_ap2;           
input   [1:0]  regs_comp_ap3;           
input          regs_comp_excut0;        
input          regs_comp_excut1;        
input          regs_comp_excut2;        
input          regs_comp_excut3;        
input          regs_comp_scu0;          
input          regs_comp_scu1;          
input          regs_comp_scu2;          
input          regs_comp_scu3;          
output         mpu_bmu_dbus_acc_deny;   
output         mpu_bmu_ibus_acc_deny;   
output         mpu_ifu_acc_scu;         
output         mpu_lsu_acc_scu;         


reg            ifu_access_deny;         
reg            ifu_access_security;     
reg            lsu_access_deny;         
reg            lsu_access_security;     


wire           cp0_mpu_en;              
wire           cp0_yy_supv_mode_aft_dbg; 
wire    [3:0]  ifu_access_deny_region;  
wire    [3:0]  lsu_access_deny_region;  
wire           lsu_bmu_write;           
wire           mpu_bmu_dbus_acc_deny;   
wire           mpu_bmu_ibus_acc_deny;   
wire           mpu_ifu_acc_scu;         
wire    [3:0]  mpu_ifu_hit;             
wire           mpu_lsu_acc_scu;         
wire    [3:0]  mpu_lsu_hit;             
wire    [1:0]  regs_comp_ap0;           
wire    [1:0]  regs_comp_ap1;           
wire    [1:0]  regs_comp_ap2;           
wire    [1:0]  regs_comp_ap3;           
wire           regs_comp_excut0;        
wire           regs_comp_excut1;        
wire           regs_comp_excut2;        
wire           regs_comp_excut3;        
wire           regs_comp_scu0;          
wire           regs_comp_scu1;          
wire           regs_comp_scu2;          
wire           regs_comp_scu3;          






nm_mpu_acc_arb  x_nm_mpu_acc_arb (
  .cp0_yy_supv_mode_aft_dbg (cp0_yy_supv_mode_aft_dbg),
  .ifu_access_deny_region   (ifu_access_deny_region  ),
  .lsu_access_deny_region   (lsu_access_deny_region  ),
  .lsu_mpu_is_st            (lsu_bmu_write           ),
  .regs_comp_ap0            (regs_comp_ap0           ),
  .regs_comp_ap1            (regs_comp_ap1           ),
  .regs_comp_ap2            (regs_comp_ap2           ),
  .regs_comp_ap3            (regs_comp_ap3           ),
  .regs_comp_excut0         (regs_comp_excut0        ),
  .regs_comp_excut1         (regs_comp_excut1        ),
  .regs_comp_excut2         (regs_comp_excut2        ),
  .regs_comp_excut3         (regs_comp_excut3        )
);

































always @( mpu_ifu_hit[3:0]
       or cp0_mpu_en
       or ifu_access_deny_region[3:0])
begin
if(cp0_mpu_en)
  casez(mpu_ifu_hit[3:0]) 
    4'b1???: ifu_access_deny = ifu_access_deny_region[3];
    4'b01??: ifu_access_deny = ifu_access_deny_region[2];
    4'b001?: ifu_access_deny = ifu_access_deny_region[1];
    4'b0001: ifu_access_deny = ifu_access_deny_region[0];
    4'b0000: ifu_access_deny = 1'b1;
    default: ifu_access_deny = 1'bx;
  endcase
else
  ifu_access_deny = 1'b0;

end


always @( lsu_access_deny_region[3:0]
       or mpu_lsu_hit[3:0]
       or cp0_mpu_en)
begin
if(cp0_mpu_en)
  casez(mpu_lsu_hit[3:0]) 
    4'b1???: lsu_access_deny = lsu_access_deny_region[3];
    4'b01??: lsu_access_deny = lsu_access_deny_region[2];
    4'b001?: lsu_access_deny = lsu_access_deny_region[1];
    4'b0001: lsu_access_deny = lsu_access_deny_region[0];
    4'b0000: lsu_access_deny = 1'b1;
    default: lsu_access_deny = 1'bx;
  endcase
else
  lsu_access_deny = 1'b0;

end













always @( mpu_ifu_hit[3:0]
       or cp0_mpu_en
       or regs_comp_scu2
       or regs_comp_scu1
       or regs_comp_scu3
       or regs_comp_scu0)
begin
if(cp0_mpu_en)
  casez(mpu_ifu_hit[3:0]) 
    4'b1???: ifu_access_security = regs_comp_scu3;
    4'b01??: ifu_access_security = regs_comp_scu2;
    4'b001?: ifu_access_security = regs_comp_scu1;
    4'b0001: ifu_access_security = regs_comp_scu0;
    4'b0000: ifu_access_security = 1'b0;
    default: ifu_access_security = 1'bx;
  endcase
else
  ifu_access_security = 1'b0;

end


always @( mpu_lsu_hit[3:0]
       or cp0_mpu_en
       or regs_comp_scu2
       or regs_comp_scu1
       or regs_comp_scu3
       or regs_comp_scu0)
begin
if(cp0_mpu_en)
  casez(mpu_lsu_hit[3:0])
    4'b1???: lsu_access_security = regs_comp_scu3;
    4'b01??: lsu_access_security = regs_comp_scu2;
    4'b001?: lsu_access_security = regs_comp_scu1;
    4'b0001: lsu_access_security = regs_comp_scu0;
    4'b0000: lsu_access_security = 1'b0;
    default: lsu_access_security = 1'bx;
  endcase
else
  lsu_access_security = 1'b0;

end




































assign mpu_bmu_ibus_acc_deny = ifu_access_deny;
assign mpu_ifu_acc_scu       = ifu_access_security;
assign mpu_bmu_dbus_acc_deny = lsu_access_deny;
assign mpu_lsu_acc_scu       = lsu_access_security;



endmodule

























module nm_mpu_reg_rd(
  cp0_mpu_capr_sel,
  cp0_mpu_pacr_sel,
  cp0_mpu_rid_sel,
  mpu_cp0_data,
  regs_comp_ap0,
  regs_comp_ap1,
  regs_comp_ap2,
  regs_comp_ap3,
  regs_comp_area_en0,
  regs_comp_area_en1,
  regs_comp_area_en2,
  regs_comp_area_en3,
  regs_comp_base0,
  regs_comp_base1,
  regs_comp_base2,
  regs_comp_base3,
  regs_comp_excut0,
  regs_comp_excut1,
  regs_comp_excut2,
  regs_comp_excut3,
  regs_comp_rid,
  regs_comp_scu0,
  regs_comp_scu1,
  regs_comp_scu2,
  regs_comp_scu3,
  regs_comp_size0,
  regs_comp_size1,
  regs_comp_size2,
  regs_comp_size3
);


input           cp0_mpu_capr_sel;        
input           cp0_mpu_pacr_sel;        
input           cp0_mpu_rid_sel;         
input   [1 :0]  regs_comp_ap0;           
input   [1 :0]  regs_comp_ap1;           
input   [1 :0]  regs_comp_ap2;           
input   [1 :0]  regs_comp_ap3;           
input           regs_comp_area_en0;      
input           regs_comp_area_en1;      
input           regs_comp_area_en2;      
input           regs_comp_area_en3;      
input   [24:0]  regs_comp_base0;         
input   [24:0]  regs_comp_base1;         
input   [24:0]  regs_comp_base2;         
input   [24:0]  regs_comp_base3;         
input           regs_comp_excut0;        
input           regs_comp_excut1;        
input           regs_comp_excut2;        
input           regs_comp_excut3;        
input   [2 :0]  regs_comp_rid;           
input           regs_comp_scu0;          
input           regs_comp_scu1;          
input           regs_comp_scu2;          
input           regs_comp_scu3;          
input   [4 :0]  regs_comp_size0;         
input   [4 :0]  regs_comp_size1;         
input   [4 :0]  regs_comp_size2;         
input   [4 :0]  regs_comp_size3;         
output  [31:0]  mpu_cp0_data;            


reg             mask_post;               
reg     [31:0]  pacr_value_post;         


wire    [31:0]  capr_value;              
wire            cp0_mpu_capr_sel;        
wire            cp0_mpu_pacr_sel;        
wire            cp0_mpu_rid_sel;         
wire            cp0_yy_secu_mode_aft_dbg; 
wire            mask0;                   
wire            mask1;                   
wire            mask2;                   
wire            mask3;                   
wire    [31:0]  mpu_cp0_data;            
wire    [31:0]  pacr_value;              
wire    [15:0]  regs_ap;                 
wire    [1 :0]  regs_comp_ap0;           
wire    [1 :0]  regs_comp_ap0_post;      
wire    [1 :0]  regs_comp_ap1;           
wire    [1 :0]  regs_comp_ap1_post;      
wire    [1 :0]  regs_comp_ap2;           
wire    [1 :0]  regs_comp_ap2_post;      
wire    [1 :0]  regs_comp_ap3;           
wire    [1 :0]  regs_comp_ap3_post;      
wire            regs_comp_area_en0;      
wire            regs_comp_area_en1;      
wire            regs_comp_area_en2;      
wire            regs_comp_area_en3;      
wire    [24:0]  regs_comp_base0;         
wire    [24:0]  regs_comp_base1;         
wire    [24:0]  regs_comp_base2;         
wire    [24:0]  regs_comp_base3;         
wire            regs_comp_excut0;        
wire            regs_comp_excut0_post;   
wire            regs_comp_excut1;        
wire            regs_comp_excut1_post;   
wire            regs_comp_excut2;        
wire            regs_comp_excut2_post;   
wire            regs_comp_excut3;        
wire            regs_comp_excut3_post;   
wire    [2 :0]  regs_comp_rid;           
wire            regs_comp_scu0;          
wire            regs_comp_scu0_post;     
wire            regs_comp_scu1;          
wire            regs_comp_scu1_post;     
wire            regs_comp_scu2;          
wire            regs_comp_scu2_post;     
wire            regs_comp_scu3;          
wire            regs_comp_scu3_post;     
wire    [4 :0]  regs_comp_size0;         
wire    [4 :0]  regs_comp_size1;         
wire    [4 :0]  regs_comp_size2;         
wire    [4 :0]  regs_comp_size3;         
wire    [7 :0]  regs_executable;         
wire    [7 :0]  regs_security;           
wire    [31:0]  rid_value;               



















assign mpu_cp0_data[31:0] = {32{cp0_mpu_capr_sel}} & capr_value[31:0]
                          | {32{cp0_mpu_pacr_sel}} & pacr_value[31:0]
                          | {32{cp0_mpu_rid_sel}}  & rid_value[31:0];

assign capr_value[31:0] = {regs_security[7:0],regs_ap[15:0],regs_executable[7:0]};
assign pacr_value[31:0] = pacr_value_post[31:0] & {32{mask_post}};
assign rid_value[31:0]  = {29'b0, regs_comp_rid[2:0]};


assign cp0_yy_secu_mode_aft_dbg = 1'b1;

















assign regs_comp_scu0_post = regs_comp_scu0 && cp0_yy_secu_mode_aft_dbg;
assign regs_comp_scu1_post = regs_comp_scu1 && cp0_yy_secu_mode_aft_dbg;
assign regs_comp_scu2_post = regs_comp_scu2 && cp0_yy_secu_mode_aft_dbg;
assign regs_comp_scu3_post = regs_comp_scu3 && cp0_yy_secu_mode_aft_dbg;
assign mask0 = !regs_comp_scu0 || cp0_yy_secu_mode_aft_dbg;
assign mask1 = !regs_comp_scu1 || cp0_yy_secu_mode_aft_dbg;
assign mask2 = !regs_comp_scu2 || cp0_yy_secu_mode_aft_dbg;
assign mask3 = !regs_comp_scu3 || cp0_yy_secu_mode_aft_dbg;
assign regs_comp_ap0_post[1:0] = regs_comp_ap0[1:0] & {2{mask0}};
assign regs_comp_ap1_post[1:0] = regs_comp_ap1[1:0] & {2{mask1}};
assign regs_comp_ap2_post[1:0] = regs_comp_ap2[1:0] & {2{mask2}};
assign regs_comp_ap3_post[1:0] = regs_comp_ap3[1:0] & {2{mask3}};
assign regs_comp_excut0_post = regs_comp_excut0 && mask0;
assign regs_comp_excut1_post = regs_comp_excut1 && mask1;
assign regs_comp_excut2_post = regs_comp_excut2 && mask2;
assign regs_comp_excut3_post = regs_comp_excut3 && mask3;

always @( mask3
       or mask1
       or regs_comp_rid[2:0]
       or mask0
       or mask2)
begin
case(regs_comp_rid[2:0])
  3'b000 : mask_post = mask0;
  3'b001 : mask_post = mask1;
  3'b010 : mask_post = mask2;
  3'b011 : mask_post = mask3;
  default: mask_post = 1'bx;
endcase

end

assign regs_security[7:0]  = {1'b0,          1'b0,
                              1'b0,          1'b0,
                              regs_comp_scu3_post,regs_comp_scu2_post,
                              regs_comp_scu1_post,regs_comp_scu0_post};

assign regs_ap[15:0]       = {2'b0,              2'b0,
                              2'b0,              2'b0,
                              regs_comp_ap3_post[1:0],regs_comp_ap2_post[1:0],
                              regs_comp_ap1_post[1:0],regs_comp_ap0_post[1:0]};

assign regs_executable[7:0]= {1'b0,          1'b0,
                              1'b0,          1'b0,
                              regs_comp_excut3_post, regs_comp_excut2_post,
                              regs_comp_excut1_post, regs_comp_excut0_post};




always @( regs_comp_size1[4:0]
       or regs_comp_rid[2:0]
       or regs_comp_area_en0
       or regs_comp_base0[24:0]
       or regs_comp_area_en2
       or regs_comp_size0[4:0]
       or regs_comp_base1[24:0]
       or regs_comp_size2[4:0]
       or regs_comp_base3[24:0]
       or regs_comp_base2[24:0]
       or regs_comp_size3[4:0]
       or regs_comp_area_en1
       or regs_comp_area_en3)
begin
case(regs_comp_rid[2:0])
  3'b000 : pacr_value_post[31:0] = {regs_comp_base0[24:0], 1'b0, 
                               regs_comp_size0[4:0] , regs_comp_area_en0}; 
  3'b001 : pacr_value_post[31:0] = {regs_comp_base1[24:0], 1'b0, 
                               regs_comp_size1[4:0] , regs_comp_area_en1}; 
  3'b010 : pacr_value_post[31:0] = {regs_comp_base2[24:0], 1'b0, 
                               regs_comp_size2[4:0] , regs_comp_area_en2}; 
  3'b011 : pacr_value_post[31:0] = {regs_comp_base3[24:0], 1'b0, 
                               regs_comp_size3[4:0] , regs_comp_area_en3}; 
  default: pacr_value_post[31:0] = 32'bx; 
endcase

end























endmodule

























module nm_mpu_regs(
  cp0_mpu_soft_reset,
  cp0_mpu_updt_capr,
  cp0_mpu_updt_data,
  cp0_mpu_updt_pacr,
  cp0_mpu_updt_rid,
  cpuclk,
  cpurst_b,
  regs_comp_ap0,
  regs_comp_ap1,
  regs_comp_ap2,
  regs_comp_ap3,
  regs_comp_area_en0,
  regs_comp_area_en1,
  regs_comp_area_en2,
  regs_comp_area_en3,
  regs_comp_base0,
  regs_comp_base1,
  regs_comp_base2,
  regs_comp_base3,
  regs_comp_excut0,
  regs_comp_excut1,
  regs_comp_excut2,
  regs_comp_excut3,
  regs_comp_rid,
  regs_comp_scu0,
  regs_comp_scu1,
  regs_comp_scu2,
  regs_comp_scu3,
  regs_comp_size0,
  regs_comp_size1,
  regs_comp_size2,
  regs_comp_size3
);


input           cp0_mpu_soft_reset;      
input           cp0_mpu_updt_capr;       
input   [31:0]  cp0_mpu_updt_data;       
input           cp0_mpu_updt_pacr;       
input           cp0_mpu_updt_rid;        
input           cpuclk;                  
input           cpurst_b;                
output  [1 :0]  regs_comp_ap0;           
output  [1 :0]  regs_comp_ap1;           
output  [1 :0]  regs_comp_ap2;           
output  [1 :0]  regs_comp_ap3;           
output          regs_comp_area_en0;      
output          regs_comp_area_en1;      
output          regs_comp_area_en2;      
output          regs_comp_area_en3;      
output  [24:0]  regs_comp_base0;         
output  [24:0]  regs_comp_base1;         
output  [24:0]  regs_comp_base2;         
output  [24:0]  regs_comp_base3;         
output          regs_comp_excut0;        
output          regs_comp_excut1;        
output          regs_comp_excut2;        
output          regs_comp_excut3;        
output  [2 :0]  regs_comp_rid;           
output          regs_comp_scu0;          
output          regs_comp_scu1;          
output          regs_comp_scu2;          
output          regs_comp_scu3;          
output  [4 :0]  regs_comp_size0;         
output  [4 :0]  regs_comp_size1;         
output  [4 :0]  regs_comp_size2;         
output  [4 :0]  regs_comp_size3;         


reg             acc_executeable0;        
reg             acc_executeable1;        
reg             acc_executeable2;        
reg             acc_executeable3;        
reg     [1 :0]  acc_permission0;         
reg     [1 :0]  acc_permission1;         
reg     [1 :0]  acc_permission2;         
reg     [1 :0]  acc_permission3;         
reg             acc_security0;           
reg             acc_security1;           
reg             acc_security2;           
reg             acc_security3;           
reg             pacr_area_en0;           
reg             pacr_area_en1;           
reg             pacr_area_en2;           
reg             pacr_area_en3;           
reg     [24:0]  pacr_base_addr0;         
reg     [24:0]  pacr_base_addr1;         
reg     [24:0]  pacr_base_addr2;         
reg     [24:0]  pacr_base_addr3;         
reg     [4 :0]  pacr_size0;              
reg     [4 :0]  pacr_size1;              
reg     [4 :0]  pacr_size2;              
reg     [4 :0]  pacr_size3;              
reg     [1 :0]  rid;                     


wire            cp0_mpu_soft_reset;      
wire            cp0_mpu_updt_capr;       
wire            cp0_mpu_updt_capr_sec;   
wire    [31:0]  cp0_mpu_updt_data;       
wire            cp0_mpu_updt_pacr;       
wire            cp0_mpu_updt_rid;        
wire            cp0_yy_secu_mode_aft_dbg; 
wire            cpuclk;                  
wire            cpurst_b;                
wire    [2 :0]  mgu_rid;                 
wire            pacr_updt_area0_sel;     
wire            pacr_updt_area1_sel;     
wire            pacr_updt_area2_sel;     
wire            pacr_updt_area3_sel;     
wire    [1 :0]  regs_comp_ap0;           
wire    [1 :0]  regs_comp_ap1;           
wire    [1 :0]  regs_comp_ap2;           
wire    [1 :0]  regs_comp_ap3;           
wire            regs_comp_area_en0;      
wire            regs_comp_area_en1;      
wire            regs_comp_area_en2;      
wire            regs_comp_area_en3;      
wire    [24:0]  regs_comp_base0;         
wire    [24:0]  regs_comp_base1;         
wire    [24:0]  regs_comp_base2;         
wire    [24:0]  regs_comp_base3;         
wire            regs_comp_excut0;        
wire            regs_comp_excut1;        
wire            regs_comp_excut2;        
wire            regs_comp_excut3;        
wire    [2 :0]  regs_comp_rid;           
wire            regs_comp_scu0;          
wire            regs_comp_scu1;          
wire            regs_comp_scu2;          
wire            regs_comp_scu3;          
wire    [4 :0]  regs_comp_size0;         
wire    [4 :0]  regs_comp_size1;         
wire    [4 :0]  regs_comp_size2;         
wire    [4 :0]  regs_comp_size3;         
wire            sel_rid_0;               
wire            sel_rid_1;               
wire            sel_rid_2;               
wire            sel_rid_3;               


assign regs_comp_scu0        = acc_security0;
assign regs_comp_excut0      = acc_executeable0;
assign regs_comp_ap0[1:0]    = acc_permission0[1:0];
assign regs_comp_area_en0    = pacr_area_en0;
assign regs_comp_base0[24:0] = pacr_base_addr0[24:0];
assign regs_comp_size0[4:0]  = pacr_size0[4:0];
assign regs_comp_scu1        = acc_security1;
assign regs_comp_excut1      = acc_executeable1;
assign regs_comp_ap1[1:0]    = acc_permission1[1:0];
assign regs_comp_area_en1    = pacr_area_en1;
assign regs_comp_base1[24:0] = pacr_base_addr1[24:0];
assign regs_comp_size1[4:0]  = pacr_size1[4:0];
assign regs_comp_scu2        = acc_security2;
assign regs_comp_excut2      = acc_executeable2;
assign regs_comp_ap2[1:0]    = acc_permission2[1:0];
assign regs_comp_area_en2    = pacr_area_en2;
assign regs_comp_base2[24:0] = pacr_base_addr2[24:0];
assign regs_comp_size2[4:0]  = pacr_size2[4:0];
assign regs_comp_scu3        = acc_security3;
assign regs_comp_excut3      = acc_executeable3;
assign regs_comp_ap3[1:0]    = acc_permission3[1:0];
assign regs_comp_area_en3    = pacr_area_en3;
assign regs_comp_base3[24:0] = pacr_base_addr3[24:0];
assign regs_comp_size3[4:0]  = pacr_size3[4:0];




assign cp0_mpu_updt_capr_sec   = cp0_mpu_updt_capr;
assign cp0_yy_secu_mode_aft_dbg = 1'b1;

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    acc_security0        <= 1'b0;
  else if(cp0_mpu_updt_capr_sec)
    acc_security0        <= cp0_mpu_updt_data[24];
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    acc_permission0[1:0] <= 2'b0;
    acc_executeable0     <= 1'b0;
  end
  else if(cp0_mpu_updt_capr && (!acc_security0 || cp0_yy_secu_mode_aft_dbg))
  begin
    acc_permission0[1:0] <= cp0_mpu_updt_data[9:8];
    acc_executeable0     <= cp0_mpu_updt_data[0];
  end
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    acc_security1        <= 1'b0;
  else if(cp0_mpu_updt_capr_sec)
    acc_security1        <= cp0_mpu_updt_data[25];
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    acc_permission1[1:0] <= 2'b0;
    acc_executeable1     <= 1'b0;
  end
  else if(cp0_mpu_updt_capr && (!acc_security1 || cp0_yy_secu_mode_aft_dbg))
  begin
    acc_permission1[1:0] <= cp0_mpu_updt_data[11:10];
    acc_executeable1     <= cp0_mpu_updt_data[1];
  end
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    acc_security2        <= 1'b0;
  else if(cp0_mpu_updt_capr_sec)
    acc_security2        <= cp0_mpu_updt_data[26];
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    acc_permission2[1:0] <= 2'b0;
    acc_executeable2     <= 1'b0;
  end
  else if(cp0_mpu_updt_capr && (!acc_security2 || cp0_yy_secu_mode_aft_dbg))
  begin
    acc_permission2[1:0] <= cp0_mpu_updt_data[13:12];
    acc_executeable2     <= cp0_mpu_updt_data[2];
  end
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    acc_security3        <= 1'b0;
  else if(cp0_mpu_updt_capr_sec)
    acc_security3        <= cp0_mpu_updt_data[27];
end

always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    acc_permission3[1:0] <= 2'b0;
    acc_executeable3     <= 1'b0;
  end
  else if(cp0_mpu_updt_capr && (!acc_security3 || cp0_yy_secu_mode_aft_dbg))
  begin
    acc_permission3[1:0] <= cp0_mpu_updt_data[15:14];
    acc_executeable3     <= cp0_mpu_updt_data[3];
  end
end




















assign sel_rid_0 = (mgu_rid[2:0] == 3'd0);
assign pacr_updt_area0_sel = cp0_mpu_updt_pacr && sel_rid_0 || !cp0_mpu_soft_reset;
always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pacr_area_en0 <= 1'b0;
  else if(pacr_updt_area0_sel)
    pacr_area_en0 <= cp0_mpu_updt_data[0];
end

always @(posedge cpuclk) 
begin
  if(pacr_updt_area0_sel)
  begin
    pacr_base_addr0[24:0] <= cp0_mpu_updt_data[31:7];
    pacr_size0[4:0]       <= cp0_mpu_updt_data[5:1];
  end
end











assign sel_rid_1 = (mgu_rid[2:0] == 3'd1);
assign pacr_updt_area1_sel = cp0_mpu_updt_pacr && sel_rid_1 || !cp0_mpu_soft_reset;
always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pacr_area_en1 <= 1'b0;
  else if(pacr_updt_area1_sel)
    pacr_area_en1 <= cp0_mpu_updt_data[0];
end

always @(posedge cpuclk) 
begin
  if(pacr_updt_area1_sel)
  begin
    pacr_base_addr1[24:0] <= cp0_mpu_updt_data[31:7];
    pacr_size1[4:0]       <= cp0_mpu_updt_data[5:1];
  end
end











assign sel_rid_2 = (mgu_rid[2:0] == 3'd2);
assign pacr_updt_area2_sel = cp0_mpu_updt_pacr && sel_rid_2 || !cp0_mpu_soft_reset;
always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pacr_area_en2 <= 1'b0;
  else if(pacr_updt_area2_sel)
    pacr_area_en2 <= cp0_mpu_updt_data[0];
end

always @(posedge cpuclk) 
begin
  if(pacr_updt_area2_sel)
  begin
    pacr_base_addr2[24:0] <= cp0_mpu_updt_data[31:7];
    pacr_size2[4:0]       <= cp0_mpu_updt_data[5:1];
  end
end











assign sel_rid_3 = (mgu_rid[2:0] == 3'd3);
assign pacr_updt_area3_sel = cp0_mpu_updt_pacr && sel_rid_3 || !cp0_mpu_soft_reset;
always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    pacr_area_en3 <= 1'b0;
  else if(pacr_updt_area3_sel)
    pacr_area_en3 <= cp0_mpu_updt_data[0];
end

always @(posedge cpuclk) 
begin
  if(pacr_updt_area3_sel)
  begin
    pacr_base_addr3[24:0] <= cp0_mpu_updt_data[31:7];
    pacr_size3[4:0]       <= cp0_mpu_updt_data[5:1];
  end
end

















































always @(posedge cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    rid[1:0] <= 2'b0;
  else if(cp0_mpu_updt_rid)
    rid[1:0] <= cp0_mpu_updt_data[1:0];
end

assign mgu_rid[2:0] = {1'b0,rid[1:0]};
assign regs_comp_rid[2:0] = mgu_rid[2:0];















endmodule


























module nm_mpu_top(
  cp0_mpu_capr_sel,
  cp0_mpu_en,
  cp0_mpu_pacr_sel,
  cp0_mpu_rid_sel,
  cp0_mpu_soft_reset,
  cp0_mpu_updt_capr,
  cp0_mpu_updt_data,
  cp0_mpu_updt_pacr,
  cp0_mpu_updt_rid,
  cp0_yy_clk_en,
  cp0_yy_supv_mode_aft_dbg,
  cpurst_b,
  forever_cpuclk,
  ifu_bmu_addr,
  lsu_bmu_addr,
  lsu_bmu_write,
  mpu_bmu_dbus_acc_deny,
  mpu_bmu_ibus_acc_deny,
  mpu_cp0_data,
  mpu_ifu_acc_scu,
  mpu_lsu_acc_scu,
  pad_yy_gate_clk_en_b
);


input           cp0_mpu_capr_sel;        
input           cp0_mpu_en;              
input           cp0_mpu_pacr_sel;        
input           cp0_mpu_rid_sel;         
input           cp0_mpu_soft_reset;      
input           cp0_mpu_updt_capr;       
input   [31:0]  cp0_mpu_updt_data;       
input           cp0_mpu_updt_pacr;       
input           cp0_mpu_updt_rid;        
input           cp0_yy_clk_en;           
input           cp0_yy_supv_mode_aft_dbg; 
input           cpurst_b;                
input           forever_cpuclk;          
input   [31:0]  ifu_bmu_addr;            
input   [31:0]  lsu_bmu_addr;            
input           lsu_bmu_write;           
input           pad_yy_gate_clk_en_b;    
output          mpu_bmu_dbus_acc_deny;   
output          mpu_bmu_ibus_acc_deny;   
output  [31:0]  mpu_cp0_data;            
output          mpu_ifu_acc_scu;         
output          mpu_lsu_acc_scu;         




wire            cp0_mpu_capr_sel;        
wire            cp0_mpu_en;              
wire            cp0_mpu_pacr_sel;        
wire            cp0_mpu_rid_sel;         
wire            cp0_mpu_soft_reset;      
wire            cp0_mpu_updt_capr;       
wire    [31:0]  cp0_mpu_updt_data;       
wire            cp0_mpu_updt_pacr;       
wire            cp0_mpu_updt_rid;        
wire            cp0_yy_clk_en;           
wire            cp0_yy_supv_mode_aft_dbg; 
wire            cpuclk;                  
wire            cpurst_b;                
wire            forever_cpuclk;          
wire    [31:0]  ifu_bmu_addr;            
wire    [31:0]  lsu_bmu_addr;            
wire            lsu_bmu_write;           
wire            mpu_bmu_dbus_acc_deny;   
wire            mpu_bmu_ibus_acc_deny;   
wire    [31:0]  mpu_cp0_data;            
wire            mpu_ifu_acc_scu;         
wire    [3 :0]  mpu_ifu_hit;             
wire            mpu_lsu_acc_scu;         
wire    [3 :0]  mpu_lsu_hit;             
wire            pad_yy_gate_clk_en_b;    
wire    [1 :0]  regs_comp_ap0;           
wire    [1 :0]  regs_comp_ap1;           
wire    [1 :0]  regs_comp_ap2;           
wire    [1 :0]  regs_comp_ap3;           
wire            regs_comp_area_en0;      
wire            regs_comp_area_en1;      
wire            regs_comp_area_en2;      
wire            regs_comp_area_en3;      
wire    [24:0]  regs_comp_base0;         
wire    [24:0]  regs_comp_base1;         
wire    [24:0]  regs_comp_base2;         
wire    [24:0]  regs_comp_base3;         
wire            regs_comp_excut0;        
wire            regs_comp_excut1;        
wire            regs_comp_excut2;        
wire            regs_comp_excut3;        
wire    [2 :0]  regs_comp_rid;           
wire            regs_comp_scu0;          
wire            regs_comp_scu1;          
wire            regs_comp_scu2;          
wire            regs_comp_scu3;          
wire    [4 :0]  regs_comp_size0;         
wire    [4 :0]  regs_comp_size1;         
wire    [4 :0]  regs_comp_size2;         
wire    [4 :0]  regs_comp_size3;         
wire            wr_mpu_regs;             


assign wr_mpu_regs = cp0_mpu_updt_capr | cp0_mpu_updt_pacr | cp0_mpu_updt_rid;


gated_clk_cell  x_mpu_gated_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (cpuclk              ),
  .external_en          (1'b0                ),
  .global_en            (cp0_yy_clk_en       ),
  .local_en             (1'b0                ),
  .module_en            (wr_mpu_regs         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);











nm_mpu_enc  x_nm_mpu_enc (
  .cp0_mpu_en               (cp0_mpu_en              ),
  .cp0_yy_supv_mode_aft_dbg (cp0_yy_supv_mode_aft_dbg),
  .lsu_bmu_write            (lsu_bmu_write           ),
  .mpu_bmu_dbus_acc_deny    (mpu_bmu_dbus_acc_deny   ),
  .mpu_bmu_ibus_acc_deny    (mpu_bmu_ibus_acc_deny   ),
  .mpu_ifu_acc_scu          (mpu_ifu_acc_scu         ),
  .mpu_ifu_hit              (mpu_ifu_hit             ),
  .mpu_lsu_acc_scu          (mpu_lsu_acc_scu         ),
  .mpu_lsu_hit              (mpu_lsu_hit             ),
  .regs_comp_ap0            (regs_comp_ap0           ),
  .regs_comp_ap1            (regs_comp_ap1           ),
  .regs_comp_ap2            (regs_comp_ap2           ),
  .regs_comp_ap3            (regs_comp_ap3           ),
  .regs_comp_excut0         (regs_comp_excut0        ),
  .regs_comp_excut1         (regs_comp_excut1        ),
  .regs_comp_excut2         (regs_comp_excut2        ),
  .regs_comp_excut3         (regs_comp_excut3        ),
  .regs_comp_scu0           (regs_comp_scu0          ),
  .regs_comp_scu1           (regs_comp_scu1          ),
  .regs_comp_scu2           (regs_comp_scu2          ),
  .regs_comp_scu3           (regs_comp_scu3          )
);



nm_mpu_reg_rd  x_nm_mpu_reg_rd (
  .cp0_mpu_capr_sel   (cp0_mpu_capr_sel  ),
  .cp0_mpu_pacr_sel   (cp0_mpu_pacr_sel  ),
  .cp0_mpu_rid_sel    (cp0_mpu_rid_sel   ),
  .mpu_cp0_data       (mpu_cp0_data      ),
  .regs_comp_ap0      (regs_comp_ap0     ),
  .regs_comp_ap1      (regs_comp_ap1     ),
  .regs_comp_ap2      (regs_comp_ap2     ),
  .regs_comp_ap3      (regs_comp_ap3     ),
  .regs_comp_area_en0 (regs_comp_area_en0),
  .regs_comp_area_en1 (regs_comp_area_en1),
  .regs_comp_area_en2 (regs_comp_area_en2),
  .regs_comp_area_en3 (regs_comp_area_en3),
  .regs_comp_base0    (regs_comp_base0   ),
  .regs_comp_base1    (regs_comp_base1   ),
  .regs_comp_base2    (regs_comp_base2   ),
  .regs_comp_base3    (regs_comp_base3   ),
  .regs_comp_excut0   (regs_comp_excut0  ),
  .regs_comp_excut1   (regs_comp_excut1  ),
  .regs_comp_excut2   (regs_comp_excut2  ),
  .regs_comp_excut3   (regs_comp_excut3  ),
  .regs_comp_rid      (regs_comp_rid     ),
  .regs_comp_scu0     (regs_comp_scu0    ),
  .regs_comp_scu1     (regs_comp_scu1    ),
  .regs_comp_scu2     (regs_comp_scu2    ),
  .regs_comp_scu3     (regs_comp_scu3    ),
  .regs_comp_size0    (regs_comp_size0   ),
  .regs_comp_size1    (regs_comp_size1   ),
  .regs_comp_size2    (regs_comp_size2   ),
  .regs_comp_size3    (regs_comp_size3   )
);






nm_mpu_comp_hit  x_nm_mpu_comp_hit_0 (
  .area_en            (regs_comp_area_en0),
  .area_size          (regs_comp_size0   ),
  .base_addr          (regs_comp_base0   ),
  .ifu_acc_addr       (ifu_bmu_addr[31:7]),
  .lsu_acc_addr       (lsu_bmu_addr[31:7]),
  .mpu_ifu_hit        (mpu_ifu_hit[0]    ),
  .mpu_lsu_hit        (mpu_lsu_hit[0]    )
);











nm_mpu_comp_hit  x_nm_mpu_comp_hit_1 (
  .area_en            (regs_comp_area_en1),
  .area_size          (regs_comp_size1   ),
  .base_addr          (regs_comp_base1   ),
  .ifu_acc_addr       (ifu_bmu_addr[31:7]),
  .lsu_acc_addr       (lsu_bmu_addr[31:7]),
  .mpu_ifu_hit        (mpu_ifu_hit[1]    ),
  .mpu_lsu_hit        (mpu_lsu_hit[1]    )
);











nm_mpu_comp_hit  x_nm_mpu_comp_hit_2 (
  .area_en            (regs_comp_area_en2),
  .area_size          (regs_comp_size2   ),
  .base_addr          (regs_comp_base2   ),
  .ifu_acc_addr       (ifu_bmu_addr[31:7]),
  .lsu_acc_addr       (lsu_bmu_addr[31:7]),
  .mpu_ifu_hit        (mpu_ifu_hit[2]    ),
  .mpu_lsu_hit        (mpu_lsu_hit[2]    )
);











nm_mpu_comp_hit  x_nm_mpu_comp_hit_3 (
  .area_en            (regs_comp_area_en3),
  .area_size          (regs_comp_size3   ),
  .base_addr          (regs_comp_base3   ),
  .ifu_acc_addr       (ifu_bmu_addr[31:7]),
  .lsu_acc_addr       (lsu_bmu_addr[31:7]),
  .mpu_ifu_hit        (mpu_ifu_hit[3]    ),
  .mpu_lsu_hit        (mpu_lsu_hit[3]    )
);



















































nm_mpu_regs  x_nm_mpu_regs (
  .cp0_mpu_soft_reset (cp0_mpu_soft_reset),
  .cp0_mpu_updt_capr  (cp0_mpu_updt_capr ),
  .cp0_mpu_updt_data  (cp0_mpu_updt_data ),
  .cp0_mpu_updt_pacr  (cp0_mpu_updt_pacr ),
  .cp0_mpu_updt_rid   (cp0_mpu_updt_rid  ),
  .cpuclk             (cpuclk            ),
  .cpurst_b           (cpurst_b          ),
  .regs_comp_ap0      (regs_comp_ap0     ),
  .regs_comp_ap1      (regs_comp_ap1     ),
  .regs_comp_ap2      (regs_comp_ap2     ),
  .regs_comp_ap3      (regs_comp_ap3     ),
  .regs_comp_area_en0 (regs_comp_area_en0),
  .regs_comp_area_en1 (regs_comp_area_en1),
  .regs_comp_area_en2 (regs_comp_area_en2),
  .regs_comp_area_en3 (regs_comp_area_en3),
  .regs_comp_base0    (regs_comp_base0   ),
  .regs_comp_base1    (regs_comp_base1   ),
  .regs_comp_base2    (regs_comp_base2   ),
  .regs_comp_base3    (regs_comp_base3   ),
  .regs_comp_excut0   (regs_comp_excut0  ),
  .regs_comp_excut1   (regs_comp_excut1  ),
  .regs_comp_excut2   (regs_comp_excut2  ),
  .regs_comp_excut3   (regs_comp_excut3  ),
  .regs_comp_rid      (regs_comp_rid     ),
  .regs_comp_scu0     (regs_comp_scu0    ),
  .regs_comp_scu1     (regs_comp_scu1    ),
  .regs_comp_scu2     (regs_comp_scu2    ),
  .regs_comp_scu3     (regs_comp_scu3    ),
  .regs_comp_size0    (regs_comp_size0   ),
  .regs_comp_size1    (regs_comp_size1   ),
  .regs_comp_size2    (regs_comp_size2   ),
  .regs_comp_size3    (regs_comp_size3   )
);



endmodule
























module nm_pwrm_top_dummy(
  pwrm_cpu_avrg_power_inst_issue,
  pwrm_cpu_bus_peak_power_limit_en,
  pwrm_cpu_inst_peak_power_limit_en,
  pwrm_cpu_peak_power_limit_en
);


output       pwrm_cpu_avrg_power_inst_issue;   
output       pwrm_cpu_bus_peak_power_limit_en; 
output       pwrm_cpu_inst_peak_power_limit_en; 
output       pwrm_cpu_peak_power_limit_en;     




wire         pwrm_cpu_avrg_power_inst_issue;   
wire         pwrm_cpu_bus_peak_power_limit_en; 
wire         pwrm_cpu_inst_peak_power_limit_en; 
wire         pwrm_cpu_peak_power_limit_en;     


assign pwrm_cpu_avrg_power_inst_issue = 1'b1;
assign pwrm_cpu_peak_power_limit_en   = 1'b0;

assign pwrm_cpu_bus_peak_power_limit_en = 1'b0;
assign pwrm_cpu_inst_peak_power_limit_en = 1'b0;


endmodule

























module nm_rst_top(
  cpurst_b,
  hadrst_b,
  pad_cpu_rst_b,
  pad_had_jtg_trst_b,
  pad_had_rst_b,
  pad_yy_test_mode,
  trst_b
);


input        pad_cpu_rst_b;     
input        pad_had_jtg_trst_b; 
input        pad_had_rst_b;     
input        pad_yy_test_mode;  
output       cpurst_b;          
output       hadrst_b;          
output       trst_b;            




wire         cpurst_b;          
wire         hadrst_b;          
wire         pad_cpu_rst_b;     
wire         pad_had_jtg_trst_b; 
wire         pad_had_rst_b;     
wire         pad_yy_test_mode;  
wire         trst_b;            



assign cpurst_b = pad_yy_test_mode ? pad_had_jtg_trst_b : pad_cpu_rst_b;



assign hadrst_b = pad_yy_test_mode ? pad_had_jtg_trst_b : pad_had_rst_b;

assign trst_b = pad_had_jtg_trst_b;


endmodule
























module nm_sahbl_top(
  ahblif_idle,
  biu_bmu_dbus_acc_err,
  biu_bmu_dbus_data,
  biu_bmu_dbus_data_vld,
  biu_bmu_dbus_grnt,
  biu_bmu_dbus_trans_cmplt,
  biu_bmu_ibus_acc_err,
  biu_bmu_ibus_data,
  biu_bmu_ibus_data_vld,
  biu_bmu_ibus_grnt,
  biu_bmu_ibus_trans_cmplt,
  biu_pad_haddr,
  biu_pad_hburst,
  biu_pad_hprot,
  biu_pad_hsize,
  biu_pad_htrans,
  biu_pad_hwdata,
  biu_pad_hwrite,
  bmu_biu_dbus_acc_deny,
  bmu_biu_dbus_addr,
  bmu_biu_dbus_chk_fail,
  bmu_biu_dbus_prot,
  bmu_biu_dbus_req,
  bmu_biu_dbus_req_without_cmplt,
  bmu_biu_dbus_size,
  bmu_biu_dbus_wdata,
  bmu_biu_dbus_write,
  bmu_biu_ibus_acc_deny,
  bmu_biu_ibus_addr,
  bmu_biu_ibus_hit,
  bmu_biu_ibus_prot,
  bmu_biu_ibus_req,
  bmu_biu_ibus_req_no_hit,
  bmu_biu_ibus_size,
  bmu_biu_ibus_vec_redirect,
  cpurst_b,
  dahblif_other_mask,
  forever_cpuclk,
  iahblif_other_mask,
  pad_biu_hrdata,
  pad_biu_hready,
  pad_biu_hresp,
  pad_cpu_halt_ff2,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_bus_peak_power_limit_en,
  sahblif_iahblif_mask
);


input           bmu_biu_dbus_acc_deny;           
input   [31:0]  bmu_biu_dbus_addr;               
input           bmu_biu_dbus_chk_fail;           
input   [3 :0]  bmu_biu_dbus_prot;               
input           bmu_biu_dbus_req;                
input           bmu_biu_dbus_req_without_cmplt;  
input   [1 :0]  bmu_biu_dbus_size;               
input   [31:0]  bmu_biu_dbus_wdata;              
input           bmu_biu_dbus_write;              
input           bmu_biu_ibus_acc_deny;           
input   [31:0]  bmu_biu_ibus_addr;               
input           bmu_biu_ibus_hit;                
input   [3 :0]  bmu_biu_ibus_prot;               
input           bmu_biu_ibus_req;                
input           bmu_biu_ibus_req_no_hit;         
input   [1 :0]  bmu_biu_ibus_size;               
input           bmu_biu_ibus_vec_redirect;       
input           cpurst_b;                        
input           dahblif_other_mask;              
input           forever_cpuclk;                  
input           iahblif_other_mask;              
input   [31:0]  pad_biu_hrdata;                  
input           pad_biu_hready;                  
input           pad_biu_hresp;                   
input           pad_cpu_halt_ff2;                
input           pad_yy_gate_clk_en_b;            
input           pwrm_cpu_bus_peak_power_limit_en; 
output          ahblif_idle;                     
output          biu_bmu_dbus_acc_err;            
output  [31:0]  biu_bmu_dbus_data;               
output          biu_bmu_dbus_data_vld;           
output          biu_bmu_dbus_grnt;               
output          biu_bmu_dbus_trans_cmplt;        
output          biu_bmu_ibus_acc_err;            
output  [31:0]  biu_bmu_ibus_data;               
output          biu_bmu_ibus_data_vld;           
output          biu_bmu_ibus_grnt;               
output          biu_bmu_ibus_trans_cmplt;        
output  [31:0]  biu_pad_haddr;                   
output  [2 :0]  biu_pad_hburst;                  
output  [3 :0]  biu_pad_hprot;                   
output  [2 :0]  biu_pad_hsize;                   
output  [1 :0]  biu_pad_htrans;                  
output  [31:0]  biu_pad_hwdata;                  
output          biu_pad_hwrite;                  
output          sahblif_iahblif_mask;            




wire            ahbl_clk_en;                     
wire            ahbl_gated_clk;                  
wire            ahblif_busy;                     
wire            ahblif_idle;                     
wire            ahblif_power_mask;               
wire            biu_bmu_dbus_acc_err;            
wire    [31:0]  biu_bmu_dbus_data;               
wire            biu_bmu_dbus_data_vld;           
wire            biu_bmu_dbus_grnt;               
wire            biu_bmu_dbus_trans_cmplt;        
wire            biu_bmu_ibus_acc_err;            
wire    [31:0]  biu_bmu_ibus_data;               
wire            biu_bmu_ibus_data_vld;           
wire            biu_bmu_ibus_grnt;               
wire            biu_bmu_ibus_trans_cmplt;        
wire    [31:0]  biu_pad_haddr;                   
wire    [2 :0]  biu_pad_hburst;                  
wire    [3 :0]  biu_pad_hprot;                   
wire    [2 :0]  biu_pad_hsize;                   
wire    [1 :0]  biu_pad_htrans;                  
wire    [31:0]  biu_pad_hwdata;                  
wire            biu_pad_hwrite;                  
wire            bmu_biu_dbus_acc_deny;           
wire    [31:0]  bmu_biu_dbus_addr;               
wire            bmu_biu_dbus_chk_fail;           
wire    [3 :0]  bmu_biu_dbus_prot;               
wire            bmu_biu_dbus_req;                
wire            bmu_biu_dbus_req_without_cmplt;  
wire    [1 :0]  bmu_biu_dbus_size;               
wire    [31:0]  bmu_biu_dbus_wdata;              
wire            bmu_biu_dbus_write;              
wire            bmu_biu_ibus_acc_deny;           
wire    [31:0]  bmu_biu_ibus_addr;               
wire            bmu_biu_ibus_hit;                
wire    [3 :0]  bmu_biu_ibus_prot;               
wire            bmu_biu_ibus_req;                
wire            bmu_biu_ibus_req_no_hit;         
wire    [1 :0]  bmu_biu_ibus_size;               
wire            bmu_biu_ibus_vec_redirect;       
wire            cpu_acc_err;                     
wire    [31:0]  cpu_addr;                        
wire            cpu_data_vld;                    
wire    [3 :0]  cpu_prot;                        
wire    [31:0]  cpu_rdata;                       
wire            cpu_req;                         
wire            cpu_req_for_grnt;                
wire            cpu_req_for_peak_power;          
wire            cpu_req_grnt;                    
wire            cpu_req_power_masked;            
wire            cpu_sec;                         
wire    [1 :0]  cpu_size;                        
wire            cpu_trans_cmplt;                 
wire            cpu_vec_redirect;                
wire    [31:0]  cpu_wdata;                       
wire            cpu_wdata_sel;                   
wire            cpu_write;                       
wire            cpurst_b;                        
wire            dahblif_other_mask;              
wire            dbus_mask;                       
wire            forever_cpuclk;                  
wire            iahblif_other_mask;              
wire            ibus_not_granted;                
wire    [31:0]  pad_biu_hrdata;                  
wire            pad_biu_hready;                  
wire            pad_biu_hresp;                   
wire            pad_cpu_halt_ff2;                
wire            pad_yy_gate_clk_en_b;            
wire            pwrm_cpu_bus_peak_power_limit_en; 
wire            sahblif_iahblif_mask;            






gated_clk_cell  x_gated_ahbl_cpuclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ahbl_gated_clk      ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (dbus_mask           ),
  .module_en            (ahbl_clk_en         ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);


















nm_ahbl_req_arb  x_nm_ahbl_req_arb (
  .ahbl_bmu_dbus_acc_err                   (biu_bmu_dbus_acc_err                   ),
  .ahbl_bmu_dbus_data                      (biu_bmu_dbus_data                      ),
  .ahbl_bmu_dbus_data_vld                  (biu_bmu_dbus_data_vld                  ),
  .ahbl_bmu_dbus_grnt                      (biu_bmu_dbus_grnt                      ),
  .ahbl_bmu_dbus_trans_cmplt               (biu_bmu_dbus_trans_cmplt               ),
  .ahbl_bmu_ibus_acc_err                   (biu_bmu_ibus_acc_err                   ),
  .ahbl_bmu_ibus_data                      (biu_bmu_ibus_data                      ),
  .ahbl_bmu_ibus_data_vld                  (biu_bmu_ibus_data_vld                  ),
  .ahbl_bmu_ibus_grnt                      (biu_bmu_ibus_grnt                      ),
  .ahbl_bmu_ibus_trans_cmplt               (biu_bmu_ibus_trans_cmplt               ),
  .ahbl_gated_clk                          (ahbl_gated_clk                         ),
  .bmu_ahbl_dbus_acc_deny                  (bmu_biu_dbus_acc_deny                  ),
  .bmu_ahbl_dbus_addr                      (bmu_biu_dbus_addr                      ),
  .bmu_ahbl_dbus_chk_fail                  (bmu_biu_dbus_chk_fail                  ),
  .bmu_ahbl_dbus_prot                      (bmu_biu_dbus_prot                      ),
  .bmu_ahbl_dbus_req                       (bmu_biu_dbus_req                       ),
  .bmu_ahbl_dbus_req_without_cmplt         (bmu_biu_dbus_req_without_cmplt         ),
  .bmu_ahbl_dbus_req_without_deny_chk_fail (bmu_biu_dbus_req                       ),
  .bmu_ahbl_dbus_size                      (bmu_biu_dbus_size                      ),
  .bmu_ahbl_dbus_write                     (bmu_biu_dbus_write                     ),
  .bmu_ahbl_ibus_acc_deny                  (bmu_biu_ibus_acc_deny                  ),
  .bmu_ahbl_ibus_addr                      (bmu_biu_ibus_addr                      ),
  .bmu_ahbl_ibus_hit                       (bmu_biu_ibus_hit                       ),
  .bmu_ahbl_ibus_prot                      (bmu_biu_ibus_prot                      ),
  .bmu_ahbl_ibus_req                       (bmu_biu_ibus_req                       ),
  .bmu_ahbl_ibus_req_no_hit                (bmu_biu_ibus_req_no_hit                ),
  .bmu_ahbl_ibus_size                      (bmu_biu_ibus_size                      ),
  .bmu_ahbl_ibus_vec_redirect              (bmu_biu_ibus_vec_redirect              ),
  .bmu_ahbl_ibus_write                     (1'b0                                   ),
  .bmu_ahbl_wdata                          (bmu_biu_dbus_wdata                     ),
  .cpu_acc_err                             (cpu_acc_err                            ),
  .cpu_addr                                (cpu_addr                               ),
  .cpu_data_vld                            (cpu_data_vld                           ),
  .cpu_prot                                (cpu_prot                               ),
  .cpu_rdata                               (cpu_rdata                              ),
  .cpu_req                                 (cpu_req                                ),
  .cpu_req_for_grnt                        (cpu_req_for_grnt                       ),
  .cpu_req_for_peak_power                  (cpu_req_for_peak_power                 ),
  .cpu_req_grnt                            (cpu_req_grnt                           ),
  .cpu_sec                                 (cpu_sec                                ),
  .cpu_size                                (cpu_size                               ),
  .cpu_trans_cmplt                         (cpu_trans_cmplt                        ),
  .cpu_vec_redirect                        (cpu_vec_redirect                       ),
  .cpu_wdata                               (cpu_wdata                              ),
  .cpu_write                               (cpu_write                              ),
  .cpurst_b                                (cpurst_b                               ),
  .ibus_not_granted                        (ibus_not_granted                       )
);

assign dbus_mask = ibus_not_granted;















































































































































































































































































nm_ahbl_if  x_nm_ahbl_if (
  .ahbLif_ahbl_haddr    (biu_pad_haddr       ),
  .ahbLif_ahbl_hburst   (biu_pad_hburst      ),
  .ahbLif_ahbl_hprot    (biu_pad_hprot       ),
  .ahbLif_ahbl_hsize    (biu_pad_hsize       ),
  .ahbLif_ahbl_htrans   (biu_pad_htrans      ),
  .ahbLif_ahbl_hwdata   (biu_pad_hwdata      ),
  .ahbLif_ahbl_hwrite   (biu_pad_hwrite      ),
  .ahbl_ahbLif_hrdata   (pad_biu_hrdata      ),
  .ahbl_ahbLif_hready   (pad_biu_hready      ),
  .ahbl_ahbLif_hresp    (pad_biu_hresp       ),
  .ahbl_clk_en          (ahbl_clk_en         ),
  .ahbl_gated_clk       (ahbl_gated_clk      ),
  .ahblif_busy          (ahblif_busy         ),
  .ahblif_idle          (ahblif_idle         ),
  .ahblif_power_mask    (ahblif_power_mask   ),
  .cpu_acc_err          (cpu_acc_err         ),
  .cpu_addr             (cpu_addr            ),
  .cpu_data_vld         (cpu_data_vld        ),
  .cpu_prot             (cpu_prot            ),
  .cpu_rdata            (cpu_rdata           ),
  .cpu_req              (cpu_req             ),
  .cpu_req_grnt         (cpu_req_grnt        ),
  .cpu_req_power_masked (cpu_req_power_masked),
  .cpu_sec              (cpu_sec             ),
  .cpu_size             (cpu_size            ),
  .cpu_trans_cmplt      (cpu_trans_cmplt     ),
  .cpu_vec_redirect     (cpu_vec_redirect    ),
  .cpu_wdata_sel        (cpu_wdata_sel       ),
  .cpu_wr_data          (cpu_wdata           ),
  .cpu_write            (cpu_write           ),
  .cpurst_b             (cpurst_b            ),
  .pad_cpu_halt_ff2     (pad_cpu_halt_ff2    )
);







assign sahblif_iahblif_mask = (ahblif_busy || cpu_req_for_peak_power) && 
                               pwrm_cpu_bus_peak_power_limit_en;
assign ahblif_power_mask  = iahblif_other_mask || dahblif_other_mask;
assign cpu_req_power_masked = cpu_req && !ahblif_power_mask;
































































endmodule

























module nm_sys_io(
  cp0_sysio_ipend_b,
  cp0_sysio_lpmd_b,
  cpurst_b,
  forever_cpuclk,
  had_yy_xx_dbg,
  idly_counter_eq_zero,
  intc_cpu_intraw_b,
  iu_sysyio_soft_rst,
  iu_yy_xx_dbgon,
  pad_sysio_bigend_b,
  pad_sysio_dbgrq_b,
  pad_sysio_endian_v2,
  pad_yy_gate_clk_en_b,
  sysio_cp0_bigend,
  sysio_cp0_clkratio,
  sysio_cp0_endian_v2,
  sysio_cp0_sys_view_lpmd_b,
  sysio_had_sdb_req_b,
  sysio_pad_idlyn_b,
  sysio_pad_lpmd_b,
  sysio_pad_srst
);


input          cp0_sysio_ipend_b;        
input   [1:0]  cp0_sysio_lpmd_b;         
input          cpurst_b;                 
input          forever_cpuclk;           
input          had_yy_xx_dbg;            
input          idly_counter_eq_zero;     
input          intc_cpu_intraw_b;        
input          iu_sysyio_soft_rst;       
input          iu_yy_xx_dbgon;           
input          pad_sysio_bigend_b;       
input          pad_sysio_dbgrq_b;        
input          pad_sysio_endian_v2;      
input          pad_yy_gate_clk_en_b;     
output         sysio_cp0_bigend;         
output  [2:0]  sysio_cp0_clkratio;       
output         sysio_cp0_endian_v2;      
output  [1:0]  sysio_cp0_sys_view_lpmd_b; 
output         sysio_had_sdb_req_b;      
output         sysio_pad_idlyn_b;        
output  [1:0]  sysio_pad_lpmd_b;         
output         sysio_pad_srst;           


reg            sdb_req_b_r;              
reg            sysio_pad_dbg_b;          
reg            sysio_pad_idlyn_b;        
reg            sysio_pad_ipend_b;        
reg     [1:0]  sysio_pad_lpmd_b;         
reg            sysio_pad_wakeup_b;       


wire           clk_en;                   
wire           cp0_sysio_ipend_b;        
wire    [1:0]  cp0_sysio_lpmd_b;         
wire           cpu_wake_up_b;            
wire           cpurst_b;                 
wire           forever_cpuclk;           
wire           had_yy_xx_dbg;            
wire           idly_counter_eq_zero;     
wire           intc_cpu_intraw_b;        
wire           iu_sysyio_soft_rst;       
wire           iu_yy_xx_dbgon;           
wire           pad_sysio_bigend_b;       
wire           pad_sysio_dbgrq_b;        
wire           pad_sysio_endian_v2;      
wire           pad_yy_gate_clk_en_b;     
wire           sysio_cp0_bigend;         
wire    [2:0]  sysio_cp0_clkratio;       
wire           sysio_cp0_endian_v2;      
wire    [1:0]  sysio_cp0_sys_view_lpmd_b; 
wire           sysio_ficlk_en;           
wire           sysio_fioclk;             
wire           sysio_fioclk_en;          
wire           sysio_had_sdb_req_b;      
wire           sysio_lpmd_gated_en;      
wire           sysio_pad_srst;           


assign clk_en = 1'b1;




























assign sysio_lpmd_gated_en = ((sysio_pad_dbg_b     ^ (~iu_yy_xx_dbgon))   ||
                              (sysio_pad_lpmd_b[1] ^ cp0_sysio_lpmd_b[1]) ||
                              (sysio_pad_lpmd_b[0] ^ cp0_sysio_lpmd_b[0]) ||
                              (sysio_pad_ipend_b   ^ cp0_sysio_ipend_b)   ||
                              (sysio_pad_wakeup_b  ^ cpu_wake_up_b))
                            && clk_en;

assign sysio_ficlk_en = (sdb_req_b_r ^ pad_sysio_dbgrq_b) & clk_en;   

assign sysio_fioclk_en = sysio_lpmd_gated_en || sysio_ficlk_en;


gated_clk_cell  x_gated_sysio_fioclk_cell (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sysio_fioclk        ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (1'b0                ),
  .module_en            (sysio_fioclk_en     ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









always@(posedge sysio_fioclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    sdb_req_b_r <= 1'b1; 
  end
  else if(clk_en)
  begin
    sdb_req_b_r <= pad_sysio_dbgrq_b; 
  end
end

assign sysio_had_sdb_req_b      = sdb_req_b_r;
        




assign  sysio_cp0_bigend         =!pad_sysio_bigend_b;
assign  sysio_cp0_endian_v2      = pad_sysio_endian_v2;

assign  sysio_cp0_clkratio[2:0]  = 3'b0;












assign cpu_wake_up_b = intc_cpu_intraw_b && !had_yy_xx_dbg;

always @(posedge sysio_fioclk or negedge cpurst_b)
begin
  if(!cpurst_b)
  begin
    sysio_pad_dbg_b       <= 1'b1;
    sysio_pad_lpmd_b[1:0] <= 2'b11;
    sysio_pad_ipend_b     <= 1'b0;
    sysio_pad_wakeup_b    <= 1'b0;
    sysio_pad_idlyn_b     <= 1'b1;
  end
  else if(clk_en) 
  begin
    sysio_pad_dbg_b       <= ~iu_yy_xx_dbgon;
    sysio_pad_lpmd_b[1:0] <= cp0_sysio_lpmd_b[1:0];
    sysio_pad_ipend_b     <= cp0_sysio_ipend_b;
    sysio_pad_wakeup_b    <= cpu_wake_up_b;
    sysio_pad_idlyn_b     <= idly_counter_eq_zero;
  end
end

assign sysio_cp0_sys_view_lpmd_b[1:0] = sysio_pad_lpmd_b[1:0];





assign sysio_pad_srst = iu_sysyio_soft_rst;


endmodule

























module nm_tcipif_behavior_bus(
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_chk_fail,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  coretim_tcipif_cmplt,
  coretim_tcipif_rdata,
  cp0_yy_be_v2,
  cpurst_b,
  forever_cpuclk,
  had_img_tcipif_cmplt,
  had_img_tcipif_rdata,
  iu_yy_xx_dbgon,
  pad_yy_gate_clk_en_b,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_data_vld,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_coretim_sel,
  tcipif_had_img_sel,
  tcipif_vic_sel,
  tcipif_xx_dbus_addr,
  tcipif_xx_dbus_wdata,
  tcipif_xx_dbus_write,
  vic_tcipif_cmplt,
  vic_tcipif_rdata
);


input           bmu_tcipif_dbus_acc_deny;   
input   [31:0]  bmu_tcipif_dbus_addr;       
input           bmu_tcipif_dbus_chk_fail;   
input           bmu_tcipif_dbus_req;        
input           bmu_tcipif_dbus_supv_mode;  
input   [31:0]  bmu_tcipif_dbus_wdata;      
input           bmu_tcipif_dbus_write;      
input           coretim_tcipif_cmplt;       
input   [31:0]  coretim_tcipif_rdata;       
input           cp0_yy_be_v2;               
input           cpurst_b;                   
input           forever_cpuclk;             
input           had_img_tcipif_cmplt;       
input   [31:0]  had_img_tcipif_rdata;       
input           iu_yy_xx_dbgon;             
input           pad_yy_gate_clk_en_b;       
input           vic_tcipif_cmplt;           
input   [31:0]  vic_tcipif_rdata;           
output          tcipif_bmu_dbus_acc_err;    
output  [31:0]  tcipif_bmu_dbus_data;       
output          tcipif_bmu_dbus_data_vld;   
output          tcipif_bmu_dbus_grnt;       
output          tcipif_bmu_dbus_trans_cmplt; 
output          tcipif_coretim_sel;         
output          tcipif_had_img_sel;         
output          tcipif_vic_sel;             
output  [15:0]  tcipif_xx_dbus_addr;        
output  [31:0]  tcipif_xx_dbus_wdata;       
output          tcipif_xx_dbus_write;       


reg             coretim_sel_ff;             
reg             dummy_addr_cmplt;           
reg             had_img_sel_ff;             
reg             tcipif_acc_err;             
reg     [15:0]  tcipif_xx_dbus_addr;        
reg             vic_sel_ff;                 
reg             xx_dbus_write;              
reg             xx_tcip_grant;              


wire            bmu_tcipif_dbus_acc_deny;   
wire    [31:0]  bmu_tcipif_dbus_addr;       
wire            bmu_tcipif_dbus_chk_fail;   
wire            bmu_tcipif_dbus_req;        
wire            bmu_tcipif_dbus_supv_mode;  
wire    [31:0]  bmu_tcipif_dbus_wdata;      
wire            bmu_tcipif_dbus_write;      
wire    [31:0]  bmu_tcipif_had_addr;        
wire            bmu_tcipif_had_req;         
wire            bmu_tcipif_had_supv_mode;   
wire    [31:0]  bmu_tcipif_had_wdata;       
wire            bmu_tcipif_had_write;       
wire            cmmu_req_mask;              
wire            cmmu_sel;                   
wire            cmmu_tcipif_cmplt;          
wire    [31:0]  cmmu_tcipif_rdata;          
wire            coretim_req_mask;           
wire            coretim_tcipif_cmplt;       
wire    [31:0]  coretim_tcipif_rdata;       
wire            cp0_yy_be_v2;               
wire            cpurst_b;                   
wire            cru_req_mask;               
wire            cru_sel;                    
wire            cru_tcipif_cmplt;           
wire    [31:0]  cru_tcipif_rdata;           
wire            ctim_sel;                   
wire            ctrl_cpuclk;                
wire            dbus_err;                   
wire            dbus_req;                   
wire            dbus_req_pre;               
wire            dbus_sel;                   
wire            dummy_addr_sel;             
wire            forever_cpuclk;             
wire            had_err;                    
wire            had_img_req_mask;           
wire            had_img_sel;                
wire            had_img_tcipif_cmplt;       
wire    [31:0]  had_img_tcipif_rdata;       
wire            had_req;                    
wire            had_req_pre;                
wire            had_sel;                    
wire            iu_yy_xx_dbgon;             
wire            pad_yy_gate_clk_en_b;       
wire            pwrm_req_mask;              
wire            pwrm_sel;                   
wire            pwrm_tcipif_cmplt;          
wire    [31:0]  pwrm_tcipif_rdata;          
wire            scram_req_mask;             
wire            scram_sel;                  
wire            scram_tcipif_cmplt;         
wire    [31:0]  scram_tcipif_rdata;         
wire            sel_clk_en;                 
wire            sel_cpuclk;                 
wire            seu_bist_req_mask;          
wire            seu_bist_sel;               
wire            seu_bist_tcipif_cmplt;      
wire    [31:0]  seu_bist_tcipif_rdata;      
wire            seu_req_mask;               
wire            seu_sel;                    
wire            seu_tcipif_cmplt;           
wire    [31:0]  seu_tcipif_rdata;           
wire            tcip_err;                   
wire            tcip_req;                   
wire    [31:0]  tcip_req_addr;              
wire            tcip_req_mask;              
wire            tcip_req_pre;               
wire            tcipif_bmu_dbus_acc_err;    
wire    [31:0]  tcipif_bmu_dbus_data;       
wire            tcipif_bmu_dbus_data_vld;   
wire            tcipif_bmu_dbus_grnt;       
wire            tcipif_bmu_dbus_trans_cmplt; 
wire            tcipif_coretim_sel;         
wire            tcipif_data_vld;            
wire            tcipif_dbus_req;            
wire    [31:0]  tcipif_dbus_wdata;          
wire            tcipif_had_img_sel;         
wire            tcipif_had_req;             
wire    [31:0]  tcipif_rd_data;             
wire    [31:0]  tcipif_rdata;               
wire            tcipif_req_write;           
wire            tcipif_trans_cmplt;         
wire            tcipif_vic_sel;             
wire    [31:0]  tcipif_wdata;               
wire    [31:0]  tcipif_xx_dbus_wdata;       
wire            tcipif_xx_dbus_write;       
wire            vic_req_mask;               
wire            vic_sel;                    
wire            vic_tcipif_cmplt;           
wire    [31:0]  vic_tcipif_rdata;           
wire            xx_tcipif_cmplt;            








parameter CORETIM_IN = 24'hE000E0;
parameter CORETIM_EX = 28'hE000E00;



parameter VIC_IN     = 20'hE000E;
parameter VIC_EX1    = 24'hE000E0;
parameter VIC_EX2    = 24'hE000ED;
parameter VIC_EX3    = 24'hE000EE;
parameter VIC_EX4    = 24'hE000EF;



parameter POWER_IN   = 28'hE000EF9;



parameter SEU_IN     = 28'hE000EFA;



parameter SCRMB_IN1  = 28'hE000EFB;
parameter SCRMB_IN2  = 28'hE000EFC;



parameter CRU_IN     = 20'hE000F;



parameter SEU_BIST_IN = 20'hE0010;



parameter HAD_IMG_IN = 20'hE0011;



parameter CMMU_IN1     = 24'hE01000;
parameter CMMU_IN2     = 24'hE01001;



assign bmu_tcipif_had_req         = 1'b0;
assign bmu_tcipif_had_addr[31:0]  = 32'b0;
assign bmu_tcipif_had_write       = 1'b0;
assign bmu_tcipif_had_wdata[31:0] = 32'b0;
assign bmu_tcipif_had_supv_mode   = 1'b0;






assign tcipif_dbus_req = bmu_tcipif_dbus_req && !tcip_req_mask
                         && !bmu_tcipif_had_req;
assign tcipif_had_req  = bmu_tcipif_had_req  && !tcip_req_mask;


assign dbus_sel        = tcipif_dbus_req;
assign had_sel         = tcipif_had_req;


assign dbus_req_pre    = tcipif_dbus_req
                     && !bmu_tcipif_dbus_acc_deny
                     && !bmu_tcipif_dbus_chk_fail;
assign had_req_pre     = tcipif_had_req;
assign tcip_req_pre    = dbus_req_pre || had_req_pre;


assign dbus_req = dbus_req_pre && !dbus_err;
assign had_req  = had_req_pre  && !had_err;
assign tcip_req = dbus_req || had_req;


assign dbus_err = !bmu_tcipif_dbus_supv_mode && !iu_yy_xx_dbgon;
assign had_err  = !bmu_tcipif_had_supv_mode;
assign tcip_err = dbus_sel && dbus_err
               || had_sel  && had_err;

assign tcip_req_addr[31:0] = {32{dbus_sel}} & bmu_tcipif_dbus_addr[31:0]
                           | {32{had_sel}}  & bmu_tcipif_had_addr[31:0];

assign tcipif_req_write    = dbus_sel && bmu_tcipif_dbus_write
                          || had_sel  && bmu_tcipif_had_write;




assign ctim_sel  =  (tcip_req_addr[31:8] == CORETIM_IN)
                && !(tcip_req_addr[31:4] == CORETIM_EX);

assign vic_sel   =  (tcip_req_addr[31:12] == VIC_IN) 
                && !(tcip_req_addr[31:8]  == VIC_EX1) 
                && !(tcip_req_addr[31:8]  == VIC_EX2) 
                && !(tcip_req_addr[31:8]  == VIC_EX3) 
                && !(tcip_req_addr[31:8]  == VIC_EX4);

assign pwrm_sel  = 1'b0;

assign seu_sel   = 1'b0;

assign scram_sel = 1'b0;

assign cru_sel   = 1'b0;

assign cmmu_sel  = 1'b0;


assign seu_bist_sel   = 1'b0;

assign had_img_sel    = (tcip_req_addr[31:12] == HAD_IMG_IN);


assign dummy_addr_sel = !(ctim_sel     || vic_sel     || pwrm_sel 
                       || seu_sel      || scram_sel   || cru_sel
                       || seu_bist_sel || had_img_sel || cmmu_sel);

assign sel_clk_en = xx_tcipif_cmplt || tcipif_acc_err || dummy_addr_cmplt;

gated_clk_cell  x_tcipif_dbus_sel_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sel_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (tcip_req_pre        ),
  .module_en            (sel_clk_en          ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);









always @(posedge sel_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    tcipif_acc_err <= 1'b0;
  else if(tcip_req_pre)
    tcipif_acc_err <= tcip_err;
  else if(tcipif_acc_err)
    tcipif_acc_err <= 1'b0;
end

always @(posedge sel_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    coretim_sel_ff  <= 1'b0;
  else if(tcip_req)
    coretim_sel_ff  <= ctim_sel;
  else if(coretim_tcipif_cmplt)
    coretim_sel_ff  <= 1'b0;
end
assign tcipif_coretim_sel = coretim_sel_ff;
assign coretim_req_mask   = coretim_sel_ff && !coretim_tcipif_cmplt;

always @(posedge sel_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    vic_sel_ff <= 1'b0;
  else if(tcip_req)
    vic_sel_ff <= vic_sel;
  else if(vic_tcipif_cmplt)
    vic_sel_ff <= 1'b0;
end
assign tcipif_vic_sel = vic_sel_ff;
assign vic_req_mask   = vic_sel_ff && !vic_tcipif_cmplt;

assign pwrm_req_mask           = 1'b0;
assign pwrm_tcipif_cmplt       = 1'b0;
assign pwrm_tcipif_rdata[31:0] = 32'b0;

assign seu_req_mask           = 1'b0;
assign seu_tcipif_cmplt       = 1'b0;
assign seu_tcipif_rdata[31:0] = 32'b0;

assign scram_req_mask           = 1'b0;
assign scram_tcipif_cmplt       = 1'b0;
assign scram_tcipif_rdata[31:0] = 32'b0;

assign cru_req_mask           = 1'b0;
assign cru_tcipif_cmplt       = 1'b0;
assign cru_tcipif_rdata[31:0] = 32'b0;

assign cmmu_req_mask           = 1'b0;
assign cmmu_tcipif_cmplt       = 1'b0;
assign cmmu_tcipif_rdata[31:0] = 32'b0;

assign seu_bist_req_mask           = 1'b0;
assign seu_bist_tcipif_cmplt       = 1'b0;
assign seu_bist_tcipif_rdata[31:0] = 32'b0;

always @(posedge sel_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    had_img_sel_ff   <= 1'b0;
  else if(tcip_req)
    had_img_sel_ff   <= had_img_sel;
  else if(had_img_tcipif_cmplt)
    had_img_sel_ff   <= 1'b0;
end
assign tcipif_had_img_sel = had_img_sel_ff;
assign had_img_req_mask   = had_img_sel_ff && !had_img_tcipif_cmplt;

always @(posedge sel_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    dummy_addr_cmplt <= 1'b0;
  else if(tcip_req)
    dummy_addr_cmplt <= dummy_addr_sel;
  else if(dummy_addr_cmplt)
    dummy_addr_cmplt <= 1'b0;
end

assign tcip_req_mask  = (coretim_req_mask  || vic_req_mask   || pwrm_req_mask 
                      || seu_req_mask      || scram_req_mask || cru_req_mask   
                      || seu_bist_req_mask || had_img_req_mask || cmmu_req_mask);







gated_clk_cell  x_tcipif_dbus_ctrl_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (ctrl_cpuclk         ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (tcip_req_pre        ),
  .module_en            (1'b0                ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);










always @(posedge ctrl_cpuclk)
begin
  if(!cpurst_b)
    xx_tcip_grant              <= 1'b0;
  else if(tcip_req_pre)
    xx_tcip_grant              <= had_req_pre;
end


always @(posedge ctrl_cpuclk)
begin
  if(tcip_req)
  begin
    tcipif_xx_dbus_addr[15:0]  <= tcip_req_addr[15:0];
    xx_dbus_write              <= tcipif_req_write;
  end
end
assign tcipif_xx_dbus_write = xx_dbus_write;



assign tcipif_wdata[31:0] = xx_tcip_grant ? bmu_tcipif_had_wdata[31:0]
                                          : bmu_tcipif_dbus_wdata[31:0];


assign tcipif_dbus_wdata[31:0]    = tcipif_wdata[31:0];

assign tcipif_xx_dbus_wdata[31:0] = cp0_yy_be_v2 ? 
      {tcipif_dbus_wdata[7:0],  tcipif_dbus_wdata[15:8],
       tcipif_dbus_wdata[23:16],tcipif_dbus_wdata[31:24]} :
       tcipif_dbus_wdata[31:0];









assign tcipif_bmu_dbus_grnt = tcipif_dbus_req ;


assign xx_tcipif_cmplt = coretim_tcipif_cmplt 
                      || vic_tcipif_cmplt     
                      || pwrm_tcipif_cmplt    
                      || seu_tcipif_cmplt     
                      || scram_tcipif_cmplt   
                      || cru_tcipif_cmplt     
                      || seu_bist_tcipif_cmplt
                      || had_img_tcipif_cmplt
                      || cmmu_tcipif_cmplt;
assign tcipif_trans_cmplt =  xx_tcipif_cmplt 
                          || dummy_addr_cmplt
                          || tcipif_acc_err;
assign tcipif_bmu_dbus_trans_cmplt = !xx_tcip_grant && tcipif_trans_cmplt;


assign tcipif_data_vld    = (xx_tcipif_cmplt || dummy_addr_cmplt)
                         && !xx_dbus_write;
assign tcipif_bmu_dbus_data_vld    = !xx_tcip_grant && tcipif_data_vld;


assign tcipif_bmu_dbus_acc_err = !xx_tcip_grant && tcipif_acc_err;


assign tcipif_rd_data[31:0]   = {32{coretim_tcipif_cmplt}}  & coretim_tcipif_rdata[31:0] 
                                   | {32{vic_tcipif_cmplt}}      & vic_tcipif_rdata[31:0]     
                                   | {32{pwrm_tcipif_cmplt}}     & pwrm_tcipif_rdata[31:0]    
                                   | {32{seu_tcipif_cmplt}}      & seu_tcipif_rdata[31:0]     
                                   | {32{scram_tcipif_cmplt}}    & scram_tcipif_rdata[31:0]   
                                   | {32{cru_tcipif_cmplt}}      & cru_tcipif_rdata[31:0]     
                                   | {32{seu_bist_tcipif_cmplt}} & seu_bist_tcipif_rdata[31:0]
                                   | {32{had_img_tcipif_cmplt}}  & had_img_tcipif_rdata[31:0]
                                   | {32{cmmu_tcipif_cmplt}}  & cmmu_tcipif_rdata[31:0];
assign tcipif_rdata[31:0] = cp0_yy_be_v2 ? 
      {tcipif_rd_data[7:0],  tcipif_rd_data[15:8],
       tcipif_rd_data[23:16],tcipif_rd_data[31:24]} :
       tcipif_rd_data[31:0];
assign tcipif_bmu_dbus_data[31:0] = tcipif_rdata[31:0];






endmodule
























module nm_tcipif_dummy_bus(
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_write,
  cpurst_b,
  forever_cpuclk,
  pad_yy_gate_clk_en_b,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_data_vld,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt
);


input           bmu_tcipif_ibus_acc_deny;   
input   [31:0]  bmu_tcipif_ibus_addr;       
input           bmu_tcipif_ibus_req;        
input           bmu_tcipif_ibus_write;      
input           cpurst_b;                   
input           forever_cpuclk;             
input           pad_yy_gate_clk_en_b;       
output          tcipif_bmu_ibus_acc_err;    
output  [31:0]  tcipif_bmu_ibus_data;       
output          tcipif_bmu_ibus_data_vld;   
output          tcipif_bmu_ibus_grnt;       
output          tcipif_bmu_ibus_trans_cmplt; 


reg             bus_next_state;             
reg             bus_state;                  


wire            bmu_tcipif_ibus_acc_deny;   
wire            bmu_tcipif_ibus_req;        
wire            cpurst_b;                   
wire            forever_cpuclk;             
wire            ibus_acc_err;               
wire            ibus_busy;                  
wire            ibus_req;                   
wire            pad_yy_gate_clk_en_b;       
wire            sel_cpuclk;                 
wire            tcipif_bmu_ibus_acc_err;    
wire    [31:0]  tcipif_bmu_ibus_data;       
wire            tcipif_bmu_ibus_data_vld;   
wire            tcipif_bmu_ibus_grnt;       
wire            tcipif_bmu_ibus_trans_cmplt; 










assign tcipif_bmu_ibus_grnt = bmu_tcipif_ibus_req;
assign ibus_req = bmu_tcipif_ibus_req && !bmu_tcipif_ibus_acc_deny;

parameter IDLE  = 1'b0,
          ERROR = 1'b1;


gated_clk_cell  x_tcipif_ibus_sel_clk (
  .clk_in               (forever_cpuclk      ),
  .clk_out              (sel_cpuclk          ),
  .external_en          (1'b0                ),
  .global_en            (1'b1                ),
  .local_en             (bmu_tcipif_ibus_req ),
  .module_en            (ibus_busy           ),
  .pad_yy_gate_clk_en_b (pad_yy_gate_clk_en_b)
);








assign ibus_busy  = (bus_state != IDLE);

always@(posedge sel_cpuclk or negedge cpurst_b)
begin
  if(!cpurst_b)
    bus_state <= IDLE;
  else
    bus_state <= bus_next_state;
end


always @( bus_state
       or ibus_req)
begin
case(bus_state)
  IDLE:
    if(ibus_req)
      bus_next_state = ERROR;
    else
      bus_next_state = IDLE;
  ERROR:
    if(ibus_req)
      bus_next_state = ERROR;
    else
      bus_next_state = IDLE;
  default:
    bus_next_state = IDLE;
endcase

end

assign ibus_acc_err = (bus_state == ERROR);

assign tcipif_bmu_ibus_trans_cmplt = ibus_acc_err;
assign tcipif_bmu_ibus_acc_err     = ibus_acc_err;
assign tcipif_bmu_ibus_data_vld    = 1'b0;
assign tcipif_bmu_ibus_data[31:0]  = 32'b0;

endmodule

























module nm_tcipif_top(
  bmu_tcipif_dbus_acc_deny,
  bmu_tcipif_dbus_addr,
  bmu_tcipif_dbus_chk_fail,
  bmu_tcipif_dbus_req,
  bmu_tcipif_dbus_supv_mode,
  bmu_tcipif_dbus_wdata,
  bmu_tcipif_dbus_write,
  bmu_tcipif_ibus_acc_deny,
  bmu_tcipif_ibus_addr,
  bmu_tcipif_ibus_req,
  bmu_tcipif_ibus_write,
  cp0_yy_be_v2,
  cpu_intc_ack_vec,
  cpu_intc_int_ack,
  cpu_intc_int_exit,
  cpu_intc_int_vec,
  cpurst_b,
  ctim_pad_int_vld,
  forever_cpuclk,
  forever_cpuclk_nogated,
  had_tcipif_cmplt,
  had_tcipif_rdata,
  intc_cpu_int_b,
  intc_cpu_intraw_b,
  intc_cpu_vec_b,
  iu_yy_xx_dbgon,
  pad_ctim_calib,
  pad_ctim_refclk,
  pad_vic_int_cfg,
  pad_vic_int_vld,
  pad_yy_gate_clk_en_b,
  pwrm_cpu_avrg_power_inst_issue,
  pwrm_cpu_bus_peak_power_limit_en,
  pwrm_cpu_inst_peak_power_limit_en,
  pwrm_cpu_peak_power_limit_en,
  tcipif_bmu_dbus_acc_err,
  tcipif_bmu_dbus_data,
  tcipif_bmu_dbus_data_vld,
  tcipif_bmu_dbus_grnt,
  tcipif_bmu_dbus_trans_cmplt,
  tcipif_bmu_ibus_acc_err,
  tcipif_bmu_ibus_data,
  tcipif_bmu_ibus_data_vld,
  tcipif_bmu_ibus_grnt,
  tcipif_bmu_ibus_trans_cmplt,
  tcipif_had_addr,
  tcipif_had_sel,
  tcipif_had_wdata,
  tcipif_had_write
);


input           bmu_tcipif_dbus_acc_deny;         
input   [31:0]  bmu_tcipif_dbus_addr;             
input           bmu_tcipif_dbus_chk_fail;         
input           bmu_tcipif_dbus_req;              
input           bmu_tcipif_dbus_supv_mode;        
input   [31:0]  bmu_tcipif_dbus_wdata;            
input           bmu_tcipif_dbus_write;            
input           bmu_tcipif_ibus_acc_deny;         
input   [31:0]  bmu_tcipif_ibus_addr;             
input           bmu_tcipif_ibus_req;              
input           bmu_tcipif_ibus_write;            
input           cp0_yy_be_v2;                     
input   [7 :0]  cpu_intc_ack_vec;                 
input           cpu_intc_int_ack;                 
input           cpu_intc_int_exit;                
input   [7 :0]  cpu_intc_int_vec;                 
input           cpurst_b;                         
input           forever_cpuclk;                   
input           forever_cpuclk_nogated;           
input           had_tcipif_cmplt;                 
input   [31:0]  had_tcipif_rdata;                 
input           iu_yy_xx_dbgon;                   
input   [25:0]  pad_ctim_calib;                   
input           pad_ctim_refclk;                  
input   [31:0]  pad_vic_int_cfg;                  
input   [31:0]  pad_vic_int_vld;                  
input           pad_yy_gate_clk_en_b;             
output          ctim_pad_int_vld;                 
output          intc_cpu_int_b;                   
output          intc_cpu_intraw_b;                
output  [7 :0]  intc_cpu_vec_b;                   
output          pwrm_cpu_avrg_power_inst_issue;   
output          pwrm_cpu_bus_peak_power_limit_en; 
output          pwrm_cpu_inst_peak_power_limit_en; 
output          pwrm_cpu_peak_power_limit_en;     
output          tcipif_bmu_dbus_acc_err;          
output  [31:0]  tcipif_bmu_dbus_data;             
output          tcipif_bmu_dbus_data_vld;         
output          tcipif_bmu_dbus_grnt;             
output          tcipif_bmu_dbus_trans_cmplt;      
output          tcipif_bmu_ibus_acc_err;          
output  [31:0]  tcipif_bmu_ibus_data;             
output          tcipif_bmu_ibus_data_vld;         
output          tcipif_bmu_ibus_grnt;             
output          tcipif_bmu_ibus_trans_cmplt;      
output  [15:0]  tcipif_had_addr;                  
output          tcipif_had_sel;                   
output  [31:0]  tcipif_had_wdata;                 
output          tcipif_had_write;                 




wire            bmu_tcipif_dbus_acc_deny;         
wire    [31:0]  bmu_tcipif_dbus_addr;             
wire            bmu_tcipif_dbus_chk_fail;         
wire            bmu_tcipif_dbus_req;              
wire            bmu_tcipif_dbus_supv_mode;        
wire    [31:0]  bmu_tcipif_dbus_wdata;            
wire            bmu_tcipif_dbus_write;            
wire            bmu_tcipif_ibus_acc_deny;         
wire    [31:0]  bmu_tcipif_ibus_addr;             
wire            bmu_tcipif_ibus_req;              
wire            bmu_tcipif_ibus_write;            
wire            coretim_tcipif_cmplt;             
wire    [31:0]  coretim_tcipif_rdata;             
wire            cp0_yy_be_v2;                     
wire    [7 :0]  cpu_intc_ack_vec;                 
wire            cpu_intc_int_ack;                 
wire            cpu_intc_int_exit;                
wire    [7 :0]  cpu_intc_int_vec;                 
wire            cpurst_b;                         
wire            ctim_pad_int_vld;                 
wire            forever_cpuclk;                   
wire            forever_cpuclk_nogated;           
wire            had_img_tcipif_cmplt;             
wire    [31:0]  had_img_tcipif_rdata;             
wire            had_tcipif_cmplt;                 
wire    [31:0]  had_tcipif_rdata;                 
wire            intc_cpu_int_b;                   
wire            intc_cpu_intraw_b;                
wire    [7 :0]  intc_cpu_vec_b;                   
wire            iu_yy_xx_dbgon;                   
wire    [25:0]  pad_ctim_calib;                   
wire            pad_ctim_refclk;                  
wire    [31:0]  pad_vic_int_cfg;                  
wire    [31:0]  pad_vic_int_vld;                  
wire            pad_yy_gate_clk_en_b;             
wire            pwrm_cpu_avrg_power_inst_issue;   
wire            pwrm_cpu_bus_peak_power_limit_en; 
wire            pwrm_cpu_inst_peak_power_limit_en; 
wire            pwrm_cpu_peak_power_limit_en;     
wire            tcipif_bmu_dbus_acc_err;          
wire    [31:0]  tcipif_bmu_dbus_data;             
wire            tcipif_bmu_dbus_data_vld;         
wire            tcipif_bmu_dbus_grnt;             
wire            tcipif_bmu_dbus_trans_cmplt;      
wire            tcipif_bmu_ibus_acc_err;          
wire    [31:0]  tcipif_bmu_ibus_data;             
wire            tcipif_bmu_ibus_data_vld;         
wire            tcipif_bmu_ibus_grnt;             
wire            tcipif_bmu_ibus_trans_cmplt;      
wire            tcipif_coretim_sel;               
wire    [15:0]  tcipif_had_addr;                  
wire            tcipif_had_img_sel;               
wire            tcipif_had_sel;                   
wire    [31:0]  tcipif_had_wdata;                 
wire            tcipif_had_write;                 
wire            tcipif_vic_sel;                   
wire    [15:0]  tcipif_xx_dbus_addr;              
wire    [31:0]  tcipif_xx_dbus_wdata;             
wire            tcipif_xx_dbus_write;             
wire            vic_tcipif_cmplt;                 
wire    [31:0]  vic_tcipif_rdata;                 






nm_tcipif_behavior_bus  x_nm_tcipif_dbus (
  .bmu_tcipif_dbus_acc_deny    (bmu_tcipif_dbus_acc_deny   ),
  .bmu_tcipif_dbus_addr        (bmu_tcipif_dbus_addr       ),
  .bmu_tcipif_dbus_chk_fail    (bmu_tcipif_dbus_chk_fail   ),
  .bmu_tcipif_dbus_req         (bmu_tcipif_dbus_req        ),
  .bmu_tcipif_dbus_supv_mode   (bmu_tcipif_dbus_supv_mode  ),
  .bmu_tcipif_dbus_wdata       (bmu_tcipif_dbus_wdata      ),
  .bmu_tcipif_dbus_write       (bmu_tcipif_dbus_write      ),
  .coretim_tcipif_cmplt        (coretim_tcipif_cmplt       ),
  .coretim_tcipif_rdata        (coretim_tcipif_rdata       ),
  .cp0_yy_be_v2                (cp0_yy_be_v2               ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .had_img_tcipif_cmplt        (had_img_tcipif_cmplt       ),
  .had_img_tcipif_rdata        (had_img_tcipif_rdata       ),
  .iu_yy_xx_dbgon              (iu_yy_xx_dbgon             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .tcipif_bmu_dbus_acc_err     (tcipif_bmu_dbus_acc_err    ),
  .tcipif_bmu_dbus_data        (tcipif_bmu_dbus_data       ),
  .tcipif_bmu_dbus_data_vld    (tcipif_bmu_dbus_data_vld   ),
  .tcipif_bmu_dbus_grnt        (tcipif_bmu_dbus_grnt       ),
  .tcipif_bmu_dbus_trans_cmplt (tcipif_bmu_dbus_trans_cmplt),
  .tcipif_coretim_sel          (tcipif_coretim_sel         ),
  .tcipif_had_img_sel          (tcipif_had_img_sel         ),
  .tcipif_vic_sel              (tcipif_vic_sel             ),
  .tcipif_xx_dbus_addr         (tcipif_xx_dbus_addr        ),
  .tcipif_xx_dbus_wdata        (tcipif_xx_dbus_wdata       ),
  .tcipif_xx_dbus_write        (tcipif_xx_dbus_write       ),
  .vic_tcipif_cmplt            (vic_tcipif_cmplt           ),
  .vic_tcipif_rdata            (vic_tcipif_rdata           )
);


nm_tcipif_dummy_bus  x_nm_tcipif_ibus (
  .bmu_tcipif_ibus_acc_deny    (bmu_tcipif_ibus_acc_deny   ),
  .bmu_tcipif_ibus_addr        (bmu_tcipif_ibus_addr       ),
  .bmu_tcipif_ibus_req         (bmu_tcipif_ibus_req        ),
  .bmu_tcipif_ibus_write       (bmu_tcipif_ibus_write      ),
  .cpurst_b                    (cpurst_b                   ),
  .forever_cpuclk              (forever_cpuclk             ),
  .pad_yy_gate_clk_en_b        (pad_yy_gate_clk_en_b       ),
  .tcipif_bmu_ibus_acc_err     (tcipif_bmu_ibus_acc_err    ),
  .tcipif_bmu_ibus_data        (tcipif_bmu_ibus_data       ),
  .tcipif_bmu_ibus_data_vld    (tcipif_bmu_ibus_data_vld   ),
  .tcipif_bmu_ibus_grnt        (tcipif_bmu_ibus_grnt       ),
  .tcipif_bmu_ibus_trans_cmplt (tcipif_bmu_ibus_trans_cmplt)
);









nm_intc_top  x_nm_intc_top (
  .cpurst_b               (cpurst_b              ),
  .forever_cpuclk         (forever_cpuclk        ),
  .forever_cpuclk_nogated (forever_cpuclk_nogated),
  .pad_vic_ack_vec        (cpu_intc_ack_vec      ),
  .pad_vic_int_ack        (cpu_intc_int_ack      ),
  .pad_vic_int_cfg        (pad_vic_int_cfg       ),
  .pad_vic_int_exit       (cpu_intc_int_exit     ),
  .pad_vic_int_vec        (cpu_intc_int_vec      ),
  .pad_vic_int_vld        (pad_vic_int_vld       ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .tcipif_vic_addr        (tcipif_xx_dbus_addr   ),
  .tcipif_vic_sel         (tcipif_vic_sel        ),
  .tcipif_vic_wdata       (tcipif_xx_dbus_wdata  ),
  .tcipif_vic_write       (tcipif_xx_dbus_write  ),
  .vic_pad_int_b          (intc_cpu_int_b        ),
  .vic_pad_int_vec_b      (intc_cpu_vec_b        ),
  .vic_pad_intraw_b       (intc_cpu_intraw_b     ),
  .vic_tcipif_cmplt       (vic_tcipif_cmplt      ),
  .vic_tcipif_rdata       (vic_tcipif_rdata      )
);



























































































































nm_pwrm_top_dummy  x_nm_pwrm_top_dummy (
  .pwrm_cpu_avrg_power_inst_issue    (pwrm_cpu_avrg_power_inst_issue   ),
  .pwrm_cpu_bus_peak_power_limit_en  (pwrm_cpu_bus_peak_power_limit_en ),
  .pwrm_cpu_inst_peak_power_limit_en (pwrm_cpu_inst_peak_power_limit_en),
  .pwrm_cpu_peak_power_limit_en      (pwrm_cpu_peak_power_limit_en     )
);






nm_coretim_top  x_nm_coretim_top (
  .core_dbgon             (iu_yy_xx_dbgon        ),
  .coretim_tcipif_cmplt   (coretim_tcipif_cmplt  ),
  .coretim_tcipif_rdata   (coretim_tcipif_rdata  ),
  .cpurst_b               (cpurst_b              ),
  .ctim_pad_int_vld       (ctim_pad_int_vld      ),
  .forever_cpuclk         (forever_cpuclk        ),
  .forever_cpuclk_nogated (forever_cpuclk_nogated),
  .pad_ctim_calib         (pad_ctim_calib        ),
  .pad_ctim_refclk        (pad_ctim_refclk       ),
  .pad_yy_gate_clk_en_b   (pad_yy_gate_clk_en_b  ),
  .tcipif_coretim_addr    (tcipif_xx_dbus_addr   ),
  .tcipif_coretim_sel     (tcipif_coretim_sel    ),
  .tcipif_coretim_wdata   (tcipif_xx_dbus_wdata  ),
  .tcipif_coretim_write   (tcipif_xx_dbus_write  )
);



















assign tcipif_had_sel             = tcipif_had_img_sel;
assign tcipif_had_addr[15:0]      = tcipif_xx_dbus_addr[15:0];
assign tcipif_had_write           = tcipif_xx_dbus_write;
assign tcipif_had_wdata[31:0]     = tcipif_xx_dbus_wdata[31:0];

assign had_img_tcipif_cmplt       = had_tcipif_cmplt;
assign had_img_tcipif_rdata[31:0] = had_tcipif_rdata[31:0];





endmodule


